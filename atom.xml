<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>foolishmax</title>
  <icon>https://www.gravatar.com/avatar/3dd40b488a7a6e8c5c6c1fee3a49eaf9</icon>
  <subtitle>仅作为个人学习记录</subtitle>
  <link href="https://github.com/foolishmax/atom.xml" rel="self"/>
  
  <link href="https://github.com/foolishmax/"/>
  <updated>2022-08-01T03:12:08.000Z</updated>
  <id>https://github.com/foolishmax/</id>
  
  <author>
    <name>foolishmax</name>
    <email>827864735@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker常用命令</title>
    <link href="https://github.com/foolishmax/2022/08/01/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/foolishmax/2022/08/01/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-08-01T02:44:50.000Z</published>
    <updated>2022-08-01T03:12:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><span id="more"></span><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull 从镜像仓库中拉取或者更新指定镜像</span></span><br><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure><h3 id="列出已经下载的镜像"><a href="#列出已经下载的镜像" class="headerlink" title="列出已经下载的镜像"></a>列出已经下载的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出某一个镜像</span></span><br><span class="line">docker images ubuntu</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 501</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">docker rmi centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker prune命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被tag标记或者未被容器使用的镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被容器使用的镜像</span></span><br><span class="line">docker image prune -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有停止运行的容器</span></span><br><span class="line">docker container prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被挂载的卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有网络</span></span><br><span class="line">docker network prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker所有资源</span></span><br><span class="line">docker system prune</span><br></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker push:将本地的镜像上传到镜像仓库，先登录镜像仓库</span></span><br><span class="line">docker push mynode:v1</span><br></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a :显示所有的容器，包括未运行的</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止运行中的容器myrunoob</span></span><br><span class="line">docker stop myrunoob</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已被停止的容器myrunoob</span></span><br><span class="line">docker start myrunoob</span><br></pre></td></tr></table></figure><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器myrunoob</span></span><br><span class="line">docker restart myrunoob</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除容器 db01、db02</span></span><br><span class="line">docker rm -f db01 db02</span><br></pre></td></tr></table></figure><h3 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取容器/镜像的元数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像mysql:5.6的元信息</span></span><br><span class="line">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪查看容器mynginx的日志输出</span></span><br><span class="line">docker logs -f mynginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;镜像操作&quot;&gt;&lt;a href=&quot;#镜像操作&quot; class=&quot;headerlink&quot; title=&quot;镜像操作&quot;&gt;&lt;/a&gt;镜像操作&lt;/h2&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://github.com/foolishmax/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker实践指南</title>
    <link href="https://github.com/foolishmax/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/foolishmax/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-31T02:09:12.000Z</published>
    <updated>2022-08-01T02:48:45.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Docker.app</span><br></pre></td></tr></table></figure><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/echo &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure><p>各个参数解析：</p><ul><li><p>docker：Docker 的二进制执行文件</p></li><li><p>run：与 docker 组合来运行一个容器</p></li><li><p>ubuntu:15.10 指定要运行的景象，docker 先从本地主机查找景象是否存在，如不存在，docker 就会从 <a href="https://hub.docker.com/">Docker hub</a>镜像仓库下载公共镜像</p></li><li><p>/bin/echo ‘hello world’：在启动的容器中执行的命令</p></li></ul><p>注意：</p><ul><li><p>不存在时会出现错误信息： <em>Unable to find image ‘ubuntu:15.10’ locally</em></p></li><li><p>之后便会从镜像仓库下载公共镜像</p></li><li><p>打印 hello world</p></li><li><p>M1-Mac 可能会出现如下警告：<em>WARNING: The requested image’s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested</em></p><ul><li>解决方法：<strong>docker run –platform linux/amd64 ubuntu:15.10 /bin/echo ‘hello world’</strong></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;启动-docker&quot;&gt;&lt;a href=&quot;#启动-docker&quot; class=&quot;headerlink&quot; title=&quot;启动 docker&quot;&gt;&lt;/a&gt;启动 docker&lt;/h2&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://github.com/foolishmax/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>每日积累</title>
    <link href="https://github.com/foolishmax/2022/05/14/%E6%AF%8F%E6%97%A5%E7%A7%AF%E7%B4%AF/"/>
    <id>https://github.com/foolishmax/2022/05/14/%E6%AF%8F%E6%97%A5%E7%A7%AF%E7%B4%AF/</id>
    <published>2022-05-14T06:23:02.000Z</published>
    <updated>2022-07-30T04:14:04.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举个例子：</span></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^13.4.6&quot;</span>, <span class="comment">// 只锁定主版本号 major</span></span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;~13.4.6&quot;</span>, <span class="comment">// 锁定主版本号和次版本号 major + minor</span></span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;13.4.6&quot;</span>,  <span class="comment">// 锁定版本</span></span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;*&quot;</span>,       <span class="comment">// 最新版本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// major: 13, minor: 4, patch: 6</span></span><br><span class="line"></span><br><span class="line">$ npm info jquery <span class="comment">// 查看 jquery 信息</span></span><br><span class="line">$ npm view jquery versions <span class="comment">// 查看 jquery 所有版本</span></span><br><span class="line">$ npm list | grep gulp <span class="comment">// 过滤 gulp</span></span><br><span class="line">$ npm outdated <span class="comment">// 查看过期版本</span></span><br><span class="line">$ npm update <span class="comment">//更新版本</span></span><br><span class="line">$ npm cache clean --force <span class="comment">// 清楚缓存</span></span><br><span class="line">$ npm ls <span class="comment">// 查看项目引用了哪些包</span></span><br><span class="line">$ npm unpublish --force <span class="comment">// 从npm卸载包</span></span><br><span class="line"><span class="comment">// 执行顺序</span></span><br><span class="line">$ npm run script1 &amp; npm run script2 <span class="comment">//并行执行</span></span><br><span class="line">$ npm run script1 &amp;&amp; npm run script2 <span class="comment">// 继发执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cross-env: 运行跨平台设置和使用环境变量的脚本</span></span><br><span class="line"><span class="comment">// cross-env可以设置NODE_ENV环境变量，process.env.NODE_ENV === &#x27;production&#x27;</span></span><br><span class="line">$ npm install --save-dev cross-env</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;scripts&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">$ npm config get registry <span class="comment">// 查看当前源</span></span><br><span class="line">$ npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org //切换镜像源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npx</span></span><br><span class="line"><span class="comment">// --no-install: 让npx强制使用本地模块，不下载远程模块，如果本地不存在，就会报错</span></span><br><span class="line">$ npx --no-install http-server</span><br><span class="line"><span class="comment">// --ignore-existing: 忽略本地的同名模块，强制安装远程模块</span></span><br><span class="line">$ npx --ignore-existing http-server</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS每日一题</title>
    <link href="https://github.com/foolishmax/2022/04/15/JS%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>https://github.com/foolishmax/2022/04/15/JS%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2022-04-15T14:15:48.000Z</published>
    <updated>2022-07-30T04:11:09.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计-LazyMan-类"><a href="#设计-LazyMan-类" class="headerlink" title="设计 LazyMan 类"></a>设计 LazyMan 类</h2><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&quot;Tony&quot;</span>)</span><br><span class="line">  .<span class="title function_">eat</span>(<span class="string">&quot;lunch&quot;</span>)</span><br><span class="line">  .<span class="title function_">eat</span>(<span class="string">&quot;dinner&quot;</span>)</span><br><span class="line">  .<span class="title function_">sleepFirst</span>(<span class="number">5</span>)</span><br><span class="line">  .<span class="title function_">sleep</span>(<span class="number">10</span>)</span><br><span class="line">  .<span class="title function_">eat</span>(<span class="string">&quot;junk food&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// 等待了5秒...</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"><span class="comment">// I am eating dinner</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating junk food</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyManClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi I am <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskList</span> = [];</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> fn = (<span class="function">(<span class="params">f</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am eating <span class="subst">$&#123;f&#125;</span>`</span>);</span><br><span class="line">        that.<span class="title function_">next</span>();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(food);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> fn = (<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`等待了<span class="subst">$&#123;t&#125;</span>秒...`</span>);</span><br><span class="line">          that.<span class="title function_">next</span>();</span><br><span class="line">        &#125;, t * <span class="number">1000</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(time);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleepFirst</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> fn = (<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`等待了<span class="subst">$&#123;t&#125;</span>秒...`</span>);</span><br><span class="line">          that.<span class="title function_">next</span>();</span><br><span class="line">        &#125;, t * <span class="number">1000</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(time);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">unshift</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 负责执行任务队列</span></span><br><span class="line">  <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">shift</span>();</span><br><span class="line">    fn &amp;&amp; <span class="title function_">fn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LazyMan</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyManClass</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按照规则解析字符串"><a href="#按照规则解析字符串" class="headerlink" title="按照规则解析字符串"></a>按照规则解析字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入一串数字字符串，经过解析</span></span><br><span class="line"><span class="comment">// 如果连续数字的话，就取连续的第一个数和最后一个数，中间用 ～ 隔开</span></span><br><span class="line"><span class="comment">// 如果不连续就用 ， 隔开</span></span><br><span class="line"><span class="comment">// 输入 &#x27;1， 2， 3， 5， 7， 8， 10&#x27;，输出&#x27;1~3, 5, 7~8, 10&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> +i);</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> tmp = arr[<span class="number">0</span>];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item + <span class="number">1</span> !== self[index + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tmp !== item) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;tmp&#125;</span>~<span class="subst">$&#123;item&#125;</span>`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">      tmp = self[index + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;1,2,3,5,7,8,9&quot;</span>;</span><br><span class="line"><span class="title function_">getValue</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue2</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> +i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> target = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur - <span class="number">1</span> === self[index - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;pre&#125;</span>~<span class="subst">$&#123;cur&#125;</span>`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;pre&#125;</span>,<span class="subst">$&#123;cur&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 1~2~3~4~5 =&gt; 1~5</span></span><br><span class="line">      <span class="keyword">const</span> reg = <span class="regexp">/(\d&#123;1,&#125;)(~\d&#123;1,&#125;)*(~\d&#123;1,&#125;)/</span>;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="title function_">replace</span>(reg, <span class="string">&quot;$1$3&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;1,2,3,5,7,8,9&quot;</span>;</span><br><span class="line"><span class="title function_">getValue2</span>(str);</span><br></pre></td></tr></table></figure><h2 id="this-全面考察"><a href="#this-全面考察" class="headerlink" title="this 全面考察"></a>this 全面考察</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person1&quot;</span>,</span><br><span class="line">  <span class="attr">show1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">show2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">show3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">show4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&quot;person2&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show1</span>(); <span class="comment">// person1</span></span><br><span class="line">person1.<span class="property">show1</span>.<span class="title function_">call</span>(person2); <span class="comment">// person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show2</span>(); <span class="comment">// window</span></span><br><span class="line">person1.<span class="property">show2</span>.<span class="title function_">call</span>(person2); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show3</span>()(); <span class="comment">// window &#123;&#125;</span></span><br><span class="line">person1.<span class="title function_">show3</span>().<span class="title function_">call</span>(person2); <span class="comment">// person2 &#123;&#125;</span></span><br><span class="line">person1.<span class="property">show3</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// window &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show4</span>()(); <span class="comment">// &#x27;person1&#x27;</span></span><br><span class="line">person1.<span class="title function_">show4</span>().<span class="title function_">call</span>(person2); <span class="comment">// &#x27;person1&#x27;</span></span><br><span class="line">person1.<span class="property">show4</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// &#x27;person2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="大数相加"><a href="#大数相加" class="headerlink" title="大数相加"></a>大数相加</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6453234253452432 + 7326362323251323</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bigNumberSum</span>(<span class="params">str1, str2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr1 = str1.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>();</span><br><span class="line">  <span class="keyword">const</span> arr2 = str2.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = <span class="title class_">Math</span>.<span class="title function_">max</span>(arr1.<span class="property">length</span>, arr2.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> num1 = <span class="title class_">Number</span>(arr1[i]) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> num2 = <span class="title class_">Number</span>(arr2[i]) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = num1 + num2 + flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      sum = sum % <span class="number">10</span>;</span><br><span class="line">      flag = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result.<span class="title function_">push</span>(sum);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(flag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bigNumberSum</span>(<span class="string">&quot;6453234253452432&quot;</span>, <span class="string">&quot;7326362323251323&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="多个异步函数如何同步执行？"><a href="#多个异步函数如何同步执行？" class="headerlink" title="多个异步函数如何同步执行？"></a>多个异步函数如何同步执行？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数之间有关联关系</span></span><br><span class="line"><span class="comment">// 前一个异步函数的输出作为后一个异步函数的输入</span></span><br><span class="line"><span class="comment">// 同步方法的处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipeFunctions</span> = (<span class="params">...fns</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preFn, curFn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title function_">preFn</span>(...args);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">curFn</span>(res);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x</span>) =&gt; x + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x</span>) =&gt; x * <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subtraction</span> = (<span class="params">x</span>) =&gt; x - <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">division</span> = (<span class="params">x</span>) =&gt; x / <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> targetFn = <span class="title function_">pipeFunctions</span>(</span><br><span class="line">  add, <span class="comment">// 10</span></span><br><span class="line">  multiply, <span class="comment">// 50</span></span><br><span class="line">  subtraction, <span class="comment">// 45</span></span><br><span class="line">  division <span class="comment">// 9</span></span><br><span class="line">);</span><br><span class="line"><span class="title function_">targetFn</span>(<span class="number">5</span>); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line"><span class="comment">// 异步方法的处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipeFunctions2</span> = (<span class="params">...fns</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preFn, curFn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (...args) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">preFn</span>(...args);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">curFn</span>(res);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asyncFn</span> = (<span class="params">v</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(v);</span><br><span class="line">    &#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = <span class="keyword">async</span> (<span class="params">x</span>) =&gt; <span class="keyword">await</span> <span class="title function_">asyncFn</span>(x + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = <span class="keyword">async</span> (<span class="params">x</span>) =&gt; <span class="keyword">await</span> <span class="title function_">asyncFn</span>(x * <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subtraction</span> = <span class="keyword">async</span> (<span class="params">x</span>) =&gt; <span class="keyword">await</span> <span class="title function_">asyncFn</span>(x - <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">division</span> = <span class="keyword">async</span> (<span class="params">x</span>) =&gt; <span class="keyword">await</span> <span class="title function_">asyncFn</span>(x / <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> targetFn2 = <span class="title function_">pipeFunctions2</span>(</span><br><span class="line">  add, <span class="comment">// 10</span></span><br><span class="line">  multiply, <span class="comment">// 50</span></span><br><span class="line">  subtraction, <span class="comment">// 45</span></span><br><span class="line">  division <span class="comment">// 9</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">targetFn2</span>(<span class="number">5</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h2 id="找出数组中唯一落单的数（只出现一次的数）"><a href="#找出数组中唯一落单的数（只出现一次的数）" class="headerlink" title="找出数组中唯一落单的数（只出现一次的数）"></a>找出数组中唯一落单的数（只出现一次的数）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, 4, 3, 3, 2, 4, 1] =&gt; 2</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法1:</span></span><br><span class="line"><span class="comment"> *  利用object的key-value特性存储数据，</span></span><br><span class="line"><span class="comment"> *  找出value值为1对应的key值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUnique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[item]) &#123;</span><br><span class="line">      obj[item] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[item]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[key] === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> +key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"><span class="title function_">getUnique</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法2:</span></span><br><span class="line"><span class="comment"> *  如果第一个值第一次出现的位置和最后一次出现的位置相同</span></span><br><span class="line"><span class="comment"> *  那么这个值就只出现了一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUnique2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === arr.<span class="title function_">lastIndexOf</span>(item))[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"><span class="title function_">getUnique2</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法3:数字的异或运算</span></span><br><span class="line"><span class="comment"> *  两个相同的数字进行异或运算得到 0</span></span><br><span class="line"><span class="comment"> *  0 与任何 a 异或运算都将得到 a 本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUnique3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result ^= arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"><span class="title function_">getUnique3</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="a-1-amp-amp-a-2-amp-amp-a-3"><a href="#a-1-amp-amp-a-2-amp-amp-a-3" class="headerlink" title="a==1 &amp;&amp; a==2 &amp;&amp; a==3"></a>a==1 &amp;&amp; a==2 &amp;&amp; a==3</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.with 语句</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">a</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> i++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; (a == <span class="number">2</span>) &amp; (a == <span class="number">3</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.隐式转换</span></span><br><span class="line"><span class="comment">// 核心：对象类型转换为原始类型，处理逻辑：</span></span><br><span class="line"><span class="comment">// 1. 调用[Symbol.toPrimitive]，转换成功则结束，否则执行2</span></span><br><span class="line"><span class="comment">// 2. 调用valueOf，转换成功则结束，否则执行3</span></span><br><span class="line"><span class="comment">// 3. 调用toString，转换成功则结束，否则执行4</span></span><br><span class="line"><span class="comment">// 4. 如果都没有转换成原始类型，则抛出异常</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; (a == <span class="number">2</span>) &amp; (a == <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.数组类型的隐式转换</span></span><br><span class="line"><span class="comment">// 数组类型转换为基本类型时，会调用toString方法</span></span><br><span class="line"><span class="comment">// toString会调用join方法</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.<span class="property">join</span> = a.<span class="property">shift</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; (a == <span class="number">2</span>) &amp; (a == <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Object.defineProperty进行数据劫持</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> i++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; (a == <span class="number">2</span>) &amp; (a == <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.方法劫持-Proxy</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> target.<span class="property">x</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; (a == <span class="number">2</span>) &amp; (a == <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏字符 半形朝鲜文填充符 (U+FFA0)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">if</span>ﾠ = <span class="function">() =&gt;</span> !<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>ﾠ(a == <span class="number">1</span> &amp;&amp; (a == <span class="number">2</span>) &amp; (a == <span class="number">3</span>));</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you kidding me?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并多个对象"><a href="#合并多个对象" class="headerlink" title="合并多个对象"></a>合并多个对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="comment">// 1. Object.assign()</span></span><br><span class="line"><span class="comment">// 同名属性会覆盖</span></span><br><span class="line"><span class="comment">// 第一个参数如果不为对象，需要转换为对象，转换失败会报错</span></span><br><span class="line"><span class="comment">// 非第一个参数，剩余参数不为对象也要转换为对象，转换失败直接忽略</span></span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1, obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 扩展运算符</span></span><br><span class="line"><span class="comment">// 同名属性覆盖</span></span><br><span class="line"><span class="comment">// 如果第一个参数不为对象，直接忽略</span></span><br><span class="line"><span class="keyword">const</span> result2 = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br></pre></td></tr></table></figure><h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象互转</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entries); <span class="comment">//[[&quot;a&quot;,&quot;1&quot;],[&quot;b&quot;,&quot;2&quot;]]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(entries); <span class="comment">//&#123;a: &#x27;1&#x27;, b: &#x27;2&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map -&gt; 对象</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map); <span class="comment">//&#123;&#x27;a&#x27; =&gt; 1, &#x27;b&#x27; =&gt; 2&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map); <span class="comment">//&#123;a: 1, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤对象</span></span><br><span class="line"><span class="keyword">const</span> course = &#123;</span><br><span class="line">  <span class="attr">math</span>: <span class="number">79</span>,</span><br><span class="line">  <span class="attr">english</span>: <span class="number">85</span>,</span><br><span class="line">  <span class="attr">chinese</span>: <span class="number">90</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">entries</span>(course).<span class="title function_">filter</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> value &gt; <span class="number">80</span>);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(result); <span class="comment">// &#123;english: 85, chinese: 90&#125;</span></span><br></pre></td></tr></table></figure><h2 id="去掉空格"><a href="#去掉空格" class="headerlink" title="去掉空格"></a>去掉空格</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;   foo   &quot;</span>;</span><br><span class="line"><span class="comment">// 正则</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/^\s+/g</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 去掉前面空格</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/\s+$/g</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//去掉后面空格</span></span><br><span class="line"><span class="comment">// 去掉前面空格</span></span><br><span class="line">str.<span class="title function_">trimStart</span>();</span><br><span class="line">str.<span class="title function_">trimLeft</span>();</span><br><span class="line"><span class="comment">// 去掉后面空格</span></span><br><span class="line">str.<span class="title function_">trimEnd</span>();</span><br><span class="line">str.<span class="title function_">trimRight</span>();</span><br><span class="line"><span class="comment">// 去掉前后空格</span></span><br><span class="line">str.<span class="title function_">trim</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;设计-LazyMan-类&quot;&gt;&lt;a href=&quot;#设计-LazyMan-类&quot; class=&quot;headerlink&quot; title=&quot;设计 LazyMan 类&quot;&gt;&lt;/a&gt;设计 LazyMan 类&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>面试优质手写题</title>
    <link href="https://github.com/foolishmax/2022/03/31/%E9%9D%A2%E8%AF%95%E4%BC%98%E8%B4%A8%E6%89%8B%E5%86%99%E9%A2%98/"/>
    <id>https://github.com/foolishmax/2022/03/31/%E9%9D%A2%E8%AF%95%E4%BC%98%E8%B4%A8%E6%89%8B%E5%86%99%E9%A2%98/</id>
    <published>2022-03-30T16:36:27.000Z</published>
    <updated>2022-07-30T04:14:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手写部分"><a href="#手写部分" class="headerlink" title="手写部分"></a>手写部分</h1><span id="more"></span><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(arr[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arrp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用filter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用Es6中的Set数据结构(扩展运算符)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.form 方法将set结构转换为数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = arr.flat(Infinity)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = JSON.parse(&quot;[&quot;+JSON.stringify(arr).replace(/\[|\]/g,&quot;&quot;) + &quot;]&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> accu.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(curr) ? <span class="title function_">flatArr</span>(curr) : curr);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatArr</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只考虑对象类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign()</span></span><br><span class="line"><span class="comment">// arr.slice(0)</span></span><br><span class="line"><span class="comment">// arr.concat()</span></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只考虑普通对象属性，不考虑内置对象和函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] =</span><br><span class="line">        <span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span> ? <span class="title function_">deepClone</span>(obj[key]) : obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse(JSON.stringify())</span></span><br><span class="line"><span class="comment">// lodash: _.cloneDeep()</span></span><br></pre></td></tr></table></figure><h2 id="实现一个-compose-组合-函数"><a href="#实现一个-compose-组合-函数" class="headerlink" title="实现一个 compose(组合)函数"></a>实现一个 compose(组合)函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">    <span class="keyword">if</span>(fn.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> fn[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">accu</span>(<span class="title function_">curr</span>(...args)) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">compose</span>(fn1, fn2, fn3, fn4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">res</span>(<span class="number">5</span>)); <span class="comment">// 5+4+3+2+1=15</span></span><br></pre></td></tr></table></figure><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">assign</span> = <span class="keyword">function</span> (<span class="params">target, ...source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target === <span class="literal">null</span> || target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot convert undefined or null to object&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Object</span>(target);</span><br><span class="line"></span><br><span class="line">  source.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">          result[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line"></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索联想，用户在不断输入时，用防抖来节约请求资源</span></span><br><span class="line"><span class="comment">// window触发resize的时候</span></span><br></pre></td></tr></table></figure><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">      previous = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标不断点击触发，可以使其单位时间内只触发以此</span></span><br><span class="line"><span class="comment">// 监听滚动事件</span></span><br><span class="line"><span class="comment">// 防止高频点击提交</span></span><br></pre></td></tr></table></figure><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 需要柯里化的函数fn，也可以支持初始参数的传入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//参数缓存在args里面,合并上次参数和本次参数</span></span><br><span class="line">    args = [...args, ...<span class="variable language_">arguments</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断参数个数，不够继续递归</span></span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &lt; fn.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//参数足够返回函数执行结果</span></span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">curry</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>), <span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>), <span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="如何把字符串中大小写取反"><a href="#如何把字符串中大小写取反" class="headerlink" title="如何把字符串中大小写取反"></a>如何把字符串中大小写取反</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;LiBoShi&quot;</span>;</span><br><span class="line"></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> content.<span class="title function_">toUpperCase</span>() === content</span><br><span class="line">    ? content.<span class="title function_">toLowerCase</span>()</span><br><span class="line">    : content.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf"><a href="#从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf" class="headerlink" title="从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf"></a>从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">T</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="variable language_">this</span>.<span class="property">length</span> - T.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">substr</span>(i, T.<span class="property">length</span>) === T) &#123;</span><br><span class="line">      <span class="keyword">return</span> (index = i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myIndexOf</span> = myIndexOf;</span><br><span class="line"><span class="comment">// 正则方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">T</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(T);</span><br><span class="line">  <span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res === <span class="literal">null</span> ? -<span class="number">1</span> : res.<span class="property">index</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">desc</span>: <span class="keyword">function</span> (<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>来自<span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>去往<span class="subst">$&#123;to&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lbs&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">desc</span>.<span class="title function_">myCall</span>(person, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">content, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">...newFnArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 检测 New</span></span><br><span class="line">    <span class="comment">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">fn</span>(...args, ...newFnArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">myApply</span>(context, [...args, ...newFnArgs]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 通过left.<span class="property">__proto__</span>.<span class="property">__proto__</span>这种方式从下往上的获取原型对象</span><br><span class="line"><span class="number">2.</span> 通过<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)的实例是没有原型链</span><br><span class="line"><span class="number">3.</span> 有原型链的实例的尽头都是<span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!left.<span class="property">__proto__</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(right === <span class="title class_">Object</span> || left.<span class="property">__proto__</span> === right.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">instanceof</span>(left.<span class="property">__proto__</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写-Object-is"><a href="#手写-Object-is" class="headerlink" title="手写 Object.is"></a>手写 Object.is</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">is</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="comment">// x,y都为0，但是1 / +0 = +Infinity,1 / -0 = -Infinity 是不一样的</span></span><br><span class="line">    <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//NaN === NaN = false是不对的，做一个拦截操作</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">method, url, headers, body</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> req = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      req = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">open</span>(method, url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">      req.<span class="title function_">setRequestHeader</span>(key, headers[key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">onreadystatechange</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">readystate</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; req.<span class="property">status</span> &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">send</span>(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行async函数，返回的都是Promise对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test1</span>(), <span class="title function_">test2</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.then 成功的情况对应的就是await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">  p.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> p;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test3</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.catch 异常对应 try...catch</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;异常了&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test4</span>();</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">fn, toThis</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> _this = toThis || <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = fn.<span class="title function_">call</span>(_this, arr[i], i, arr);</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写-promise"><a href="#手写-promise" class="headerlink" title="手写 promise"></a>手写 promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise1</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">PENDING</span>; <span class="comment">//默认状态，进行中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span>; <span class="comment">//成功值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span>; <span class="comment">// 失败原因</span></span><br><span class="line">    <span class="comment">// 解决异步问题</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">FULFILLED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">REJECTED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      onFulfilled = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      onRejected = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">reason</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">REJECTED</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(<span class="params">result, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise1</span>) &#123;</span><br><span class="line">        result.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise1</span>) &#123;</span><br><span class="line">        value.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">length</span> === promises.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aaa = <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;lbs&quot;</span>);</span><br><span class="line">  <span class="comment">//     reject(&#x27;error&#x27;)</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">aaa.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa);</span><br></pre></td></tr></table></figure><h2 id="手写-event-bus"><a href="#手写-event-bus" class="headerlink" title="手写 event bus"></a>手写 event bus</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxListeners</span> = maxListeners || <span class="title class_">Infinity</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">event, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cbs = <span class="variable language_">this</span>.<span class="property">events</span>[event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cbs) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有这个事件函数&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cbs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> cb.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxListeners</span> !== <span class="title class_">Infinity</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxListeners</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当事件超过了最大监听数&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">push</span>(cb);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(event, fn);</span><br><span class="line">      cb.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(event, func);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cb) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== cb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lbs&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lbs&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//寄生式组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = obj.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, obj);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = obj.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object.create()</span></span><br><span class="line"><span class="comment">// 方法创建一个新对象，使用现有的对象来提供新创建对象的__proto__</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">constructor</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Student</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;lbs&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br></pre></td></tr></table></figure><h2 id="createElement-手写"><a href="#createElement-手写" class="headerlink" title="createElement 手写"></a>createElement 手写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolFor = <span class="title class_">Symbol</span>.<span class="property">for</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REACT_ELEMENT_TYPE</span> = <span class="title function_">symbolFor</span>(<span class="string">&quot;react.element&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESERVED_PROPS</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">ref</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__self</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__source</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, config, children</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config !== <span class="literal">null</span>) &#123;</span><br><span class="line">    key = config.<span class="property">key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable constant_">RESERVED_PROPS</span>.<span class="title function_">hasOwnProperty</span>(propName)) &#123;</span><br><span class="line">      props[propName] = config[propName];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="variable language_">arguments</span>.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.<span class="property">children</span> = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="title class_">Array</span>(childrenLength);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="variable language_">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    props.<span class="property">children</span> = childArray;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="attr">$$typeof</span>: <span class="variable constant_">REACT_ELEMENT_TYPE</span>,</span><br><span class="line">    type,</span><br><span class="line">    key,</span><br><span class="line">    props,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字"><a href="#编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字" class="headerlink" title="编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字"></a>编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正向预查 ？= 必须</span><br><span class="line">反向预查 ？！必须不</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z]+$)(?!^[0-9]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line">补充：数字、字母、下划线组成字符串，必须有_</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?=_)\w/</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z0-9]+$)^\w&#123;1,10&#125;$/</span>; 限制<span class="number">1</span>-<span class="number">10</span>位</span><br></pre></td></tr></table></figure><h2 id="获取所有属性为-name，值为-value-的元素集合"><a href="#获取所有属性为-name，值为-value-的元素集合" class="headerlink" title="获取所有属性为 name，值为 value 的元素集合"></a>获取所有属性为 name，值为 value 的元素集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则\b单词边界</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getElements</span>(<span class="params">property, value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">  elements = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br><span class="line">  elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当前元素property对应的值</span></span><br><span class="line">    <span class="keyword">let</span> itemValue = item.<span class="title function_">getAttribute</span>(propertype);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (property === <span class="string">&quot;class&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`\b<span class="subst">$&#123;value&#125;</span>\b`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg.<span class="title function_">test</span>(itemValue)) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (itemValue === value) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;中国hello你好&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/gi</span>;</span><br><span class="line"></span><br><span class="line">str = str</span><br><span class="line">  .<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">` <span class="subst">$&#123;value&#125;</span> `</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">trim</span>(); <span class="comment">// 去除首尾空格</span></span><br></pre></td></tr></table></figure><h2 id="js-实现斐波那契数列的几种方法"><a href="#js-实现斐波那契数列的几种方法" class="headerlink" title="js 实现斐波那契数列的几种方法"></a>js 实现斐波那契数列的几种方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.尾递归(每次调用都在收集结果，避免了线性递归不收集结果只依次展开消耗内存的坏处)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n, res1 = <span class="number">1</span>, res2 = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> res2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, res2, res1 + res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt; n; i++) &#123;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;输入的数字不能小于0&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发加载"><a href="#并发加载" class="headerlink" title="并发加载"></a>并发加载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitLoad</span>(<span class="params">urls, handler, limit</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sequence = [].<span class="title function_">concat</span>(urls);</span><br><span class="line">  <span class="keyword">let</span> promises = [];</span><br><span class="line"></span><br><span class="line">  promises = sequence.<span class="title function_">splice</span>(<span class="number">0</span>, limit).<span class="title function_">map</span>(<span class="function">(<span class="params">url, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sequence.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    p = p.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      promises[res] = <span class="title function_">handler</span>(sequence[i]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(promises);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//             console.log(url.info + &#x27;---OK!!!&#x27;)</span></span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, url.<span class="property">time</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urls = [</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">1</span>, <span class="attr">time</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">2</span>, <span class="attr">time</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">3</span>, <span class="attr">time</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">4</span>, <span class="attr">time</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">5</span>, <span class="attr">time</span>: <span class="number">5000</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title function_">limitLoad</span>(urls, loadImg, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="前端内存处理"><a href="#前端内存处理" class="headerlink" title="前端内存处理"></a>前端内存处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 内存的生命周期</span><br><span class="line">    内存分配：声明变量、函数对象的时候，js会自动分配内存</span><br><span class="line">    内存使用</span><br><span class="line">    内存回收</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> js中的垃圾回收机制</span><br><span class="line">    引用计数：缺点循环引用无法清除</span><br><span class="line">    标记清除</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 常见内存泄漏</span><br><span class="line">    全局变量（记得手动回收）</span><br><span class="line">    未被清除的定时器</span><br><span class="line">    闭包</span><br><span class="line">    dom的引用</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 怎么避免内存泄漏</span><br><span class="line">    减少不必要的全局变量</span><br><span class="line">    使用完数据，及时解除引用</span><br><span class="line"></span><br><span class="line">实现sizeOf，传入object，计算其所占字节大小</span><br><span class="line"><span class="attr">number</span>: <span class="number">8</span> 字节</span><br><span class="line"><span class="attr">string</span>: <span class="number">2</span> 字节</span><br><span class="line">boolean; <span class="number">4</span> 字节</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sizeOfObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = keys[i];</span><br><span class="line">        bytes += <span class="title function_">calculator</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (seen.<span class="title function_">has</span>(obj[key])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            seen.<span class="title function_">add</span>(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes += <span class="title function_">calculator</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculator</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(objType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> obj.<span class="property">length</span> * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj.<span class="title function_">map</span>(calculator).<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> accu + curr</span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">sizeOfObject</span>(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据结构就是在计算机中存储和组织数据的方式。</p><p>算法（Algorithm）解决问题的逻辑或步骤</p><h2 id="栈-封装"><a href="#栈-封装" class="headerlink" title="栈(封装)"></a>栈(封装)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">  <span class="comment">// 1. 将元素压入栈</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 2.从栈中取出元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 3.查看一下栈顶元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 4.判断栈是否为空</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 5.获取栈中元素个数</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6. toString方法</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      res += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span> `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例：将十进制转换成二进制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec2bin</span>(<span class="params">decimalNumber</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">  <span class="keyword">let</span> binary = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (decimalNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    stack.<span class="title function_">push</span>(decimalNumber % <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    decimalNumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(decimalNumber / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    binary += stack.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡括号问题"><a href="#平衡括号问题" class="headerlink" title="平衡括号问题"></a>平衡括号问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">  <span class="keyword">const</span> open = <span class="string">&quot;&#123;[(&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> close = <span class="string">&quot;&#125;])&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> balanced = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (index &lt; str.<span class="property">length</span> &amp;&amp; balanced) &#123;</span><br><span class="line">    <span class="keyword">if</span> (open.<span class="title function_">includes</span>(str[index])) &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(str[index]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> top = stack.<span class="title function_">pop</span>();</span><br><span class="line">      <span class="keyword">if</span> (open.<span class="title function_">indexOf</span>(top) === close.<span class="title function_">indexOf</span>(str[index])) &#123;</span><br><span class="line">        balanced = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        balanced = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (balanced &amp;&amp; stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&quot;&#123;([][])&#125;&quot;</span>);</span><br><span class="line"><span class="title function_">check</span>(<span class="string">&quot;&#123;[(])&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">reverseList</span>(head.<span class="property">next</span>);</span><br><span class="line"></span><br><span class="line">  head.<span class="property">next</span>.<span class="property">nexd</span> = head;</span><br><span class="line">  head.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">elements, value, _start, _end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> end = _end || elements.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> start = _start || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> povitIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (elements[povitIndex] === value) &#123;</span><br><span class="line">    <span class="keyword">return</span> povitIndex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value &lt; elements[povitIndex]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(elements, value, <span class="number">0</span>, povitIndex - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(elements, value, povitIndex + <span class="number">1</span>, end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">elements</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (elements.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pivotIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(elements.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> [pivot] = elements.<span class="title function_">splice</span>(pivotIndex, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> left = [];</span><br><span class="line">  <span class="keyword">let</span> right = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elements[i] &lt; pivot) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(elements[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(elements[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([pivot], <span class="title function_">quickSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> elements = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(elements));</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> elementLength = elements.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementLength - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; elementLength - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (elements[j] &gt; elements[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = elements[j];</span><br><span class="line">        elements[j] = elements[j + <span class="number">1</span>];</span><br><span class="line">        elements[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(elements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> elements = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">bubbleSort</span>(elements);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(elements)</span></span><br></pre></td></tr></table></figure><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//满二叉树：每层节点数都达到最大值，第n层节点数为2^(n - 1),总节点数为2^n -1(2的n次方减一)</span></span><br><span class="line"><span class="comment">//完全二叉树：除最后一层外，其他各层节点数都达到最大个数，最后一层所有节点集中在最左边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入前比较</span></span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// 右侧插入</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">value</span> &gt; node.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newNode.<span class="property">value</span> &lt; node.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 左侧插入</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序遍历</span></span><br><span class="line">  <span class="title function_">preOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">inOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">postOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最大值</span></span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最小值</span></span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找指定值是否存在</span></span><br><span class="line">  <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &lt; node.<span class="property">value</span>) &#123;</span><br><span class="line">        node = node.<span class="property">left</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; node.<span class="property">value</span>) &#123;</span><br><span class="line">        node = node.<span class="property">right</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bst = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line"></span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.preOrderTraversal((nodeValue) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.inOrderTraversal((nodeValue) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.postOrderTraversal((nodeValue) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(bst.max())</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">search</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst);</span><br></pre></td></tr></table></figure><h2 id="翻转链表-1"><a href="#翻转链表-1" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="title function_">reverseList</span>(head.<span class="property">next</span>);</span><br><span class="line"></span><br><span class="line">  head.<span class="property">next</span>.<span class="property">next</span> = head;</span><br><span class="line">  head.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cur === <span class="literal">null</span> || cur.<span class="property">next</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = cur.<span class="property">next</span>;</span><br><span class="line">    cur.<span class="property">next</span> = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cur.next = null</span></span><br><span class="line">    <span class="comment">// cur.next.next = cur</span></span><br><span class="line">    <span class="comment">// cur = cur.nexxt</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="算法-1-Two-Sum"><a href="#算法-1-Two-Sum" class="headerlink" title="算法 1: Two Sum"></a>算法 1: Two Sum</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">example</span>:</span><br><span class="line">given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">because num[<span class="number">0</span>] + num[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">答：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> complement = target - nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">has</span>(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [map.<span class="title function_">get</span>(complement), i]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.<span class="title function_">set</span>(nums[i], i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>装箱：基本类型到引用类型的一个转换<br>拆箱：将引用类型到基本类型的转换（toPrimitive）</p><p>编码和解码：<br>escape(str) unescape(str)<br>encodeURI() decodeURI()<br>encodeURIComponent() decodeURIComponent()<br>btoa() atob()</p><p>回流：相当与刷新页面<br>重绘： 不刷新，动态更新内容<br>重绘不一定引起回流，回流一定引起重绘</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;手写部分&quot;&gt;&lt;a href=&quot;#手写部分&quot; class=&quot;headerlink&quot; title=&quot;手写部分&quot;&gt;&lt;/a&gt;手写部分&lt;/h1&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>面试优质知识点</title>
    <link href="https://github.com/foolishmax/2022/03/31/%E9%9D%A2%E8%AF%95%E4%BC%98%E8%B4%A8%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://github.com/foolishmax/2022/03/31/%E9%9D%A2%E8%AF%95%E4%BC%98%E8%B4%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-03-30T16:35:24.000Z</published>
    <updated>2022-07-30T04:14:51.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从浏览器地址栏输入-url-到显示页面的步骤"><a href="#从浏览器地址栏输入-url-到显示页面的步骤" class="headerlink" title="从浏览器地址栏输入 url 到显示页面的步骤"></a>从浏览器地址栏输入 url 到显示页面的步骤</h2><span id="more"></span><pre><code>1. 浏览器查看缓存(浏览器对应的都会有cache文件)。若请求有缓存且未过期，则取缓存资源提供给客户端，否则发起请求与服务器进行验证。检验是否过期通常有两个HTTP头：Expires、Cache-control2.浏览器需要获取域名对应的ip地址，过程如下：1.本地host文件查找- 浏览器解析URL获取协议、域名、端口、path路径，然后查看本地硬盘中hosts文件，看是否存在与这个域名对应的规则，如果有就直接使用hosts文件里面的ip地址。2.路由器缓存3.ISP DNS(Domain Name System域名系统)(情报局)缓存（互联网提供服务商）-本地DNS服务器以递归方式进行查询缓存记录，若没有就向跟DNS服务器查询。根DNS服务器查询到结果后会把域名和IP地址告诉本地DNS服务器，本地DNS服务器把对应关系草存在缓存中（一边下次用户查询，加快网络访问），然后再发给浏览器客户端的解析服务器。3.客户端发送HTTP请求。4.TCP传输报文（三次握手四次挥手）5.向客户端返回资源6.解析HTML文档，构建DOM树，CSSOM树，下载资源，执行js脚本等。</code></pre><h2 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个域名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</span><br></pre></td></tr></table></figure><h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">强缓存：（expires、Cache-Control）在过期时间内，浏览器再次加载资源时，不会向服务器发起请求，直接从缓存中读取资源</span><br><span class="line"></span><br><span class="line">协商缓存：向服务器发送请求，服务器会根据请求头（request header）的一些参数（Etag、last-modified）来判断是否命中协商缓存，首先根据Etag的值判断请求的文件有没有被修改，如果Etag一致则没有被修改，命中协商缓存返回304，如果不一致则返回新的资源并带上新的Etag返回200状态码。如果没有Etag值，则对比If-Modified-Since和请求文件的最后修改时间，一致则命中协商缓存返回304，不一致则返回新的last-modified和200状态码</span><br></pre></td></tr></table></figure><h2 id="http-协议的特点"><a href="#http-协议的特点" class="headerlink" title="http 协议的特点"></a>http 协议的特点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.支持客户/服务器模式</span><br><span class="line">2.简单快速：客户向服务器发送请求时，只需传送请求方法和路径。</span><br><span class="line">3.灵活：http允许传输任意类型的数据对象（Content-Type内容编码类型）</span><br><span class="line"></span><br><span class="line">application/x-www-form-urlencoded 常见post提交数据格式（key-value格式）</span><br><span class="line">application/json</span><br><span class="line"></span><br><span class="line">4.无连接：限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。（原因是早期服务器需要同时面对全世界数十万、上百万的客户端的网页访问，但是每次客户端与服务端传输的数据关联性很低，就会导致大部分通过会很空闲，无端占用资源）</span><br><span class="line"></span><br><span class="line">（解决无连接）Keep-Alive：使客户端到服务端之间的Http连接保持，不会断开，当再次对服务器发送请求时，keep-Alive功能避免了重新建立连接</span><br><span class="line"></span><br><span class="line">5.无状态：Http是一个无状态协议，就是每个请求都是独立的，数据传输完毕不会记录任何信息。缺点就是如果后续处理需要前面的信息，就必须重传，就会导致每次连接传送的数据量增加，如果服务器不需要前面信息的时候应答就会很快。</span><br><span class="line"></span><br><span class="line">（解决无状态）怎样保持http连接状态呢</span><br><span class="line">Cookie（每次http请求的时候，客户端都需要发送响应的cookie信息到服务端，服务端根据cookie判断来自哪个客户端）</span><br><span class="line">服务端生成cookie，客户端保存</span><br><span class="line"></span><br><span class="line">Session</span><br><span class="line">服务端生成一个sessionid，在客户端下次请求的时候在cookie里面记录这个sessionid，然后发送给服务端，服务端再根据cookie中的sessionid来识别客户端返回资源数据。</span><br><span class="line"></span><br><span class="line">禁用cookie怎么办？</span><br><span class="line">url重写，每次http请求的时候，在url后面拼接sid=**参数</span><br><span class="line"></span><br><span class="line">withCredentials:指定在涉及到跨域请求时，是否携带cookie信息，默认为false</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure><h2 id="cookie-和-session-的区别"><a href="#cookie-和-session-的区别" class="headerlink" title="cookie 和 session 的区别"></a>cookie 和 session 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.存取方式不同： cookie只能保存ASCII字符串，session能够存储任意类型的数据</span><br><span class="line">2.隐私策略不同</span><br><span class="line">3.cookie是存在客户端，session是存在服务器的</span><br><span class="line">4.浏览器的支持不同，浏览器可以禁用cookie</span><br></pre></td></tr></table></figure><h2 id="权限身份验证"><a href="#权限身份验证" class="headerlink" title="权限身份验证"></a>权限身份验证</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一般都是通过sessionid来进行用户身份验证，sessionid一般会存放在redis中。</span><br><span class="line">1.用户向服务端发送用户名和密码进行登陆</span><br><span class="line">2.服务器验证通过后，服务器为用户创建一个session，并将session信息存储起来</span><br><span class="line">3.服务器向用户返回一个sessionid，写入用户的cookie</span><br><span class="line">4.当用户保持登陆状态时，每次后续请求都会一起发送给后端</span><br><span class="line">5.服务器将存储在cookie中的sessionid和存储在内存或者数据库中的sessin信息进行一个比较，验证用户身份，然后返回响应信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1.依赖session的关键业务一定要确保客户端开启了cookie</span><br><span class="line">2.注意session的过期时间</span><br><span class="line"></span><br><span class="line">一般在http header的Authorization字段中添加token</span><br></pre></td></tr></table></figure><h2 id="禁用-cookie-之后-session-还能用吗？"><a href="#禁用-cookie-之后-session-还能用吗？" class="headerlink" title="禁用 cookie 之后 session 还能用吗？"></a>禁用 cookie 之后 session 还能用吗？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url重写，例如 https://javascript.cn/?session_id=xxx</span><br><span class="line">缺点是安全性降低，可以对sessionid进行一次加密后传输</span><br></pre></td></tr></table></figure><h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.url可见性：get参数url可见，post参数url不可见</span><br><span class="line">2.数据传输：get通过拼接url进行传递参数，post通过body体传输参数</span><br><span class="line">3.缓存性：get请求可以缓存，post请求不可以缓存</span><br><span class="line">4.get请求网页回退时，不产生影响，post请求网页回退会重新发请求</span><br><span class="line">5.传输数据：get一般传输数据大小不超过4k，post可以传输大量数据</span><br><span class="line">6.post较get安全性较高，get是不安全的因为url可见，可能会泄漏私密信息</span><br></pre></td></tr></table></figure><h2 id="http-常见的请求头字段"><a href="#http-常见的请求头字段" class="headerlink" title="http 常见的请求头字段"></a>http 常见的请求头字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Accept: 浏览器可接受的数据类型</span><br><span class="line">Accept-Charset: 浏览器可接受的字符集</span><br><span class="line">Accept-Encoding：浏览器能够进行解码的数据编码方式</span><br><span class="line">Accept-Language： 浏览器所希望的语言种类</span><br><span class="line">Connection：是否需要持久连接，值“Keep-Alive”，HTTP1.1默认进行持久连接</span><br><span class="line">Cookie：cookie信息</span><br><span class="line">content-type</span><br><span class="line">If-Modified-Since：内容被修改才会返回</span><br><span class="line">User-Agent：浏览器类型</span><br><span class="line"></span><br><span class="line">响应头：</span><br><span class="line">content-Length: 表示内容长度</span><br><span class="line">content-type：文档类型</span><br><span class="line">Date：当前时间</span><br><span class="line">Expires：指定缓存过期时间</span><br><span class="line">Last-Modified：文档过期时间</span><br></pre></td></tr></table></figure><h2 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http是超文本传输协议，信息是明文传输，https是更加安全的ssl加密传输协议</span><br><span class="line">http默认是80端口，https默认是443端口</span><br><span class="line">https需要申请CA证书</span><br><span class="line">https是http + ssl/tls（数字证书）进行组合的更加安全的传输协议</span><br><span class="line"></span><br><span class="line">https工作原理（非对称加密）</span><br><span class="line">1.服务端向客户端传递证书作为公钥</span><br><span class="line">2.客户端对证书进行解析，判断证书的办法机构和过期时间等，如果都没有问题，生成一个随机值作为私钥，然后使用证书进行加密发送给服务端</span><br><span class="line">3.服务端解密得到客户端私钥</span><br><span class="line">4.之后双方利用私钥进行加密解密，完成信息的通信</span><br></pre></td></tr></table></figure><h2 id="xss（跨域脚本攻击）csrf（跨站请求伪造）"><a href="#xss（跨域脚本攻击）csrf（跨站请求伪造）" class="headerlink" title="xss（跨域脚本攻击）csrf（跨站请求伪造）"></a>xss（跨域脚本攻击）csrf（跨站请求伪造）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">csrf: 需要用户先登陆网站A，获取cookie，利用的是网站A本身的漏洞，去请求网站A的api，---进行token验证，referer验证，只接收本站的请求</span><br><span class="line"></span><br><span class="line">xss：向网站A注入js代码，然后执行js代码，篡改网站A的内容，破坏页面正常结构，插入恶意广告。---编码转换</span><br></pre></td></tr></table></figure><h2 id="http1-0、http1-1-和-http2-0-的区别"><a href="#http1-0、http1-1-和-http2-0-的区别" class="headerlink" title="http1.0、http1.1 和 http2.0 的区别"></a>http1.0、http1.1 和 http2.0 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http/1.0 每个请求都要建立一个连接</span><br><span class="line">http/1.1 多了长连接keep-alive，若干个请求需要排队串行化单线程处理，会发生网络请求阻塞问题。</span><br><span class="line">http/2.0 同一个连接可以有多个请求，各个请求直接互不影响（进行了头部压缩和多路复用的优化）</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">单例模式 （class组件中new store创建store实例）</span><br><span class="line">工厂模式 （mobx store中creatLayoutStore）</span><br><span class="line">观察者模式</span><br><span class="line">发布订阅模式</span><br><span class="line">装饰器模式 （移动、pc配置同步@sync）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TCP-与-UDP-区别"><a href="#TCP-与-UDP-区别" class="headerlink" title="TCP 与 UDP 区别"></a>TCP 与 UDP 区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* TCP是面向连接的协议，发送数据前先要建立连接，TCP提供可靠的服务，通过TCP建立连接传输的数据不会丢失，没有重复，并且按照顺序到达。</span><br><span class="line">* UDP是无连接的协议，发送数据前不需要建立连接，是不可靠的</span><br><span class="line">* TCP只支持点对点通信，而UDP支持一对一，多对多</span><br><span class="line">* TCP是面向字节流的，UDP是面向报文的</span><br><span class="line">* TCP通信类似打电话，接通后需要确认身份，才可以开始通信</span><br><span class="line">* UDP类似广播直接进行通信</span><br></pre></td></tr></table></figure><h2 id="TCP-IP-模型"><a href="#TCP-IP-模型" class="headerlink" title="TCP/IP 模型"></a>TCP/IP 模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">应用层（应用层就是向用户提供通信服务的活动，提供用户程序接口HTTP、DNS）</span><br><span class="line">传输层（传输层为两台主机上的应用程序提供端到端的通信TCP，UDP）</span><br><span class="line">网络层（网络层实现数据包的选路和转发）</span><br><span class="line">数据链路层（ARP地址解析协议、RARP逆地址解析协议，使用物理地址寻找一台机器）</span><br></pre></td></tr></table></figure><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正向代理是客户端代理，服务端不知道是哪个客户端发起的请求</span><br><span class="line">反向代理是服务端代理，客户端不知道是哪个服务端提供的资源</span><br></pre></td></tr></table></figure><h2 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI 模型"></a>OSI 模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">应用层</span><br><span class="line">表示层</span><br><span class="line">会话层</span><br><span class="line"></span><br><span class="line">传输层</span><br><span class="line"></span><br><span class="line">网络层</span><br><span class="line"></span><br><span class="line">数据链路层</span><br><span class="line">物理层</span><br></pre></td></tr></table></figure><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>为什么需要三次握手？<br>两次握手第二次结束后，服务端并不能保证客户端已经接收到了第二次的应答信息，如此一来服务器会一直保持通信过程，因为 TCP 通信会占用端口，造成资源浪费。</p><p>防止已失效的连接请求报文段突然又传送到服务端，产生错误。<br>如上述情况，如果 client 没有再次向 server 发出确认，server 收不到确认就不会建立连接，可以避免 server 端一直等待浪费资源。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li><a href="https://blog.csdn.net/rememberyf/article/details/80309148">https://blog.csdn.net/rememberyf/article/details/80309148</a></li></ul><h2 id="301-和-302-的区别"><a href="#301-和-302-的区别" class="headerlink" title="301 和 302 的区别"></a>301 和 302 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">301 表示资源被永久移除，浏览器在拿到状态码后跳转到一个新的URL地址，可从相应头的location首部中获取，搜索引擎在抓取新内容的同时也将就地址交换为重定向之后的网址。</span><br><span class="line"></span><br><span class="line">302 表示地址资源还在，仍可以访问，搜索引擎会抓取新的内容而保存旧的地址，seo 302 优于301.</span><br><span class="line"></span><br><span class="line">重定向的原因：</span><br><span class="line">网站调整（改变网页目录结构）</span><br><span class="line">页面被移到一个新地址</span><br><span class="line">页面扩展名改变 .php -&gt;.html</span><br><span class="line">如果不做重定向会返回404页面，会白白流失用户访问量。</span><br><span class="line"></span><br><span class="line">1XX 信息性状态码，表示接受的请求正在处理</span><br><span class="line">2XX 成功状态码，表示请求被正常处理完毕</span><br><span class="line">3XX 重定向状态码，表示需要进行附加操作以完成请求</span><br><span class="line">4XX 客户端错误状态码，表示服务器无法处理请求</span><br><span class="line">    400 Bad Request请求出现语法错误</span><br><span class="line">    401 被请求的页面需要用户名和密码</span><br><span class="line">    403 forbidden 请求页面的访问被禁止</span><br><span class="line">    404 资源未找到</span><br><span class="line">5XX 服务器错误状态码，表示服务器处理请求出错</span><br><span class="line">    502 网关错误</span><br><span class="line">    503 服务器超负载或者停机维护，无法处理请求</span><br><span class="line">    504 网关超时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul><li>cookie 可用于传递少量数据，是一个再服务器和客户端之间来回传送文本值的内置机制，服务器可以根据 cookie 追踪用户在不同页面的访问信息。</li><li>cookie 特点<ul><li>1.大小限制，cookie 大小限制在 4KB 以内</li><li>2.宽带限制，cookie 数据会在服务器和浏览器之间来回传送，所以访问页面会消耗宽带。</li><li>3.安全风险，cookie 会频繁的在网络中传送，不加密的情况下是有安全风险的。</li><li>4.操作复杂<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function setCookie(name: string, value: string) &#123;</span><br><span class="line">    const exp = new Date();</span><br><span class="line">    //过期时间设置为一天</span><br><span class="line">    exp.setTime(exp.getTime() + 24 * 60 * 60 * 1000);</span><br><span class="line">    document.cookie = `$&#123;name&#125;=$&#123;escape(value);expires=$&#123;exp.toString()&#125;&#125;`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="localStorage-会话存储-和-sessionStorage-本地存储"><a href="#localStorage-会话存储-和-sessionStorage-本地存储" class="headerlink" title="localStorage 会话存储 和 sessionStorage 本地存储"></a>localStorage 会话存储 和 sessionStorage 本地存储</h2><ul><li>1.存储容量大</li><li>2.零宽带，仅存储在本地，不会和服务器发生任何交互行为，不存在网络宽带占用问题。</li><li>3.编程接口，提供一套丰富的接口，操作数据更加方便。</li><li>4.独立的存储空间，不会造成数据的混乱。</li></ul><ul><li><p>主要区别在于数据存储的 <code>时间范围</code>和<code>页面范围</code></p><ul><li>sessionStorage: 数据只存储到窗口或标签关闭时，只在当前窗口的当前标签内可见,5M 左右，不同浏览器不同大小。</li><li>localStorage: 数据会一直存在除非手动清除，数据可被同源(协议、域名、端口号一致)的每个窗口或标签共享,5M 左右，不同浏览器不同大小。</li></ul></li><li><p>监测是否支持 web Storage</p><ul><li>1.通过 window.sessionStorage,window.localStorage 判断浏览器是否支持</li><li>2.通过 try{}catch{} 执行一下 storage.setItem(‘key’, value);storage.removeItem(‘key’),判断接口方法是否可用。</li></ul></li></ul><h2 id="html5-的几种存储形式"><a href="#html5-的几种存储形式" class="headerlink" title="html5 的几种存储形式"></a>html5 的几种存储形式</h2><ul><li>1.本地存储 localStorage,sessionStorage</li><li>2.离线缓存 application cache</li><li><ol start="3"><li>indexedDb,webSQL</li></ol></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.负载均衡、CDN加速、设置缓存、</span><br><span class="line">2.业务逻辑优化</span><br><span class="line">3.代码程序优化（组件按需加载、图片懒加载，代码压缩）</span><br><span class="line">4.避免重绘回流</span><br><span class="line">重绘：页面元素的样式改变不会影响它在文档流中的位置时发生重绘</span><br><span class="line">回流：DOM尺寸大小结构发生变化时</span><br><span class="line">回流一定会导致重绘</span><br><span class="line">如何避免：</span><br><span class="line">1.避免频繁操作dom，通过创建document.createDocumentFragment()一次性插入需要操作的dom</span><br><span class="line">2.具有复杂动画的Dom元素使用绝对定位，使其脱离文档流</span><br><span class="line">3.合并对于Dom中style样式的操作</span><br><span class="line">4.避免使用css表达式 calc()</span><br></pre></td></tr></table></figure><h2 id="fetch-和-axios"><a href="#fetch-和-axios" class="headerlink" title="fetch 和 axios"></a>fetch 和 axios</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch取消发送</span><br><span class="line">1.创建一个AbortController实例</span><br><span class="line">2.该实例具有signal属性</span><br><span class="line">3.将signal传递给fetch option</span><br><span class="line">4.调用AbortController的abort属性来取消所有使用该信号的fetch</span><br><span class="line"></span><br><span class="line">axios取消发送</span><br><span class="line">1.const cancelToken = axios.CancelToken</span><br><span class="line">2.const source = CancelToken.source()</span><br><span class="line">3.axios.get(&#x27;/xxx&#x27;,&#123;cancelToken: source.token&#125;)</span><br></pre></td></tr></table></figure><h2 id="flex-常用属性，grid-布局"><a href="#flex-常用属性，grid-布局" class="headerlink" title="flex 常用属性，grid 布局"></a>flex 常用属性，grid 布局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flex属性：</span><br><span class="line">1.flex-direction属性，决定主轴方向</span><br><span class="line">2.flex-wrap属性，控制换行</span><br><span class="line">3.flex-flow属性，flex-direction和flex-wrap的简写形式，默认值flex-flow: row  nowrap;</span><br><span class="line">4.justify-content属性，项目主轴上的对齐方式</span><br><span class="line">5.align-item属性，项目在交叉轴上的对齐方式</span><br><span class="line">6.align-content属性，多个轴线的时候在元素在交叉轴的对齐方式，只有一根轴线时不起作用</span><br><span class="line">flex（子元素的属性）：</span><br><span class="line">1.order属性,定义项目的排列顺序，数值越小，排列越靠前，默认为0.</span><br><span class="line">2.align-self属性，允许单个项目与其他项目不一样的对齐方式，会覆盖align-items属性.</span><br><span class="line">3.flex属性，flex-grow、flex-shrink、flex-basis简写，默认为0 1 auto</span><br><span class="line">    auto(1 1 auto)       none(0 0 auto)</span><br><span class="line">4.flex-grow属性，定义项目的放大比例，默认为0，即如果存在剩余空间也不放大，1等分，一个项目为2，其他为1，则前者占据空间是其他的两倍。</span><br><span class="line">5.flex-shrink属性，定义项目的缩小比例，默认为1，空间不足则缩小，如果所有项目都为1，则等比例缩小，如果有的项目为0，则空间不足时为0的不缩小，负值无效</span><br><span class="line">6.flex-basis属性，项目占据的固定空间</span><br></pre></td></tr></table></figure><h2 id="padding-bottom-实现子元素高度等于父元素宽度问题"><a href="#padding-bottom-实现子元素高度等于父元素宽度问题" class="headerlink" title="padding-bottom 实现子元素高度等于父元素宽度问题"></a>padding-bottom 实现子元素高度等于父元素宽度问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当margin或者padding取值是百分比的时候，无论是left，right或者top，bottom，都是以父元素的width为参考物，进行提前占位</span><br></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在作用域的创建阶段（预编译阶段），会生成js的变量对象（VO对象）供js引擎去访问。</span><br><span class="line">1.创建ao对象</span><br><span class="line">2.找形参和变量声明，作为ao对象的属性名，值为undefined</span><br><span class="line">3.实参和形参相统一</span><br><span class="line">4.找函数声明，如果名字和变量相同则覆盖变量声明</span><br><span class="line">5.解释执行</span><br></pre></td></tr></table></figure><h2 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.箭头函数中的this是在定义函数的时候绑定的（继承自父执行上下文中的this），而不是执行函数时绑定。</span><br><span class="line">2.箭头函数没有this，所以不能用作构造函数。</span><br></pre></td></tr></table></figure><h2 id="Map-和-Set-两种新的数据结构的区别？"><a href="#Map-和-Set-两种新的数据结构的区别？" class="headerlink" title="Map 和 Set 两种新的数据结构的区别？"></a>Map 和 Set 两种新的数据结构的区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Map类似Object是一种键值对集合，区别在于Map的键不仅限于字符串，其他各种类型的值都可以作为Map的键</span><br><span class="line"></span><br><span class="line">2.Set是类似数组的一种数据结构，不点在于Set中没有重复的值</span><br></pre></td></tr></table></figure><h2 id="你对闭包了解多少？"><a href="#你对闭包了解多少？" class="headerlink" title="你对闭包了解多少？"></a>你对闭包了解多少？</h2><pre><code>解释一下作用域链是如何产生的解释一下js执行山下文的创建、执行过程解释一下闭包所产生的变量放在哪里</code></pre><ul><li>闭包的定义：闭包就是能够读取其他函数内部变量的函数。</li><li>闭包的底层实现原理</li><li>js 执行上下文：</li><li><img src="https://img-blog.csdnimg.cn/20190527213618675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTg4NDIx,size_16,color_FFFFFF,t_70" alt="image"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">js运行三部曲</span><br><span class="line">1.语法分析</span><br><span class="line">2.预编译</span><br><span class="line">3.解释执行</span><br><span class="line"></span><br><span class="line">js代码需要经过浏览器V8引擎进行预编译，里面涉及到变量提升、函数提升。</span><br><span class="line">预编译的环境需要个环境，这个环境就是执行上下文。</span><br><span class="line"></span><br><span class="line">js执行上下文分为三种：</span><br><span class="line">1.全局执行上下文：代码开始执行时首先进入的环境</span><br><span class="line">2.函数执行上下文：函数调用时，会开始执行函数中的代码</span><br><span class="line">3.eval执行上下文：不建议使用</span><br><span class="line"></span><br><span class="line">执行上下文的周期，分为两个阶段</span><br><span class="line">1.创建阶段</span><br><span class="line">    创建词法环境</span><br><span class="line">    生成变量对象VO，建立作用域链</span><br><span class="line">    确认this指向，并绑定this</span><br><span class="line">2.执行阶段</span><br><span class="line">    进行变量赋值，函数引用以及执行代码</span><br><span class="line"></span><br><span class="line">预编译发生在函数执行前，预编译四部曲：</span><br><span class="line">1.创建AO对象</span><br><span class="line">2.找形参和变量声明，将变量和形参作为AO的属性名，值为undefined</span><br><span class="line">3.将形参和实参相统一</span><br><span class="line">4.在函数体中找到函数声明，值赋予函数体（函数名相同，后者覆盖前者）</span><br><span class="line">5.最后程序输出变量值的时候，就是从AO对象中拿</span><br><span class="line">（此时就产生了外部作用域的引用，js查找变量的规则就是如果在函数执行上下文中找不到变量，</span><br><span class="line">就在调用上下文中寻找他，如果还没有就一直往上一级，直到全局执行上下文，如果还没有，就是undefined，js形成闭包）</span><br></pre></td></tr></table></figure><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student.__proto__ === Student.prototype</span><br><span class="line">1.每个函数function都由一个prototype，即显式原型。是在定义函数的时候自动添加的，默认是一个空的Object对象</span><br><span class="line">2.每个引用类型都有一个__proto__,即隐式原型。是创建对象时自动添加的，默认值为构造函数的prototype属性值</span><br><span class="line">实例对象的隐式原型 等于 对应构造函数或类的显式原型</span><br><span class="line">能直接操作显式原型，不能直接操作隐式原型</span><br></pre></td></tr></table></figure><h2 id="js-的-new-操作符都做了些什么？"><a href="#js-的-new-操作符都做了些什么？" class="headerlink" title="js 的 new 操作符都做了些什么？"></a>js 的 new 操作符都做了些什么？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个空的js对象&#123;&#125;</span><br><span class="line">2. 将空对象的隐式原型__proto__指向构造函数的原型</span><br><span class="line">3. 将空对象作为构造函数的上下文（改变this指向）</span><br><span class="line">4. 对构造函数返回值做判断</span><br><span class="line"></span><br><span class="line">实现：</span><br><span class="line">function create(fn, ...args) &#123;</span><br><span class="line">    let obj = Object.create(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    // obj.__proto__ = fn.prototype;</span><br><span class="line">    Object.setPrototypeOf(obj, fn.prototype);</span><br><span class="line"></span><br><span class="line">    let result = fn.apply(obj, args);</span><br><span class="line"></span><br><span class="line">    return result instanceof Object ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">在new的时候，会对构造函数的返回值做一些判断</span><br><span class="line">1. 如果返回值是基础类型数据，则忽略返回值</span><br><span class="line">2. 如果返回值是引用数据类型，则使用return的返回，也就是new操作符无效</span><br></pre></td></tr></table></figure><h2 id="calc-support-media-各自的含义及用法？"><a href="#calc-support-media-各自的含义及用法？" class="headerlink" title="calc, support, media 各自的含义及用法？"></a>calc, support, media 各自的含义及用法？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@support 主要用于检测浏览器是否支持css的某个属性，相当于条件语句，支持的话写一套样式，</span><br><span class="line">不支持写另外一套样式，例如</span><br><span class="line">    @supports (display: grid) &#123;</span><br><span class="line">      div &#123;</span><br><span class="line">        display: grid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @supports not (display: grid) &#123;</span><br><span class="line">      div &#123;</span><br><span class="line">        float: right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">calc(): 用于动态计算值，支持 + - * / 运算。</span><br><span class="line"></span><br><span class="line">@media查询：可以针对不同的媒体类型定义不同的样式。</span><br></pre></td></tr></table></figure><h2 id="什么是会话-cookie-什么是持久-cookie"><a href="#什么是会话-cookie-什么是持久-cookie" class="headerlink" title="什么是会话 cookie,什么是持久 cookie?"></a>什么是会话 cookie,什么是持久 cookie?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie是服务器返回的，指定了expire（有效期）的是持久cookie,没有指定的是会话cookie</span><br></pre></td></tr></table></figure><h2 id="img-标签-title-和-alt-属性"><a href="#img-标签-title-和-alt-属性" class="headerlink" title="img 标签 title 和 alt 属性"></a>img 标签 title 和 alt 属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alt: 图片加载失败时，显示在网页上的替代文字</span><br><span class="line">title: 鼠标放在图片上的提示文字</span><br><span class="line"></span><br><span class="line">alt是必须属性，可以为空；title为非必须</span><br></pre></td></tr></table></figure><h2 id="es6-新特性"><a href="#es6-新特性" class="headerlink" title="es6 新特性"></a>es6 新特性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.let和const</span><br><span class="line">2.模版字符串</span><br><span class="line">3.箭头函数</span><br><span class="line">4.函数可以设置默认参数值</span><br><span class="line">5.扩展运算符</span><br><span class="line">6.对象和数组的解构</span><br><span class="line">7.class</span><br></pre></td></tr></table></figure><h2 id="图片懒加载原理"><a href="#图片懒加载原理" class="headerlink" title="图片懒加载原理"></a>图片懒加载原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 浏览器是否发起请求是根据&lt;img /&gt;标签的src属性</span><br><span class="line">2. 所以懒加载的关键是：在图片没有进入可视区域时，</span><br><span class="line">先不给&lt;img /&gt;的src属性赋值，等到图片进入可是区域再给src赋值。</span><br><span class="line"></span><br><span class="line">当图片底边距离页面的偏移（图片高度+图片距离顶部偏移高度）</span><br><span class="line">小于等于</span><br><span class="line">浏览器底边距离页面顶部高度（浏览器一屏高度 + 滚动区域）</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="H5-新增了哪些标签？"><a href="#H5-新增了哪些标签？" class="headerlink" title="H5 新增了哪些标签？"></a>H5 新增了哪些标签？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article、aside、audio、video、footer、header、nav、section</span><br></pre></td></tr></table></figure><h2 id="SVG-和-Canvas-的区别？"><a href="#SVG-和-Canvas-的区别？" class="headerlink" title="SVG 和 Canvas 的区别？"></a>SVG 和 Canvas 的区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.svg:表示以XML格式定义图像的可伸缩矢量图形。</span><br><span class="line">2.canvas：通过js来绘制2D图形</span><br><span class="line"></span><br><span class="line">svg通过标签fill属性可以调整颜色</span><br></pre></td></tr></table></figure><h2 id="AMD-和-CMD-的区别"><a href="#AMD-和-CMD-的区别" class="headerlink" title="AMD 和 CMD 的区别"></a>AMD 和 CMD 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">共同点：</span><br><span class="line">1.两者都是框架在推广过程中对模块定义的规范产出</span><br><span class="line">2.都是异步加载模块</span><br><span class="line">不同点：</span><br><span class="line">1.AMD是RequireJs在推广过程中对模块定义的规范产出，CMD是SeaJs在推广过程中对模块定义的规范化产出</span><br><span class="line">2.AMD推崇依赖前置，CMD推崇依赖就近</span><br><span class="line">3.AMD的应用体验好，因为模块提前执行了，CMD性能好，因为只有用户需要的时候才执行</span><br></pre></td></tr></table></figure><h2 id="如何实现-js-倒计时的纠偏？"><a href="#如何实现-js-倒计时的纠偏？" class="headerlink" title="如何实现 js 倒计时的纠偏？"></a>如何实现 js 倒计时的纠偏？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 第一种通过前端定时向服务端发送请求获取最新的时间差，以此来校准倒计时时间。</span><br><span class="line">2. 通过前端根据偏差时间来自动调整下次间隔的时间来实现，首先以setTimeout递归的方式来实现倒计时，</span><br><span class="line">通过一个变量记录倒计时的秒数，根据秒数和间隔时间计算出此时无偏差时应该显示的时间，</span><br><span class="line">然后拿当前真实时间与这个时间相减，就可以得到时间的偏差大小，因此在设置下一个定时器的时候，</span><br><span class="line">间隔时间减去这个偏差大小就可以纠正时间误差。</span><br></pre></td></tr></table></figure><h2 id="js-的执行机制"><a href="#js-的执行机制" class="headerlink" title="js 的执行机制"></a>js 的执行机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">js是单线程的，处理js任务只能一个一个顺序执行，js中把任务分为了同步任务和异步任务，</span><br><span class="line">同步任务进入主线程先执行，异步任务进入Event Table并注册函数，指定事情完成后，Event Table就会将函数移入到事件队列Event Queque中，等待主线程任务执行完毕，</span><br><span class="line">就会从事件队列中取出对应事件进入主线程执行。</span><br><span class="line"></span><br><span class="line">macro-task（宏任务）：包括整体代码script、setTimeout、setInterval</span><br><span class="line">micro-task（微任务）：Promise.then、process.nextTick</span><br><span class="line">微任务先于宏任务先执行（除了script）执行过程不同任务进入不同的event quue</span><br><span class="line"></span><br><span class="line">js先执行整体的同步任务代码，遇到微任务就会将其放入到微任务事件队列，</span><br><span class="line">遇到宏任务放到宏任务事件队列中。</span><br><span class="line"></span><br><span class="line">然后整体的同步任务代码执行完之后，就会先执行微任务队列中的任务，</span><br><span class="line">等待微任务队列中的所有任务执行完毕之后，再去从宏任务队列中找到第一个任务进行执行，</span><br><span class="line">执行过程中，如果遇到微任务就会放到微任务队列中，等到该宏任务执行完毕之后，</span><br><span class="line">就会查看微任务队列中有没有微任务，如果有就先执行微任务队列中的任务，否则执行第二个宏任务，</span><br><span class="line">以此类推。</span><br></pre></td></tr></table></figure><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="请说一下你对-React-的理解？"><a href="#请说一下你对-React-的理解？" class="headerlink" title="请说一下你对 React 的理解？"></a>请说一下你对 React 的理解？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. react是一个网页的UI框架，通过组件化的方式解决视图层开发复用的问题，本质是一个组件化框架。</span><br><span class="line">2. react的核心设计思路有三个：</span><br><span class="line">声明式</span><br><span class="line">    命令式：命令程序一步一步的执行操作</span><br><span class="line">    声明式：只需告诉程序我们想要的结果，其他的交给程序去做。</span><br><span class="line">组件化</span><br><span class="line">    将视图拆分和模块复用，做到高内聚低耦合</span><br><span class="line"></span><br><span class="line">通用性</span><br><span class="line">    一次学习，随处编写。RN，react360等，跨平台底层靠虚拟DOM实现</span><br><span class="line"></span><br><span class="line">3. 缺点</span><br><span class="line">1.没有官方系统解决方案，在开发大型应用时需要向社区寻找并整合解决方案。</span><br><span class="line">2.过于灵活，需要注意代码规范</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="React-lazy-懒加载"><a href="#React-lazy-懒加载" class="headerlink" title="React.lazy 懒加载"></a>React.lazy 懒加载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// React.lazy方法可以异步加载组件</span><br><span class="line">const Foo = React.lazy(() =&gt; import(&#x27;../components/Foo&#x27;)</span><br><span class="line"></span><br><span class="line">// React.lazy不能单独使用，需要配合React.suspense,用来包裹异步组件，添加loading效果等。</span><br><span class="line">&lt;React.Suspense fallback=&#123;&lt;div&gt;loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">    &lt;Foo /&gt;</span><br><span class="line">&lt;/React.Suspense&gt;</span><br><span class="line"></span><br><span class="line">React.lazy原理</span><br><span class="line">React.lazy使用import来懒加载组件，import在webpack中最终会调用requireEnsure方法，动态插入script来请求js文件，类似jsonp的形式。</span><br></pre></td></tr></table></figure><h2 id="类组件和函数组件之间的区别？"><a href="#类组件和函数组件之间的区别？" class="headerlink" title="类组件和函数组件之间的区别？"></a>类组件和函数组件之间的区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">相同点：</span><br><span class="line">接受属性返回React元素</span><br><span class="line"></span><br><span class="line">不同点：</span><br><span class="line">    1.编程思想不同：类组件需要创建实例，基于面向对象的方式编程。函数式组件接受输入返回输出，属于函数式编程的思想。</span><br><span class="line">    2.内存占用：类组件需要创建实例，会占用内存，函数组件不需要创建实例，可以节约内存</span><br><span class="line">    3.捕获特性：函数组件具有捕获特性</span><br><span class="line">    4.可测试性：函数组件更方便编写单元测试</span><br><span class="line">    5.状态：类组件有实例可以维护自己的状态，函数组件可以使用useState维护自己的状态</span><br><span class="line">    6.声明周期：类组件有生命周期，可以在生命周期内写逻辑，函数组件可以在useEffect中</span><br><span class="line">    7.逻辑复用：函数组件通过继承实现逻辑复用，函数组件可以通过自定义hooks实现逻辑复用</span><br><span class="line">    8.性能优化：类组件通过shouldComponentUpdate和PureComponent来跳过更新，函数组件通过React.memo</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="当调用-setState-的时候，发生了什么事？"><a href="#当调用-setState-的时候，发生了什么事？" class="headerlink" title="当调用 setState 的时候，发生了什么事？"></a>当调用 setState 的时候，发生了什么事？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将传递给setState的参数对象合并到组件的当前的状态，react遍历dom节点，计算差异，更新UI。</span><br><span class="line">https://segmentfault.com/a/1190000018250127</span><br></pre></td></tr></table></figure><h2 id="为什么-setState-的参数是一个-callback-而不是一个对象"><a href="#为什么-setState-的参数是一个-callback-而不是一个对象" class="headerlink" title="为什么 setState 的参数是一个 callback 而不是一个对象"></a>为什么 setState 的参数是一个 callback 而不是一个对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因为this.props和this.state的更新可能是异步的，不能依赖它们的值去计算下一个state</span><br><span class="line">(更新状态不要直接修改this.state，虽然状态可以改变，但不会触发组件的更新)</span><br><span class="line"></span><br><span class="line">setState何时同步何时异步？</span><br><span class="line">异步：由React控制的事件处理程序以及生命周期函数中调用setState为异步</span><br><span class="line">同步：React控制之外的原生js绑定的事件、setTimeout/setInterval等。</span><br></pre></td></tr></table></figure><h2 id="setState-什么时候同步什么时候异步？"><a href="#setState-什么时候同步什么时候异步？" class="headerlink" title="setState 什么时候同步什么时候异步？"></a>setState 什么时候同步什么时候异步？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">react三个模式：</span><br><span class="line">1.legacy模式： 通过ReactDOM.render(&lt;App /&gt;, rootNode)创建的，当前react的使用方式</span><br><span class="line">2.blocking模式：通过ReactDOM.createBlockingRoot(rootNode).render(&lt;App /&gt;),实验阶段，作为迁移到concurrent模式的第一个步骤</span><br><span class="line">3.concurrent模式，通过ReactDOM.createRoot(rootNode).render(&lt;App /&gt;),实验阶段，未来react的默认开发模式</span><br><span class="line"></span><br><span class="line">setState 只在合成事件（react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件）和钩子函数（生命周期中）是异步的，在原生事件和setTimeout中都是同步的。</span><br><span class="line"></span><br><span class="line">不同模式执行结果不同，legacy模式命中batchedUpadates（批处理）时异步，为命中时同步</span><br><span class="line">concurrent模式都是异步的</span><br><span class="line"></span><br><span class="line">setState异步并不是说内部由异步代码实现，其本身执行过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了“异步”</span><br><span class="line"></span><br><span class="line">可以通过第二个参数的callback回调函数中拿到最新的值，在异步中如果对同一个值进行多次setState，那么setState的批量更新策略会将其覆盖，去最后一次的执行，如果同时setState多个值，会在更新时对其进行合并批量更新。</span><br></pre></td></tr></table></figure><h2 id="react-渲染机制"><a href="#react-渲染机制" class="headerlink" title="react 渲染机制"></a>react 渲染机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">首先打开页面会渲染出一颗DOM树，更新数据会生成一颗虚拟DOM树，通过diff算法，</span><br><span class="line">比较两颗DOM树的差异，找到更新的地方进行批量改动。</span><br><span class="line"></span><br><span class="line">diff：计算一棵树形结构到另一颗树形结构的最少操作。</span><br><span class="line"></span><br><span class="line">1.把树形结构按照层级分解，只比较同级元素</span><br><span class="line">2.给列表结构的每个单元添加唯一的 key 属性，方便比较</span><br><span class="line">3.diff只简单考虑同层级的节点位置变换，如果是跨层级的话，只有创建节点和删除节点的操作。（官方也不推荐）</span><br></pre></td></tr></table></figure><h2 id="React-StrictMode-目前有助于："><a href="#React-StrictMode-目前有助于：" class="headerlink" title="React.StrictMode 目前有助于："></a>React.StrictMode 目前有助于：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">识别不安全的生命周期</span><br><span class="line">关于使用过时字符串 ref API 的警告</span><br><span class="line">关于使用废弃的 findDOMNode 方法的警告</span><br><span class="line">检测意外的副作用</span><br><span class="line">检测过时的 context API</span><br></pre></td></tr></table></figure><h2 id="虚拟-DOM-优点"><a href="#虚拟-DOM-优点" class="headerlink" title="虚拟 DOM 优点"></a>虚拟 DOM 优点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 减少不必要的DOM操作</span><br><span class="line">    1.1虚拟dom可以将多次操作合并为一次操作，比如添加100个节点，确是一个一个操作的</span><br><span class="line">    1.2虚拟dom借助dom diff可以将多余的操作省略掉，比如添加100个节点，其中10个是新增的</span><br><span class="line"></span><br><span class="line">2. 跨平台渲染</span><br><span class="line">    1.因为虚拟dom本质上是一个js对象</span><br><span class="line"></span><br><span class="line">react虚拟dom结构:</span><br><span class="line"></span><br><span class="line">const vNode = &#123;</span><br><span class="line">    key: null,</span><br><span class="line">    props:&#123;</span><br><span class="line">        children: [</span><br><span class="line">            &#123;type: &#x27;span&#x27;, ....&#125;,</span><br><span class="line">        ],</span><br><span class="line">        className: &#x27;red&#x27;,</span><br><span class="line">        onClick: () =&gt; &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ref: null,</span><br><span class="line">    type: &#x27;div&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">创建虚拟dom：React.createElement</span><br></pre></td></tr></table></figure><h2 id="diff-策略"><a href="#diff-策略" class="headerlink" title="diff 策略"></a>diff 策略</h2><p>`<br>策略一： tree diff<br>1.React 对树进行分层比较，两颗虚拟 DOM 树只会对同一层级的 DOM 节点进行比较。<br>如果存在跨层级的操作，只会进行创建和删除 2.如果节点是组件就进行 Component diff 3.如果节点是标签就进行 Element diff</p><p>策略二：component diff<br>如果为非同类型组件的话标记组件为 dirty component，替换组件下所有子节点，<br>类型相同更新属性，然后深入组件进行 Tree diff（递归遍历对比）</p><p>策略三：element diff<br>如果节点是原生标签，则看标签名<br>标签名不同直接替换，相同更新属性，然后进入标签进行 Tree diff（递归遍历对比）<br>`</p><h2 id="shouldComponentUpdate-nextProps-nextState-是做什么的，（react-性能优化是哪个周期函数？）"><a href="#shouldComponentUpdate-nextProps-nextState-是做什么的，（react-性能优化是哪个周期函数？）" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)是做什么的，（react 性能优化是哪个周期函数？）"></a>shouldComponentUpdate(nextProps, nextState)是做什么的，（react 性能优化是哪个周期函数？）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate 这个方法用来判断是否需要调用render方法重新绘制dom,</span><br><span class="line">由于渲染dom非常消耗性能，合理的调用shouldComponentUpdate方法可以极大的提高性能。</span><br></pre></td></tr></table></figure><h2 id="createElement-和-cloneElement-有什么区别？"><a href="#createElement-和-cloneElement-有什么区别？" class="headerlink" title="createElement 和 cloneElement 有什么区别？"></a>createElement 和 cloneElement 有什么区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">React.createElement()构建React元素。</span><br><span class="line">接受三个参数，第一个参数为标签名，如div、span等，或者react组件，第二个参数为传入的属性，第三个为组件的子组件。</span><br><span class="line">React.createElement(</span><br><span class="line">    type,</span><br><span class="line">    [props],</span><br><span class="line">    [...children]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">React.cloneElement(),第一个参数传入react元素不是标签名，第二个参数传入属性，新添加的属性会并入原有的属性，第三个参数为子组件</span><br><span class="line">React.cloneElement(</span><br><span class="line">    element,</span><br><span class="line">    [props],</span><br><span class="line">    [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="虚拟-DOM-的优缺点？"><a href="#虚拟-DOM-的优缺点？" class="headerlink" title="虚拟 DOM 的优缺点？"></a>虚拟 DOM 的优缺点？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 处理了浏览器兼容性问题，避免了用户操作真实DOM</span><br><span class="line">2.内容经过xss处理，可以防范xss攻击</span><br><span class="line">3.跨平台开发</span><br><span class="line">4.更新的时候可以实现差异化更新，减少更新DOM的操作</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1.虚拟DOM需要消耗额外的内存</span><br><span class="line">2.首次渲染不一定会更快</span><br></pre></td></tr></table></figure><h2 id="React-中创建组件的方式"><a href="#React-中创建组件的方式" class="headerlink" title="React 中创建组件的方式"></a>React 中创建组件的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createClass()、ES6 class组件 无无状态函数式组件</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="react-中-key-的作用"><a href="#react-中-key-的作用" class="headerlink" title="react 中 key 的作用"></a>react 中 key 的作用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key在react中用于追踪哪些列表中元素被修改、添加或者移除的辅助标识。</span><br><span class="line"></span><br><span class="line">在开发中，需要保证某个元素的key在同级元素中具有唯一性。</span><br><span class="line"></span><br><span class="line">diff算法会借助元素的key值来判断元素是新创建的还是被移动而来的元素，从而减少不必要的元素重渲染</span><br></pre></td></tr></table></figure><h2 id="react-优势"><a href="#react-优势" class="headerlink" title="react 优势"></a>react 优势</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 速度快：不直接操作dom，采用虚拟dom的概念</span><br><span class="line">2.跨浏览器兼容，兼容性好</span><br><span class="line">3.一切都是component，代码更加模块化，可维护性高</span><br><span class="line">4.单向数据流，采用Flux单向数据层架构</span><br></pre></td></tr></table></figure><h2 id="react-事件机制"><a href="#react-事件机制" class="headerlink" title="react 事件机制"></a>react 事件机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">react的事件机制利用了事件委托机制，事件并没有真正的绑定在真实的dom节点上，</span><br><span class="line">而是把事件绑定在结构的最外层document，使用统一的事件监听器，所有事件都由这个监听器统一分发。</span><br><span class="line"></span><br><span class="line">组件挂载和更新时，会将绑定的事件分门别类的放进一个叫EvnentPluginHub的事件池中。</span><br><span class="line"></span><br><span class="line">事件触发时，根据事件产生的Event对象找到触发事件的组件，再通过组件标识和事件类型</span><br><span class="line">从事件池中找到对应的事件监听回调，然后执行相关的监听函数。</span><br></pre></td></tr></table></figure><h2 id="异步回调中怎么使用-syntheticEvent？"><a href="#异步回调中怎么使用-syntheticEvent？" class="headerlink" title="异步回调中怎么使用 syntheticEvent？"></a>异步回调中怎么使用 syntheticEvent？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在合成事件机制里，一旦事件监听回调执行，合成事件对象就会被销毁，异步回调执行的时候</span><br><span class="line">合成事件对象早就被销毁了。</span><br><span class="line">解决方法：执行event.persist(),通知react不需要回收。</span><br></pre></td></tr></table></figure><h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">React 16推出Fiber之后，如果要开启async rendering，那么在render函数之前的所有函数都有可能被执行多次</span><br><span class="line"></span><br><span class="line">废弃：</span><br><span class="line">componentWillMount</span><br><span class="line">componentWillReceiveProps(nextProps)</span><br><span class="line">componentWillUpdate(nextProps, nextState)</span><br><span class="line">代替：</span><br><span class="line">静态函数：static getDerivedStateFromProps(nextProps, prevState)</span><br><span class="line"></span><br><span class="line">静态函数：static getDerivedStateFromError(error) // 渲染备用UI</span><br><span class="line">此生命周期return的值会自动调用setState，将值和state合并</span><br><span class="line">运行事件节点：子组件被渲染发生错误后且在页面更新前</span><br><span class="line"></span><br><span class="line">getSnapshotBeforeUpdate(prevProps, prevState) 此生命周期的返回值将作为参数传递给componentDidUpdate()</span><br><span class="line"></span><br><span class="line">componentDidCatch(error, info) // 打印错误信息</span><br><span class="line"></span><br><span class="line">错误边界无法捕获的错误：</span><br><span class="line">1.组件自身的错误</span><br><span class="line">2.异步错误，setTimeout</span><br><span class="line">3.事件中的错误，比如click事件中发生错误</span><br></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 构建action，通过创建一个函数，返回一个对象，需要携带type属性</span><br><span class="line"></span><br><span class="line">2. 构建reducer，用来响应action，然后通过return把数据传回store</span><br><span class="line"></span><br><span class="line">3. 利用createStore来构建store，把reducer作为参数传入</span><br><span class="line"></span><br><span class="line">4. 利用store.subscribe()注册监听</span><br><span class="line"></span><br><span class="line">5. 利用store.dispatch()发送action</span><br><span class="line"></span><br><span class="line">6. 利用store.getState()拿到值</span><br></pre></td></tr></table></figure><h1 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h1><h2 id="ts-中-type-和-interface-的区别"><a href="#ts-中-type-和-interface-的区别" class="headerlink" title="ts 中 type 和 interface 的区别"></a>ts 中 type 和 interface 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">相同点：</span><br><span class="line">1.都可以描述一个对象和函数</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">interface SetUser &#123;</span><br><span class="line">    (name: string): void;</span><br><span class="line">&#125;</span><br><span class="line">type User = &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">type SetUser = (name: string): void;</span><br><span class="line"></span><br><span class="line">2.扩展与交叉类型</span><br><span class="line">interface可以extends进行类型扩展，type可以通过交叉类型实现interface的extend行为。</span><br><span class="line">interface可以exteds  type，type也可以与interface类型交叉（&amp;符号）</span><br><span class="line">不同点：</span><br><span class="line">1.type可以声明基本类型别名，联合类型，元祖等类型</span><br><span class="line">基本类型别名</span><br><span class="line">type Name = string;</span><br><span class="line">联合类型</span><br><span class="line">interface Dog &#123;</span><br><span class="line">    wang();</span><br><span class="line">&#125;</span><br><span class="line">interface Cat &#123;</span><br><span class="line">    miao();</span><br><span class="line">&#125;</span><br><span class="line">type Pet = Dog | Cat;</span><br><span class="line">元祖类型</span><br><span class="line">type PetList = [Dog, Cat];</span><br><span class="line"></span><br><span class="line">2. interface能够声明合并</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">interface User &#123;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line">=</span><br><span class="line">/**</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="ts-中如何实现一个函数的重载"><a href="#ts-中如何实现一个函数的重载" class="headerlink" title="ts 中如何实现一个函数的重载"></a>ts 中如何实现一个函数的重载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js是动态类型语言，所以是没有overload的，但js可以在运行的时候判断类型</span><br><span class="line">ts的重载只是重载函数声明，函数的实现还是只有一个</span><br></pre></td></tr></table></figure><h2 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable //被观察者</span><br><span class="line">Observer // 观察者</span><br><span class="line">Reaction //响应</span><br><span class="line"></span><br><span class="line">mobx底层对数据的观察是使用Object.defineProperty(mobx4)或Proxy(mobx5)</span><br><span class="line">observer这个装饰器，对react组件的render方法进行跟踪，将render方法加入到各个observable的依赖中，当observale发生变化的时候，就会调用forceUpdate更新组件</span><br><span class="line">（mobx4将Array用类数组对象来模拟的，通过包装类封装为一个对象）</span><br></pre></td></tr></table></figure><h2 id="webpack-常用-loader"><a href="#webpack-常用-loader" class="headerlink" title="webpack 常用 loader"></a>webpack 常用 loader</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样式：style-loader、css-loader、less-loader、sass-loader</span><br><span class="line">文件：file-loader、url-loader</span><br><span class="line">编译：babel-loader、ts-loader</span><br><span class="line">校验：eslint-loader</span><br><span class="line"></span><br><span class="line">常用的plugin</span><br><span class="line">html-webpack-plugin</span><br><span class="line">webpack-bundle-analyzer 打包分析</span><br><span class="line">HotModuleReplacementPlugin 热更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自己写webpack插件：</span><br><span class="line">主要就是通过访问compliler和compilation拦截webpack的执行</span><br></pre></td></tr></table></figure><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">垃圾收集器会定期（周期性）的找出那些不再继续使用的变量，释放其内存，因为开销比较大，所以会按照固定的时间间隔周期性的执行</span><br><span class="line"></span><br><span class="line">最常用的两种方法：标记清除（常用）和引用计数</span><br><span class="line"></span><br><span class="line">标记清除：变量进入作用域，进行标记，离开作用域进行清除回收</span><br><span class="line"></span><br><span class="line">引用计数：就是跟踪记录每个值被引用的次数，引用一次加1，删除减1，引用计数为0时，进行回收，（循环引用可能会导致内存泄漏）</span><br><span class="line"></span><br><span class="line">常见的内存泄漏原因：</span><br><span class="line">全局变量过多引起内存泄漏</span><br><span class="line">闭包</span><br><span class="line">dom事件未清除</span><br><span class="line">循环引用</span><br></pre></td></tr></table></figure><h2 id="谈谈你对-webpack-的理解？"><a href="#谈谈你对-webpack-的理解？" class="headerlink" title="谈谈你对 webpack 的理解？"></a>谈谈你对 webpack 的理解？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack是一个打包模块化js的工具，在webpack里一切文件皆模块</span><br><span class="line">，通过loader转换，通过plugin注入钩子，最后输出由多个</span><br><span class="line">模块组合成的文件，webpack专注构建模块化。WebPack可</span><br><span class="line">以看做是模块的打包机器：它做的事情是，分析你的项目</span><br><span class="line">结构，找到js模块及其它的一些浏览器不能直接运行的</span><br><span class="line">拓展语言，例如：Scss，TS等，并将其打包为合适的格式</span><br><span class="line">以供浏览器使用。</span><br></pre></td></tr></table></figure><h2 id="说说-webpack-与-grunt、gulp-的不同？"><a href="#说说-webpack-与-grunt、gulp-的不同？" class="headerlink" title="说说 webpack 与 grunt、gulp 的不同？"></a>说说 webpack 与 grunt、gulp 的不同？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">三者都是前端构建工具，grunt和gulp在早期比较流行，</span><br><span class="line">现在webpack相对来说比较主，不过一些轻量化的任务</span><br><span class="line">还是会用gulp来处理，比如单独打包CSS文件等。</span><br><span class="line"></span><br><span class="line">grunt和gulp是基于任务和流（Task、Stream）的。</span><br><span class="line">类似jQuery，找到一个（或一类）文件，对其做一</span><br><span class="line">系列链式操作，更新流上的数据，整条链式操作</span><br><span class="line">构成了一个任务，多个任务就构成了web的构建流程。</span><br><span class="line"></span><br><span class="line">webpack是基于入口的。webpack会自动地递归解析</span><br><span class="line">入口所需要加载的所有资源文件，然后用不同的</span><br><span class="line">Loader来处理不同的文件，用Plugin来扩展webpack功能。</span><br><span class="line"></span><br><span class="line">所以，从构建来说，gulp和grunt需要开发者将整个</span><br><span class="line">前端构建过程拆分成多个`Task`，并合理控制所有`Task`的</span><br><span class="line">调用关系；webpack需要开发者找到入口，并需要清楚对</span><br><span class="line">于不同的资源应该使什么Loader做何种解析和加工对</span><br><span class="line">于知识背景来说，gulp更像后端开发者的思路，</span><br><span class="line">需要对于整个流程了如指掌webpack更倾向于前端开发者的思路</span><br></pre></td></tr></table></figure><h2 id="什么是-bundle-什么是-chunk，什么是-module"><a href="#什么是-bundle-什么是-chunk，什么是-module" class="headerlink" title="什么是 bundle,什么是 chunk，什么是 module?"></a>什么是 bundle,什么是 chunk，什么是 module?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bundle：是由webpack打包出来的文件</span><br><span class="line">chunk：代码块，一个chunk由多个模块组合而成，用于代码的合并和分割</span><br><span class="line">module：是开发中的单个模块，在webpack的世界，一切皆模块，一个模块对应一个文件，webpack会从配置的entry中递归开始找出所有依赖的模块</span><br></pre></td></tr></table></figure><h2 id="什么是-Loader-什么是-Plugin"><a href="#什么是-Loader-什么是-Plugin" class="headerlink" title="什么是 Loader?什么是 Plugin?"></a>什么是 Loader?什么是 Plugin?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Loaders是用来告诉webpack如何转化处理某一类型的文件，</span><br><span class="line">并且引入到打包出的文中</span><br><span class="line">2）Plugin是用来自定义webpack打包过程的方式，</span><br><span class="line">一个插件是含有apply方法的一个，通过这个方法可以参与</span><br><span class="line">到整个webpack打包的各个流程(生命周期)。</span><br></pre></td></tr></table></figure><h2 id="有哪些常见的-Loader？他们是解决什么问题的？"><a href="#有哪些常见的-Loader？他们是解决什么问题的？" class="headerlink" title="有哪些常见的 Loader？他们是解决什么问题的？"></a>有哪些常见的 Loader？他们是解决什么问题的？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file-loader：把文件输出到一个文件夹中，在代码中通过</span><br><span class="line">相对URL去引用输出的文件</span><br><span class="line">url-loader：和file-loader类似，但是能在文件很小的情况下</span><br><span class="line">以base64的方式把文件内容注入到代码中去</span><br><span class="line">source-map-loader：加载额外的Source Map文件，以方便断点调试</span><br><span class="line">image-loader：加载并且压缩图片文件</span><br><span class="line">babel-loader：把ES6转换成ES5</span><br><span class="line">css-loader：加载CSS，支持模块化、压缩、文件导入等特性</span><br><span class="line">style-loader：把CSS代码注入到JavaScript中，通过DOM操作去加载CSS。</span><br><span class="line">eslint-loader：通过ESLint检查JavaScript代码</span><br></pre></td></tr></table></figure><h2 id="有哪些常见的-Plugin？他们是解决什么问题的？"><a href="#有哪些常见的-Plugin？他们是解决什么问题的？" class="headerlink" title="有哪些常见的 Plugin？他们是解决什么问题的？"></a>有哪些常见的 Plugin？他们是解决什么问题的？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define-plugin：定义环境变量</span><br><span class="line">commons-chunk-plugin：提取公共代码</span><br><span class="line">uglifyjs-webpack-plugin：通过UglifyES压缩ES6代码</span><br></pre></td></tr></table></figure><h2 id="Loader-和-Plugin-的不同？"><a href="#Loader-和-Plugin-的不同？" class="headerlink" title="Loader 和 Plugin 的不同？"></a>Loader 和 Plugin 的不同？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">不同的作用</span><br><span class="line">Loader直译为&quot;加载器&quot;。Webpack将一切文件视为模块，</span><br><span class="line">但是webpack原生是只能解析js文件，如果想将其他文件</span><br><span class="line">也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</span><br><span class="line"></span><br><span class="line">Plugin直译为&quot;插件&quot;。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</span><br><span class="line"></span><br><span class="line">不同的用法</span><br><span class="line">Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么</span><br><span class="line">类型的文件（test），使用什么加载(loader)和使用的参数（options）</span><br><span class="line"></span><br><span class="line">Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。</span><br></pre></td></tr></table></figure><h2 id="webpack-的构建流程是什么"><a href="#webpack-的构建流程是什么" class="headerlink" title="webpack 的构建流程是什么?"></a>webpack 的构建流程是什么?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</span><br><span class="line">初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</span><br><span class="line">开始编译：用上一步得到的参数初始化Compiler对象，</span><br><span class="line">加载所有配置的插件，执行对象的 run 方法开始执行编译；</span><br><span class="line"></span><br><span class="line">确定入口：根据配置中的 entry 找出所有的入口文件；</span><br><span class="line"></span><br><span class="line">编译模块：从入口文件出发，调用所有配置的 Loader</span><br><span class="line">对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到</span><br><span class="line">所有入口依赖的文件都经过了本步骤的处理；</span><br><span class="line"></span><br><span class="line">完成模块编译：在经过第4步使用Loader翻译完所有模块后，</span><br><span class="line">得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</span><br><span class="line"></span><br><span class="line">输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk转换成一个单独的文件加入到输</span><br><span class="line">出列表，这步是可以修改输出内容的最后机会；</span><br><span class="line"></span><br><span class="line">输出完成：在确定好输出内容后，根据配置确定输出的</span><br><span class="line">路径和文件名，把文件内容写入到文件系统。</span><br><span class="line"></span><br><span class="line">在以上过程中，Webpack会在特定的时间点广播出特定</span><br><span class="line">的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，</span><br><span class="line">并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</span><br></pre></td></tr></table></figure><h2 id="描述一下编写-loader-或-plugin-的思路？"><a href="#描述一下编写-loader-或-plugin-的思路？" class="headerlink" title="描述一下编写 loader 或 plugin 的思路？"></a>描述一下编写 loader 或 plugin 的思路？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loader像一个&quot;翻译官&quot;把读到的源文件内容转义成新的文件内容，</span><br><span class="line">并且每个Loader通过链式操作，将源文件一步步翻译成想要的样子。</span><br><span class="line">编写Loader时要遵循单一原则，每个Loader只做一种&quot;转义&quot;工作。 每个Loader的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用this.callback()方法，将内容返回给webpack。 还可以通过 this.async()生成一个callback函数，再用这个callback将处理后的内容输出出去。 此外webpack还为开发者准备了开发loader的工具函数集——loader-utils。</span><br><span class="line">相对于Loader而言，Plugin的编写就灵活了许多。 webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</span><br></pre></td></tr></table></figure><h2 id="如何利用-webpack-来优化前端性能？"><a href="#如何利用-webpack-来优化前端性能？" class="headerlink" title="如何利用 webpack 来优化前端性能？"></a>如何利用 webpack 来优化前端性能？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">用webpack优化前端性能是指优化webpack的输出结果，</span><br><span class="line">让打包的最终结果在浏览器运行快速高效。</span><br><span class="line"></span><br><span class="line">压缩代码。删除多余的代码、注释、简化代码的写法等等方式。</span><br><span class="line">可以利用webpack的UglifyJsPlugin和ParallelUglifyPlugin来压缩JS文件</span><br><span class="line">，利用cssnano（css-loader?minimize）来压缩css</span><br><span class="line"></span><br><span class="line">利用CDN加速。在构建过程中，将引用的静态资源路径修改为CDN上对</span><br><span class="line">应的路径。可以利用webpack对于output参数和各loader的publicPath</span><br><span class="line">参数来修改资源路径</span><br><span class="line"></span><br><span class="line">删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。</span><br><span class="line"></span><br><span class="line">可以通过在启动webpack时追加参数--optimize-minimize来</span><br><span class="line">实现提取公共代码。</span><br></pre></td></tr></table></figure><h2 id="如何提高-webpack-的构建速度？"><a href="#如何提高-webpack-的构建速度？" class="headerlink" title="如何提高 webpack 的构建速度？"></a>如何提高 webpack 的构建速度？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">多入口情况下，使用CommonsChunkPlugin来提取公共代码</span><br><span class="line">通过externals配置来提取常用库</span><br><span class="line">利用DllPlugin和DllReferencePlugin预编译资源模块 通过DllPlugin来对那些我们引用但是绝对不会修改的npm包来进行预编译，</span><br><span class="line">再通过DllReferencePlugin将预编译的模块加载进来。</span><br><span class="line">使用Happypack 实现多线程加速编译</span><br><span class="line">使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度</span><br><span class="line">使用Tree-shaking和Scope Hoisting来剔除多余代码</span><br></pre></td></tr></table></figure><h2 id="怎么配置单页应用？怎么配置多页应用？"><a href="#怎么配置单页应用？怎么配置多页应用？" class="headerlink" title="怎么配置单页应用？怎么配置多页应用？"></a>怎么配置单页应用？怎么配置多页应用？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单页应用可以理解为webpack的标准模式，直接在entry中指定单页应用的入口即可，这里不再赘述多页应用的话，可以使用webpack的AutoWebPlugin来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。</span><br><span class="line">多页应用中要注意的是：每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套css样式表,随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置</span><br></pre></td></tr></table></figure><h2 id="vue-项目中实现按需加载？"><a href="#vue-项目中实现按需加载？" class="headerlink" title="vue 项目中实现按需加载？"></a>vue 项目中实现按需加载？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为了快速开发前端项目，经常会引入现成的UI组件库如ElementUI、iView等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。</span><br><span class="line">不过很多组件库已经提供了现成的解决方案，如Element出品的babel-plugin-component和AntDesign出品的babel-plugin-import 安装以上插件后，在.babelrc配置中或babel-loader的参数中进行设置，即可实现组件按需加载了。</span><br><span class="line"></span><br><span class="line">单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。</span><br><span class="line"></span><br><span class="line">通过import(*)语句来控制加载时机，webpack内置了对于import(*)的解析，会将import(*)中引入的模块作为一个新的入口在生成一个chunk。当代码执行到import(*)语句时，会去加载Chunk对应生成的文件。import()会返回一个Promise对象，所以为了让浏览器支持，需要事先注入Promise polyfill</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;从浏览器地址栏输入-url-到显示页面的步骤&quot;&gt;&lt;a href=&quot;#从浏览器地址栏输入-url-到显示页面的步骤&quot; class=&quot;headerlink&quot; title=&quot;从浏览器地址栏输入 url 到显示页面的步骤&quot;&gt;&lt;/a&gt;从浏览器地址栏输入 url 到显示页面的步骤&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>单页面应用前端路由原理</title>
    <link href="https://github.com/foolishmax/2022/03/14/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/"/>
    <id>https://github.com/foolishmax/2022/03/14/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/</id>
    <published>2022-03-14T07:09:06.000Z</published>
    <updated>2022-07-30T04:13:04.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是单页面应用？"><a href="#什么是单页面应用？" class="headerlink" title="什么是单页面应用？"></a>什么是单页面应用？</h2><span id="more"></span><p>单页面应用是指第一次进入页面的时候会请求一个 html 文件，切换到其他组件的时候，虽然路径会发生相应的变化，但是没有新的 html 文件请求，原理是 js 会感知到 url 的变化，js 会动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这时候的路由不是后端做的而是由前端来做，来判断页面到底显示哪个组件，这个过程就是单页面的应用。</p><h2 id="单页面应用的优缺点"><a href="#单页面应用的优缺点" class="headerlink" title="单页面应用的优缺点"></a>单页面应用的优缺点</h2><p>优点：页面切换快，因为页面每次切换的时候，并不需要做 html 文件的请求，这样就减少的很多 http 发送的时延。</p><p>缺点：单页面应用的首屏加载时间比较慢，首屏加载需要一次 html 请求和一次 js 请求，时间相对较慢，而且 SEO 效果差，因为搜索引擎只认识 html 中的内容，但是单页面应用中内容很多需要靠 js 渲染出来，搜索引擎不识别这部分内容，就会导致 SEO 效果不好。</p><h2 id="什么是多页面应用？"><a href="#什么是多页面应用？" class="headerlink" title="什么是多页面应用？"></a>什么是多页面应用？</h2><p>多页面应用是指每一次页面跳转的时候，服务器都会返回一个新的 html 文档，这种类型的应用叫做多页应用。</p><h2 id="多页面应用的优缺点"><a href="#多页面应用的优缺点" class="headerlink" title="多页面应用的优缺点"></a>多页面应用的优缺点</h2><p>优点：首屏加载快，SEO 效果好，因为客户端向服务端发起请求的时候，服务器之返回了一个 html 页面，所以加载比较快。</p><p>缺钱：页面切换比较慢</p><h2 id="单页面应用和多页面应用的区别"><a href="#单页面应用和多页面应用的区别" class="headerlink" title="单页面应用和多页面应用的区别"></a>单页面应用和多页面应用的区别</h2><p>1.应用构成不同<br>多页面应用是由多个不同的页面构成，单页面应用是一个外壳页面和多个页面片段构成。</p><p>2.页面跳转方式不同<br>多页面应用的页面跳转是从一个页面跳转到另一个页面，而单页面则是把一个页面判断删除或隐藏，加载另一个页面片段。</p><p>3.跳转后公共资源是否重新加载<br>跳转后多页面应用需要重新进行加载，但是单页面不需要重新加载</p><p>4.用户体验不同<br>多页面应用首屏加载快但是切换慢，单页面应用首屏加载慢但是切换快</p><p>5.页面传递数据方式不同<br>多页面应用依靠 url、cookie、localstorage 来传递数据，单页面应用则是靠组件进行通信，相对更加简单。</p><h2 id="前端路由的原理"><a href="#前端路由的原理" class="headerlink" title="前端路由的原理"></a>前端路由的原理</h2><p>前端路由的原理本质上就是通过不刷新浏览器的请求下修改 url、检测 url 的变化，截获 url 的地址，通过解析、匹配路由规则从而实现 UI 的更新，路由的实现通常有两种实现：hash 模式、history 模式</p><h3 id="hash-路由的原理"><a href="#hash-路由的原理" class="headerlink" title="hash 路由的原理"></a>hash 路由的原理</h3><p>在 hash 模式下，在 url 中#后面的部分表示的是一个客户端状态，当这部分发生变化的时候，浏览器本身就不会刷新，这样就满足了第一个条件，即在不刷新浏览器的情况下修改浏览器链接，同事通过监听 hashChange 事件来监听 url 中 hash 值的变化，触发相关函数，改变相关组件。</p><h3 id="history-路由的原理"><a href="#history-路由的原理" class="headerlink" title="history 路由的原理"></a>history 路由的原理</h3><p>history 模式利用 html5 中 history API，history.pushState 和 history.replaceState 这两个方法可以在不刷新页面的情况下，操作浏览器的历史记录，然后通过 popState 事件来监听 url 的变化，从而触发相关函数，改变相关组件。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是单页面应用？&quot;&gt;&lt;a href=&quot;#什么是单页面应用？&quot; class=&quot;headerlink&quot; title=&quot;什么是单页面应用？&quot;&gt;&lt;/a&gt;什么是单页面应用？&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>100道前端优质面试题</title>
    <link href="https://github.com/foolishmax/2022/03/11/100%E9%81%93%E5%89%8D%E7%AB%AF%E4%BC%98%E8%B4%A8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://github.com/foolishmax/2022/03/11/100%E9%81%93%E5%89%8D%E7%AB%AF%E4%BC%98%E8%B4%A8%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-03-11T09:46:11.000Z</published>
    <updated>2022-07-30T04:08:11.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><span id="more"></span><ul><li>程序执行时需要的计算量和内存空间</li><li>复杂度是数量级，不是具体的数字</li><li>一般是针对一个具体的算法，而非一个完整的系统</li></ul><h2 id="将一个数组旋转-K-步"><a href="#将一个数组旋转-K-步" class="headerlink" title="将一个数组旋转 K 步"></a>将一个数组旋转 K 步</h2><ul><li>输入一个数组[1, 2, 3, 4, 5, 6, 7]</li><li>k=3,即旋转 3 步</li><li>输出[5, 6, 7, 1, 2, 3, 4]</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 步数</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n^2),空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate1</span>(<span class="params">arr: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!k || length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> step = <span class="title class_">Math</span>.<span class="title function_">abs</span>(k % length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; step; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// unshift内置api时间复杂度位O(n),开销比较大</span></span><br><span class="line">      arr.<span class="title function_">unshift</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 步数</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(1)，空间复杂度O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate2</span>(<span class="params">arr: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!k || length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> step = <span class="title class_">Math</span>.<span class="title function_">abs</span>(k % length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> part1 = arr.<span class="title function_">slice</span>(-step);</span><br><span class="line">  <span class="keyword">const</span> part2 = arr.<span class="title function_">slice</span>(<span class="number">0</span>, length - step);</span><br><span class="line">  <span class="keyword">const</span> part3 = part1.<span class="title function_">concat</span>(part2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> * <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;rotate1&quot;</span>);</span><br><span class="line"><span class="title function_">rotate1</span>(arr, <span class="number">9</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;rotate1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;rotate2&quot;</span>);</span><br><span class="line"><span class="title function_">rotate2</span>(arr, <span class="number">9</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;rotate2&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="判断字符串是否括号匹配"><a href="#判断字符串是否括号匹配" class="headerlink" title="判断字符串是否括号匹配"></a>判断字符串是否括号匹配</h2><ul><li>一个字符串 s 可能包含{}()[]三种括号</li><li>判断 s 是否是括号匹配的</li><li>如（a{b}c）匹配，而{a(b 或者{a(b}c)就是不匹配的</li></ul><p>栈 vs 数组<br>栈：逻辑结构，理论模型，不管如何实现，不受任何语言的限制。<br>数组：物理结构，真实的功能实现，受限于编程语言。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMatch</span>(<span class="params">left: <span class="built_in">string</span>, right: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&quot;&#123;&quot;</span> &amp;&amp; right === <span class="string">&quot;&#125;&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&quot;(&quot;</span> &amp;&amp; right === <span class="string">&quot;)&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&quot;[&quot;</span> &amp;&amp; right === <span class="string">&quot;]&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">matchBracket</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> leftSymbols = <span class="string">&quot;&#123;[(&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> rightSymbols = <span class="string">&quot;)]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 时间复杂度O(n),空间复杂度O(n)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> s = str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftSymbols.<span class="title function_">includes</span>(s)) &#123;</span><br><span class="line">      <span class="comment">// 左括号，压栈</span></span><br><span class="line">      stack.<span class="title function_">push</span>(s);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSymbols.<span class="title function_">includes</span>(s)) &#123;</span><br><span class="line">      <span class="keyword">const</span> top = stack[stack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断右括号是否匹配</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isMatch</span>(top, s)) &#123;</span><br><span class="line">        stack.<span class="title function_">pop</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个栈实现一个队列"><a href="#两个栈实现一个队列" class="headerlink" title="两个栈实现一个队列"></a>两个栈实现一个队列</h2><ul><li>请用两个栈实现一个队列</li><li>API：add delete length</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">stack1</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">stack2</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">push</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delete</span>(): <span class="built_in">number</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (stack1.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = stack1.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack2.<span class="title function_">push</span>(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = stack2.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (stack2.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = stack2.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack1.<span class="title function_">push</span>(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义一个-js-函数，反转单向链表"><a href="#定义一个-js-函数，反转单向链表" class="headerlink" title="定义一个 js 函数，反转单向链表"></a>定义一个 js 函数，反转单向链表</h2><p>链表是一种物理结构(非逻辑结构),类似数组<br>数组需要一段连续的内存空间，而链表是零散的<br>链表节点的数据结构{ value, next?, prev? }</p><p>链表 vs 数组<br>都是有序结构<br>链表：查询慢 O(n),新增和删除快 O(1)<br>数组：查询快 O(1),新增和删除慢 O(n)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  next?: <span class="title class_">ILinkListNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLinkList</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;arr is empty&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">curNode</span>: <span class="title class_">ILinkListNode</span> = &#123;</span><br><span class="line">    <span class="attr">value</span>: arr[length - <span class="number">1</span>],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">1</span>) <span class="keyword">return</span> curNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    curNode = &#123;</span><br><span class="line">      <span class="attr">value</span>: arr[i],</span><br><span class="line">      <span class="attr">next</span>: curNode,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="keyword">const</span> list = <span class="title function_">createLinkList</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转单向链表，返回反转后的head node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listNode 需要操作的链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseLinkList</span>(<span class="params">listNode: ILinkListNode</span>): <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">prevNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">curNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">nextNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span> = listNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (nextNode) &#123;</span><br><span class="line">    <span class="comment">// 第一个元素，删除next指针，防止循环引用</span></span><br><span class="line">    <span class="keyword">if</span> (curNode &amp;&amp; !prevNode) &#123;</span><br><span class="line">      <span class="keyword">delete</span> curNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转指针</span></span><br><span class="line">    <span class="keyword">if</span> (curNode &amp;&amp; prevNode) &#123;</span><br><span class="line">      curNode.<span class="property">next</span> = prevNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prevNode = curNode;</span><br><span class="line">    curNode = nextNode;</span><br><span class="line">    nextNode = nextNode?.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理链表最后一个元素</span></span><br><span class="line">  curNode!.<span class="property">next</span> = prevNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curNode!;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverseList = <span class="title function_">reverseLinkList</span>(list);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;reverseList&quot;</span>, reverseList);</span><br></pre></td></tr></table></figure><h2 id="用链表实现队列"><a href="#用链表实现队列" class="headerlink" title="用链表实现队列"></a>用链表实现队列</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">head</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">tail</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入队，在tail位置</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">newNode</span>: <span class="title class_">ILinkListNode</span> = &#123;</span><br><span class="line">      <span class="attr">value</span>: n,</span><br><span class="line">      <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tail</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">len</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出队，在head位置</span></span><br><span class="line">  <span class="title function_">delete</span>(): <span class="built_in">number</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span> || <span class="variable language_">this</span>.<span class="property">len</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">len</span>--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">len</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">200</span>);</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">300</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;length&quot;</span>, queue.<span class="property">length</span>); <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">delete</span>()); <span class="comment">//100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;length2&quot;</span>, queue.<span class="property">length</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="链表和数组，哪个实现队列更快？"><a href="#链表和数组，哪个实现队列更快？" class="headerlink" title="链表和数组，哪个实现队列更快？"></a>链表和数组，哪个实现队列更快？</h2><ul><li>空间复杂度都是 O(n)</li><li>add 时间复杂度：链表 O(1)，数组 O(1);</li><li>delete 时间复杂度：链表 O(1)，数组 O(n);</li></ul><h2 id="实现二分查找"><a href="#实现二分查找" class="headerlink" title="实现二分查找"></a>实现二分查找</h2><ul><li>凡有序，必二分</li><li>凡二分，时间复杂度必包含 O(logn)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环的方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 查找的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment"> * 返回目标索引下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch1</span>(<span class="params">arr: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endIndex = length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (startIndex &lt;= endIndex) &#123;</span><br><span class="line">    <span class="keyword">const</span> midIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((startIndex + endIndex) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> midValue = arr[midIndex];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target &lt; midValue) &#123;</span><br><span class="line">      endIndex = midIndex - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; midValue) &#123;</span><br><span class="line">      startIndex = midIndex + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> midIndex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找-递归的方式</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> arr 查找的数组</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> <span class="variable">startIndex</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> <span class="variable">endIndex</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch2</span>(<span class="params"></span></span><br><span class="line"><span class="params">  arr: <span class="built_in">number</span>[],</span></span><br><span class="line"><span class="params">  target: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  startIndex?: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  endIndex?: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!startIndex) startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!endIndex) endIndex = length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (startIndex &gt; endIndex) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> midIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((startIndex + endIndex) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> midValue = arr[midIndex];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (target &lt; midValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch2</span>(arr, target, startIndex, midIndex - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; midValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch2</span>(arr, target, midIndex + <span class="number">1</span>, endIndex);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> midIndex;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能测试</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">const</span> target = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch1</span>(arr, target));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch2</span>(arr, target));</span><br></pre></td></tr></table></figure><h2 id="给定一个递增的数组，找出其中和为-n-的两个元素"><a href="#给定一个递增的数组，找出其中和为-n-的两个元素" class="headerlink" title="给定一个递增的数组，找出其中和为 n 的两个元素"></a>给定一个递增的数组，找出其中和为 n 的两个元素</h2><ul><li>有一个递增的数组[1, 2, 4, 7, 11, 15]和一个 n = 15</li><li>数组中有两个数和为 n，即 4+11=15</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嵌套循环 时间复杂度：O(n^2)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 操作数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findTwoNumbers1</span>(<span class="params">arr: <span class="built_in">number</span>[], n: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 时间复杂度：O(n^2)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n1 = arr[i];</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> n2 = arr[j];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n1 + n2 === n) &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(n1, n2);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双指针，时间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 操作数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  思路：</span></span><br><span class="line"><span class="comment">  定义i指向头，j指向尾，求arr[i] + arr[j]</span></span><br><span class="line"><span class="comment">  如果大于n，则j需要向前移动</span></span><br><span class="line"><span class="comment">  如果小于n，则j需要向后移动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findTwoNumbers2</span>(<span class="params">arr: <span class="built_in">number</span>[], n: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">const</span> n1 = arr[i];</span><br><span class="line">    <span class="keyword">const</span> n2 = arr[j];</span><br><span class="line">    <span class="keyword">const</span> sum = n1 + n2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sum &gt; n) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; n) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(n1, n2);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求一个二叉搜索树（BST）的第-k-小值"><a href="#求一个二叉搜索树（BST）的第-k-小值" class="headerlink" title="求一个二叉搜索树（BST）的第 k 小值"></a>求一个二叉搜索树（BST）的第 k 小值</h2><ul><li>前序(根左右)，中序(左根右)，后序(左右根)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ItreeNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">left</span>: <span class="title class_">ItreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">right</span>: <span class="title class_">ItreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bstTree</span>: <span class="title class_">ItreeNode</span> = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">left</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">right</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树中序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树后序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求二叉搜索树第k值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node bst tree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 第k个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getKthValue</span>(<span class="params">node: ItreeNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(node.<span class="property">value</span>);</span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[k - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列（递归）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度O(2^n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列（循环）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n1 = <span class="number">1</span>; <span class="comment">// 记录n-1的结果</span></span><br><span class="line">  <span class="keyword">let</span> n2 = <span class="number">0</span>; <span class="comment">// 记录n-2的结果</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    res = n1 + n2;</span><br><span class="line">    n2 = n1;</span><br><span class="line">    n1 = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="青蛙跳台阶（动态规划思想解决问题）"><a href="#青蛙跳台阶（动态规划思想解决问题）" class="headerlink" title="青蛙跳台阶（动态规划思想解决问题）"></a>青蛙跳台阶（动态规划思想解决问题）</h2><ul><li>一只青蛙，一次可以跳 1 级，也可以跳 2 级</li><li>问：青蛙跳到 n 级台阶，总共有多少种方式？</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 答案同上一题</span></span><br></pre></td></tr></table></figure><h2 id="将数组中的-0-移动到末尾"><a href="#将数组中的-0-移动到末尾" class="headerlink" title="将数组中的 0 移动到末尾"></a>将数组中的 0 移动到末尾</h2><ul><li>如输入[1, 0, 3, 0, 11, 0],输出[1, 3, 11, 0, 0, 0]</li><li>只移动 0 ，其他顺序不变</li><li>必须在原数组进行操作</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (嵌套循环)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr number arr</span></span><br><span class="line"><span class="comment"> * 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZero1</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> zeroCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - zeroCount; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">      arr.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// O(n)</span></span><br><span class="line">      i--;</span><br><span class="line">      zeroCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (双指针)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr number arr</span></span><br><span class="line"><span class="comment"> * 时间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZero2</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line">  <span class="keyword">let</span> j = -<span class="number">1</span>; <span class="comment">// 指向第一个 0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        j = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = arr[i];</span><br><span class="line">      arr[i] = arr[j];</span><br><span class="line">      arr[j] = n;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// moveZero1(arr);</span></span><br><span class="line"><span class="title function_">moveZero2</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="计算字符串中连续最多的字符以及次数"><a href="#计算字符串中连续最多的字符以及次数" class="headerlink" title="计算字符串中连续最多的字符以及次数"></a>计算字符串中连续最多的字符以及次数</h2><ul><li>输入’abbbcccccccddeee1234412’</li><li>计算得到连续最多的字符是’c’,7 次</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度： O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="attr">char</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findContinuousChar1</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">IRes</span> = &#123;</span><br><span class="line">    <span class="attr">char</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempLength = <span class="number">0</span>; <span class="comment">// 临时记录当前连续字符的长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    tempLength = <span class="number">0</span>; <span class="comment">// 重置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (str[i] === str[j]) &#123;</span><br><span class="line">        tempLength++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (str[i] !== str[j] || j === length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempLength &gt; res.<span class="property">length</span>) &#123;</span><br><span class="line">          res.<span class="property">char</span> = str[i];</span><br><span class="line">          res.<span class="property">length</span> = tempLength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">          i = j - <span class="number">1</span>; <span class="comment">// 跳步</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双指针</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度： O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="attr">char</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findContinuousChar2</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">IRes</span> = &#123;</span><br><span class="line">    <span class="attr">char</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempLength = <span class="number">0</span>; <span class="comment">// 临时记录当前连续字符的长度</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] === str[j]) &#123;</span><br><span class="line">      tempLength++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[i] !== str[j] || i === length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果不相等或者 i 循环到了末尾</span></span><br><span class="line">      <span class="keyword">if</span> (tempLength &gt; res.<span class="property">length</span>) &#123;</span><br><span class="line">        res.<span class="property">char</span> = str[j];</span><br><span class="line">        res.<span class="property">length</span> = tempLength;</span><br><span class="line">      &#125;</span><br><span class="line">      tempLength = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">        j = i; <span class="comment">// 让 j 追上 i</span></span><br><span class="line">        i--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abbbcccccccddeee1234412&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findContinuousChar1</span>(str));</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">arr</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort1</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> midIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> midValue = arr.<span class="title function_">splice</span>(midIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">left</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">right</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意： splice会改变原数组，不能直接使用length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (n &lt; midValue) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort1</span>(left).<span class="title function_">concat</span>(midValue, <span class="title function_">quickSort1</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort1</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="对称数"><a href="#对称数" class="headerlink" title="对称数"></a>对称数</h2><ul><li>求 1 - 10000 之间的所有对称数（回文）</li><li>例如：0， 1， 2， 11， 22， 101， 232，1221</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findPalindromeNumbers1</span>(<span class="params">max: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">if</span> (max &lt; <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= max; i++) &#123;</span><br><span class="line">    <span class="comment">// 转换为字符转 -&gt; 转换为数组 -&gt; 再反转 -&gt; 比较</span></span><br><span class="line">    <span class="keyword">const</span> s = i.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (s === s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPalindromeNumbers1</span>(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findPalindromeNumbers2</span>(<span class="params">max: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">if</span> (max &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= max; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = i;</span><br><span class="line">    <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// n: 123</span></span><br><span class="line">    <span class="comment">// rev: 321</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      rev = rev * <span class="number">10</span> + (n % <span class="number">10</span>);</span><br><span class="line">      n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i === rev) res.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPalindromeNumbers2</span>(<span class="number">200</span>));</span><br></pre></td></tr></table></figure><h2 id="高效的字符串前缀匹配"><a href="#高效的字符串前缀匹配" class="headerlink" title="高效的字符串前缀匹配"></a>高效的字符串前缀匹配</h2><ul><li>有一个英文单词库（数组），里面有几十万个英文单词</li><li>输入一个字符串，快速判断是不是某一个单词的前缀</li><li>（说明思路，不用写代码）</li></ul><p>思路一：</p><ol><li><p>遍历单词库数组</p></li><li><p>indexOf 判断前缀</p></li><li><p>实际时间复杂度超过 O(n),因为 indexOf 的计算量</p></li></ol><p>思路二（对象取 key 时间复杂度为 O(1)）：</p><ol><li><p>英文字母一共就 26 个，可以提前把单词库数组拆分为 26 个</p></li><li><p>第一层 26 个，第二层、第三层，继续拆分…</p></li><li><p>最后把单词库拆分为一颗树</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 树结构</span><br><span class="line">const wordsTree = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">    b: &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  c: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字千分位格式化"><a href="#数字千分位格式化" class="headerlink" title="数字千分位格式化"></a>数字千分位格式化</h2><ul><li>将数字千分位格式化，输出字符串</li><li>如输入数字 12050100，输出字符串 12,050,100</li><li>(注意：逆序判断)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 使用数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format1</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n); <span class="comment">// 只考虑整数</span></span><br><span class="line">  <span class="keyword">const</span> reverseArr = n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> reverseArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">        <span class="keyword">return</span> curr + <span class="string">&quot;,&quot;</span> + prev;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> curr + prev;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 使用字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format2</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> str = n.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = length - i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">        res = str[i] + res;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = <span class="string">&quot;,&quot;</span> + str[i] + res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res = str[i] + res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切换字母大小写"><a href="#切换字母大小写" class="headerlink" title="切换字母大小写"></a>切换字母大小写</h2><ul><li>输入一个字符串，切换其中字母的大小写</li><li>如：输入字符串 12aBc34，输出字符串 12AbC34</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchLetterCase1</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> length = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/[a-z]/</span>;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg1.<span class="title function_">test</span>(c)) &#123;</span><br><span class="line">      res += c.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg2.<span class="title function_">test</span>(c)) &#123;</span><br><span class="line">      res += c.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ASCII 编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchLetterCase2</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> length = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/[a-z]/</span>;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line">    <span class="keyword">const</span> code = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65</span> &amp;&amp; code &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">      res += c.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code &gt;= <span class="number">97</span> &amp;&amp; code &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">      res += c.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为何-0-1-0-2-0-3"><a href="#为何-0-1-0-2-0-3" class="headerlink" title="为何 0.1+0.2 !==0.3?"></a>为何 0.1+0.2 !==0.3?</h2><ul><li><p>计算机使用二进制存储数据</p></li><li><p>整数转二进制没有误差</p></li><li><p>小数可能无法用二进制准确表达</p></li></ul><h2 id="请说明-ajax、fetch、axios-三者的区别？"><a href="#请说明-ajax、fetch、axios-三者的区别？" class="headerlink" title="请说明 ajax、fetch、axios 三者的区别？"></a>请说明 ajax、fetch、axios 三者的区别？</h2><ul><li><p>ajax(asynchronous javascript xml),一种技术统称</p></li><li><p>fetch，一个具体的 API</p></li><li><p>axios，第三方库 <a href="https://axios-http.com/">https://axios-http.com/</a></p></li></ul><h2 id="节流和防抖：两者有什么区别？分别用于什么场景？"><a href="#节流和防抖：两者有什么区别？分别用于什么场景？" class="headerlink" title="节流和防抖：两者有什么区别？分别用于什么场景？"></a>节流和防抖：两者有什么区别？分别用于什么场景？</h2><ul><li><p>防抖</p><ol><li>例如：一个搜索输入框，等输入停止后，再出发搜索</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">200</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>节流<ol><li>drag 或 scroll 期间出发某个回调，要设置一个时间间隔</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="number">0</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="px-em-rem-vw-vh有什么区别？"><a href="#px-em-rem-vw-vh有什么区别？" class="headerlink" title="px % em rem vw/vh有什么区别？"></a><em>px % em rem vw/vh</em>有什么区别？</h2><ul><li><p>px 基本单位，是绝对单位（其他的都是相对单位）</p></li><li><p>% 是相对于父元素的宽度比例</p></li><li><p>em 相对于当前元素的 font-size</p></li><li><p>rem 相对于跟元素的 font-size</p></li><li><p>vw 屏幕宽度的 1%</p></li><li><p>vh 屏幕高度的 1%</p></li><li><p>vmin 取 vw、vh 两者中的最小值</p></li><li><p>vmax 取 vw、vh 两者中的最大值</p></li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li><p>箭头函数的特点</p><ol><li>没有 arguments</li><li>无法通过 apply、call、bind 改变 this</li><li>某些肩头函数代码难以阅读</li></ol></li></ul><h2 id="for…in-和-for…of-有什么区别"><a href="#for…in-和-for…of-有什么区别" class="headerlink" title="for…in 和 for…of 有什么区别"></a>for…in 和 for…of 有什么区别</h2><ul><li><p>key 和 value</p><ol><li>for…in 遍历得到 key</li><li>for…of 遍历得到 value</li></ol></li><li><p>适用于不同的数据类型</p><ol><li>遍历对象： for…in 可以，for…of 不可以</li><li>遍历 Map、Set：for…of 可以，for…in 不可以</li><li>遍历 generator：for…of 可以，for…in 不可以</li></ol></li><li><p>可枚举 vs 可迭代</p><ol><li>for…in 用于可枚举（Object.getOwnPropertyDescriptors(obj)）数据，如对象、数组、字符串</li><li>for…of 用于可迭代(arr[Symbol.iterator])数据，如数组、字符串、Map、Set</li></ol></li></ul><h2 id="for-await…of-有什么作用？"><a href="#for-await…of-有什么作用？" class="headerlink" title="for await…of 有什么作用？"></a>for await…of 有什么作用？</h2><ul><li>for await…of 用于遍历多个 Promise</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPromise</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="title function_">createPromise</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">const</span> p2 = <span class="title function_">createPromise</span>(<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">const</span> p3 = <span class="title function_">createPromise</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> list = [p1, p2, p3];</span><br><span class="line">  <span class="keyword">const</span> list2 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ---------------同时调用----------------</span></span><br><span class="line">  <span class="comment">// 方式一</span></span><br><span class="line">  <span class="comment">// const res1 = await p1;</span></span><br><span class="line">  <span class="comment">// console.log(res1);</span></span><br><span class="line">  <span class="comment">// const res2 = await p2;</span></span><br><span class="line">  <span class="comment">// console.log(res2);</span></span><br><span class="line">  <span class="comment">// const res3 = await p3;</span></span><br><span class="line">  <span class="comment">// console.log(res3);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式二</span></span><br><span class="line">  <span class="comment">// Promise.all(list).then((res) =&gt; console.log(res));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式三</span></span><br><span class="line">  <span class="comment">// for await (let res of list) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(res);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// -----------------逐步调用---------------</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> list2) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">createPromise</span>(value);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="offsetHeight、scrollHeight、clientHeight-区别？"><a href="#offsetHeight、scrollHeight、clientHeight-区别？" class="headerlink" title="offsetHeight、scrollHeight、clientHeight 区别？"></a>offsetHeight、scrollHeight、clientHeight 区别？</h2><ul><li><p>offsetHeight、offsetWidth: border + padding + content</p></li><li><p>clientHeight、clientWidth: padding + content</p></li><li><p>scrollHeight、scrollWidth: padding + 实际内容尺寸</p></li></ul><h2 id="HTMLCollection-和-NodeList-区别？"><a href="#HTMLCollection-和-NodeList-区别？" class="headerlink" title="HTMLCollection 和 NodeList 区别？"></a>HTMLCollection 和 NodeList 区别？</h2><ul><li><p>Node 和 Element</p><ol><li>DOM 是一棵树，所有节点都是 Node</li><li>Node 是 Element 的基类</li><li>Element 是其他 HTML 元素的基类，如 HTMLDivElement</li></ol></li><li><p>HTMLCollection 和 NodeList</p><ol><li>HTMLCollection 是 Element 的集合（elem.children）</li><li>NodeList 是 Node 集合（elem.childNodes）</li><li>HTMLCollection 不会包含 Text 和 Comment 节点，NodeList 则会包含</li></ol></li><li><p>HTMLCollection 和 NodeList 都不是数组，而是“累数组”</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(list);</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(list);</span><br><span class="line"><span class="keyword">const</span> arr3 = [...list];</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue-中-computed-和-watch-的区别？"><a href="#Vue-中-computed-和-watch-的区别？" class="headerlink" title="Vue 中 computed 和 watch 的区别？"></a>Vue 中 computed 和 watch 的区别？</h2><ul><li><p>用途不同</p><ol><li>computed 用于计算产生新的数据，有缓存</li><li>watch 用于监听现有数据</li></ol></li><li><p>扩展知识</p><ol><li>computed 有缓存</li><li>methods 没有缓存</li></ol></li></ul><h2 id="Vue-组件通讯的方式"><a href="#Vue-组件通讯的方式" class="headerlink" title="Vue 组件通讯的方式"></a>Vue 组件通讯的方式</h2><ul><li>props 和 $emit</li><li>自定义事件</li><li>$attrs</li><li>$parent</li><li>$refs</li><li>provide/inject</li><li>vuex</li></ul><h2 id="vuex-mutation-和-action-的区别？"><a href="#vuex-mutation-和-action-的区别？" class="headerlink" title="vuex mutation 和 action 的区别？"></a>vuex mutation 和 action 的区别？</h2><ul><li>mutation: 同步代码</li><li>action: 可包含异步代码</li></ul><h2 id="JS-严格模式有什么特点？"><a href="#JS-严格模式有什么特点？" class="headerlink" title="JS 严格模式有什么特点？"></a>JS 严格模式有什么特点？</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>; <span class="comment">//全局开启</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>; <span class="comment">// 局部开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特点<ol><li>全局变量必须先声明</li><li>禁止使用 with</li><li>this 指向 undefined 而不是 window</li><li>函数参数不能重名</li><li>eval 有单独作用域，不推荐使用</li></ol></li></ul><h2 id="HTTP-跨域请求事为什么发送-options-请求？"><a href="#HTTP-跨域请求事为什么发送-options-请求？" class="headerlink" title="HTTP 跨域请求事为什么发送 options 请求？"></a>HTTP 跨域请求事为什么发送 options 请求？</h2><ul><li>跨域请求<ol><li>浏览器同源策略</li><li>同源策略一般限制 ajax 网络请求，不能跨域请求 server</li><li>不会限制<code>&lt;link&gt; &lt;img&gt; &lt;script&gt; &lt;iframe&gt;</code> 加载第三方资源</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP</span></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">onSuccess</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://www.aaa.com/api/getData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"><span class="comment">// https://www.aaa.com/api/getData 返回一段字符串，交给前端执行达到传递数据的目的</span></span><br><span class="line"><span class="string">&#x27;onSuccess(&#123;data: &#123;/* 数据内容 */&#125;&#125;)&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CORS 配置允许跨域（服务端）</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>); <span class="comment">// 或者 *</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>);</span><br><span class="line">response.<span class="title function_">setHeader</span>(</span><br><span class="line">  <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">  <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span></span><br><span class="line">);</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>); <span class="comment">// 允许跨域接受cookie</span></span><br></pre></td></tr></table></figure><ul><li>答案<ol><li>options 请求，是跨域请求之前的预检查</li><li>浏览器自行发起的</li><li>不会影响实际的功能</li></ol></li></ul><h2 id="JS-内存泄漏如何检测？场景有哪些？"><a href="#JS-内存泄漏如何检测？场景有哪些？" class="headerlink" title="JS 内存泄漏如何检测？场景有哪些？"></a>JS 内存泄漏如何检测？场景有哪些？</h2><ul><li><p>垃圾回收 GC</p><ol><li>引用计数</li><li>标记清除</li></ol></li><li><p>场景</p><ol><li>意外的全局变量</li><li>遗忘的定时器</li><li>使用不当的闭包</li><li>遗漏的 DOM 元素</li><li>网络回调</li></ol></li><li><p>内存泄漏属于非预期的，闭包是主动行为，闭包非内存泄漏</p></li><li><p>可以使用 chrome devtools 的 performance 和 memory 工具类检测 js 内存</p></li><li><p><a href="https://www.cnblogs.com/dasusu/p/12200176.html">参考</a></p></li></ul><h2 id="vdom-真的很快吗？"><a href="#vdom-真的很快吗？" class="headerlink" title="vdom 真的很快吗？"></a>vdom 真的很快吗？</h2><ul><li><p>js 直接操作 dom 才是最快的，vdom 并不快</p></li><li><p>但是 vdom 是最合适“数据驱动视图”的技术方案</p></li></ul><h2 id="遍历数组，for-和-forEach-哪个快？"><a href="#遍历数组，for-和-forEach-哪个快？" class="headerlink" title="遍历数组，for 和 forEach 哪个快？"></a>遍历数组，for 和 forEach 哪个快？</h2><ul><li><p>时间复杂度都是 O(n)</p></li><li><p>结论：</p><ol><li>for 更快</li><li>forEach 每次都要创建一个函数来调用，而 for 不会创建函数</li><li>函数需要独立的作用域，会有额外的开销</li></ol></li></ul><h2 id="nodejs-如何开启进程，进程如何通讯？"><a href="#nodejs-如何开启进程，进程如何通讯？" class="headerlink" title="nodejs 如何开启进程，进程如何通讯？"></a>nodejs 如何开启进程，进程如何通讯？</h2><ul><li><p>进程 process VS 线程 thread</p><ol><li>进程： 进行资源分配和调度的最小单元，有独立内存空间</li><li>线程： 进行运算调度的最小单元，共享进程内存空间</li><li>js 是单线程的，但可以多进行执行，如 、WebWorker</li></ol></li><li><p>为何需要多进程？</p><ul><li>多核 CPU，更适合处理多进程</li><li>内存较大，多个进程才能更好的利用（单进程有内存上线）</li></ul></li><li><p>开启进程两种方法 child_process.fork， cluster.fork</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="property">fork</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/xxx&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 开启子进程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> computeProcess = <span class="title function_">fork</span>(<span class="string">&quot;./compute.js&quot;</span>);</span><br><span class="line">    computeProcess.<span class="title function_">send</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">    computeProcess.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;sum is&quot;</span> + data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    computeProcess.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子进程因报错而退出&quot;</span>);</span><br><span class="line">      computeProcess.<span class="title function_">kill</span>();</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;localhost: 3000 starting...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compute.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子进程id&quot;</span>, process.<span class="property">pid</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子进程接收到的数据&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sum = <span class="title function_">getSum</span>();</span><br><span class="line"></span><br><span class="line">  process.<span class="title function_">send</span>(sum);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cpuCoreLength = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpuCoreLength; i++) &#123;</span><br><span class="line">    cluster.<span class="title function_">fork</span>(); <span class="comment">// 开启子进程</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.<span class="title function_">on</span>(<span class="string">&quot;exit&quot;</span>, <span class="function">(<span class="params">worker</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子进程退出&quot;</span>);</span><br><span class="line">    cluster.<span class="title function_">fork</span>(); <span class="comment">// 进程守护</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请描述-JS-Bridge-的原理"><a href="#请描述-JS-Bridge-的原理" class="headerlink" title="请描述 JS Bridge 的原理"></a>请描述 JS Bridge 的原理</h2><ul><li><p>什么是 JS Bridge？</p><ul><li>js 无法直接调用 native API</li><li>需要通过一些特定的“格式”来调用</li><li>这些“格式”就统称 JS-Bridge，例如微信 JSSDK</li></ul></li><li><p>JS Bridge 的常见实现方式</p><ul><li>注册全局 API</li><li>URL Scheme</li></ul></li></ul><h2 id="requestIdleCallback-和-requestAnimationFrame-有什么区别？"><a href="#requestIdleCallback-和-requestAnimationFrame-有什么区别？" class="headerlink" title="requestIdleCallback 和 requestAnimationFrame 有什么区别？"></a>requestIdleCallback 和 requestAnimationFrame 有什么区别？</h2><ul><li><p>区别</p><ul><li>requestAnimationFrame 每次渲染完都会执行，高优先级</li><li>requestIdleCallback 空闲时候才执行，低优先级</li><li>requestAnimationFrame 比 requestIdleCallback 先执行，因为优先级高</li></ul></li><li><p>补充</p><ul><li>两者都是宏任务</li></ul></li></ul><h2 id="vue-生命周期？"><a href="#vue-生命周期？" class="headerlink" title="vue 生命周期？"></a>vue 生命周期？</h2><ul><li><p>befroeCreate</p><ul><li>创建一个空白的 Vue 实例</li><li>data、method 尚未被初始化，不可使用</li></ul></li><li><p>created</p><ul><li>vue 实例初始化完成，完成相应式绑定</li><li>data、method 都已经初始化完成，可以调用</li><li>尚未开始渲染模板</li></ul></li><li><p>beforeMount</p><ul><li>编译模板，调用 render 生成 vdom</li><li>还没有开始渲染 DOM</li></ul></li><li><p>mounted</p><ul><li>完成 DOM 渲染</li><li>组件创建完成</li><li>开始由“创建阶段”进入“运行阶段”</li></ul></li><li><p>beforeUpdate</p><ul><li>data 发生变化之后</li><li>准备更新 DOM （尚未更新 DOM）</li></ul></li><li><p>updated</p><ul><li>data 发生变化，且 DOM 更新完成</li><li>不要在 updated 中修改 data，可能会导致死循环</li></ul></li><li><p>beforeUnmount</p><ul><li>组件进入销毁阶段（尚未销毁，可以正常使用）</li><li>可移除、解绑一些全局事件、自定义事件</li></ul></li><li><p>unmounted</p><ul><li>组件被销毁了</li><li>所有子组件也被销毁了</li></ul></li><li><p>连环问：vue 什么时候操作 dom 比较合适？</p><ul><li>mounted 和 updated 都不能保证子组件全部挂载完成</li><li>使用 $nextTick 操作 dom</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 仅在整个视图都被渲染之后才会运行的代码</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>连环问：Ajax 应该放在那个生命周期？</p><ul><li>两个选择：created 和 mounted</li><li>推荐：mounted</li></ul></li><li><p>vue3 composition API 生命周期有什么区别？</p><ul><li>setup 代替了 beforeCreate 和 created</li><li>使用 hooks 函数的形式，如 mounted 改为 onMounted()</li></ul></li></ul><h2 id="Vue2、Vue3、React-三者-diff-算法有什么区别？"><a href="#Vue2、Vue3、React-三者-diff-算法有什么区别？" class="headerlink" title="Vue2、Vue3、React 三者 diff 算法有什么区别？"></a>Vue2、Vue3、React 三者 diff 算法有什么区别？</h2><ul><li>严格的 Tree diff 算法的时间复杂度是 O(n*3)</li><li>vue、react 框架对 tree diff 进行了优化 O(n)<ul><li>只比较同一层级，不跨级比较</li><li>tag 不同则删除重建</li><li>子节点通过 key 区分<ul><li>vdom diff 算法会根据 key 判断元素是否需要删除</li><li>匹配了 key，则只移动元素 - 性能较好</li><li>未匹配 key，则删除重建 - 性能较差</li></ul></li></ul></li><li>区别<ul><li>react 仅右移</li><li>vue2 双端比较</li><li>vue3 最长递增子序列</li></ul></li></ul><h2 id="Vue-router-三种模式（React-router-也一样）"><a href="#Vue-router-三种模式（React-router-也一样）" class="headerlink" title="Vue-router 三种模式（React-router 也一样）"></a>Vue-router 三种模式（React-router 也一样）</h2><ul><li>Hash</li><li>WebHistory</li><li>MemoryHistory（v4 之前叫做 abstract history）</li></ul><h2 id="移动端-H5-click-有-300ms-延迟，如何解决？"><a href="#移动端-H5-click-有-300ms-延迟，如何解决？" class="headerlink" title="移动端 H5 click 有 300ms 延迟，如何解决？"></a>移动端 H5 click 有 300ms 延迟，如何解决？</h2><ul><li><p>背景：double tap to zoom</p></li><li><p>初期解决方案 FastClick</p><ul><li>监听 touchend 事件(touchstart touchend 会先于 click 触发)</li><li>使用自定义 DOM 事件模拟一个 click 事件</li><li>把默认的 click 事件(300ms 之后触发)禁止掉</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;load&quot;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>现代浏览器的改进（width=device-width）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;id=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="网络请求中，token-和-cookie-有什么区别？"><a href="#网络请求中，token-和-cookie-有什么区别？" class="headerlink" title="网络请求中，token 和 cookie 有什么区别？"></a>网络请求中，token 和 cookie 有什么区别？</h2><ul><li><p>cookie</p><ul><li>http 无状态，每次请求都要带 cookie，以帮助识别身份</li><li>服务端也可以向客户端 set-cookie，cookie 大小限制 4kb</li><li>默认有跨域限制：不可跨域共享、传递 cookie</li></ul></li><li><p>token vs cookie</p><ul><li>cookie 是 http 规范，而 token 是自定义传递</li><li>cookie 会默认被浏览器存储，而 token 需自己存储</li><li>token 默认没有跨域限制</li></ul></li><li><p>JWT(JSON Web Token)</p><ul><li>前端发起登录，后端验证成功之后，返回一个加密的 token</li><li>前端自行存储这个 token（其中包含了用户信息，加密了）</li><li>以后访问服务端的接口，都带着这个 token，作为用户信息</li></ul></li></ul><h2 id="Session-和-JWT-哪个更好？"><a href="#Session-和-JWT-哪个更好？" class="headerlink" title="Session 和 JWT 哪个更好？"></a>Session 和 JWT 哪个更好？</h2><ul><li><p>session</p><ul><li>优点<ul><li>原理简单，易于学习</li><li>用户信息存储在服务端，可以快速封禁某个用户</li></ul></li><li>缺点<ul><li>占用服务端内存，硬件成本高</li><li>多进程，多服务器时，不好同步-需要使用第三方缓存，如 redis</li><li>默认有跨域限制</li></ul></li></ul></li><li><p>JWT</p><ul><li>优点<ul><li>不占用服务器内存</li><li>多进程、多服务器不受影响</li><li>没有跨域限制</li></ul></li><li>缺点<ul><li>用户信息存储在客户端，无法快速封禁某用户</li><li>万一服务器密钥被泄漏，则用户信息全部丢失</li><li>token 体积一般大于 cookie，会增加请求的数据量</li></ul></li></ul></li><li><p>答案</p><ul><li>如有严格管理用户信息的需求（保密、快速封禁），推荐 session</li><li>如没有特殊要求，则使用 JWT</li></ul></li></ul><h2 id="如何实现-SSO-单点登录？"><a href="#如何实现-SSO-单点登录？" class="headerlink" title="如何实现 SSO 单点登录？"></a>如何实现 SSO 单点登录？</h2><ul><li><p>基于 cookie（主域名相同）</p><ul><li>cookie 默认不可跨域共享，但有些情况下可设置共享</li><li>主域名相同，如<a href="http://www.baidu.com,image.baidu.com/">www.baidu.com,image.baidu.com</a></li><li>设置 cookie domain 为主域名，即可共享 cookie</li></ul></li><li><p>SSO（主域名不相同，cookie 无法共享）</p><ul><li><img src="/images/md_img/sso.jpg" alt="sso"></li></ul></li></ul><h2 id="HTTP-协议和-UDP-协议有什么区别？"><a href="#HTTP-协议和-UDP-协议有什么区别？" class="headerlink" title="HTTP 协议和 UDP 协议有什么区别？"></a>HTTP 协议和 UDP 协议有什么区别？</h2><ul><li>网络协议<ul><li>HTTP 协议在应用层</li><li>TCP、UDP 协议在传输层<ul><li>TCP 协议<ul><li>有连接，有断开</li><li>稳定传输</li></ul></li><li>UDP 协议<ul><li>无连接，无断开</li><li>不稳定传输，但效率高</li><li>如视频会议、语音通话</li></ul></li></ul></li></ul></li></ul><h2 id="HTTP-协议-1-0、1-1、2-0-有什么区别？"><a href="#HTTP-协议-1-0、1-1、2-0-有什么区别？" class="headerlink" title="HTTP 协议 1.0、1.1、2.0 有什么区别？"></a>HTTP 协议 1.0、1.1、2.0 有什么区别？</h2><ul><li><p>HTTP 1.0</p><ul><li>最基础的 HTTP 协议</li><li>支持基本的 GET、POST 方法</li></ul></li><li><p>HTTP 1.1</p><ul><li>缓存策略 cache-control、E-tag 等</li><li>支持长连接 Connection: keep-alive,一次 TCP 连接多次请求</li><li>支持断点续传，状态码 206</li><li>支持新的方法 PUT、DELETE 等，可用于 Restful API</li></ul></li><li><p>HTTP 2.0</p><ul><li>可压缩 header，减少体积</li><li>多路复用，一次 TCP 连接中可以多个 HTTP 并行请求</li><li>服务端推送</li></ul></li></ul><h2 id="什么是-HTTPS-中间人攻击？如何预防？"><a href="#什么是-HTTPS-中间人攻击？如何预防？" class="headerlink" title="什么是 HTTPS 中间人攻击？如何预防？"></a>什么是 HTTPS 中间人攻击？如何预防？</h2><ul><li><p>HTTPS 加密传输</p><ul><li>HTTP 明文传输</li><li>HTTPS 加密传输 HTTP + TLS/SSL</li><li><img src="/images/md_img/https.jpg" alt="https加密"></li></ul></li><li><p>答案</p><ul><li>使用正规厂商的加密证书可以防止中间人攻击</li></ul></li></ul><h2 id="defer-和-async-有什么区别？"><a href="#defer-和-async-有什么区别？" class="headerlink" title="defer 和 async 有什么区别？"></a>defer 和 async 有什么区别？</h2><ul><li>区别 <img src="/images/md_img/defer_async.jpg" alt="区别"></li></ul><h2 id="prefetch-和-dns-prefetch-有什么区别？"><a href="#prefetch-和-dns-prefetch-有什么区别？" class="headerlink" title="prefetch 和 dns-prefetch 有什么区别？"></a>prefetch 和 dns-prefetch 有什么区别？</h2><ul><li>preload 资源在当前页面使用，会优先加载</li><li>prefetch 资源在未来页面使用，空闲时加载</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;other.js&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>dns-prefetch 即 DNS 预查询</li><li>preconnect 即 DNS 预连接</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.xxx.com/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.xxx.com&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="你知道哪些前端攻击？该如何预防？"><a href="#你知道哪些前端攻击？该如何预防？" class="headerlink" title="你知道哪些前端攻击？该如何预防？"></a>你知道哪些前端攻击？该如何预防？</h2><ul><li><p>xss</p><ul><li>Cross Site Script 跨站脚本攻击</li><li>手段：将 js 代码插入到网页内容中，渲染时执行 js 代码</li><li>预防：特殊字符替换（前端或后端）</li></ul></li><li><p>csrf</p><ul><li><p>Cross Site Request Forgery 跨站请求伪造</p></li><li><p>手段：诱导用户去访问另一个网站的接口，伪造请求</p></li><li><p>预防：严格的跨域限制 + 验证码机制</p></li><li><p>csrf 详细过程</p><ul><li>用户登录 A 网站，有了 A 网站的 cookie</li><li>诱导用户到 B 网站，并发起 A 网站的请求</li><li>A 网站的 API 发现有 cookie，认为是用户自己操作的</li></ul></li><li><p>csrf 预防手段</p><ul><li>严格的跨域请求限制，如判断 referer（请求来源）</li><li>为 cookie 设置 SameSite，禁止跨域传递 cookie</li><li>关键接口使用短信验证码</li></ul></li></ul></li><li><p>点击劫持</p><ul><li>click jacing</li><li>手段：诱导界面上蒙一个透明 iframe，诱导用户点击</li><li>预防：让 iframe 不能跨域加载</li></ul></li><li><p>DDos</p><ul><li>Distribute denial-of-service 分布式拒绝服务</li><li>手段：分布式的、大规模的流量访问，使服务器瘫痪</li><li>预防：软件层不好做，需硬件预防（如阿里云 WAF）</li></ul></li><li><p>SQL 注入</p><ul><li>手段：提交内容时写入 SQL 语句，破环数据库</li><li>预防：处理输入的内容，替换特殊字符</li></ul></li></ul><h2 id="WebSocket-和-HTTP-有什么区别？"><a href="#WebSocket-和-HTTP-有什么区别？" class="headerlink" title="WebSocket 和 HTTP 有什么区别？"></a>WebSocket 和 HTTP 有什么区别？</h2><ul><li><p>WebSocket</p><ul><li><p>支持端对端通讯</p></li><li><p>可以由 client 发起，也可以由 server 发起</p></li><li><p>用于：消息通知，直播间讨论区，聊天室，协同编辑</p></li><li><p>client</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">WebSocketServer</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> wsServer = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;connection&quot;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到了信息&quot;</span>, msg.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ws.<span class="title function_">send</span>(<span class="string">&quot;服务端已经收到了信息&quot;</span> + msg.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>server</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://127.0.0.1:3000&quot;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;opened&quot;</span>);</span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&quot;client opened&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到了信息&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&quot;当前时间&quot;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>WebSocket 连接过程</p><ul><li>先发起一个 http 请求</li><li>成功之后再升级到 WebSocket 协议，再通讯</li></ul></li><li><p>WebSocket 和 HTTP 区别？</p><ul><li>WebSocket 协议名是 ws://,可双端发起请求</li><li>WebSocket 没有跨域限制</li><li>通过 send 和 onmessage 通讯（HTTP 通过 req 和 res）</li></ul></li><li><p>ws 可升级为 wss（like https）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createServer &#125; <span class="keyword">from</span> <span class="string">&quot;https&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;ws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">createServer</span>(&#123;</span><br><span class="line">  <span class="attr">cert</span>: <span class="title function_">readFileSync</span>(<span class="string">&quot;/path/to/cert.pem&quot;</span>),</span><br><span class="line">  <span class="attr">key</span>: <span class="title function_">readFileSync</span>(<span class="string">&quot;/path/to/key.pem&quot;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; server &#125;);</span><br></pre></td></tr></table></figure></li><li><p>实际项目推荐 socket.io,API 更简洁</p></li></ul><h2 id="WebSocket-和-HTTP-长轮询的区别？"><a href="#WebSocket-和-HTTP-长轮询的区别？" class="headerlink" title="WebSocket 和 HTTP 长轮询的区别？"></a>WebSocket 和 HTTP 长轮询的区别？</h2><ul><li><p>区别</p><ul><li>HTTP 长轮询：客户端发起请求，服务端阻塞，不会立即返回</li><li>WebSocket：客户端可发起请求，服务端也可发起请求</li></ul></li><li><p>注意</p><ul><li>HTTP 长轮询，需处理 timeout，即 timeout 之后重新发请求</li></ul></li></ul><h2 id="描述从输入-url-到页面展示的完整过程"><a href="#描述从输入-url-到页面展示的完整过程" class="headerlink" title="描述从输入 url 到页面展示的完整过程"></a>描述从输入 url 到页面展示的完整过程</h2><ul><li>网络请求<ul><li>DNS 查询（得到 IP），建立 TCP 连接（三次握手）</li><li>浏览器发起 HTTP 请求</li><li>收到请求响应，得到 HTML 源代码</li></ul></li><li>解析（字符串 -&gt; 结构化数据）<ul><li>HTML 构建 DOM 树</li><li>CSS 构建 CSSOM 树（style tree）</li><li>两者结合，形成 render tree</li></ul></li><li>渲染（render tree 绘制到页面）<ul><li>计算各个 DOM 的尺寸、定位，最后绘制到页面</li><li>遇到 js 可能会执行（参考 defer、async）</li><li>异步 CSS、图片加载，可能会触发重新渲染</li></ul></li></ul><h2 id="重绘-repaint-重排-reflow-有什么区别？"><a href="#重绘-repaint-重排-reflow-有什么区别？" class="headerlink" title="重绘 repaint 重排 reflow 有什么区别？"></a>重绘 repaint 重排 reflow 有什么区别？</h2><ul><li><p>重绘 repaint</p><ul><li>元素外观改变，如颜色、背景色</li><li>但元素的尺寸、定位不变，不会影响到其他元素的位置</li></ul></li><li><p>重排 relfow</p><ul><li>重新计算尺寸和布局，可能会影响其他元素的位置</li><li>如元素高度增加，可能会使相邻元素位置下移</li></ul></li><li><p>区别</p><ul><li>重排比重绘影响更大，消耗更大</li><li>所以，要尽量避免无意义的重排</li></ul></li><li><p>减少重排的方法</p><ul><li>集中修改样式，或直接切换 css、class</li><li>修改之前先设置 display: none,脱离文档流</li><li>使用 BFC 特性，不影响其他元素位置</li><li>频发触发（resize、scroll）使用节流和防抖</li><li>使用 createDocumentFragment 批量操作 DOM</li><li>优化动画，使用 CSS3 和 requestAnimationFrame</li></ul></li></ul><h2 id="如何实现网页多标签通讯？"><a href="#如何实现网页多标签通讯？" class="headerlink" title="如何实现网页多标签通讯？"></a>如何实现网页多标签通讯？</h2><ul><li><p>使用 WebSocket</p><ul><li>无跨域限制</li><li>需要服务端支持，成本高</li></ul></li><li><p>localStorage（跨域不共享）</p><ul><li>同域的 A 和 B 两个页面</li><li>A 页面设置 localStorage</li><li>B 页面可监听到 localStorage 值的修改</li></ul></li><li><p>SharedWorker(必须同域)</p><ul><li>SharedWorker 是 WebWorker 的一种</li><li>WebWorker 可开启子进程执行 JS，但不能操作 DOM</li><li>SharedWorker 可单独开启一个进程，用于同域页面通讯</li></ul></li></ul><h2 id="网页和-iframe-如何通讯？"><a href="#网页和-iframe-如何通讯？" class="headerlink" title="网页和 iframe 如何通讯？"></a>网页和 iframe 如何通讯？</h2><ul><li>使用 postMessage 通讯</li><li>注意跨域的限制和判断</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父传子</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">iframe1</span>.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">// 子传父</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">origin</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="请描述-koa2-洋葱圈模型？"><a href="#请描述-koa2-洋葱圈模型？" class="headerlink" title="请描述 koa2 洋葱圈模型？"></a>请描述 koa2 洋葱圈模型？</h2><ul><li><p>koa2</p><ul><li>一个简约、流行的 nodejs 框架</li><li>通过中间件组织代码</li><li>多个中间件以“洋葱圈模型”执行</li></ul></li><li><p>代码执行过程</p><ul><li><img src="/images/md_img/koa1.jpg" alt="koa1"></li></ul></li><li><p>洋葱圈模型(类似捕获冒泡)</p><ul><li><img src="/images/md_img/koa2.jpg" alt="koa2"></li></ul></li></ul><h2 id="H5-页面如何进行首屏优化？"><a href="#H5-页面如何进行首屏优化？" class="headerlink" title="H5 页面如何进行首屏优化？"></a>H5 页面如何进行首屏优化？</h2><ul><li><p>路由懒加载</p><ul><li>适用于 SPA</li><li>路由拆分，优先保证首页加载</li></ul></li><li><p>服务端渲染 SSR</p><ul><li>传统前后端分离（SPA）渲染页面的过程复杂</li><li>SSR 渲染页面过程简单，所有性能好</li><li>如果是纯 H5 页面，SSR 是性能优化的终极方案</li></ul></li><li><p>App 预取</p><ul><li>如果 H5 在 App WebView 中展示，可使用 App 预取</li><li>用户访问列表页面时，App 预加载文章首屏内容</li><li>用户进入 H5 页面，直接从 App 中获取内容，瞬间展示首屏</li></ul></li><li><p>分页</p><ul><li>针对列表页</li><li>默认只展示第一页内容</li><li>上滑加载更多</li></ul></li><li><p>图片懒加载 lazyload</p><ul><li>针对详情页</li><li>默认只展示文本内容，然后出发图片懒加载</li><li>注意：提前设置图片尺寸，尽量只重绘不重排</li></ul></li><li><p>Hybrid</p><ul><li>提前将 HTML、JS、CSS 下载到 App 内部</li><li>在 App webview 中使用 file：// 协议加载页面文件</li><li>再用 Ajax 获取内容并展示（也结合 App 预取）</li></ul></li></ul><h2 id="后端一次性返回-10w-条数据，你该如何渲染？"><a href="#后端一次性返回-10w-条数据，你该如何渲染？" class="headerlink" title="后端一次性返回 10w 条数据，你该如何渲染？"></a>后端一次性返回 10w 条数据，你该如何渲染？</h2><ul><li><p>设计不合理，去砍了后端</p></li><li><p>自定义中间层</p><ul><li>自定义 nodejs 中间层，获取并拆分这 10w 条数据</li><li>前端对接 nodejs 中间层，而不是服务端</li><li>成本比较高</li></ul></li><li><p>虚拟列表</p><ul><li>只渲染可视区域</li></ul></li></ul><h2 id="React-都有哪些注意点（坑）？"><a href="#React-都有哪些注意点（坑）？" class="headerlink" title="React 都有哪些注意点（坑）？"></a>React 都有哪些注意点（坑）？</h2><ul><li><p>自定义组件首字母大写</p></li><li><p>js 关键字的冲突（htmlFor、className）</p></li><li><p>JSX 的数据类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> value=&#123;<span class="number">1</span>&#125; /&gt; <span class="comment">// number</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span> <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>setState 是异步更新的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span> + <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span>); <span class="comment">// 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span>); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="如何统一监听-Vue-组件报错？"><a href="#如何统一监听-Vue-组件报错？" class="headerlink" title="如何统一监听 Vue 组件报错？"></a>如何统一监听 Vue 组件报错？</h2><ul><li><p>window.onerror</p><ul><li>全局监听所有 js 错误</li><li>try…catch 中的错误无法被监听到</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">msg, source, line, column, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, source, line, column, error);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>errorCaptured 生命周期</p><ul><li>监听所有下级组件的错误</li><li>返回 false 会阻止向上传播</li></ul></li><li><p>errorHandler 配置</p><ul><li>Vue 全局错误监听，所有组件错误都会汇总到这里</li><li>但 errorCaptured 返回 false，不会传播到这里</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error, vm, info);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>异步错误</p><ul><li>异步回调里面的错误，errorHandler 监听不到</li><li>需要使用 window.onerror</li></ul></li></ul><h2 id="如何统一监听-React-报错？"><a href="#如何统一监听-React-报错？" class="headerlink" title="如何统一监听 React 报错？"></a>如何统一监听 React 报错？</h2><ul><li><p>ErrorBoundary 组件</p><ul><li>监听所有下级组件报错，可降级展示 UI</li><li>只监听组件渲染时报错，不监听 DOM 事件、异步错误<ul><li>不监听 DOM 事件报错，可用 try…catch,window.onerror</li></ul></li><li>只在 production 环境生效，dev 会直接抛出错误</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新state，显示降级UI</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; error &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">error, errorInfo</span>) &#123;</span><br><span class="line">    <span class="comment">// 统计上报错误信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error, errorInfo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>报错了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="如果一个-H5-很慢，你该如何排查性能问题？"><a href="#如果一个-H5-很慢，你该如何排查性能问题？" class="headerlink" title="如果一个 H5 很慢，你该如何排查性能问题？"></a>如果一个 H5 很慢，你该如何排查性能问题？</h2><ul><li><p>前端性能指标</p><ul><li>First Paint（FP）</li><li>First ContentFul Paint（FCP）</li><li>DomContentLoaded（DCL）</li><li>Largest Contentful Paint（LCP）</li><li>Load（L）</li></ul></li><li><p>Chrome devtools</p><ul><li>Performance 可查看上述性能指标，并有网页快照</li><li>Network 可以查看各个资源的加载时间</li></ul></li><li><p>lighthouse（第三方性能评测工具）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// terminal</span></span><br><span class="line">lighthouse <span class="attr">https</span>:<span class="comment">//www.imooc.com/ --view --preset=desktop</span></span><br></pre></td></tr></table></figure></li><li><p>通过以上工具来判读是加载慢还是渲染慢</p><ul><li>加载慢<ul><li>优化服务端硬件配置，使用 CDN</li><li>路由懒加载，大组件异步加载-减少主包的体积</li><li>优化 http 缓存策略</li></ul></li><li>渲染慢<ul><li>优化服务端接口（如 ajax 获取数据慢）</li><li>优化全段组件内部逻辑</li><li>服务端渲染 SSR</li></ul></li></ul></li></ul><h2 id="如何理解-HTML-语义化？"><a href="#如何理解-HTML-语义化？" class="headerlink" title="如何理解 HTML 语义化？"></a>如何理解 HTML 语义化？</h2><ul><li>让人更容易读懂（增加代码可读性）</li><li>让搜索引擎更容易读懂（SEO）</li></ul><h2 id="块状元素-amp-内联元素？"><a href="#块状元素-amp-内联元素？" class="headerlink" title="块状元素 &amp; 内联元素？"></a>块状元素 &amp; 内联元素？</h2><ul><li>块级元素<ul><li>display: block/table;</li><li>div、h1、h2、table、ul、ol、p 等</li></ul></li><li>内联元素<ul><li>display: inline/inline-block;</li><li>span、img、input、button 等；</li></ul></li></ul><h2 id="如下代码，请问-div-的-offsetWidth-是多大？"><a href="#如下代码，请问-div-的-offsetWidth-是多大？" class="headerlink" title="如下代码，请问 div 的 offsetWidth 是多大？"></a>如下代码，请问 div 的 offsetWidth 是多大？</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>offsetWidth = (内容宽度 + 内边距 + 边框)，无外边距</li><li>答案： 100 + 10 + 1 * 2 = 122px</li><li>可以通过：box-sizing: border-box; 使得 offsetWidth=100</li></ul><h2 id="margin-纵向重叠问题"><a href="#margin-纵向重叠问题" class="headerlink" title="margin 纵向重叠问题"></a>margin 纵向重叠问题</h2><ul><li>如下代码，A 和 B 之间的距离是多少？</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>B<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相邻元素的 margin-top 和 margin-bottom 会发生重叠</li><li>空白内容 p 标签也会重叠</li><li>答案：15px</li></ul><h2 id="margin-负值问题"><a href="#margin-负值问题" class="headerlink" title="margin 负值问题"></a>margin 负值问题</h2><ul><li>margin-top 和 margin-left 负值，元素向上、向左移动</li><li>margin-right 负值，右侧元素左移，自身不受影响</li><li>margin-bottom 负值，下方元素上移，自身不受影响</li></ul><h2 id="BFC-理解与应用"><a href="#BFC-理解与应用" class="headerlink" title="BFC 理解与应用"></a>BFC 理解与应用</h2><ul><li>Block format context，块级格式化上下文</li><li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li><li>形成 BFC 的常见条件<ul><li>float 不是 none</li><li>position 是 absolute 或 fixed</li><li>overflow 不是 visible</li><li>display 是 flex、inline-block 等</li></ul></li><li>常见应用：<ul><li>清除浮动</li></ul></li></ul><h2 id="float-布局"><a href="#float-布局" class="headerlink" title="float 布局"></a>float 布局</h2><ul><li>实现圣杯布局和双飞翼布局<ul><li>目的<ul><li>三栏布局，中间一栏最先加载和渲染</li><li>两侧内容固定，中间内容随着宽度自适应</li><li>一般用于 PC 网页</li></ul></li><li>实现<ul><li>使用 float 布局</li><li>两侧使用 margin 负值，以便和中间内容横向重叠</li><li>防止中间内容被两侧覆盖，一个用 padding，一个用 margin</li></ul></li></ul></li></ul><h2 id="css-定位"><a href="#css-定位" class="headerlink" title="css 定位"></a>css 定位</h2><ul><li><p>absolute 和 relative 定位</p><ul><li>relative 依据自身定位</li><li>absolute 依据最近一层的定位元素定位<ul><li>定位元素：absolute、relative、fied、body</li></ul></li></ul></li><li><p>居中对齐</p><ul><li><p>水平居中</p><ul><li>inline 元素：text-align: center</li><li>block 元素：margin: auto</li><li>absolute 元素：left:50% + margin-left 负值</li></ul></li><li><p>垂直居中</p><ul><li>inline 元素：line-height 的值等于 height 的值</li><li>absolute 元素：top: 50% + margin-top 负值</li><li>absolute 元素：transform(-50%, -50%)</li><li>absolute 元素：top,left,bottom,right=0 + margin: auto</li></ul></li></ul></li></ul><h2 id="css-图文样式"><a href="#css-图文样式" class="headerlink" title="css-图文样式"></a>css-图文样式</h2><ul><li><p>line-height 如何继承</p><ul><li>如下代码，p 标签的行高是多少？</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">200%</span>; <span class="comment">/* 40px */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/* 16 * 1.5 = 24 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>; <span class="comment">/* 30px */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>答案： 40px</li></ul></li><li><p>具体数值，如 30px，则继承该值</p></li><li><p>写比例，如 2/1.5，则继承当前元素 font-size 的比例</p></li><li><p>写百分比，如 200%，则继承计算出来的值</p></li></ul><h2 id="css-响应式"><a href="#css-响应式" class="headerlink" title="css-响应式"></a>css-响应式</h2><ul><li><p>常见长度单位</p><ul><li>px，绝对长度单位</li><li>em，相对长度单位，相对于父元素</li><li>rem，相对长度单位，相对于根元素，常用与响应式布局</li></ul></li><li><p>响应式布局常用方案</p><ul><li>media-query，根据不同屏幕宽度设置根元素 font-size</li><li>rem，基于根元素的相对单位</li><li>rem 的弊端：“阶梯”性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">374px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">86px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> <span class="keyword">only</span> scrren <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">413px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> <span class="keyword">only</span> scrren <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0.16rem</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1rem</span>; <span class="comment">/* 100px */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>网页视口尺寸</p><ul><li>window.screen.height // 屏幕高度</li><li>window.innerHeight // 网页视口高度<ul><li>vh 网页视口高度的 1/100</li><li>vw 网页视口宽度的 1/100</li><li>vmax 取两者最大值；vmin 取两者最小值</li></ul></li><li>document.body.clientHeight // body 高度</li></ul></li></ul><h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><ul><li>识别所有值类型<ul><li>undefined</li><li>string</li><li>number</li><li>boolean</li><li>Symbol</li></ul></li><li>识别函数、<ul><li>function</li></ul></li><li>判断是否是引用类型<ul><li>object</li></ul></li></ul><h2 id="手写-call"><a href="#手写-call" class="headerlink" title="手写 call"></a>手写 call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写-apply"><a href="#手写-apply" class="headerlink" title="手写 apply"></a>手写 apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span> = <span class="keyword">function</span> (<span class="params">context, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">...newFnArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">fn</span>(...args, ...newFnArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, [...args, ...newFnArgs]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写-instanceof"><a href="#手写-instanceof" class="headerlink" title="手写 instanceof"></a>手写 instanceof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1.通过left.__proto__.__proto__这种方式从下往上获取原型对象</span></span><br><span class="line"><span class="comment">* 2.通过Object.create(null)的实例是没有原型链</span></span><br><span class="line"><span class="comment">* 3.有原型链的实例的尽头都是Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!left.<span class="property">__proto__</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (right === <span class="title class_">Object</span> || left.<span class="property">__proto__</span> === right.<span class="property">protorype</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">instanceof</span>(left.<span class="property">__proto__</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h2><ul><li><p>js 是单线程语言，同时只能做一件事</p></li><li><p>浏览器和 nodejs 已支持启动进程，如 web worker</p></li><li><p>js 和 dom 渲染共用同一个线程，因为 js 可以修改 dom 结构，所以遇到等待（网络请求，定时任务）就会卡住</p><ul><li>网络请求，如 ajax 图片加载</li><li>定时任务，如 setTimeout</li></ul></li><li><p>所以需要异步（callback）</p></li><li><p>异步和同步的区别？</p><ul><li>基于 js 是单线程语言</li><li>异步不会阻塞代码执行</li><li>同步会阻塞代码执行</li></ul></li></ul><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><ul><li><p>for…in（以及 forEach、for）都是常规的同步遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">muti</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现象：1s后，同时打印 1，4，9</span></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">muti</span>(item);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现象：异步等待打印</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">muti</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>for…of 常用于异步的遍历</p></li></ul><h2 id="从-event-loop-解释，为什么微任务执行更早？"><a href="#从-event-loop-解释，为什么微任务执行更早？" class="headerlink" title="从 event loop 解释，为什么微任务执行更早？"></a>从 event loop 解释，为什么微任务执行更早？</h2><ul><li><p>宏任务：</p></li><li><p>setTimeout、setInterval、ajax、DOM 事件</p></li><li><p>微任务：</p></li><li><p>promise、async/await</p></li><li><p>微任务的执行时机要比宏任务要早</p></li><li><p>每次 call stack 清空，即每次轮询结束，即同步任务执行完成</p></li><li><p>如果 DOM 结构有改变，则会重新进行 DOM 渲染</p></li><li><p>宏任务：DOM 渲染后触发，如 setTimeout</p></li><li><p>微任务：DOM 渲染前触发，如 promise</p></li><li><p>所以：微任务先于宏任务先执行</p></li><li><p>补充：</p><ul><li>微任务都是 ES6 语法规定的</li><li>宏任务都是由浏览器规定的</li></ul></li></ul><h2 id="BOM-API"><a href="#BOM-API" class="headerlink" title="BOM API"></a>BOM API</h2><ul><li>navigator</li><li>screen</li><li>location</li><li>history</li></ul><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><ul><li><p>xhr.readyState</p><ul><li>0 (未初始化)还没有调用 send()方法</li><li>1 (载入)已调用 send()方法，正在发送请求</li><li>2 (载入完成) send()方法执行完成，已经接收到全部响应内容</li><li>3 (交互) 正在解析响应内容</li><li>4 (完成) 响应内容解析完成，可以在客户端调用</li></ul></li><li><p>xhr.status</p><ul><li>2xx 表示成功处理请求，如 200</li><li>3xx 需要重定向，浏览器直接跳转，如 301、302、304</li><li>4xx 客户端请求错误，如 404、403</li><li>5xx 服务端错误</li></ul></li></ul><h2 id="常见状态码？"><a href="#常见状态码？" class="headerlink" title="常见状态码？"></a>常见状态码？</h2><ul><li><p>200 成功</p></li><li><p>301 永久重定向（配合 location，浏览器自动处理）</p></li><li><p>302 临时重定向（配合 location，浏览器自动处理）</p></li><li><p>304 资源未被修改（协商缓存 ）</p></li><li><p>404 资源未找到</p></li><li><p>405 没有权限</p></li><li><p>500 服务器错误</p></li><li><p>504 网关超时</p></li><li><p>本身状态码就是一种约定，一种协议和规范，不要尝试违反规范，例如 IE 浏览器</p></li></ul><h2 id="http-常见-methods？"><a href="#http-常见-methods？" class="headerlink" title="http 常见 methods？"></a>http 常见 methods？</h2><ul><li><p>传统 methods</p><ul><li>get 获取服务器的数据</li><li>post 向服务器提交数据</li></ul></li><li><p>新的 methods</p><ul><li>get 获取数据</li><li>post 新建数据</li><li>patch/put 更新数据</li><li>delete 删除数据</li></ul></li></ul><h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><ul><li><p>一种新的 API 设计方法</p></li><li><p>传统 API 设计：把每个 url 当作一个功能</p></li><li><p>Restful API 设计：把每个 url 当作一个唯一的资源</p></li><li><p>原则</p><ul><li>不使用 url 参数<ul><li>传统 API 设计：/api/list?pageIndex=2</li><li>Restful API 设计：/api/list/2</li></ul></li><li>用 method 表示操作类型<ul><li>传统 API 设计<ul><li>post 请求 /api/create-blog</li><li>post 请求 /api/update-blog?id=100</li><li>get 请求 /api/get-blog?id=100</li></ul></li><li>Restful API 请求<ul><li>post 请求 /api/blog</li><li>patch 请求 /api/blog/100</li><li>get 请求 /api/blog/100</li></ul></li></ul></li></ul></li></ul><h2 id="常见-http-headers？"><a href="#常见-http-headers？" class="headerlink" title="常见 http headers？"></a>常见 http headers？</h2><ul><li><p>Request Headers</p><ul><li>Accept 浏览器可接收的数据格式</li><li>Accept-Encoding 浏览器可接收的压缩算法，如 gzip</li><li>Accept-Languange 浏览器可接收的语言，如 zh-CN</li><li>Connection: keep-alive 一次 TCP 连接重复使用</li><li>cookie</li><li>Host 如：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>Cache-Control</li><li>User-Agent （简称 UA）浏览器信息</li><li>Content-type 发送数据的格式，如 application/json</li></ul></li><li><p>Response Headers</p><ul><li>Content-type 返回数据的格式，如 application/json</li><li>Content-length 返回数据的大小，多少字节</li><li>Content-Encoding 返回数据的压缩算法，如 gzip</li><li>Set-Cookie</li><li>Expires</li><li>Etag</li><li>date</li></ul></li><li><p>自定义 header</p></li><li><p>缓存相关的 headers</p><ul><li>Cache-Control Expires</li><li>Last-Modified If-Modified-Since</li><li>Etag If-None-Match</li></ul></li></ul><h2 id="http-缓存？"><a href="#http-缓存？" class="headerlink" title="http 缓存？"></a>http 缓存？</h2><ul><li><p>强制缓存</p><ul><li><img src="/images/md_img/%E5%BC%BA%E5%88%B6%E7%BC%93%E5%AD%98.png" alt="强制缓存"></li><li>强制缓存过期后会去服务端重新请求</li></ul></li><li><p>协商缓存</p><ul><li>服务端缓存策略</li><li>服务端判断客户端资源，是否和服务端资源一样</li><li>一致则返回 304，否则返回 200 和最新的资源</li><li>在 Response Headers 中，有两种：<ul><li>Last-Modified 资源的最后修改时间<ul><li><img src="/images/md_img/last_modified.png" alt="last_modified"></li></ul></li><li>Etag 资源的唯一标识<ul><li><img src="/images/md_img/etag.png" alt="etag"></li></ul></li></ul></li><li><img src="/images/md_img/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98.png" alt="协商缓存"></li><li>Last-Modified 和 Etag<ul><li>会优先使用 Etag</li><li>Last-Modified 只能精确到秒级</li><li>如果资源被重复生成，而内容不变，则 Etag 更精确</li></ul></li></ul></li><li><p>综述</p><ul><li><img src="/images/md_img/http%E7%BC%93%E5%AD%98.png" alt="http缓存"></li></ul></li></ul><h2 id="刷新操作对缓存的影响？"><a href="#刷新操作对缓存的影响？" class="headerlink" title="刷新操作对缓存的影响？"></a>刷新操作对缓存的影响？</h2><ul><li>正常操作：地址输入 url，跳转链接，前进后退等<ul><li>强制缓存有效，协商缓存有效</li></ul></li><li>手动刷新：F5，点击刷新按钮，右击菜单刷新<ul><li>强制缓存失效，协商缓存有效</li></ul></li><li>强制刷新：ctrl + F5<ul><li>强制缓存失效，协商缓存失效</li></ul></li></ul><h2 id="访问浏览器网页过程？"><a href="#访问浏览器网页过程？" class="headerlink" title="访问浏览器网页过程？"></a>访问浏览器网页过程？</h2><ul><li><p>加载过程</p><ul><li>DNS 解析：域名-&gt;IP 地址</li><li>浏览器根据 IP 地址 axing 服务器发起 http 请求</li><li>服务器处理 http 请求，并返回给浏览器</li></ul></li><li><p>渲染过程</p><ul><li>根据 HTML 代码生成 DOM Tree</li><li>根据 CSS 代码生成 CSSOM 树</li><li>将 DOM Tree 和 CSSOM 整合成 Render Tree</li><li>根据 Render Tree 渲染页面</li><li>遇到 script 标签则停止渲染，优先加载并执行 js 代码，完成再继续</li><li>直至把 Render Tree 渲染完成</li></ul></li></ul><h2 id="为何要将-css-文件放在-head-标签中呢？"><a href="#为何要将-css-文件放在-head-标签中呢？" class="headerlink" title="为何要将 css 文件放在 head 标签中呢？"></a>为何要将 css 文件放在 head 标签中呢？</h2><ul><li>css 放在 body 标签尾部时，DOMTree 构建完成之后便开始构建 RenderTree，并计算布局渲染网页，等加载解析完 css 之后，开始构建 CSSOMTree，并和 DOMTree 重新构建 RenderTree，重新计算布局渲染网页</li><li>css 放在 head 中，先加载 css，之后解析 css 构建 CSSOMTree，同时构建 DOMTree，CSSOMTree 和 DOMTree 都构建完成之后开始构建 Render Tree，计算布局网页</li><li>两者对比，css 放在 head 中比放在 body 标签尾部少了一次构建 RenderTree，一次计算布局和一次渲染网页，因此性能会更好，并且 css 放在 body 标签尾部会在网页中短暂出现裸奔的 html，不利于用户体验</li></ul><h2 id="为什么建议把-script-标签放在-body-最后？"><a href="#为什么建议把-script-标签放在-body-最后？" class="headerlink" title="为什么建议把 script 标签放在 body 最后？"></a>为什么建议把 script 标签放在 body 最后？</h2><ul><li>js 的下载和执行会阻塞 DOMTree 的构建，即会中断 DOMTree 的更新，所以如果把 script 标签放在首屏范围内的 HTML 代码中会截断首屏的内容。</li><li>普通 script 标签放在 body 底部，做与不做 async 或者 defer 处理都不会影响首屏时间，但是会影响 DomContentLoad 和 load 的时间，进而影响依赖他们的代码的执行的开始时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 页面的全部资源加载完成后才会执行，包括图片、视频等</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 渲染完成后即可执行，此时图片、视频可能还没有加载完</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>性能优化原则<ul><li>多使用内存、缓存</li><li>减少 CUP 计算，减少网络加载耗时</li><li>适用于所有变成的性能优化-空间换时间</li></ul></li><li>从何入手<ul><li>让加载更快<ul><li>减少资源体积：压缩代码</li><li>减少访问次数：合并代码，SSR 服务器渲染，缓存，精灵图<ul><li>缓存（webpack contenthash）<ul><li>静态资源加 hash 后缀，根据文件内容计算 hash</li><li>文件内容不变，则 hash 不变则 url 不变</li><li>url 和文件不变，则会自动触发 http 的缓存机制，返回 304</li></ul></li><li>SSR<ul><li>服务器端渲染：将网页和数据一起加载，一起渲染</li><li>非 SSR（前后端分离）：先加载网页，后加载数据，再渲染数据</li></ul></li></ul></li><li>使用更快的网络：CDN</li></ul></li><li>让渲染更快<ul><li>css 放在 head，js 放在 body 最下面</li><li>尽早开始执行 js，用 DOMContentLoaded 触发</li><li>懒加载（图片懒加载，下滑更多等）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">&quot;img&quot;</span> src=<span class="string">&quot;preview.png&quot;</span> data-realsrc=<span class="string">&quot;abc.png&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  img.<span class="property">src</span>=img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-realsrc&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>对 DOM 查询进行缓存</li><li>合并频繁的 DOM 操作,document.createDocumentFragment()</li><li>节流 throttle、防抖 debounce</li></ul></li></ul></li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul><li>XSS 跨站请求攻击<ul><li>攻击方式<ul><li>一个博客网站，我发表一篇博客，其中嵌入 script 脚本</li><li>脚本内容：获取 cookie，发送到我的服务器</li><li>发布这篇博客，有人查看，就可以回去到访问者的 cookie</li></ul></li><li>预防方式<ul><li>替换特殊字符</li></ul></li></ul></li><li>XSRF 跨站请求伪造<ul><li>预防<ul><li>增加验证，例如密码、短信验证、指纹等</li></ul></li></ul></li></ul><h2 id="ES6-新增的声明方式"><a href="#ES6-新增的声明方式" class="headerlink" title="ES6 新增的声明方式"></a>ES6 新增的声明方式</h2><ul><li>let、const<ul><li>不属于顶层对象 window</li><li>不允许重复声明</li><li>不存在变量提升</li><li>暂时性死区（不能在变量声明之前去使用）</li><li>块级作用域</li></ul></li></ul><h2 id="定制化输出特定数组"><a href="#定制化输出特定数组" class="headerlink" title="定制化输出特定数组"></a>定制化输出特定数组</h2><ul><li>随机生成一个长度为 10 的整数类型的数据</li><li>例如 [2, 10, 3, 35, 5, 11, 10, 11, 20]</li><li>将其排列成一个新数组，要求新数组形式如下：</li><li>[[2, 3, 5], [10, 11],[20],[35]]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取随机数 0-99</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomNumber</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">  max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>) + min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;, <span class="function">() =&gt;</span> <span class="title function_">getRandomNumber</span>(<span class="number">0</span>, <span class="number">99</span>));</span><br><span class="line"><span class="comment">// 2. 去重(没必要)</span></span><br><span class="line">arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="comment">// 3. 排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="comment">// 4. 存储 0-9 10-19 20-29</span></span><br><span class="line"><span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Math</span>.<span class="title function_">floor</span>(item / <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!map[key]) &#123;</span><br><span class="line">    map[key] = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map[key].<span class="title function_">push</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">  result.<span class="title function_">push</span>(map[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h2 id="将树状结构转换为属性平铺的结构"><a href="#将树状结构转换为属性平铺的结构" class="headerlink" title="将树状结构转换为属性平铺的结构"></a>将树状结构转换为属性平铺的结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">dd</span>: <span class="string">&quot;abcdd&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">ee</span>: <span class="string">&quot;adee&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">f</span>: <span class="string">&quot;af&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  <span class="string">&quot;a.b.c.dd&quot;</span>: <span class="string">&quot;abcdd&quot;</span>,</span><br><span class="line">  <span class="string">&quot;a.d.ee&quot;</span>: <span class="string">&quot;adee&quot;</span>,</span><br><span class="line">  <span class="string">&quot;a.f&quot;</span>: <span class="string">&quot;af&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解答</span></span><br><span class="line"><span class="comment">// 方法1: 递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatObj</span>(<span class="params">obj, preKey = <span class="string">&quot;&quot;</span>, result = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = <span class="string">`<span class="subst">$&#123;preKey&#125;</span><span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">flatObj</span>(obj[key], <span class="string">`<span class="subst">$&#123;newKey&#125;</span>.`</span>, result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[newKey] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: while循环-队列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatObj2</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj);</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = queue.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> v === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([<span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span>, v]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[<span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span>] = v;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="title function_">flatObj</span>(entry);</span><br><span class="line"><span class="title function_">flatObj2</span>(entry);</span><br></pre></td></tr></table></figure><h2 id="将平铺属性的数据结构转换为树状数据结构"><a href="#将平铺属性的数据结构转换为树状数据结构" class="headerlink" title="将平铺属性的数据结构转换为树状数据结构"></a>将平铺属性的数据结构转换为树状数据结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="string">&quot;a.b.c.dd&quot;</span>: <span class="string">&quot;abcdd&quot;</span>,</span><br><span class="line">  <span class="string">&quot;a.d.ee&quot;</span>: <span class="string">&quot;adee&quot;</span>,</span><br><span class="line">  <span class="string">&quot;a.f&quot;</span>: <span class="string">&quot;af&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">dd</span>: <span class="string">&quot;abcdd&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">ee</span>: <span class="string">&quot;adee&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">f</span>: <span class="string">&quot;af&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// 方法1: 双重循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = entry[key];</span><br><span class="line">    <span class="keyword">const</span> keyMap = key.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!result[keyMap[<span class="number">0</span>]]) &#123;</span><br><span class="line">      result[keyMap[<span class="number">0</span>]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp = result[keyMap[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> length = keyMap.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!tmp[keyMap[i]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === length - <span class="number">1</span>) &#123;</span><br><span class="line">          tmp[keyMap[i]] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tmp[keyMap[i]] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      tmp = tmp[keyMap[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: 递归</span></span><br><span class="line"><span class="comment">// &#123;&quot;a.b.c.dd&quot;: &quot;abcdd&quot;&#125;</span></span><br><span class="line"><span class="comment">// =&gt; &#123;&quot;a.b.c&quot;: &#123;&quot;dd&quot;:&quot;abcdd&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">// =&gt;...</span></span><br><span class="line"><span class="comment">// =&gt; &#123;&quot;a&quot;: &#123;&quot;b&quot;: &#123;&quot;c&quot;: &#123;&quot;dd&quot;: &quot;abcdd&quot;&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map2</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getNest</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lastIndex = key.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> value = entry[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> entry[key];</span><br><span class="line">      <span class="keyword">const</span> preKey = key.<span class="title function_">substring</span>(<span class="number">0</span>, lastIndex);</span><br><span class="line">      <span class="keyword">const</span> restKey = key.<span class="title function_">substring</span>(lastIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!entry[preKey]) &#123;</span><br><span class="line">        entry[preKey] = &#123; [restKey]: value &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry[preKey][restKey] = value;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/./</span>.<span class="title function_">test</span>(preKey)) &#123;</span><br><span class="line">        <span class="title function_">getNest</span>(preKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry) &#123;</span><br><span class="line">    <span class="title function_">getNest</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">map</span>(entry);</span><br><span class="line"><span class="title function_">map2</span>(entry);</span><br></pre></td></tr></table></figure><h2 id="react-自定义封装不会反复创建的定时器（setInterval）"><a href="#react-自定义封装不会反复创建的定时器（setInterval）" class="headerlink" title="react 自定义封装不会反复创建的定时器（setInterval）"></a>react 自定义封装不会反复创建的定时器（setInterval）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useTimer</span> = (<span class="params">step = <span class="number">1</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setNum</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">    &#125;, step * <span class="number">1000</span>);</span><br><span class="line">    timer.<span class="property">current</span> = timeout;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    num,</span><br><span class="line">    start,</span><br><span class="line">    clear,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改下面代码，顺序输出-0-99"><a href="#修改下面代码，顺序输出-0-99" class="headerlink" title="修改下面代码，顺序输出 0-99"></a>修改下面代码，顺序输出 0-99</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求：</span></span><br><span class="line"><span class="comment">// 1. 只能修改 setTimeout</span></span><br><span class="line"><span class="comment">// 2. 不能修改Math.floor(Math.random() * 1000)</span></span><br><span class="line"><span class="comment">// 3. 不能使用全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">  &#125;, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// 方法1: 立即执行函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法1: setTimeout第三个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-循环和-splice-的坑"><a href="#for-循环和-splice-的坑" class="headerlink" title="for 循环和 splice 的坑"></a>for 循环和 splice 的坑</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环和splice的坑</span></span><br><span class="line"><span class="comment">// 具体描述：在对一个数组执行for循环时，</span></span><br><span class="line"><span class="comment">// 删除数组元素，会存在什么问题</span></span><br><span class="line"><span class="comment">// 方法1: i--</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">    i--; <span class="comment">// 需要处理下 i--</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: 倒序</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[index] === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    index--; <span class="comment">// 仍然会有问题</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;复杂度&quot;&gt;&lt;a href=&quot;#复杂度&quot; class=&quot;headerlink&quot; title=&quot;复杂度&quot;&gt;&lt;/a&gt;复杂度&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>koa-generator快速搭建koa服务</title>
    <link href="https://github.com/foolishmax/2022/03/08/koa-generator%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAkoa%E6%9C%8D%E5%8A%A1/"/>
    <id>https://github.com/foolishmax/2022/03/08/koa-generator%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAkoa%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-03-08T02:46:25.000Z</published>
    <updated>2022-07-30T04:11:13.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-全局安装koa-generator脚手架"><a href="#1-全局安装koa-generator脚手架" class="headerlink" title="1.全局安装koa-generator脚手架"></a>1.全局安装<em>koa-generator</em>脚手架</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g koa-generator</span><br><span class="line"># or</span><br><span class="line">yarn global add koa-generator</span><br></pre></td></tr></table></figure><h2 id="创建koa项目"><a href="#创建koa项目" class="headerlink" title="创建koa项目"></a>创建<em>koa</em>项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">koa2 project-name</span><br><span class="line"></span><br><span class="line">// 使用ejs引擎</span><br><span class="line">koa2 -e project-name</span><br></pre></td></tr></table></figure><h2 id="进入项目安装依赖"><a href="#进入项目安装依赖" class="headerlink" title="进入项目安装依赖"></a>进入项目安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd project-name</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"># or</span><br><span class="line">npm run dev</span><br><span class="line"># or...</span><br></pre></td></tr></table></figure><h3 id="使用-pm2-启动-koa-项目"><a href="#使用-pm2-启动-koa-项目" class="headerlink" title="使用 pm2 启动 koa 项目"></a>使用 pm2 启动 koa 项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install -g pm2</span><br><span class="line">// 启动项目</span><br><span class="line">pm2 start ./bin/www</span><br><span class="line">// pm2自动重启</span><br><span class="line">pm2 start ./bin/www/ --watch</span><br></pre></td></tr></table></figure><h3 id="pm2-相关命令（www-是项目名）"><a href="#pm2-相关命令（www-是项目名）" class="headerlink" title="pm2 相关命令（www 是项目名）"></a>pm2 相关命令（www 是项目名）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm2 list          #查看所有已启动项目</span><br><span class="line">pm2 start         #启动</span><br><span class="line">pm2 restart www   #重启</span><br><span class="line">pm2 stop www      #停止</span><br><span class="line">pm2 delete www    #删除</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-全局安装koa-generator脚手架&quot;&gt;&lt;a href=&quot;#1-全局安装koa-generator脚手架&quot; class=&quot;headerlink&quot; title=&quot;1.全局安装koa-generator脚手架&quot;&gt;&lt;/a&gt;1.全局安装&lt;em&gt;koa-generator&lt;/em&gt;脚手架&lt;/h2&gt;</summary>
    
    
    
    <category term="node" scheme="https://github.com/foolishmax/categories/node/"/>
    
    
    <category term="node" scheme="https://github.com/foolishmax/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>RBAC是什么？</title>
    <link href="https://github.com/foolishmax/2022/02/22/RBAC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://github.com/foolishmax/2022/02/22/RBAC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-02-22T09:25:38.000Z</published>
    <updated>2022-07-30T04:11:48.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RBAC-是什么"><a href="#RBAC-是什么" class="headerlink" title="RBAC 是什么?"></a>RBAC 是什么?</h2><span id="more"></span><p><em>RBAC</em>是基于角色的访问控制(<code>Role-Based Access Control</code>)在<em>RBAC</em>中，权限与角色相关联，用户通过适当角色的成员而得到这些角色的权限，权限赋予给角色，而角色又赋予给用户，这样权限设计的很清楚，管理起来也很方便。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;RBAC-是什么&quot;&gt;&lt;a href=&quot;#RBAC-是什么&quot; class=&quot;headerlink&quot; title=&quot;RBAC 是什么?&quot;&gt;&lt;/a&gt;RBAC 是什么?&lt;/h2&gt;</summary>
    
    
    
    <category term="other" scheme="https://github.com/foolishmax/categories/other/"/>
    
    
    <category term="other" scheme="https://github.com/foolishmax/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>30-seconds-of-code-study</title>
    <link href="https://github.com/foolishmax/2022/02/07/30-seconds-of-code-study/"/>
    <id>https://github.com/foolishmax/2022/02/07/30-seconds-of-code-study/</id>
    <published>2022-02-07T09:52:54.000Z</published>
    <updated>2022-07-30T04:19:33.780Z</updated>
    
    <content type="html"><![CDATA[<ul><li>已经迁移至<a href="https://foolishmax.github.io/mixin/zh-CN/api/30-seconds-of-code/to-safe-integer">mixin</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;已经迁移至&lt;a href=&quot;https://foolishmax.github.io/mixin/zh-CN/api/30-seconds-of-code/to-safe-integer&quot;&gt;mixin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
    <category term="javaScript" scheme="https://github.com/foolishmax/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>TS进阶题目</title>
    <link href="https://github.com/foolishmax/2022/01/17/TS%E8%BF%9B%E9%98%B6%E9%A2%98%E7%9B%AE/"/>
    <id>https://github.com/foolishmax/2022/01/17/TS%E8%BF%9B%E9%98%B6%E9%A2%98%E7%9B%AE/</id>
    <published>2022-01-17T07:50:20.000Z</published>
    <updated>2022-07-31T03:01:27.027Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在线 TS 地址 <a href="https://www.typescriptlang.org/">typescript</a></li></ul><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul><li>以下代码为什么会提示错误，应该如何解决上述问题？</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一种解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;t <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...u,</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul><li>以下函数我们希望参数<em>a</em>和<em>b</em>的类型都是一致的，即<em>a</em>和<em>b</em>同时为<em>number</em>或<em>string</em>类型，当它们的类型不一致时，ts 类型检查器能自动提示对应的错误信息。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>,b: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p><strong>第一种解决方案</strong></p><ul><li>函数重载</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>, b: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a <span class="keyword">as</span> <span class="built_in">number</span>) + (b <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong>第二种解决方案</strong></p><ul><li>自定义路由守卫</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isStringArray = (<span class="attr">params</span>: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]): params is <span class="built_in">string</span>[] =&gt; <span class="keyword">typeof</span> params[<span class="number">0</span>] === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">...args: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isStringArray</span>(args)) &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + <span class="string">&#x27;:&#x27;</span> + args[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + args[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong>第三种解决方案</strong></p><ul><li>范型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> f&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a <span class="keyword">as</span> <span class="built_in">number</span>) + (b <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul><li>实现 SetOptional 工具类型，支持把给定的 keys 对应的属性变为可选，参考<em>Partial<T></em></li><li>实现 SetRequired 工具类型，支持把给定的 keys 对应的属性变成必填，参考 <em>Require<T></em></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetOptional 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>; <span class="comment">//该属性变为可选的</span></span><br><span class="line">  b?: <span class="built_in">string</span>; <span class="comment">//保持不变</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetRequired 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>; <span class="comment">//保持不变</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>; <span class="comment">//该属性变为必选的</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><ul><li>SetOptional</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对交叉类型进行扁平化处理</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>SetRequired</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt; &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplely</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplely</span>&lt;&#123; [X <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[X]; &#125; &amp; &#123; [P <span class="keyword">in</span> K]?: T[P] &#125;&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplely</span>&lt;&#123; [X <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[X]; &#125; &amp; &#123; [P <span class="keyword">in</span> K]-?: T[P] &#125;&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Omit</span>&lt;T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Omit</span>&lt;T, K&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><ul><li><em>Pick&lt;T, K extends keyof T&gt;</em> 的作用是将某个类型中的字属性挑出来，得到包含这个类型部分属性的字类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>问题：如何定义一个<em>ConditionalPick</em>工具类型，支持根据指定的<em>Condition</em>条件来生成新的类型，对应的使用示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">d</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeyOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// =&gt; &#123;a: string&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#key-remapping-in-mapped-types">神奇的 as</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">d</span>: &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConditionalPick</span>&lt;T, K&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> (T[P] <span class="keyword">extends</span> K ? P : <span class="built_in">never</span>)]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeysOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// =&gt; &#123;a: string&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><ul><li>定义一个工具类型<em>AppendArgument</em>,为已有函数累心增加指定类型的参数，新增的参数名是<em>x</em>，将作为新函数类型的第一个参数，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F, A&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><ul><li>延伸阅读 <a href="https://mp.weixin.qq.com/s/mkvnJh3fBmL86Vnrv9xAyQ">掌握 TS 这些工具类型，让你开发事半功倍</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>, A&gt; = <span class="function">(<span class="params">x: A, ...args: Parameters&lt;F&gt;</span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><ul><li>延伸阅读 <a href="https://mp.weixin.qq.com/s/JT2N2K5hvQAXN45B2DEbQw">用上这几招，轻松实现 TS 类型提取</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F, T&gt; = F <span class="keyword">extends</span> (...<span class="attr">args</span>: infer <span class="title class_">Args</span>) =&gt; infer <span class="title class_">Return</span> ? <span class="function">(<span class="params">x: T, ...args: Args</span>) =&gt;</span> <span class="title class_">Return</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number</span></span><br></pre></td></tr></table></figure><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul><li>定义一个 NativeFlat 工具类型，支持把数组类型拍平(扁平化),示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NativeFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NativeResult</span> = <span class="title class_">NativeFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>],[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],[<span class="string">&#x27;d&#x27;</span>]]&gt;;</span><br><span class="line"><span class="comment">// =&gt; &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在完成<em>NativeFlat</em>工具类型之后，继续实现<em>DeepFlat</em>工具类型，以支持多维数组类型：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="built_in">unknown</span> <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Deep</span> = [[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepTestResult</span> = <span class="title class_">DeepFlat</span>&lt;<span class="title class_">Deep</span>&gt;</span><br><span class="line"><span class="comment">// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>NativeFlat</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NaiveFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? T[P][<span class="built_in">number</span>] : T[P]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NaiveResult</span> = <span class="title class_">NaiveFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>]]&gt;</span><br><span class="line"><span class="comment">// NaiveResult的结果： &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span></span><br></pre></td></tr></table></figure><ul><li>DeepFlat</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Deep</span> = [[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? <span class="title class_">DeepFlat</span>&lt;T[K]&gt; : T[K]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepTestResult</span> = <span class="title class_">DeepFlat</span>&lt;<span class="title class_">Deep</span>&gt;</span><br><span class="line"><span class="comment">// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><ul><li>使用类型别名定义一个<em>EmptyObject</em>类型，是的该类型只允许空对象赋值：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// Error</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更改以下<em>takeSomeTypeOnly</em>函数类型定义，让参数只允许严格 SomeType 类型的值，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">takeSomeTypeOnly</span>(<span class="params">x: SomeType</span>) &#123;<span class="keyword">return</span> x&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(x); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">additionalProp</span>: <span class="string">&#x27;x&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(y); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>EmptyObject</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type PropertyKey = string | number | symbol;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// Error</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>takeSomeTypeOnly</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Exclusive</span>&lt;<span class="variable constant_">T1</span>, <span class="variable constant_">T2</span> <span class="keyword">extends</span> <span class="variable constant_">T1</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="variable constant_">T2</span>]: K <span class="keyword">extends</span> keyof <span class="variable constant_">T1</span> ? <span class="variable constant_">T2</span>[K] : <span class="built_in">never</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> takeSomeTypeOnly&lt;T <span class="keyword">extends</span> <span class="title class_">SomeType</span>&gt;(<span class="attr">x</span>: <span class="title class_">Exclusive</span>&lt;<span class="title class_">SomeType</span>, T&gt;) &#123;<span class="keyword">return</span> x&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(x); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">additionalProp</span>: <span class="string">&#x27;x&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(y); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><ul><li>定义一个<em>NonEmptyArray</em>工具类型，用于确保数据为非空数组</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = [T, ...T[]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = T[] &amp; &#123;<span class="number">0</span>: T&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="built_in">number</span>]: T;</span><br><span class="line">&#125; &amp; &#123;</span><br><span class="line">  <span class="number">0</span>: T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><ul><li>定义一个<em>JoinStrArray</em>工具类型，用于根据指定的<code>Separator</code>分隔符，对字符串数据类型进行拼接，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[], <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;</span><br><span class="line">  <span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[],</span><br><span class="line">  <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">&gt; =</span><br><span class="line"><span class="title class_">Arr</span> <span class="keyword">extends</span> [infer <span class="title class_">El</span>,...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Rest</span> <span class="keyword">extends</span> <span class="built_in">string</span>[]</span><br><span class="line">? <span class="title class_">El</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">? <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="string">&quot;&quot;</span></span><br><span class="line">? <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>,<span class="string">`<span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">: <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>,<span class="string">`<span class="subst">$&#123;Result&#125;</span><span class="subst">$&#123;Separator&#125;</span><span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><ul><li>实现一个<em>Trim</em>工具类型，用于对字符串字面量类型进行去空格处理，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Trim</span>&lt;<span class="string">&#x27;  foolishmax  &#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TrimLeft</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">` <span class="subst">$&#123;infer R&#125;</span>`</span> ? <span class="title class_">TrimLeft</span>&lt;R&gt; : V;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TrimRight</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer R&#125;</span> `</span>? <span class="title class_">TrimRight</span>&lt;R&gt; : V;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="title class_">TrimLeft</span>&lt;<span class="title class_">TrimRight</span>&lt;V&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Trim</span>&lt;<span class="string">&#x27;  foolishmax  &#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h2><ul><li>实现一个*IsEqual&lt;A, B&gt;*工具类型，用于比较两个类型是否相等，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>解决方案（原始方案） 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = A <span class="keyword">extends</span> B ? (B <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E3</span> = <span class="title class_">IsEqual</span>&lt;<span class="literal">true</span>, <span class="built_in">boolean</span>&gt; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E4</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span> | <span class="number">2</span>, <span class="number">1</span>&gt; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">这是因为泛型和*<span class="keyword">extends</span>*两者结合所产生的*distributive conditionial types*效应导致的</span><br></pre></td></tr></table></figure><p><strong>解决方案（稍微优化）2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = [A] <span class="keyword">extends</span> [B] ? [B] <span class="keyword">extends</span> [A] ? <span class="literal">true</span> : <span class="literal">false</span> : <span class="literal">false</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = [A, B] <span class="keyword">extends</span> [B, A] ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E3</span> = <span class="title class_">IsEqual</span>&lt;<span class="built_in">any</span>, <span class="built_in">string</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E4</span> = <span class="title class_">IsEqual</span>&lt; &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;, &#123; <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">这是因为<span class="title class_">Ts</span>中<span class="built_in">any</span>可以赋值为任何类型，任何类型也可以赋值给<span class="built_in">any</span>，这就意味着<span class="built_in">any</span>和任意类型之间都是assignable的，对于<span class="keyword">extends</span>而言就是都可以相互<span class="keyword">extends</span>的，所以<span class="variable constant_">E3</span>是<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">readonly</span>不会改变assignable。</span><br></pre></td></tr></table></figure><p><strong>解决方案 4</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; =</span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> A ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> B ? <span class="number">1</span> : <span class="number">2</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h2><ul><li>实现一个<em>Head</em>工具类型，用于获取数组类型的第一个类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [] ? <span class="built_in">never</span> : T[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [<span class="attr">head</span>: infer H, ...<span class="attr">rest</span>: <span class="built_in">any</span>[]] ? H : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h2><ul><li>实现一个<em>Tail</em>工具类型，用于获取数组类型除了第一个类型外，剩余的类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tail</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Tail</span>&lt;[]&gt; <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>]&gt; <span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&gt; <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tail</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? B : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Tail</span>&lt;[]&gt; <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>]&gt; <span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&gt; <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h2><ul><li>实现一个<em>Unshift</em>工具类型，用于把指定类型 E 作为第一个元素添加到<em>T</em>数组类型中，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">Unshift</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">Unshift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>&gt;; <span class="comment">//[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = [E, ...T];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">Unshift</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">Unshift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>&gt;; <span class="comment">//[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h2><ul><li>实现一个<em>Shift</em>工具类型，用于移除<em>T</em>数组类型中的第一个类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">Shift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? B : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">Shift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt;; <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]&gt;; <span class="comment">// [number, boolean]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">Shift</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S3</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>]&gt;; <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h2 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h2><ul><li>实现一个<em>Push</em>工具类型，用于把指定类型<em>E</em>作为最后一个元素添加到<em>T</em>数组类型中，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = T <span class="keyword">extends</span> [...infer U] ? [...U, E] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = [...T, E];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="第十七题"><a href="#第十七题" class="headerlink" title="第十七题"></a>第十七题</h2><ul><li>实现一个<em>Includes</em>工具类型，用于判断指定的类型<em>E</em>，是否包含在<em>T</em>数组类型中，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = E <span class="keyword">extends</span> T[<span class="built_in">number</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = T <span class="keyword">extends</span> [infer A, ...infer R] ? E <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;R, E&gt; : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h2><ul><li>实现一个<em>UnionToIntersection</em>工具类型，用于把联合类型转换为交叉类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; | &#123;<span class="attr">age</span>: <span class="built_in">number</span>&#125;&gt;; <span class="comment">// &#123;name: string&#125; &amp; &#123;age: number&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li><p><a href="https://www.jianshu.com/p/071b948209f3">逆变协变</a></p></li><li><p>注释</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fun</span>&lt;X&gt; = <span class="function">(<span class="params">...args: X[]</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: <span class="title class_">Fun</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Fun</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line">g = f <span class="comment">// this cannot be assigned</span></span><br><span class="line"></span><br><span class="line">当f赋值给g时，新的g不能使用<span class="built_in">number</span>类型的参数，我们丢失了g的一部分类型，这就属于 逆变(contra-variance),这个和交集的工作机制类似。</span><br><span class="line"></span><br><span class="line">当我们把逆变位置放在条件类型时：<span class="title class_">Typescript</span>会创建一个交集，我们从函数参数中infer了一个类型，<span class="title class_">TypeScript</span>知道我们必须符合逆变的条件，然后<span class="title class_">TypeScript</span>会自动创建并集中所有的成分的交集。</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = (U <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="function">(<span class="params">k: U</span>) =&gt;</span> <span class="built_in">void</span> : <span class="built_in">never</span>) <span class="keyword">extends</span> (<span class="attr">k</span>: infer I) =&gt; <span class="built_in">void</span> ? I : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; | &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;&gt; <span class="comment">// &#123; name: string; &#125; &amp; &#123; age: number; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h2><ul><li>实现一个 <em>OptionalKeys</em> 工具类型，用来获取对象类型中声明的可选属性，示例如下:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="title class_">NonNullable</span>&lt;&#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: <span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span></span><br><span class="line">&#125;[keyof T]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = keyof &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span>]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="title class_">Exclude</span>&lt;&#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T <span class="keyword">extends</span> T[P] ? <span class="built_in">never</span> : T[P]</span><br><span class="line">&#125;[keyof T], <span class="literal">undefined</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt;; <span class="comment">// &quot;from&quot; | &quot;speak</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 4</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: (<span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span>)</span><br><span class="line">&#125;[keyof T] &amp; keyof T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt;; <span class="comment">// &quot;from&quot; | &quot;speak</span></span><br></pre></td></tr></table></figure><h2 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h2><ul><li>实现一个<em>Curry</em>工具类型，用来实现函数类型的柯里化处理，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Curry</span>&lt;</span><br><span class="line">  F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>,</span><br><span class="line">  P <span class="keyword">extends</span> <span class="built_in">any</span>[] = <span class="title class_">Parameters</span>&lt;F&gt;,</span><br><span class="line">  R = <span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">Curry</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// () =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a:<span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number) =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number)=&gt;(arg: string) =&gt; Date</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Curry</span>&lt;</span><br><span class="line">  F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>,</span><br><span class="line">  P <span class="keyword">extends</span> <span class="built_in">any</span>[] = <span class="title class_">Parameters</span>&lt;F&gt;,</span><br><span class="line">  R = <span class="title class_">ReturnType</span>&lt;F&gt;,</span><br><span class="line">&gt; = P <span class="keyword">extends</span> [infer A, ...infer B]</span><br><span class="line">  ? B <span class="keyword">extends</span> []</span><br><span class="line">  ? <span class="function">(<span class="params">arg: A</span>) =&gt;</span> R</span><br><span class="line">  : <span class="function">(<span class="params">arg: A</span>) =&gt;</span> <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">...arg: B</span>) =&gt;</span> R&gt;</span><br><span class="line">  : F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">Curry</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// () =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a:<span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number) =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number)=&gt;(arg: string) =&gt; Date</span></span><br></pre></td></tr></table></figure><h2 id="第二十一题"><a href="#第二十一题" class="headerlink" title="第二十一题"></a>第二十一题</h2><ul><li>实现一个<em>Merge</em>工具类型，用于把两个类型合成一个新的类型，第二类型（SecondType）的<em>Keys</em>将会覆盖第一种类型（FirstType）的<em>Keys</em>，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;<span class="title class_">FirstType</span>, <span class="title class_">SecondType</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><ul><li>将 FirstType 和 SecondType 做交叉类型，并遍历每一个属性；</li><li>如果当前属性名在 SecondType 类型中，则使用 SecondType 类型中的当前属性值；</li><li>如果当前属性名在 FirstType 类型中，则使用 FirstType 类型中的当前属性值；</li><li>否则为 never；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;<span class="title class_">FirstType</span>, <span class="title class_">SecondType</span>&gt; =&#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof (<span class="title class_">FirstType</span> &amp; <span class="title class_">SecondType</span>)]</span><br><span class="line">  : K <span class="keyword">extends</span> keyof <span class="title class_">SecondType</span></span><br><span class="line">  ? <span class="title class_">SecondType</span>[K]</span><br><span class="line">  : K <span class="keyword">extends</span> keyof <span class="title class_">FirstType</span></span><br><span class="line">  ? <span class="title class_">FirstType</span>[K]</span><br><span class="line">  : <span class="built_in">never</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><ul><li>先将 FirstType 类型中已经有的，和 SecondType 类型中相同的属性删除；</li><li>将前面结果和 SecondType 做交叉类型，获得合并后结果。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;F, S&gt; = <span class="title class_">Omit</span>&lt;F, keyof S&gt; &amp; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第二十二题"><a href="#第二十二题" class="headerlink" title="第二十二题"></a>第二十二题</h2><ul><li>实现一个<em>RequireAtLeastOne</em>工具类型，它将创建一个至少含有一个给定<em>keys</em>的类型，其余<em>keys</em>类型保持原样，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;</span><br><span class="line">  <span class="title class_">ObjectType</span>,</span><br><span class="line">  <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>,</span><br><span class="line">&gt; = 代码实现</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span>|<span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;</span><br><span class="line">  <span class="title class_">ObjectType</span>,</span><br><span class="line">  <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>,</span><br><span class="line">&gt; = <span class="title class_">KeysType</span> <span class="keyword">extends</span> <span class="built_in">unknown</span> ? <span class="title class_">ObjectType</span> &amp; &#123;</span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">KeysType</span>]-?: <span class="title class_">ObjectType</span>[K]</span><br><span class="line">&#125; : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span> | <span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-expect-error 因为没有&#x27;text&#x27;和&#x27;json&#x27;中的任何一个，报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder2</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span> | <span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">ObjectType</span>]: K <span class="keyword">extends</span> <span class="title class_">KeysType</span> ? <span class="title class_">ObjectType</span> &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;<span class="title class_">ObjectType</span>, K&gt;&gt; : <span class="built_in">never</span>;</span><br><span class="line">&#125;[keyof <span class="title class_">ObjectType</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&quot;text&quot;</span> | <span class="string">&quot;json&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = <span class="title class_">KeysType</span> <span class="keyword">extends</span> <span class="built_in">unknown</span></span><br><span class="line">? <span class="title class_">Omit</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span>&gt; &amp; <span class="title class_">Require</span>&lt;<span class="title class_">Pick</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span>&gt;&gt;</span><br><span class="line">: <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&quot;text&quot;</span> | <span class="string">&quot;json&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二十三题"><a href="#第二十三题" class="headerlink" title="第二十三题"></a>第二十三题</h2><ul><li>实现一个<em>RemoveIndexSignature</em>工具类型，用于移除已有类型中的索引签名，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">symbol</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">bar</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveIndexSignature</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">RemoveIndexSignature</span>&lt;<span class="title class_">Foo</span>&gt;; <span class="comment">// &#123;bar: ()=&gt;void;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">symbol</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">bar</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveIndexSignature</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="built_in">string</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="built_in">number</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="built_in">symbol</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : K]: T[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">RemoveIndexSignature</span>&lt;<span class="title class_">Foo</span>&gt;; <span class="comment">// &#123;bar: () =&gt; void;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第二十四题"><a href="#第二十四题" class="headerlink" title="第二十四题"></a>第二十四题</h2><ul><li>实现一个 <code>Mutable</code> 工具类型，用于移除对象类型上所有属性或者部分属性的 <code>readonly</code> 修饰符，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; =</span><br><span class="line">&#123;-<span class="keyword">readonly</span> [K <span class="keyword">in</span> <span class="title class_">Keys</span>]: T[K] &#125; &amp; <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, <span class="title class_">Keys</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; =</span><br><span class="line">&#123;-<span class="keyword">readonly</span> [K <span class="keyword">in</span> <span class="title class_">Keys</span>]: T[K] : T[K]&#125; &amp; <span class="title class_">Omit</span>&lt;T, <span class="title class_">Keys</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><h2 id="第二十五题"><a href="#第二十五题" class="headerlink" title="第二十五题"></a>第二十五题</h2><ul><li>实现一个 <code>IsUnion</code> 工具类型，判断指定的类型是否为联合类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsUnion</span>&lt;T, U = T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">unknown</span>&gt; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsUnion</span>&lt;T, U = T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span> ? [U] <span class="keyword">extends</span> [T] ? <span class="literal">false</span> : <span class="literal">true</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">unknown</span>&gt; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>知识点： 1.联合类型作为泛型的时候 extends 会触发分发执行 2.联合类型 T 写成[T]就变成了普通类型，extends 的时候不会分发执行</p><p>这里第一步<code>T extends any</code>肯定为真，一个其实就是利用其分发的特性，后面的[T]就是一个联合类型拆开后的某一个，因此如果是联合类型的话<code>[U] extends [T]</code>一定为否</p><h2 id="第二十六题"><a href="#第二十六题" class="headerlink" title="第二十六题"></a>第二十六题</h2><ul><li>实现一个<code>IsNever</code>工具类型，判断指定的类型是否为<code>never</code>类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsNever</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span> | <span class="built_in">string</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsNever</span>&lt;<span class="literal">null</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>用<code>[]</code>包裹 T，否则泛型参数会被当作一个裸类型处理，走<code>条件式分布类型</code>的判断逻辑，当泛型参数是 any 这种特殊值时，会得到分布后的类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsNever</span>&lt;T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span> | <span class="built_in">string</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsNever</span>&lt;<span class="literal">null</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="第二十七题"><a href="#第二十七题" class="headerlink" title="第二十七题"></a>第二十七题</h2><ul><li>实现一个<code>Reverse</code>工具类型，用于对元祖类型中元素的位置颠倒，并返回该数组，元祖的第一个元素就会变成最后一个，最后一个元素变成第一个。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? <span class="title class_">Reverse</span>&lt;B, [A, ...R]&gt; : R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? [...<span class="title class_">Reverse</span>&lt;B&gt;, A] : [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="第二十八题"><a href="#第二十八题" class="headerlink" title="第二十八题"></a>第二十八题</h2><ul><li>实现一个<code>Split</code>工具类型，根据给定的分割符(Delimiter)对包含分割符的字符串进行切割，可用于定义<code>String.prototype.split</code>方法的返回值类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Item</span> = <span class="string">`zs, ls, ww`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Split</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Delimiter</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="title class_">Split</span>&lt;<span class="title class_">Item</span>, <span class="string">&#x27;,&#x27;</span>&gt;; <span class="comment">// [&quot;zs&quot;, &quot;ls&quot;,&quot;ww&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Item</span> = <span class="string">`zs, ls, ww`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Split</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Delimiter</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Key&#125;</span><span class="subst">$&#123;Delimiter&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">? [<span class="title class_">Key</span>, ...<span class="title class_">Split</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Delimiter</span>&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span> <span class="comment">/* 处理空字符串 */</span></span><br><span class="line">? []</span><br><span class="line">: [S]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="title class_">Split</span>&lt;<span class="title class_">Item</span>, <span class="string">&#x27;,&#x27;</span>&gt;; <span class="comment">// [&quot;zs&quot;, &quot;ls&quot;,&quot;ww&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType2</span> = <span class="title class_">Split</span>&lt;<span class="string">&#x27;a|b|c||d&#x27;</span>, <span class="string">&#x27;|&#x27;</span>&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType3</span> = <span class="title class_">Split</span>&lt;<span class="string">&#x27;abcdef&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第二十九题"><a href="#第二十九题" class="headerlink" title="第二十九题"></a>第二十九题</h2><ul><li>实现一个<code>ToPath</code>工具类型，用于把属性访问<code>(.或[])</code>路径转换为元祖的形式，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToPath</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo.bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo[0].bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;0&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToPath</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer F&#125;</span><span class="subst">$&#123;<span class="string">`[<span class="subst">$&#123;infer D&#125;</span>]`</span>&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? [...<span class="title class_">ToPath</span>&lt;F&gt;, ...([D] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? [] : [D]), ...<span class="title class_">ToPath</span>&lt;R&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer F&#125;</span>.<span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? [...<span class="title class_">ToPath</span>&lt;F&gt;, ...<span class="title class_">ToPath</span>&lt;R&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">? []</span><br><span class="line">: [S]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo.bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo[0].bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;0&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="第三十题"><a href="#第三十题" class="headerlink" title="第三十题"></a>第三十题</h2><ul><li>完善<code>Chainable</code>类型的定义，是的 TS 能成功推断出<code>result</code>变量的类型，调用<code>option</code>方法之后会不断扩展当前对象的类型，使得调用<code>get</code>方法后能获取正确的类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span> = &#123;</span><br><span class="line">  <span class="title function_">option</span>(<span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">any</span>): <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">get</span>(): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lolo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;address&#x27;</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;XiaMen&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">get</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ResultType</span> = <span class="keyword">typeof</span> result</span><br><span class="line"><span class="comment">// 期望 ResultType 的类型是：</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   age: number</span></span><br><span class="line"><span class="comment">//   name: string</span></span><br><span class="line"><span class="comment">//   address: &#123;</span></span><br><span class="line"><span class="comment">//     value: string</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span>&lt;T = &#123;&#125;&gt; = &#123;</span><br><span class="line">  option&lt;K <span class="keyword">extends</span> <span class="built_in">string</span>, V <span class="keyword">extends</span> <span class="built_in">any</span>&gt;(<span class="attr">key</span>: K, <span class="attr">value</span>: V): <span class="title class_">Chainable</span>&lt;&#123; [P <span class="keyword">in</span> K]: V &#125; &amp; T&gt;;</span><br><span class="line">  <span class="title function_">get</span>(): T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config.<span class="title function_">option</span>(<span class="string">&quot;age&quot;</span>, <span class="number">7</span>).<span class="title function_">option</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lolo&quot;</span>).<span class="title function_">option</span>(<span class="string">&quot;address&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;XiaMen&quot;</span> &#125;).<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ResultType</span> = <span class="keyword">typeof</span> result;</span><br></pre></td></tr></table></figure><h2 id="第三十一题"><a href="#第三十一题" class="headerlink" title="第三十一题"></a>第三十一题</h2><ul><li>实现一个<code>Repeat</code>工具类型，用于根据类型变量<code>C</code>的值，重复<code>T</code>类型并以元祖的形式返回新的类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Repeat</span>&lt;T, C <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Repeat</span>&lt;<span class="number">0</span>, <span class="number">0</span>&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Repeat</span>&lt;<span class="number">1</span>, <span class="number">3</span>&gt;; <span class="comment">// [1, 1, 1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Repeat</span>&lt;<span class="built_in">number</span>, <span class="number">2</span>&gt;; <span class="comment">// [number, number]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Repeat</span>&lt;T, C <span class="keyword">extends</span> <span class="built_in">number</span>, A <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> C ? A : <span class="title class_">Repeat</span>&lt;T, C, [...A, T]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Repeat</span>&lt;<span class="number">0</span>, <span class="number">0</span>&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Repeat</span>&lt;<span class="number">1</span>, <span class="number">3</span>&gt;; <span class="comment">// [1, 1, 1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Repeat</span>&lt;<span class="built_in">number</span>, <span class="number">2</span>&gt;; <span class="comment">// [number, number]</span></span><br></pre></td></tr></table></figure><h2 id="第三十二题"><a href="#第三十二题" class="headerlink" title="第三十二题"></a>第三十二题</h2><ul><li>实现一个<code>RepeatString</code>工具类型，用于根据类型变量<code>C</code>的值，重复 T 类型并以<code>字符串</code>的形式返回新的类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RepeatString</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  C <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>&gt;; <span class="comment">// &#x27;abab&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RepeatString</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  C <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> C</span><br><span class="line">? S</span><br><span class="line">: <span class="title class_">RepeatString</span>&lt;T, C, <span class="string">`<span class="subst">$&#123;S&#125;</span><span class="subst">$&#123;T&#125;</span>`</span>, [...A, T]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>&gt;; <span class="comment">// &#x27;abab&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第三十三题"><a href="#第三十三题" class="headerlink" title="第三十三题"></a>第三十三题</h2><ul><li>实现一个<code>ToNumber</code>工具类型，用于实现把数值字符串转换为数值类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToNumber</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;0&quot;</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;10&quot;</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;20&quot;</span>&gt;; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToNumber</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, S <span class="keyword">extends</span> <span class="built_in">any</span>[] = [], L <span class="keyword">extends</span> <span class="built_in">number</span> = S[<span class="string">&quot;length&quot;</span>]&gt; =</span><br><span class="line"><span class="string">`<span class="subst">$&#123;L&#125;</span>`</span> <span class="keyword">extends</span> T ? L : <span class="title class_">ToNumber</span>&lt;T, [...S, <span class="number">1</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;0&quot;</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;10&quot;</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;20&quot;</span>&gt;; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="第三十四题"><a href="#第三十四题" class="headerlink" title="第三十四题"></a>第三十四题</h2><ul><li>实现一个<code>SmallerThan</code>工具类型，用于比较数值类型的大小，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SmallerThan</span>&lt;</span><br><span class="line">  N <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  M <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">&gt; = <span class="comment">//代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">0</span>, <span class="number">1</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">2</span>, <span class="number">0</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">8</span>, <span class="number">10</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SmallerThan</span>&lt;</span><br><span class="line">  N <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  M <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">any</span>[] = [],</span><br><span class="line">  L <span class="keyword">extends</span> <span class="built_in">number</span> = S[<span class="string">&quot;length&quot;</span>]</span><br><span class="line">&gt; = L <span class="keyword">extends</span> N</span><br><span class="line">? L <span class="keyword">extends</span> M ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">: L <span class="keyword">extends</span> M ? <span class="literal">false</span> : <span class="title class_">SmallerThan</span>&lt;N, M, [...S, <span class="number">1</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">0</span>, <span class="number">1</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">2</span>, <span class="number">0</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">8</span>, <span class="number">10</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第三十五题"><a href="#第三十五题" class="headerlink" title="第三十五题"></a>第三十五题</h2><ul><li>实现一个<code>Add</code>工具类型，用于实现对数组对应的数值进行加法运算，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T, R&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">Add</span>&lt;<span class="number">5</span>, <span class="number">5</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Add</span>&lt;<span class="number">8</span>, <span class="number">20</span>&gt;; <span class="comment">// 28</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Add</span>&lt;<span class="number">10</span>, <span class="number">20</span>&gt;; <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>[], V&gt; = [...T, V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateTuple</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">number</span>[] = []</span><br><span class="line">&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> T ? A : <span class="title class_">CreateTuple</span>&lt;T, <span class="title class_">Push</span>&lt;A, <span class="number">1</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>, R <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = [...<span class="title class_">CreateTuple</span>&lt;T&gt;, ...<span class="title class_">CreateTuple</span>&lt;R&gt;][<span class="string">&quot;length&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">Add</span>&lt;<span class="number">5</span>, <span class="number">5</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Add</span>&lt;<span class="number">8</span>, <span class="number">20</span>&gt;; <span class="comment">// 28</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Add</span>&lt;<span class="number">10</span>, <span class="number">20</span>&gt;; <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h2 id="第三十六题"><a href="#第三十六题" class="headerlink" title="第三十六题"></a>第三十六题</h2><ul><li>实现一个<code>Filter</code>工具类型，用于根据类型变量<code>F</code>的值进行类型过滤，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], F&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Filter</span>&lt;[<span class="number">6</span>, <span class="string">&quot;lolo&quot;</span>, <span class="number">7</span>, <span class="string">&quot;semlinker&quot;</span>, <span class="literal">false</span>], <span class="built_in">number</span>&gt;; <span class="comment">// [6, 7]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Filter</span>&lt;[<span class="string">&quot;kakuqo&quot;</span>, <span class="number">2</span>, [<span class="string">&quot;ts&quot;</span>], <span class="string">&quot;lolo&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [&quot;kakuqo&quot;, &quot;lolo&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Filter</span>&lt;[<span class="number">0</span>, <span class="literal">true</span>, <span class="built_in">any</span>, <span class="string">&quot;abao&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [any, &quot;abao&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本题关键点就是对`any`类型的处理：</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="built_in">any</span> &amp; <span class="number">1</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="built_in">any</span> &amp; <span class="built_in">boolean</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="built_in">any</span> &amp; <span class="built_in">never</span>; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="number">0</span> <span class="keyword">extends</span> (<span class="number">1</span> &amp; T) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], F&gt; = T <span class="keyword">extends</span> [infer <span class="variable constant_">R1</span>, ...infer <span class="variable constant_">R2</span>]</span><br><span class="line">? <span class="title class_">IsAny</span>&lt;<span class="variable constant_">R1</span>&gt; <span class="keyword">extends</span> <span class="literal">true</span></span><br><span class="line">? [<span class="variable constant_">R1</span>, ...<span class="title class_">Filter</span>&lt;<span class="variable constant_">R2</span>, F&gt;]</span><br><span class="line">: [...<span class="variable constant_">R1</span> <span class="keyword">extends</span> F ? [<span class="variable constant_">R1</span>] : [], ...<span class="title class_">Filter</span>&lt;<span class="variable constant_">R2</span>, F&gt;]</span><br><span class="line">:[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Filter</span>&lt;[<span class="number">6</span>, <span class="string">&quot;lolo&quot;</span>, <span class="number">7</span>, <span class="string">&quot;semlinker&quot;</span>, <span class="literal">false</span>], <span class="built_in">number</span>&gt;; <span class="comment">// [6, 7]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Filter</span>&lt;[<span class="string">&quot;kakuqo&quot;</span>, <span class="number">2</span>, [<span class="string">&quot;ts&quot;</span>], <span class="string">&quot;lolo&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [&quot;kakuqo&quot;, &quot;lolo&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Filter</span>&lt;[<span class="number">0</span>, <span class="literal">true</span>, <span class="built_in">any</span>, <span class="string">&quot;abao&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [any, &quot;abao&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第三十七题"><a href="#第三十七题" class="headerlink" title="第三十七题"></a>第三十七题</h2><ul><li>实现一个<code>Flat</code>工具类型，支持把数组类型拍平（扁平化）,示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer <span class="title class_">First</span>, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">First</span> <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">? [...<span class="title class_">Flat</span>&lt;<span class="title class_">First</span>&gt;, ...<span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">: [<span class="title class_">First</span>, ...<span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">: [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], S <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = T <span class="keyword">extends</span> [infer R, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? R <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">? <span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Flat</span>&lt;R, S&gt;&gt;</span><br><span class="line">: <span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>, [...S, R]&gt;</span><br><span class="line">: S</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第三十八题"><a href="#第三十八题" class="headerlink" title="第三十八题"></a>第三十八题</h2><ul><li>实现<code>StartsWith</code>工具类型，判断字符串字面量类型<code>T</code>是否以给定的字符串字面量类型<code>U</code>开头，并根据判断结果返回布尔值，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StartsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>之后，继续实现<code>EndsWith</code>工具类型，判断字符串字面量类型<code>T</code>是否以给定的字符串字面量类型<code>U</code>结尾，并根据判断结果返回布尔值，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EndsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;23&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>&gt;; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StartWith</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StartsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;U&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EndsWith</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EndsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Head&#125;</span><span class="subst">$&#123;U&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;23&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>&gt;; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="第三十九题"><a href="#第三十九题" class="headerlink" title="第三十九题"></a>第三十九题</h2><ul><li>实现<code>IsAny</code>工具类型，用于判断类型<code>T</code>是否为<code>any</code>类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路： 利用任何类型和any交叉都等于any来实现</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="number">0</span> <span class="keyword">extends</span> <span class="number">1</span> &amp; T ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unknown 只能赋给 unknown 或者 any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = [<span class="built_in">unknown</span>] <span class="keyword">extends</span> [T] ? ([T] <span class="keyword">extends</span> [<span class="built_in">string</span>] ? <span class="literal">true</span> : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure><h2 id="第四十题"><a href="#第四十题" class="headerlink" title="第四十题"></a>第四十题</h2><ul><li>实现<code>AnyOf</code>工具类型，只要数组中任意元素的类型非<code>Falsy</code>类型、<code>&#123;&#125;</code>类型或<code>[]</code>类型，则返回<code>true</code>，否则返回<code>false</code>,如果数组为空的话，则返回<code>false</code>，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AnyOf</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">AnyOf</span>&lt;[]&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">AnyOf</span>&lt;[<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">false</span>,[],&#123;&#125;]&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">AnyOf</span>&lt;[<span class="number">1</span>, <span class="string">&quot;&quot;</span>,<span class="literal">false</span>,[],&#123;&#125;]&gt;; <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Falsy</span> = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span></span><br><span class="line">&#125; | [] | <span class="string">&#x27;&#x27;</span> | <span class="string">&quot;&quot;</span> | <span class="literal">false</span> | <span class="number">0</span> | <span class="literal">undefined</span> | <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyOf</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? (A <span class="keyword">extends</span> <span class="title class_">Falsy</span> ? <span class="title class_">AnyOf</span>&lt;<span class="title class_">Rest</span>&gt; : <span class="literal">true</span>)</span><br><span class="line">: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="第四十一题"><a href="#第四十一题" class="headerlink" title="第四十一题"></a>第四十一题</h2><ul><li>实现<code>Replace</code>工具类型，用于实现字符串类型的替换操作，具体的使用示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoobar&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>此外，继续实现<code>ReplaceAll</code>工具类型，用于实现替换所有满足条件的字串，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;barfoo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R3</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarfoobar&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;fobarfobar&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer H&#125;</span><span class="subst">$&#123;From&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="string">`<span class="subst">$&#123;H&#125;</span><span class="subst">$&#123;To&#125;</span><span class="subst">$&#123;R&#125;</span>`</span></span><br><span class="line">: S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoobar&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer H&#125;</span><span class="subst">$&#123;From&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="string">`<span class="subst">$&#123;H&#125;</span><span class="subst">$&#123;To&#125;</span><span class="subst">$&#123;ReplaceAll&lt;R, From, To&gt;&#125;</span>`</span></span><br><span class="line">: S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;barfoo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R3</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarfoobar&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;fobarfobar&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第四十二题"><a href="#第四十二题" class="headerlink" title="第四十二题"></a>第四十二题</h2><ul><li>实现<code>IndexOf</code>工具类型，用于获取数组类型中指定项的索引值，若不存在的话，则返回<code>-1</code>字面量类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IndexOf</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">0</span>&gt;; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">1</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">3</span>&gt;; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IndexOf</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>, R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = A <span class="keyword">extends</span> [infer H, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Item</span> <span class="keyword">extends</span> H</span><br><span class="line">? R[<span class="string">&quot;length&quot;</span>]</span><br><span class="line">: <span class="title class_">IndexOf</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Item</span>, [...R, H]&gt;</span><br><span class="line">: -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">0</span>&gt;; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">1</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">3</span>&gt;; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="第四十三题"><a href="#第四十三题" class="headerlink" title="第四十三题"></a>第四十三题</h2><ul><li>实现一个<code>Permutation</code>工具类型，当输入一个联合类型时，返回一个包含该联合类型的全排列类型数组。示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, K = T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] | [&#x27;b&#x27; , &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;; <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;] | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, K = T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>]</span><br><span class="line">? []</span><br><span class="line">: K <span class="keyword">extends</span> K</span><br><span class="line">? [K, ...<span class="title class_">Permutation</span>&lt;<span class="title class_">Exclude</span>&lt;T, K&gt;&gt;]</span><br><span class="line">: <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] | [&#x27;b&#x27; , &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;; <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;] | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第四十四题"><a href="#第四十四题" class="headerlink" title="第四十四题"></a>第四十四题</h2><ul><li>实现<code>Unpacked</code>工具类型，用于对类型执行“拆箱”操作，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unpacked</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T00</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T01</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>[]&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T02</span> = <span class="title class_">Unpacked</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T03</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T04</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;[]&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T05</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T06</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">never</span>&gt;;  <span class="comment">// never</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unpacked</span>&lt;T&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer A</span><br><span class="line">? A</span><br><span class="line">: T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer B&gt;</span><br><span class="line">? B</span><br><span class="line">: T <span class="keyword">extends</span> (infer A)[]</span><br><span class="line">? A</span><br><span class="line">: T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T00</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T01</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>[]&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T02</span> = <span class="title class_">Unpacked</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T03</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T04</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;[]&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T05</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T06</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">never</span>&gt;;  <span class="comment">// never</span></span><br></pre></td></tr></table></figure><h2 id="第四十五题"><a href="#第四十五题" class="headerlink" title="第四十五题"></a>第四十五题</h2><ul><li>实现<code>JsonifiedObject</code>工具类型，用于对<code>Object</code>对象类型进行序列话操作，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">toJSON</span>(): <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Jsonified</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObject</span> = &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;literalstring&quot;</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">date</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">customClass</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    <span class="attr">clz</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">attr</span>: <span class="title class_">Date</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JsonifiedMyObject</span> = <span class="title class_">Jsonified</span>&lt;<span class="title class_">MyObject</span>&gt;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ex</span>: <span class="title class_">JsonifiedMyObject</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: <span class="string">&quot;MyClass&quot;</span> = ex.<span class="property">customClass</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: <span class="built_in">string</span> = ex.<span class="property">obj</span>.<span class="property">nested</span>.<span class="property">attr</span>;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">toJSON</span>(): <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Jsonified</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> &#123; <span class="title function_">toJSON</span>(): infer <span class="title class_">Return</span> &#125;</span><br><span class="line">    ? <span class="title class_">ReturnType</span>&lt;T[K][<span class="string">&quot;toJSON&quot;</span>]&gt;</span><br><span class="line">    : T[K] <span class="keyword">extends</span> (...<span class="attr">arg</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span></span><br><span class="line">    ? <span class="built_in">never</span></span><br><span class="line">    : T[K] <span class="keyword">extends</span> <span class="built_in">object</span></span><br><span class="line">    ? <span class="title class_">Jsonified</span>&lt;T[K]&gt;</span><br><span class="line">    : T[K];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObject</span> = &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;literalstring&quot;</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">date</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">customClass</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    <span class="attr">clz</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">attr</span>: <span class="title class_">Date</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JsonifiedMyObject</span> = <span class="title class_">Jsonified</span>&lt;<span class="title class_">MyObject</span>&gt;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ex</span>: <span class="title class_">JsonifiedMyObject</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: <span class="string">&quot;MyClass&quot;</span> = ex.<span class="property">customClass</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: <span class="built_in">string</span> = ex.<span class="property">obj</span>.<span class="property">nested</span>.<span class="property">attr</span>;</span><br></pre></td></tr></table></figure><h2 id="第四十六题"><a href="#第四十六题" class="headerlink" title="第四十六题"></a>第四十六题</h2><ul><li>实现<code>RequireAllOrNone</code>工具类型，用于满足以下功能，当设置<code>age</code>属性时，<code>gender</code>属性也会变成必填，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAllOrNone</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAllOrNone</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Omit</span>&lt;T, K&gt; &amp; (</span><br><span class="line">  &#123;[P <span class="keyword">in</span> K]-?: T[P]&#125; | &#123;[P <span class="keyword">in</span> K]?: <span class="built_in">never</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123; <span class="comment">// error</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第四十七题"><a href="#第四十七题" class="headerlink" title="第四十七题"></a>第四十七题</h2><ul><li>实现<code>RequireExactlyOne</code>工具类型，用于满足以下功能，即只能包含<code>age</code>或<code>gender</code>属性，不能包含着两个属性，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能包含Keys中唯一的一个Key</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireExactlyOne</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能包含Keys中唯一的一个Key</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireExactlyOne</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T, K <span class="keyword">extends</span> keyof T = <span class="title class_">Keys</span>&gt; =</span><br><span class="line"><span class="title class_">Keys</span> <span class="keyword">extends</span> <span class="built_in">any</span></span><br><span class="line">? <span class="title class_">Omit</span>&lt;T, K&gt; &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, <span class="title class_">Keys</span>&gt;&gt; &amp; <span class="title class_">Partial</span>&lt;<span class="title class_">Record</span>&lt;<span class="title class_">Exclude</span>&lt;K, <span class="title class_">Keys</span>&gt;, <span class="built_in">never</span>&gt;&gt;</span><br><span class="line">: <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第四十八题"><a href="#第四十八题" class="headerlink" title="第四十八题"></a>第四十八题</h2><ul><li>实现<code>ConsistsOnlyOf</code>工具类型，用于判断<code>LongString</code>字符串类型是否由 0 个或多个<code>Substring</code>字符串类型组成，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">SubString</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;ababab&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aBa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C3</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">SubString</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line"><span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">? <span class="literal">true</span></span><br><span class="line">: <span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;SubString&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="title class_">ConsistsOnlyOf</span>&lt;R, <span class="title class_">SubString</span>&gt;</span><br><span class="line">: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;ababab&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aBa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C3</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;在线 TS 地址 &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;typescript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/categories/typescript/"/>
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>获取唯一id的三种方法</title>
    <link href="https://github.com/foolishmax/2022/01/04/%E8%8E%B7%E5%8F%96%E5%94%AF%E4%B8%80id%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/foolishmax/2022/01/04/%E8%8E%B7%E5%8F%96%E5%94%AF%E4%B8%80id%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2022-01-04T03:19:53.000Z</published>
    <updated>2022-07-30T04:14:35.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const UUID = (len = 32) =&gt; &#123;</span><br><span class="line">  return &quot;xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx&quot;</span><br><span class="line">    .replace(/[xy]/g, function replace(c) &#123;</span><br><span class="line">      /* eslint-disable no-bitwise */</span><br><span class="line">      const r = (Math.random() * 16) | 0;</span><br><span class="line">      const v = c === &quot;x&quot; ? r : (r &amp; 0x3) | 0x8;</span><br><span class="line"></span><br><span class="line">      return v.toString(16);</span><br><span class="line">    &#125;)</span><br><span class="line">    .substring(0, len);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const nanoid = (t = 21) =&gt; &#123;</span><br><span class="line">  let e = &quot;&quot;,</span><br><span class="line">    r = crypto.getRandomValues(new Uint8Array(t));</span><br><span class="line">  for (; t--; ) &#123;</span><br><span class="line">    let n = 63 &amp; r[t];</span><br><span class="line">    e +=</span><br><span class="line">      n &lt; 36</span><br><span class="line">        ? n.toString(36)</span><br><span class="line">        : n &lt; 62</span><br><span class="line">        ? (n - 26).toString(36).toUpperCase()</span><br><span class="line">        : n &lt; 63</span><br><span class="line">        ? &quot;_&quot;</span><br><span class="line">        : &quot;-&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const id = URL.createObjectURL(new Blob()).substr(-36)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;uuid&quot;&gt;&lt;a href=&quot;#uuid&quot; class=&quot;headerlink&quot; title=&quot;uuid&quot;&gt;&lt;/a&gt;uuid&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue3源码调试</title>
    <link href="https://github.com/foolishmax/2022/01/02/vue3%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/"/>
    <id>https://github.com/foolishmax/2022/01/02/vue3%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</id>
    <published>2022-01-02T07:11:11.000Z</published>
    <updated>2022-07-30T04:12:12.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue3-源码调试步骤"><a href="#vue3-源码调试步骤" class="headerlink" title="vue3 源码调试步骤"></a>vue3 源码调试步骤</h2><span id="more"></span><h3 id="clone-项目"><a href="#clone-项目" class="headerlink" title="clone 项目"></a>clone 项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue-next.git</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn --ignore-scripts</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>修改<strong>package.json</strong>中的 scripts 下 dev 的配置，后面添加 <em>–sourcemap</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;node scripts/dev.js&quot;</span><br><span class="line">// ⬇</span><br><span class="line">&quot;dev&quot;: &quot;node scripts/dev.js --sourcemap&quot;</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run dev</span><br></pre></td></tr></table></figure><p>当终端出现<strong>waiting for changes…<strong>表示编译成功，可以</strong>ctrl+c</strong>结束进程查看源码了</p><p>打包完成之后，examples 下面的文件会引用 dist 文件下的文件（dist 文件是我们刚才编译后生成的文件）<br><img src="../images/md_img/vue3-dist.jpg" alt="vue3-dist"></p><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><p>我们直接在<strong>package/vue/examples</strong>目录下添加<strong>demo/test.html</strong>文件，并引用**../../dist/vue.global.js**文件就可以使用 vue3 了，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;../../dist/vue.global.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id=&quot;foo&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const App = &#123;</span><br><span class="line">        template: &#x27;#foo&#x27;,</span><br><span class="line">        data: function () &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            name: &#x27;foolishmax&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Vue.createApp(App).mount(&#x27;#app&#x27;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来在浏览器中打开就可以进行 vue3 的代码调试了。</p><p><img src="../images/md_img/vue3-debugger.jpg" alt="vue3-debugger"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vue3-源码调试步骤&quot;&gt;&lt;a href=&quot;#vue3-源码调试步骤&quot; class=&quot;headerlink&quot; title=&quot;vue3 源码调试步骤&quot;&gt;&lt;/a&gt;vue3 源码调试步骤&lt;/h2&gt;</summary>
    
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>lerna开发</title>
    <link href="https://github.com/foolishmax/2021/11/01/lerna%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/foolishmax/2021/11/01/lerna%E5%BC%80%E5%8F%91/</id>
    <published>2021-11-01T10:19:30.000Z</published>
    <updated>2022-07-30T04:11:18.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-npm-私服"><a href="#创建-npm-私服" class="headerlink" title="创建 npm 私服"></a>创建 npm 私服</h2><span id="more"></span><ul><li>verdaccio 是一个简单、零配置的本地私有化 npm 仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cnpm install verdaccio -g</span><br><span class="line"></span><br><span class="line">verdaccio</span><br><span class="line">http://localhost:4873</span><br><span class="line">npm adduser --registry http://localhost:4873/</span><br><span class="line">npm publish --registry http://localhost: 4873/</span><br></pre></td></tr></table></figure><h2 id="lerna-常用命令"><a href="#lerna-常用命令" class="headerlink" title="lerna 常用命令"></a>lerna 常用命令</h2><p>项目初始化<br>| 命令 | 说明 |<br>| — | — |<br>| lerna init –independent | 初始化项目 |</p><p>创建包<br>| 命令 | 说明 |<br>| — | — |<br>| lerna create module-1 | 创建 package |<br>| lerna add | 安装依赖 |<br>| lerna link | 链接依赖 |</p><p>开发和测试<br>| 命令 | 说明 |<br>| — | — |<br>| lerna exec | 执行 shell 脚本 |<br>| lerna run | 执行 npm 命令 |<br>| lerna clean | 清空依赖|<br>| lerna bootstrap | 重新安装依赖 |</p><p>package 依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.给指定package安装依赖</span><br><span class="line">$ lerna add lodash packages/module-1</span><br><span class="line">$ lerna add lodash --scope=module-1</span><br><span class="line">$ lerna add lodash **/module-1</span><br><span class="line">$yarn workspace module-1 add lodash</span><br><span class="line"></span><br><span class="line">2.给所有package安装依赖</span><br><span class="line">$ lerna add lodash</span><br><span class="line"></span><br><span class="line">3.workspace之间的依赖</span><br><span class="line">$ lerna add module-2 packages/module-1</span><br><span class="line">$ lerna add module-2 --scope module-1</span><br></pre></td></tr></table></figure><p>发布</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lerna publish</span><br></pre></td></tr></table></figure><h2 id="lerna-json"><a href="#lerna-json" class="headerlink" title="lerna.json"></a>lerna.json</h2><ul><li>version: 当前仓库的版本，independent mode 请设置为 <strong>independent</strong>.<ul><li>lerna 对于包的管理有两种模式：固定模式 fixed、独立模式 independent。</li><li>固定模式所有包是统一的版本号，每次升级所有包统一更新，无论这个包内容是否改变。 *具体体现在 lerna 的配置文件中 lerna.json 中永远会存在一个确定版本号：{“version”: “0.0.1”}</li><li>独立模式，每个包都是单独的版本号，每次 lerna 触发发布命令，每个包的版本都会单独变化，具体体现在 lerna 的配置文件 lerna.json 中没有一个确定的版本号，而是{“version”:”independent”}</li></ul></li><li>npmClient: 指定运行的客户端程序 默认为 npm</li><li>ignoreChanges: 一个不包含在<strong>lerna changed/publish</strong>的 glob 数组，使用这个阻止发布不必要的更新，比如修复<strong>README.md</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;useWorkspaces&quot;: true, // 使用 workspaces 配置。此项为 true 的话，将使用 package.json 的 &quot;workspaces&quot;，下面的 &quot;packages&quot; 字段将不生效</span><br><span class="line">    &quot;version&quot;: &quot;0.1.0&quot;, // 所有包版本号，独立模式-&quot;independent&quot;</span><br><span class="line">    &quot;npmClient&quot;: &quot;cnpm&quot;, // npm client，可设置为 cnpm、yarn 等</span><br><span class="line">    &quot;packages&quot;: [ // 包所在目录，可指定多个</span><br><span class="line">        &quot;packages/*&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;command&quot;: &#123; // lerna 命令相关配置</span><br><span class="line">        &quot;publish&quot;: &#123; // 发布相关</span><br><span class="line">            &quot;ignoreChanges&quot;: [ // 指定文件或目录的变更，不触发 publish</span><br><span class="line">                &quot;.gitignore&quot;,</span><br><span class="line">                &quot;*.log&quot;,</span><br><span class="line">                &quot;*.md&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;bootstrap&quot;: &#123; // bootstrap 相关</span><br><span class="line">            &quot;ignore&quot;: &quot;npm-*&quot;,  // 不受 bootstrap 影响的包</span><br><span class="line">            &quot;npmClientArgs&quot;: [ // bootstr 执行参数</span><br><span class="line">                &quot;--no-package-lock&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CRA-lerna-react-typescript-项目搭建"><a href="#CRA-lerna-react-typescript-项目搭建" class="headerlink" title="CRA + lerna + react + typescript 项目搭建"></a>CRA + lerna + react + typescript 项目搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.create-react-app demo --template typescript</span><br><span class="line"></span><br><span class="line">2.cd demo</span><br><span class="line"></span><br><span class="line">3.npm run eject</span><br><span class="line"></span><br><span class="line">4.lerna init</span><br><span class="line"></span><br><span class="line">5.lerna create builder-script</span><br><span class="line"></span><br><span class="line">6.自定义builder-scripts脚本命令</span><br><span class="line"></span><br><span class="line">7.自定义 eslintrc、tsconfig、webpack等配置项</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;创建-npm-私服&quot;&gt;&lt;a href=&quot;#创建-npm-私服&quot; class=&quot;headerlink&quot; title=&quot;创建 npm 私服&quot;&gt;&lt;/a&gt;创建 npm 私服&lt;/h2&gt;</summary>
    
    
    
    <category term="lerna" scheme="https://github.com/foolishmax/categories/lerna/"/>
    
    
    <category term="lerna" scheme="https://github.com/foolishmax/tags/lerna/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置工程师</title>
    <link href="https://github.com/foolishmax/2021/10/27/webpack%E9%85%8D%E7%BD%AE%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <id>https://github.com/foolishmax/2021/10/27/webpack%E9%85%8D%E7%BD%AE%E5%B7%A5%E7%A8%8B%E5%B8%88/</id>
    <published>2021-10-27T02:48:00.000Z</published>
    <updated>2022-07-30T04:12:21.884Z</updated>
    
    <content type="html"><![CDATA[<p>构建 webpack 知识体系分为下面三个层级： 1.基础–会配置 2.进阶–能优化 3.深入–懂原理</p><h2 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h2><span id="more"></span><h3 id="1-简单配置"><a href="#1-简单配置" class="headerlink" title="1.简单配置"></a>1.简单配置</h3><p>该部分需掌握：<br>1.Webpack 常规配置项有哪些？ 2.常用 loader 有哪些？如何配置？ 3.常用插件 plugin 有哪些？如何配置？<br>4.Babel 如何配置？Babel 插件如何使用？</p><h4 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h4><p>需要现在本地安装<strong>webpack</strong>及<strong>webpack-cli</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h4 id="1-2-开始工作"><a href="#1-2-开始工作" class="headerlink" title="1.2 开始工作"></a>1.2 开始工作</h4><p>webpack 在 4 以后就支持 0 配置打包，我们可以测试一下 1.新建 webpack-work 项目，新建 <code>./src/index.js</code>文件，写一段简单的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const a = &#x27;hello foolishmax&#x27;;</span><br><span class="line">console.log(a);</span><br><span class="line">module.exports = a;</span><br></pre></td></tr></table></figure><p>2.直接运行<code>npx webpack</code>，启动打包<br><img src="../images/md_img/webpack-mode-error.png" alt="webpack-mode-error">)</p><p>打包完成，会有一个提示：<code>The &#39;mode&#39; option has not been set,...</code></p><p>意思就是我们没有配置 mode（告知 webpack 使用相应模式的内置优化，默认为<code>production</code>，另外还有<code>development</code>、<code>none</code>）</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>development</td><td>开发模式，打包更加快速，省了代码优化步骤</td></tr><tr><td>production</td><td>生产模式，打包比较慢，开启 tree-shaking 和压缩代码</td></tr><tr><td>none</td><td>不使用任何默认优化选项</td></tr></tbody></table><p>webpack.config.js 中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-配置文件"><a href="#1-3-配置文件" class="headerlink" title="1.3 配置文件"></a>1.3 配置文件</h4><p>虽然可以零配置打包，但是实际工作中，还是需要使用配置文件的方式来满足不同项目的需求。 1.跟路径下创建配置文件<code>webpack.config.js</code> 2.新增基本配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;, // 模式</span><br><span class="line">  entry: &#x27;./src/index.js&#x27;, // 打包入口地址</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.js&#x27;, // 输出文件名</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;) // 输出文件目录</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-4-loader"><a href="#1-4-loader" class="headerlink" title="1.4 loader"></a>1.4 loader</h4><p>这里我们把入口文件改成 css 文件，看下打包结果如何 1.新增<code>./src/main.css</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 0 20px;</span><br><span class="line">  max-width: 800px;</span><br><span class="line">  background: #f4f8fb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.修改 entry 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  entry: &#x27;./src/main.css&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.js&#x27;,</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.运行打包命令： <code>npx webpack</code><br><img src="../images/md_img/webpack-loader.png" alt="loader"><br>这里的报错信息是因为：webpack 默认支持处理 js 文件，其他类型都处理不了，需要借助 loader 来对不同类型的文件进行处理。</p><p>4.安装<code>css-loader</code>来处理 CSS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader -D</span><br></pre></td></tr></table></figure><p>5.配置资源加载模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  entry: &#x27;./src/main.css&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.css&#x27;,</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [ // 转换规则</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/, // 匹配所有css文件</span><br><span class="line">        use: &#x27;css-loader&#x27;, //对应的loader名称</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.重新运行打包命令<code>npx webpack</code>,就可以打包成功了</p><p>总结：loader 就是将 webpack 不认识的内容转化为认识的内容</p><h4 id="插件（plugin）"><a href="#插件（plugin）" class="headerlink" title="插件（plugin）"></a>插件（plugin）</h4><p>插件可以贯穿 webpack 打包的生命周期，执行不同的任务</p><p>1.新建<code>./src/index.html</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果想要打包后的资源文件，例如 js 或者 css 文件可以自动引入到 html 中，就需要使用插件<code>html-webpack-plugin</code>来做这件事情。</p><p>2.本地安装 <code>html-webpack-plugin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>3.配置插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  entry: &#x27;./src/main.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.js&#x27;,</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [ // 转换规则</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/, // 匹配所有css文件</span><br><span class="line">        use: &#x27;css-loader&#x27;, //对应的loader名称</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行一下打包，打开 dist 目录下的 index.html 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script defer src=&quot;bundle.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到它自动引入打包好的 bundle.js</p><h4 id="1-6-自动清空打包目录"><a href="#1-6-自动清空打包目录" class="headerlink" title="1.6 自动清空打包目录"></a>1.6 自动清空打包目录</h4><p>每次打包的时候，打包目录都会遗留上次打包的文件，为了保持打包目录的纯净，打包前需将上次打包目录清空。</p><p>1.安装 <code>clean-webpack-plugin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>2.配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-区分环境"><a href="#1-7-区分环境" class="headerlink" title="1.7 区分环境"></a>1.7 区分环境</h4><p>本底环境</p><ul><li>需要更快的构建速度</li><li>需要打印 debug 信息</li><li>需要 live reload 或者 hot reload 功能</li><li>需要 sourcemap 方便定位问题</li><li>…</li></ul><p>生产环境：</p><ul><li>需要更小的包体积，代码压缩+tree-shaking</li><li>需要进行代码分割</li><li>需要压缩图片体积</li><li>…</li></ul><p><a href="https://juejin.cn/post/7023242274876162084#heading-6">掘金</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;构建 webpack 知识体系分为下面三个层级： 1.基础–会配置 2.进阶–能优化 3.深入–懂原理&lt;/p&gt;
&lt;h2 id=&quot;一、基础篇&quot;&gt;&lt;a href=&quot;#一、基础篇&quot; class=&quot;headerlink&quot; title=&quot;一、基础篇&quot;&gt;&lt;/a&gt;一、基础篇&lt;/h2&gt;</summary>
    
    
    
    <category term="Webpack" scheme="https://github.com/foolishmax/categories/Webpack/"/>
    
    
    <category term="Webpack" scheme="https://github.com/foolishmax/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>React深入浅出知识链路</title>
    <link href="https://github.com/foolishmax/2021/10/05/React%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF/"/>
    <id>https://github.com/foolishmax/2021/10/05/React%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF/</id>
    <published>2021-10-05T03:07:11.000Z</published>
    <updated>2022-07-30T04:11:57.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React-框架的关键设计思想：“组件”、“虚拟-DOM”"><a href="#React-框架的关键设计思想：“组件”、“虚拟-DOM”" class="headerlink" title="React 框架的关键设计思想：“组件”、“虚拟 DOM”"></a>React 框架的关键设计思想：“组件”、“虚拟 DOM”</h3><span id="more"></span><h3 id="组件化-工程化思想在框架中的落地"><a href="#组件化-工程化思想在框架中的落地" class="headerlink" title="组件化: 工程化思想在框架中的落地"></a>组件化: 工程化思想在框架中的落地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“封闭”：在组件自身的渲染工作流中，每个组件都只处理它的内部的渲染逻辑。</span><br><span class="line">“开放”：针对组件间通信来说，React基于“单向数据流”的原则完成组件间的通信。</span><br></pre></td></tr></table></figure><!--more--><h3 id="虚拟-DOM：核心算法的基石："><a href="#虚拟-DOM：核心算法的基石：" class="headerlink" title="虚拟 DOM：核心算法的基石："></a>虚拟 DOM：核心算法的基石：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件初始化-&gt;render方法-&gt;生成虚拟DOM-&gt;ReactDOM.render方法-&gt;生成真实DOM</span><br><span class="line"></span><br><span class="line">组件更新-&gt;render方法-&gt;生成新的虚拟DOM-&gt;diff算法-&gt;定位两次虚拟DOM的差异-&gt;批量更新</span><br></pre></td></tr></table></figure><h3 id="componentWillReceiveProps-nextProps"><a href="#componentWillReceiveProps-nextProps" class="headerlink" title="componentWillReceiveProps(nextProps)"></a>componentWillReceiveProps(nextProps)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果父组件导致子组件重新渲染，即使props没有更改，也会调用此方法，如果只想处理更改，请确保当前值和变更值的比较。---React官方</span><br></pre></td></tr></table></figure><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React组件会根据shouldComponentUpdate的返回值来决定是否执行后面的生命周期进而决定是否对组件进行re-render(重渲染)</span><br></pre></td></tr></table></figure><h3 id="getDerivedStateFromProps-新增-不是-componentWillMount-废弃-的替代品"><a href="#getDerivedStateFromProps-新增-不是-componentWillMount-废弃-的替代品" class="headerlink" title="getDerivedStateFromProps(新增)不是 componentWillMount(废弃)的替代品"></a>getDerivedStateFromProps(新增)不是 componentWillMount(废弃)的替代品</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getDerivedStateFromProps有且仅有一个用途：使用props来派生/更新state</span><br><span class="line"></span><br><span class="line">static getDerivedStateFromProps(props, state)</span><br><span class="line">1.静态方法，访问不到this</span><br><span class="line">2.参数 props(父组件)和state(自身)</span><br><span class="line">3.对象格式的返回值，用来更新自身state（更新并非覆盖式，而是替换式更新）</span><br><span class="line">4.挂载和更新都会触发此钩子</span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line">getDerivedStateFromProps是作为一个试图代替componentWillReceiveProps的API出现的。</span><br><span class="line">getDerivedStateFromProps不能完全和componentWillReceiveProps画等号</span><br><span class="line"></span><br><span class="line">原因：getDerivedStateFromProps仅可以代替componentWillReceiveProps来实现基于props派生state，原则来说能且只能做这一件事。</span><br></pre></td></tr></table></figure><h3 id="getSnapshotBeforeUpdate-新增-与-componentWillUpdate-废弃"><a href="#getSnapshotBeforeUpdate-新增-与-componentWillUpdate-废弃" class="headerlink" title="getSnapshotBeforeUpdate(新增)与 componentWillUpdate(废弃)"></a>getSnapshotBeforeUpdate(新增)与 componentWillUpdate(废弃)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSnapshotBeforeUpdate(prevProps, prevState)&#123;&#125;</span><br><span class="line">1. 执行时机在render方法之后，真实DOM更新之前</span><br><span class="line">2.返回值会作为第三个参数传递给componentDidUpdate</span><br></pre></td></tr></table></figure><h3 id="Fiber-架构（核心：可中断、可恢复、优先级）"><a href="#Fiber-架构（核心：可中断、可恢复、优先级）" class="headerlink" title="Fiber 架构（核心：可中断、可恢复、优先级）"></a>Fiber 架构（核心：可中断、可恢复、优先级）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.Fiber是React16对React核心算法的一次重写</span><br><span class="line">2.Fiber会使原本同步的渲染过程变成异步的</span><br><span class="line">3.Fiber会将一个大的更新任务拆解为许多个小任务(工作单元)，这些工作单元有着不同的优先级，react可以根据优先级的高低去实现工作单元的打断和恢复</span><br><span class="line"></span><br><span class="line">Fiber架构的重要特征就是可以被打断的异步渲染模式，根据能否被打断这一标准，React16的生命周期被划分为render和commit两个阶段</span><br><span class="line">render阶段在执行过程中允许被打断（因为此阶段用户不可见，打断也无影响）</span><br><span class="line">commit阶段总是同步执行（涉及到同步渲染，会影响用户直观体验）</span><br><span class="line"></span><br><span class="line">render阶段是允许暂停、终止和重启的，这就导致render阶段的生命周期都是有可能被重复执行，所以要废弃处于render阶段的一些生命周期：componentWillMount、componenntUpdate、componentWillReceiveProps、shouldComponentUpdate(一般不会在这个生命周期中进行副作用操作，所以相对风险不大，没有被废弃)</span><br><span class="line"></span><br><span class="line">每个更新任务都会被赋予一个优先级</span><br><span class="line">若B任务的优先级高于当前任务A，那么当前处于Reconciler层的A任务就会被中断，当B任务完成后，A任务就会被重新推入Reconciler层，继续它的渲染，这便是所谓的“可恢复”</span><br><span class="line"></span><br><span class="line">Fiber架构对生命周期的影响</span><br><span class="line">react15: render开始-&gt;停不下来的递归计算(同步)-&gt;commit提交渲染</span><br><span class="line">react16: render开始-&gt;工作单元｜工作单元｜工作单元...(异步)-&gt;commit提交渲染</span><br></pre></td></tr></table></figure><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UI = render(data) 或 UI = f(data)</span><br><span class="line">React的视图会随着数据的变化而变化</span><br></pre></td></tr></table></figure><h3 id="React-Hooks-的使用原则"><a href="#React-Hooks-的使用原则" class="headerlink" title="React-Hooks 的使用原则"></a>React-Hooks 的使用原则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.只在React函数中调用Hook</span><br><span class="line">2.不要在循环、条件和嵌套函数中调用Hook(要确保hooks在每次渲染时都保持同样的执行顺序)</span><br><span class="line"></span><br><span class="line">从源码调用流程看原理：Hooks的正常运作，在底层依赖于顺序链表。</span><br><span class="line">mountState首次渲染构建链表并渲染，updateState依次遍历链表并渲染</span><br><span class="line"></span><br><span class="line">hooks的渲染就是通过依次遍历来定位每个hooks的内容，如果前后两次读到的链表在顺序上出现差异，那么渲染的结果自然就是不可控的</span><br></pre></td></tr></table></figure><h3 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟DOM本质上是JS和DOM之间的一个映射缓存，在形态上表现为一个能够描述DOM结构及其属性信息的JS对象。</span><br></pre></td></tr></table></figure><h3 id="Diff-逻辑的拆分与解读"><a href="#Diff-逻辑的拆分与解读" class="headerlink" title="Diff 逻辑的拆分与解读"></a>Diff 逻辑的拆分与解读</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Diff算法性能突破的关键点在于 分层对比</span><br><span class="line">2.类型一致的节点才有继续Diff的必要性</span><br><span class="line">3.key属性的设置，可以帮我们尽可能重用同一层级内的节点</span><br></pre></td></tr></table></figure><h3 id="setState-异步"><a href="#setState-异步" class="headerlink" title="setState 异步"></a>setState 异步</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setState-&gt;shouldComponentUpdate-&gt;componentWillUpdate-&gt;render-&gt;componentDidUpdate</span><br><span class="line"></span><br><span class="line">批量更新：每来一个setState，就把它塞进一个队列里面存起来，等时机成熟，再把存起来的state结果做合并，最后只针对最后一次最新的state值走一次更新流程</span><br><span class="line"></span><br><span class="line">setState的表现会因为调用的场景不同而不同：</span><br><span class="line">1.在React钩子函数及合成事件中，表现为异步</span><br><span class="line">2.在setTimeout、setInterval等函数中，包括DOM原生事件中，表现为同步。</span><br></pre></td></tr></table></figure><h3 id="ReactDOM-render-调用栈的逻辑分层"><a href="#ReactDOM-render-调用栈的逻辑分层" class="headerlink" title="ReactDOM.render 调用栈的逻辑分层"></a>ReactDOM.render 调用栈的逻辑分层</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补充</span><br></pre></td></tr></table></figure><h3 id="React-事件系统"><a href="#React-事件系统" class="headerlink" title="React 事件系统"></a>React 事件系统</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当事件在具体的DOM节点上被触发后，最终都会冒泡到document上，document上所绑定的统一事件处理程序会将事件分发到具体的组件实例</span><br><span class="line"></span><br><span class="line">react合成事件：在底层抹平了不同浏览器的差异，在上层面向开发者暴漏统一的、稳定的、与DOM原生事件相同的事件接口（原生DOM事件可以通过e.nativeEvent查看）</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;React-框架的关键设计思想：“组件”、“虚拟-DOM”&quot;&gt;&lt;a href=&quot;#React-框架的关键设计思想：“组件”、“虚拟-DOM”&quot; class=&quot;headerlink&quot; title=&quot;React 框架的关键设计思想：“组件”、“虚拟 DOM”&quot;&gt;&lt;/a&gt;React 框架的关键设计思想：“组件”、“虚拟 DOM”&lt;/h3&gt;</summary>
    
    
    
    <category term="React" scheme="https://github.com/foolishmax/categories/React/"/>
    
    
    <category term="React" scheme="https://github.com/foolishmax/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>面试题目手写部分</title>
    <link href="https://github.com/foolishmax/2021/10/04/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%89%8B%E5%86%99%E9%83%A8%E5%88%86/"/>
    <id>https://github.com/foolishmax/2021/10/04/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%89%8B%E5%86%99%E9%83%A8%E5%88%86/</id>
    <published>2021-10-04T13:57:04.000Z</published>
    <updated>2022-07-30T04:15:21.853Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="手写部分"><a href="#手写部分" class="headerlink" title="手写部分"></a>手写部分</h1><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// indexOf</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    let res = [];</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if(res.indexOf(arr[i]) &lt; 0) &#123;</span><br><span class="line">            res.push(arrp[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// includes</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    let res = [];</span><br><span class="line"></span><br><span class="line">    for (let item of arr) &#123;</span><br><span class="line">        if(!res.includes(item)) &#123;</span><br><span class="line">            res.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 利用filter</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    const res  = arr.filter(function(item, index, array)&#123;</span><br><span class="line">        return array.indexOf(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 利用Es6中的Set数据结构(扩展运算符)</span><br><span class="line">const unique = arr =&gt; [...new Set(arr)];</span><br><span class="line"></span><br><span class="line">// Array.form 方法将set结构转换为数组</span><br><span class="line">const unique = arr =&gt; Array.from(new Set(arr));</span><br></pre></td></tr></table></figure><h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,[2,[3]]]</span><br><span class="line"></span><br><span class="line">// let res = arr.flat(Infinity)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// let res = JSON.parse(&quot;[&quot;+JSON.stringify(arr).replace(/\[|\]/g,&quot;&quot;) + &quot;]&quot;)</span><br><span class="line"></span><br><span class="line">function flatArr(arr) &#123;</span><br><span class="line">    let res = arr.reduce((accu, curr) =&gt; &#123;</span><br><span class="line">        return accu.concat(Array.isArray(curr) ? flatArr(curr) : curr)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(flatArr(arr))</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 只考虑对象类型</span><br><span class="line">function shallowCopy(obj) &#123;</span><br><span class="line">    if (typeof obj !== &#x27;object&#x27;) return;</span><br><span class="line">    let newObj = obj instanceof Array ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    if(obj === null) return obj;</span><br><span class="line">    if(obj instanceof Date) return new Date(obj);</span><br><span class="line">    if(obj instanceof RegExp) return new RegExp(obj);</span><br><span class="line"></span><br><span class="line">    for (let key in obj) &#123;</span><br><span class="line">        if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Object.assign()</span><br><span class="line">// arr.slice(0)</span><br><span class="line">// arr.concat()</span><br><span class="line">// 扩展运算符</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 只考虑普通对象属性，不考虑内置对象和函数</span><br><span class="line">function deepCone(obj) &#123;</span><br><span class="line">    if (typeof obj !== &#x27;object&#x27;) return;</span><br><span class="line">    let newObj = obj instanceof Array ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    if(obj === null) return obj;</span><br><span class="line">    if(obj instanceof Date) return new Date(obj);</span><br><span class="line">    if(obj instanceof RegExp) return new RegExp(obj);</span><br><span class="line"></span><br><span class="line">    for(let key in obj) &#123;</span><br><span class="line">        if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = typeof obj[key] === &#x27;object&#x27; ? deepClone(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// JSON.parse(JSON.stringify())</span><br><span class="line">// lodash: _.cloneDeep()</span><br></pre></td></tr></table></figure><h2 id="实现一个-compose-组合-函数"><a href="#实现一个-compose-组合-函数" class="headerlink" title="实现一个 compose(组合)函数"></a>实现一个 compose(组合)函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function compose(...fn) &#123;</span><br><span class="line">    if(!fn.length) return (v) =&gt; v;</span><br><span class="line">    if(fn.length === 1) return fn[0];</span><br><span class="line"></span><br><span class="line">    return fn.reduce((accu, curr) =&gt; (...args) =&gt; accu(curr(...args)) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">function fn1(x) &#123;</span><br><span class="line">  return x + 1;</span><br><span class="line">&#125;</span><br><span class="line">function fn2(x) &#123;</span><br><span class="line">  return x + 2;</span><br><span class="line">&#125;</span><br><span class="line">function fn3(x) &#123;</span><br><span class="line">  return x + 3;</span><br><span class="line">&#125;</span><br><span class="line">function fn4(x) &#123;</span><br><span class="line">  return x + 4;</span><br><span class="line">&#125;</span><br><span class="line">const res = compose(fn1, fn2, fn3, fn4);</span><br><span class="line">console.log(res(5)); // 5+4+3+2+1=15</span><br></pre></td></tr></table></figure><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Object.assign = function(target, ...source) &#123;</span><br><span class="line">    if (target === null || target === undefined) &#123;</span><br><span class="line">        throw new TypeError(&quot;Cannot convert undefined or null to object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let result = Object(target);</span><br><span class="line"></span><br><span class="line">    source.forEach(function(obj)&#123;</span><br><span class="line">        if (obj !== null) &#123;</span><br><span class="line">            for (let key in obj) &#123;</span><br><span class="line">                if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">                    result[key] = obj[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function debounce (func, wait) &#123;</span><br><span class="line">    let timeout;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line"></span><br><span class="line">        timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">            func.apply(this, arguments)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 搜索联想，用户在不断输入时，用防抖来节约请求资源</span><br><span class="line">// window触发resize的时候</span><br></pre></td></tr></table></figure><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) &#123;</span><br><span class="line">    const previous = 0;</span><br><span class="line"></span><br><span class="line">    return function() &#123;</span><br><span class="line">        const now = +new Date();</span><br><span class="line">        if(now - previous  &gt; wait) &#123;</span><br><span class="line">            func.apply(this, arguments);</span><br><span class="line"></span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 鼠标不断点击触发，可以使其单位时间内只触发以此</span><br><span class="line">// 监听滚动事件</span><br><span class="line">// 防止高频点击提交</span><br></pre></td></tr></table></figure><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function curry(fn, ...args) &#123;</span><br><span class="line">    // 需要柯里化的函数fn，也可以支持初始参数的传入</span><br><span class="line"></span><br><span class="line">    return function() &#123;</span><br><span class="line">        //参数缓存在args里面,合并上次参数和本次参数</span><br><span class="line">        args = [...args, ...arguments]</span><br><span class="line"></span><br><span class="line">        // 判断参数个数，不够继续递归</span><br><span class="line">        if (args.length &lt; fn.length) &#123;</span><br><span class="line">            return curry(fn, ...args)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        //参数足够返回函数执行结果</span><br><span class="line">            return fn.apply(null, args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar(a, b, c) &#123;</span><br><span class="line">    return a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const f = curry(bar)</span><br><span class="line"></span><br><span class="line">console.log(f(1)(2)(3),f(1,2)(3),f(1,2,3))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何把字符串中大小写取反"><a href="#如何把字符串中大小写取反" class="headerlink" title="如何把字符串中大小写取反"></a>如何把字符串中大小写取反</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;LiBoShi&quot;;</span><br><span class="line"></span><br><span class="line">str = str.replace(/[a-zA-Z]/g, content =&gt; &#123;</span><br><span class="line">    return content.toUpperCase() === content ? content.toLowerCase() : content.toUpperCase();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf"><a href="#从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf" class="headerlink" title="从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf"></a>从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 普通方法</span><br><span class="line">function myIndexOf(T) &#123;</span><br><span class="line">    let index = -1;</span><br><span class="line">    for(let i = 0; i &lt;= this.length - T.length; i++) &#123;</span><br><span class="line">        if (this.substr(i, T.length) === T) &#123;</span><br><span class="line">             return index = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String.prototype.myIndexOf = myIndexOf;</span><br><span class="line">// 正则方法</span><br><span class="line">function myIndexOf(T) &#123;</span><br><span class="line">    let reg = new RegExp(T);</span><br><span class="line">    let res = reg.exec(this);</span><br><span class="line"></span><br><span class="line">    return res === null ? -1 : res.index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myCall = function(context, ...args) &#123;</span><br><span class="line">    const ctx = context || window;</span><br><span class="line">    const fn = Symbol();</span><br><span class="line"></span><br><span class="line">    ctx[fn] = this;</span><br><span class="line"></span><br><span class="line">    const res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">    delete ctx[fn];</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">let obj = &#123;</span><br><span class="line">    desc: function(from, to) &#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;来自$&#123;from&#125;去往$&#123;to&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let person = &#123;</span><br><span class="line">    name: &#x27;lbs&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.desc.myCall(person, &quot;北京&quot;,&quot;上海&quot;)</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myApply = function(context, args=[]) &#123;</span><br><span class="line">    const ctx = context || window;</span><br><span class="line">    const fn = Symbol();</span><br><span class="line"></span><br><span class="line">    ctx[fn] = this;</span><br><span class="line">    const res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">    delete ctx[fn];</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myBind = function(content, ...args) &#123;</span><br><span class="line">    const fn = this;</span><br><span class="line"></span><br><span class="line">    return function newFn(...newFnArgs) &#123;</span><br><span class="line">        // 检测 New</span><br><span class="line">        // 如果当前函数的this指向的是构造函数中的this 则判定为new 操作</span><br><span class="line">        if (this instanceof newFn) &#123;</span><br><span class="line">            return new fn(...args, ...newFnArgs);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return fn.myApply(context, [...args, ...newFnArgs]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 通过left.__proto__.__proto__这种方式从下往上的获取原型对象</span><br><span class="line">2. 通过Object.create(null)的实例是没有原型链</span><br><span class="line">3. 有原型链的实例的尽头都是Object</span><br><span class="line"></span><br><span class="line">function instanceof(left, right) &#123;</span><br><span class="line">    if(!left.__proto__) return false;</span><br><span class="line">    if(right === Object || left.__proto__ === right.prototype) return true;</span><br><span class="line"></span><br><span class="line">    return instanceof(left.__proto__, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写-Object-is"><a href="#手写-Object-is" class="headerlink" title="手写 Object.is"></a>手写 Object.is</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function is(x, y) &#123;</span><br><span class="line">    if (x===y) &#123;</span><br><span class="line">        // x,y都为0，但是1 / +0 = +Infinity,1 / -0 = -Infinity 是不一样的</span><br><span class="line">        return x !== 0 || y !== 0 || 1 / x === 1 / y;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //NaN === NaN = false是不对的，做一个拦截操作</span><br><span class="line">        return x !== x &amp;&amp; y !== y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function ajax(method, url, headers, body) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        let req = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            req = new XMLHttpRequest();</span><br><span class="line">        &#125; catch&#123;</span><br><span class="line">            req = new ActiveXObject(&#x27;Microsoft.XMLHTTP&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.open(method, url);</span><br><span class="line"></span><br><span class="line">        for(let key in headers) &#123;</span><br><span class="line">            req.setRequestHeader(key, headers[key]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        req.onreadystatechange(() =&gt; &#123;</span><br><span class="line">            if(req.readystate ===4) &#123;</span><br><span class="line">                if(req.status &gt;= 200 &amp;&amp; req.status &lt;= 300) &#123;</span><br><span class="line">                    resolve(req.responseText);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(req);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        req.send(body)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 执行async函数，返回的都是Promise对象</span><br><span class="line">async function test1 () &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">async function test2() &#123;</span><br><span class="line">    return Promise.resolve(2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(test1(),test2());</span><br><span class="line"></span><br><span class="line">// Promise.then 成功的情况对应的就是await</span><br><span class="line">async function test3() &#123;</span><br><span class="line">    const p = Promise.resolve(3);</span><br><span class="line">    p.then((data) =&gt; console.log(data));</span><br><span class="line"></span><br><span class="line">    const data = await p;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test3();</span><br><span class="line"></span><br><span class="line">// Promise.catch 异常对应 try...catch</span><br><span class="line">async function test4() &#123;</span><br><span class="line">    const p = Promise.reject(&quot;异常了&quot;);</span><br><span class="line"></span><br><span class="line">    try&#123;</span><br><span class="line">        const data = await p;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125; catch(e)&#123;</span><br><span class="line">        console.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test4();</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.map = function(fn, toThis) &#123;</span><br><span class="line">    const arr = this;</span><br><span class="line">    const result = [];</span><br><span class="line">    const _this = toThis || Object.create(null);</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        const item = fn.call(_this, arr[i], i, arr);</span><br><span class="line">        result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写-promise"><a href="#手写-promise" class="headerlink" title="手写 promise"></a>手写 promise</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">class Promise1&#123;</span><br><span class="line">    static PENDING = &#x27;pending&#x27;;</span><br><span class="line">    static FULFILLED = &#x27;fulfilled&#x27;;</span><br><span class="line">    static REJECTED = &#x27;rejected&#x27;;</span><br><span class="line"></span><br><span class="line">    constructor(executor) &#123;</span><br><span class="line">        this.status = Promise.PENDING; //默认状态，进行中</span><br><span class="line">        this.value = null; //成功值</span><br><span class="line">        this.reason = null;  // 失败原因</span><br><span class="line">        // 解决异步问题</span><br><span class="line">        this.onFulfilledCallbacks = [];</span><br><span class="line">        this.onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            executor(this.resolve.bind(this), this.reject.bind(this))</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">            this.reject(e)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(value) &#123;</span><br><span class="line">        if (this.status === Promise.PENDING) &#123;</span><br><span class="line">            this.status = Promise.FULFILLED;</span><br><span class="line">            this.value = value;</span><br><span class="line"></span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                this.onFulfilledCallbacks.forEach((cb) =&gt; cb((this.value)))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject(reason) &#123;</span><br><span class="line">        if (this.status === Promise.PENDING) &#123;</span><br><span class="line">            this.status = Promise.REJECTED;</span><br><span class="line">            this.reason = reason;</span><br><span class="line"></span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                this.onRejectedCallbacks.forEach((cb) =&gt; cb(this.reason))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        if (typeof onFulfilled !== &#x27;function&#x27;) &#123;</span><br><span class="line">            onFulfilled = () =&gt; this.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (typeof onRejected !== &#x27;function&#x27;) &#123;</span><br><span class="line">            onRejected = () =&gt; this.reason;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">            if (this.status === Promise.PENDING) &#123;</span><br><span class="line">                return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">                    this.onFulfilledCallbacks.push(() =&gt; &#123;</span><br><span class="line">                        this.parse(onFulfilled(this.value), resolve, reject)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">                    this.onRejectedCallbacks.push(() =&gt; &#123;</span><br><span class="line">                        this.parse(onRejected(this.value),resolve,reject)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (this.status === Promise.FULFILLED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">                        this.parse(onFulfilled(this.value), resolve, reject)</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (this.status === Promise.REJECTED) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">                        this.parse(onRejected(this.reason), resolve, reject)</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parse(result, resolve, reject) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (result instanceof Promise1) &#123;</span><br><span class="line">                result.then(resolve, reject)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resolve(result)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static resolve(value) &#123;</span><br><span class="line">        return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">            if (value instanceof Promise1) &#123;</span><br><span class="line">                value.then(resolve, reject)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resolve(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static reject(reason) &#123;</span><br><span class="line">        return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">            reject(reason)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static all(promises) &#123;</span><br><span class="line">        const result = [];</span><br><span class="line"></span><br><span class="line">        return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">            promises.forEach((promise) =&gt; &#123;</span><br><span class="line">                promise.then((value) =&gt; &#123;</span><br><span class="line">                    result.push(value);</span><br><span class="line"></span><br><span class="line">                    if (result.length === promises.length) &#123;</span><br><span class="line">                        resolve(result)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,reason =&gt; &#123;</span><br><span class="line">                    reject(reason)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static race(promises) &#123;</span><br><span class="line">        return new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">            promises.forEach((promise) =&gt; &#123;</span><br><span class="line">                promise.then((value) =&gt; &#123;</span><br><span class="line">                    resolve(value)</span><br><span class="line">                &#125;,(reason) =&gt; &#123;</span><br><span class="line">                    reject(reason)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let aaa = new Promise1((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(&quot;lbs&quot;)</span><br><span class="line">//     reject(&#x27;error&#x27;)</span><br><span class="line">&#125;).then((value) =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    return &#x27;666&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">aaa.then(() =&gt; &#123;</span><br><span class="line">    console.log(123)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(aaa)</span><br></pre></td></tr></table></figure><h2 id="手写-event-bus"><a href="#手写-event-bus" class="headerlink" title="手写 event bus"></a>手写 event bus</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">class EventEmitter &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.events = &#123;&#125;</span><br><span class="line">        this.maxListeners = maxListeners || Infinity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    emit(event, ...args) &#123;</span><br><span class="line">        const cbs = this.events[event];</span><br><span class="line"></span><br><span class="line">        if(!cbs) &#123;</span><br><span class="line">            console.log(&quot;没有这个事件函数&quot;);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cbs.forEach(cb =&gt; cb.apply(this, args))</span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    on(event, cb) &#123;</span><br><span class="line">        if (!this.events[event]) &#123;</span><br><span class="line">            this.events[event] = []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (this.maxListeners !== Infinity &amp;&amp; this.events[event].length &gt;= this.maxListeners) &#123;</span><br><span class="line">            console.log(&quot;当事件超过了最大监听数&quot;)</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.events[event].push(cb)</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    once(event, cb) &#123;</span><br><span class="line">        const func = (...args) =&gt; &#123;</span><br><span class="line">            this.off(event, fn);</span><br><span class="line">            cb.apply(this, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.on(event, func)</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    off(event, cb) &#123;</span><br><span class="line">        if (!cb) &#123;</span><br><span class="line">            this.events[event] = null</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.events[event] = this.events[event].filter(item=&gt;item !==cb)</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数继承</span><br><span class="line">function Person() &#123;</span><br><span class="line">    this.name = &#x27;lbs&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student() &#123;</span><br><span class="line">    Person.call(this)</span><br><span class="line">    this.age = 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const s = new Student()</span><br><span class="line"></span><br><span class="line">// 原型链继承</span><br><span class="line">function Person() &#123;</span><br><span class="line">    this.name = &#x27;lbs&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student() &#123;</span><br><span class="line">    this.age = 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = new Person()</span><br><span class="line"></span><br><span class="line">const s = new Student()</span><br><span class="line">//寄生式组合继承</span><br><span class="line">function Person(obj)&#123;</span><br><span class="line">    this.name = obj.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student(obj)&#123;</span><br><span class="line">    Person.call(this, obj);</span><br><span class="line">    this.age = obj.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// object.create()</span><br><span class="line">// 方法创建一个新对象，使用现有的对象来提供新创建对象的__proto__</span><br><span class="line">Student.prototype = Object.create(Person.prototype);</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line">// 或者：</span><br><span class="line">Student.prototype = Object.create(Person.prototype, &#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">        value: Student,</span><br><span class="line">        enumerable: false,</span><br><span class="line">        writable: true,</span><br><span class="line">        configurable: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const student = new Student(&#123;name: &quot;lbs&quot;, age: 18&#125;);</span><br><span class="line"></span><br><span class="line">console.log(student);</span><br></pre></td></tr></table></figure><h2 id="createElement-手写"><a href="#createElement-手写" class="headerlink" title="createElement 手写"></a>createElement 手写</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">const symbolFor = Symbol.for;</span><br><span class="line">const REACT_ELEMENT_TYPE = symbolFor(&#x27;react.element&#x27;);</span><br><span class="line"></span><br><span class="line">const RESERVED_PROPS = &#123;</span><br><span class="line">    key: true,</span><br><span class="line">    ref: true,</span><br><span class="line">    __self: true,</span><br><span class="line">    __source: true,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createElement(type, config, children) &#123;</span><br><span class="line">    const props = &#123;&#125;;</span><br><span class="line">    let key = null;</span><br><span class="line"></span><br><span class="line">    if (config !== null) &#123;</span><br><span class="line">        key = config.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (let propName in config) &#123;</span><br><span class="line">        if (!RESERVED_PROPS.hasOwnProperty(propName)) &#123;</span><br><span class="line">            props[propName] = config[propName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const childrenLength = arguments.length -2;</span><br><span class="line">    if(childrenLength === 1) &#123;</span><br><span class="line">        props.children = children;</span><br><span class="line">    &#125; else if(childrenLength &gt; 1) &#123;</span><br><span class="line">        const childArray = Array(childrenLength);</span><br><span class="line"></span><br><span class="line">        for(let i = 0; i &lt; childrenLength; i++) &#123;</span><br><span class="line">            childArray[i] = arguments[i + 2];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        props.children = childArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const element = &#123;</span><br><span class="line">        $$typeof: REACT_ELEMENT_TYPE,</span><br><span class="line">        type,</span><br><span class="line">        key,</span><br><span class="line">        props</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字"><a href="#编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字" class="headerlink" title="编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字"></a>编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正向预查 ？= 必须</span><br><span class="line">反向预查 ？！必须不</span><br><span class="line">let reg = /(?!^[a-zA-Z]+$)(?!^[0-9]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/;</span><br><span class="line"></span><br><span class="line">补充：数字、字母、下划线组成字符串，必须有_</span><br><span class="line">let reg = /(?=_)\w/;</span><br><span class="line">let reg = /(?!^[a-zA-Z0-9]+$)^\w&#123;1,10&#125;$/; 限制1-10位</span><br></pre></td></tr></table></figure><h2 id="获取所有属性为-name，值为-value-的元素集合"><a href="#获取所有属性为-name，值为-value-的元素集合" class="headerlink" title="获取所有属性为 name，值为 value 的元素集合"></a>获取所有属性为 name，值为 value 的元素集合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 正则\b单词边界</span><br><span class="line">function getElements(property, value) &#123;</span><br><span class="line">    let elements = document.getElementsByTagName(&#x27;*&#x27;);</span><br><span class="line">    let arr = [];</span><br><span class="line"></span><br><span class="line">    elements = Array.from(elements);</span><br><span class="line">    elements.forEach(item =&gt; &#123;</span><br><span class="line">        // 当前元素property对应的值</span><br><span class="line">        let itemValue = item.getAttribute(propertype);</span><br><span class="line"></span><br><span class="line">        if (property === &quot;class&quot;) &#123;</span><br><span class="line">            const reg = new RegExp(`\b$&#123;value&#125;\b`);</span><br><span class="line"></span><br><span class="line">            if (reg.test(itemValue)) &#123;</span><br><span class="line">                arr.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(itemValue === value) &#123;</span><br><span class="line">            arr.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;中国hello你好&quot;</span><br><span class="line">let reg = /\b[a-z]+\b/ig;</span><br><span class="line"></span><br><span class="line">str = str.replace(reg, value =&gt; &#123;</span><br><span class="line">    return ` $&#123;value&#125; `;</span><br><span class="line">&#125;).trim(); // 去除首尾空格</span><br></pre></td></tr></table></figure><h2 id="js-实现斐波那契数列的几种方法"><a href="#js-实现斐波那契数列的几种方法" class="headerlink" title="js 实现斐波那契数列的几种方法"></a>js 实现斐波那契数列的几种方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 1.递归</span><br><span class="line">function fibonacci(n) &#123;</span><br><span class="line">    if (n === 1 || n === 2) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2.尾递归(每次调用都在收集结果，避免了线性递归不收集结果只依次展开消耗内存的坏处)</span><br><span class="line">function fibonacci(n, res1 = 1, res2 = 1) &#123;</span><br><span class="line">    if (n &lt;= 2) return res2;</span><br><span class="line"></span><br><span class="line">    return fibonacci(n - 1, res2, res1 + res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 循环</span><br><span class="line">function fibonacci(n) &#123;</span><br><span class="line">    let num1 = 1;</span><br><span class="line">    let num2 = 2;</span><br><span class="line">    let sum = 1;</span><br><span class="line"></span><br><span class="line">    for(let i = 3; i &lt; n; i++) &#123;</span><br><span class="line">        sum = num1 + num2;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组</span><br><span class="line">function fibonacci(n) &#123;</span><br><span class="line">    const arr = [0,1,1];</span><br><span class="line">    if (n &lt; 0) &#123;</span><br><span class="line">        throw new Error(&#x27;输入的数字不能小于0&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (n &gt;= 3) &#123;</span><br><span class="line">        for(let i = 3; i &lt;= n; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - 1] + arr[i - 2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="并发加载"><a href="#并发加载" class="headerlink" title="并发加载"></a>并发加载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">function limitLoad(urls, handler, limit) &#123;</span><br><span class="line">    const sequence = [].concat(urls);</span><br><span class="line">    let promises = [];</span><br><span class="line"></span><br><span class="line">    promises = sequence.splice(0, limit).map((url, index) =&gt; &#123;</span><br><span class="line">        return handler(url).then(() =&gt; &#123;</span><br><span class="line">            return index</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    let p = Promise.race(promises);</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; sequence.length; i++) &#123;</span><br><span class="line">        p = p.then((res) =&gt; &#123;</span><br><span class="line">            promises[res] = handler(sequence[i]).then(() =&gt; &#123;</span><br><span class="line">                return res;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">                console.log(promises)</span><br><span class="line">            return Promise.race(promises)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function loadImg(url) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">//             console.log(url.info + &#x27;---OK!!!&#x27;)</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;,url.time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let urls = [</span><br><span class="line">&#123;info: 1,time: 2000&#125;,</span><br><span class="line">&#123;info: 2,time: 1000&#125;,</span><br><span class="line">&#123;info: 3,time: 3000&#125;,</span><br><span class="line">&#123;info: 4,time: 4000&#125;,</span><br><span class="line">&#123;info: 5,time: 5000&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">limitLoad(urls, loadImg, 3)</span><br></pre></td></tr></table></figure><h2 id="前端内存处理"><a href="#前端内存处理" class="headerlink" title="前端内存处理"></a>前端内存处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">1. 内存的生命周期</span><br><span class="line">    内存分配：声明变量、函数对象的时候，js会自动分配内存</span><br><span class="line">    内存使用</span><br><span class="line">    内存回收</span><br><span class="line"></span><br><span class="line">2. js中的垃圾回收机制</span><br><span class="line">    引用计数：缺点循环引用无法清除</span><br><span class="line">    标记清除</span><br><span class="line"></span><br><span class="line">3. 常见内存泄漏</span><br><span class="line">    全局变量（记得手动回收）</span><br><span class="line">    未被清除的定时器</span><br><span class="line">    闭包</span><br><span class="line">    dom的引用</span><br><span class="line"></span><br><span class="line">4. 怎么避免内存泄漏</span><br><span class="line">    减少不必要的全局变量</span><br><span class="line">    使用完数据，及时解除引用</span><br><span class="line"></span><br><span class="line">实现sizeOf，传入object，计算其所占字节大小</span><br><span class="line">number: 8 字节</span><br><span class="line">string: 2 字节</span><br><span class="line">boolean; 4 字节</span><br><span class="line"></span><br><span class="line">const seen = new WeakSet();</span><br><span class="line"></span><br><span class="line">function sizeOfObject(obj) &#123;</span><br><span class="line">    if (obj === null) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let bytes = 0;</span><br><span class="line">    const keys = Object.keys(obj);</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; keys.length; i++) &#123;</span><br><span class="line">        const key = keys[i];</span><br><span class="line">        bytes += calculator(key);</span><br><span class="line"></span><br><span class="line">        if (typeof obj[key] === &#x27;object&#x27; &amp;&amp; obj[key] !== null) &#123;</span><br><span class="line">            if (seen.has(obj[key])) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            seen.add(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes += calculator(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function calculator(obj) &#123;</span><br><span class="line">    const objType = typeof obj;</span><br><span class="line"></span><br><span class="line">    switch(objType) &#123;</span><br><span class="line">        case &#x27;string&#x27;: &#123;</span><br><span class="line">            return obj.length * 2</span><br><span class="line">        &#125;</span><br><span class="line">        case &#x27;boolean&#x27;: &#123;</span><br><span class="line">            return 4</span><br><span class="line">        &#125;</span><br><span class="line">        case &#x27;number&#x27;: &#123;</span><br><span class="line">            return 8</span><br><span class="line">        &#125;</span><br><span class="line">        case &#x27;object&#x27;: &#123;</span><br><span class="line">            if (Array.isArray(obj)) &#123;</span><br><span class="line">                return obj.map(calculator).reduce((accu, curr) =&gt; &#123;</span><br><span class="line">                    return accu + curr</span><br><span class="line">                &#125;, 0)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return sizeOfObject(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        default: &#123;</span><br><span class="line">            return 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据结构就是在计算机中存储和组织数据的方式。</p><p>算法（Algorithm）解决问题的逻辑或步骤</p><h2 id="栈-封装"><a href="#栈-封装" class="headerlink" title="栈(封装)"></a>栈(封装)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">function Stack() &#123;</span><br><span class="line">    this.items = [];</span><br><span class="line">    // 1. 将元素压入栈</span><br><span class="line">    Stack.prototype.push = function (element) &#123;</span><br><span class="line">        this.items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    // 2.从栈中取出元素</span><br><span class="line">    Stack.prototype.pop = function() &#123;</span><br><span class="line">        return this.items.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    // 3.查看一下栈顶元素</span><br><span class="line">    Stack.prototype.peek = function() &#123;</span><br><span class="line">        return this.items[this.items.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">    // 4.判断栈是否为空</span><br><span class="line">    Stack.prototype.isEmpty = function() &#123;</span><br><span class="line">        return !this.items.length</span><br><span class="line">    &#125;</span><br><span class="line">    // 5.获取栈中元素个数</span><br><span class="line">    Stack.prototype.size = function () &#123;</span><br><span class="line">        return this.item.length;</span><br><span class="line">    &#125;</span><br><span class="line">    // 6. toString方法</span><br><span class="line">    Stack.prototype.toString = function() &#123;</span><br><span class="line">        let res = &quot;&quot;;</span><br><span class="line">        for(let i = 0;i &lt; this.items.length;i++) &#123;</span><br><span class="line">            res += `$&#123;this.items[i]&#125; `;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const stack = new Stack();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 实例：将十进制转换成二进制</span><br><span class="line">function dec2bin(decimalNumber) &#123;</span><br><span class="line">    let stack = new Stack();</span><br><span class="line">    let binary = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    while(decimalNumber &gt; 0) &#123;</span><br><span class="line">        stack.push(decimalNumber % 2);</span><br><span class="line"></span><br><span class="line">        decimalNumber = Math.floor(decimalNumber / 2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(!stack.isEmpty()) &#123;</span><br><span class="line">        binary += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡括号问题"><a href="#平衡括号问题" class="headerlink" title="平衡括号问题"></a>平衡括号问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function check(str) &#123;</span><br><span class="line">    const stack = new Stack()</span><br><span class="line">    const open = &quot;&#123;[(&quot;</span><br><span class="line">    const close = &quot;&#125;])&quot;</span><br><span class="line">    let index = 0</span><br><span class="line">    let balanced = true</span><br><span class="line"></span><br><span class="line">    while(index &lt; str.length &amp;&amp; balanced) &#123;</span><br><span class="line">        if (open.includes(str[index])) &#123;</span><br><span class="line">            stack.push(str[index])</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            const top = stack.pop()</span><br><span class="line">            if (open.indexOf(top) === close.indexOf(str[index])) &#123;</span><br><span class="line">                balanced = true</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                balanced = false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        index++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (balanced &amp;&amp; stack.isEmpty()) &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check(&quot;&#123;([][])&#125;&quot;)</span><br><span class="line">check(&quot;&#123;[(])&#125;&quot;)</span><br></pre></td></tr></table></figure><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function reverseList(head) &#123;</span><br><span class="line">    if (head === null || head.next === null) return head;</span><br><span class="line"></span><br><span class="line">    let result = reverseList(head.next)</span><br><span class="line"></span><br><span class="line">    head.next.nexd = head</span><br><span class="line">    head.next = null</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function binarySearch(elements,value,_start,_end) &#123;</span><br><span class="line">    let end = _end || elements.length - 1;</span><br><span class="line">    let start = _start || 0;</span><br><span class="line">    let povitIndex = Math.floor((start + end) / 2);</span><br><span class="line"></span><br><span class="line">    if (elements[povitIndex] === value) &#123;</span><br><span class="line">        return povitIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (value &lt; elements[povitIndex]) &#123;</span><br><span class="line">        return binarySearch(elements, value, 0, povitIndex - 1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return binarySearch(elements, value, povitIndex + 1, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(elements) &#123;</span><br><span class="line">    if(elements.length &lt;= 1) &#123;</span><br><span class="line">        return elements</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let pivotIndex = Math.floor(elements.length / 2)</span><br><span class="line">    let [pivot] = elements.splice(pivotIndex,1)</span><br><span class="line">    let left = [];</span><br><span class="line">    let right = [];</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; elements.length; i++) &#123;</span><br><span class="line">        if (elements[i] &lt; pivot) &#123;</span><br><span class="line">            left.push(elements[i])</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right.push(elements[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return quickSort(left).concat([pivot], quickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let elements = [2,4,3,7,5]</span><br><span class="line"></span><br><span class="line">console.log(quickSort(elements))</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(elements) &#123;</span><br><span class="line">    let elementLength = elements.length;</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; elementLength - 1; i++ ) &#123;</span><br><span class="line">        for(let j = 0; j &lt; elementLength - i - 1; j++) &#123;</span><br><span class="line">            if(elements[j] &gt; elements[j + 1]) &#123;</span><br><span class="line">                let temp = elements[j];</span><br><span class="line">                elements[j] = elements[j + 1]</span><br><span class="line">                elements[j + 1] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(elements)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let elements = [2,4,3,7,5]</span><br><span class="line"></span><br><span class="line">bubbleSort(elements)</span><br><span class="line"></span><br><span class="line">// console.log(elements)</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">//满二叉树：每层节点数都达到最大值，第n层节点数为2^(n - 1),总节点数为2^n -1(2的n次方减一)</span><br><span class="line">//完全二叉树：除最后一层外，其他各层节点数都达到最大个数，最后一层所有节点集中在最左边</span><br><span class="line">class Node &#123;</span><br><span class="line">    constructor(value) &#123;</span><br><span class="line">        this.value = value</span><br><span class="line">        this.left = null</span><br><span class="line">        this.right = null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BinarySearchTree &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.root = null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 插入前比较</span><br><span class="line">    insertNode(node, newNode) &#123;</span><br><span class="line">        // 右侧插入</span><br><span class="line">        if (newNode.value &gt; node.value) &#123;</span><br><span class="line">            if (node.right === null) &#123;</span><br><span class="line">                node.right = newNode</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.insertNode(node.right, newNode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (newNode.value &lt; node.value) &#123;</span><br><span class="line">            // 左侧插入</span><br><span class="line">            if (node.left === null) &#123;</span><br><span class="line">                node.left = newNode</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.insertNode(node.left, newNode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 插入</span><br><span class="line">    insert(value) &#123;</span><br><span class="line">        let newNode = new Node(value);</span><br><span class="line">        if (this.root === null) &#123;</span><br><span class="line">            this.root = newNode</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.insertNode(this.root, newNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    preOrderTraversalNode(node,callback) &#123;</span><br><span class="line">        if (node === null) return</span><br><span class="line"></span><br><span class="line">        callback(node.value)</span><br><span class="line"></span><br><span class="line">        this.preOrderTraversalNode(node.left, callback)</span><br><span class="line"></span><br><span class="line">        this.preOrderTraversalNode(node.right, callback)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 先序遍历</span><br><span class="line">    preOrderTraversal(callback) &#123;</span><br><span class="line">        this.preOrderTraversalNode(this.root, callback)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inOrderTraversalNode(node, callback) &#123;</span><br><span class="line">        if (node === null) return;</span><br><span class="line"></span><br><span class="line">        this.inOrderTraversalNode(node.left, callback)</span><br><span class="line"></span><br><span class="line">        callback(node.value)</span><br><span class="line"></span><br><span class="line">        this.inOrderTraversalNode(node.right, callback)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 中序遍历</span><br><span class="line">    inOrderTraversal(callback) &#123;</span><br><span class="line">        this.inOrderTraversalNode(this.root, callback)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    postOrderTraversalNode(node, callback) &#123;</span><br><span class="line">        if (node === null) return;</span><br><span class="line"></span><br><span class="line">        this.postOrderTraversalNode(node.left, callback)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.postOrderTraversalNode(node.right, callback)</span><br><span class="line"></span><br><span class="line">        callback(node.value)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 中序遍历</span><br><span class="line">    postOrderTraversal(callback) &#123;</span><br><span class="line">        this.postOrderTraversalNode(this.root, callback)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //最大值</span><br><span class="line">    max() &#123;</span><br><span class="line">        let node = this.root;</span><br><span class="line">        while(node.right !== null) &#123;</span><br><span class="line">            node = node.right</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return node.value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 最小值</span><br><span class="line">    min() &#123;</span><br><span class="line">        let node = this.root</span><br><span class="line">        while(node.left !== null) &#123;</span><br><span class="line">            node = node.left</span><br><span class="line">        &#125;</span><br><span class="line">        return node.value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 寻找指定值是否存在</span><br><span class="line">    search(val)&#123;</span><br><span class="line">        let node = this.root</span><br><span class="line">        while(node !== null) &#123;</span><br><span class="line">            if(val &lt; node.value) &#123;</span><br><span class="line">                node = node.left</span><br><span class="line">            &#125; else if(val &gt; node.value) &#123;</span><br><span class="line">                node = node.right</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var bst = new BinarySearchTree()</span><br><span class="line"></span><br><span class="line">bst.insert(3)</span><br><span class="line">bst.insert(2)</span><br><span class="line">bst.insert(5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// bst.preOrderTraversal((nodeValue) =&gt; &#123;</span><br><span class="line">//     console.log(nodeValue)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// bst.inOrderTraversal((nodeValue) =&gt;&#123;</span><br><span class="line">//     console.log(nodeValue)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// bst.postOrderTraversal((nodeValue) =&gt;&#123;</span><br><span class="line">//     console.log(nodeValue)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// console.log(bst.max())</span><br><span class="line">console.log(bst.search(5))</span><br><span class="line"></span><br><span class="line">console.log(bst)</span><br></pre></td></tr></table></figure><h2 id="翻转链表-1"><a href="#翻转链表-1" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 递归</span><br><span class="line">var reverseList = function (head) &#123;</span><br><span class="line">  if (head === null || head.next === null) return head;</span><br><span class="line"></span><br><span class="line">  let res = reverseList(head.next)</span><br><span class="line"></span><br><span class="line">  head.next.next = head</span><br><span class="line">  head.next = null</span><br><span class="line"></span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 循环</span><br><span class="line">var reverseList = function(head) &#123;</span><br><span class="line">  let pre = null</span><br><span class="line">  let cur = head;</span><br><span class="line"></span><br><span class="line">  if(cur === null || cur.next === null) &#123;</span><br><span class="line">    return cur</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  while(cur) &#123;</span><br><span class="line">    const t = cur.next</span><br><span class="line">    cur.next = pre</span><br><span class="line">    pre = cur</span><br><span class="line">    cur = t</span><br><span class="line"></span><br><span class="line">    // cur.next = null</span><br><span class="line">    // cur.next.next = cur</span><br><span class="line">    // cur = cur.nexxt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return pre</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法-1-Two-Sum"><a href="#算法-1-Two-Sum" class="headerlink" title="算法 1: Two Sum"></a>算法 1: Two Sum</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">example:</span><br><span class="line">given nums = [2, 7, 11, 15], target = 9</span><br><span class="line">because num[0] + num[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1]</span><br><span class="line"></span><br><span class="line">答：</span><br><span class="line">function twoSum(nums, target) &#123;</span><br><span class="line">    const map = new Map();</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        const complement = target - nums[i];</span><br><span class="line"></span><br><span class="line">        if (map.has(complement)) &#123;</span><br><span class="line">            return [map.get(complement), i]</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            map.set(nums[i], i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>装箱：基本类型到引用类型的一个转换<br>拆箱：将引用类型到基本类型的转换（toPrimitive）</p><p>编码和解码：<br>escape(str) unescape(str)<br>encodeURI() decodeURI()<br>encodeURIComponent() decodeURIComponent()<br>btoa() atob()</p><p>回流：相当与刷新页面<br>重绘： 不刷新，动态更新内容<br>重绘不一定引起回流，回流一定引起重绘</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;手写部分&quot;&gt;&lt;a href=&quot;#手写部分&quot; class=&quot;headerlink&quot; title=&quot;手写部分&quot;&gt;&lt;/a&gt;手写部分&lt;/h1&gt;&lt;h2 id=&quot;数组去重&quot;&gt;&lt;a href=&quot;#数组去重&quot; class=&quot;headerlink&quot; title=&quot;数组去重&quot;&gt;&lt;/a&gt;数组去重&lt;/h2&gt;</summary>
    
    
    
    <category term="面经" scheme="https://github.com/foolishmax/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://github.com/foolishmax/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面试题目总结</title>
    <link href="https://github.com/foolishmax/2021/10/04/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/foolishmax/2021/10/04/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-04T13:54:55.000Z</published>
    <updated>2022-07-30T04:15:30.941Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="从浏览器地址栏输入-url-到显示页面的步骤"><a href="#从浏览器地址栏输入-url-到显示页面的步骤" class="headerlink" title="从浏览器地址栏输入 url 到显示页面的步骤"></a>从浏览器地址栏输入 url 到显示页面的步骤</h2><span id="more"></span><pre><code>1. 浏览器查看缓存(浏览器对应的都会有cache文件)。若请求有缓存且未过期，则取缓存资源提供给客户端，否则发起请求与服务器进行验证。检验是否过期通常有两个HTTP头：Expires、Cache-control2.浏览器需要获取域名对应的ip地址，过程如下：1.本地host文件查找- 浏览器解析URL获取协议、域名、端口、path路径，然后查看本地硬盘中hosts文件，看是否存在与这个域名对应的规则，如果有就直接使用hosts文件里面的ip地址。2.路由器缓存3.ISP DNS(Domain Name System域名系统)(情报局)缓存（互联网提供服务商）-本地DNS服务器以递归方式进行查询缓存记录，若没有就向跟DNS服务器查询。根DNS服务器查询到结果后会把域名和IP地址告诉本地DNS服务器，本地DNS服务器把对应关系草存在缓存中（一边下次用户查询，加快网络访问），然后再发给浏览器客户端的解析服务器。3.客户端发送HTTP请求。4.TCP传输报文（三次握手四次挥手）5.向客户端返回资源6.解析HTML文档，构建DOM树，CSSOM树，下载资源，执行js脚本等。</code></pre><!--more--><h2 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个域名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</span><br></pre></td></tr></table></figure><h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">强缓存：（expires、Cache-Control）在过期时间内，浏览器再次加载资源时，不会向服务器发起请求，直接从缓存中读取资源</span><br><span class="line"></span><br><span class="line">协商缓存：向服务器发送请求，服务器会根据请求头（request header）的一些参数（Etag、last-modified）来判断是否命中协商缓存，首先根据Etag的值判断请求的文件有没有被修改，如果Etag一致则没有被修改，命中协商缓存返回304，如果不一致则返回新的资源并带上新的Etag返回200状态码。如果没有Etag值，则对比If-Modified-Since和请求文件的最后修改时间，一致则命中协商缓存返回304，不一致则返回新的last-modified和200状态码</span><br></pre></td></tr></table></figure><h2 id="http-协议的特点"><a href="#http-协议的特点" class="headerlink" title="http 协议的特点"></a>http 协议的特点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.支持客户/服务器模式</span><br><span class="line">2.简单快速：客户向服务器发送请求时，只需传送请求方法和路径。</span><br><span class="line">3.灵活：http允许传输任意类型的数据对象（Content-Type内容编码类型）</span><br><span class="line"></span><br><span class="line">application/x-www-form-urlencoded 常见post提交数据格式（key-value格式）</span><br><span class="line">application/json</span><br><span class="line"></span><br><span class="line">4.无连接：限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。（原因是早期服务器需要同时面对全世界数十万、上百万的客户端的网页访问，但是每次客户端与服务端传输的数据关联性很低，就会导致大部分通过会很空闲，无端占用资源）</span><br><span class="line"></span><br><span class="line">（解决无连接）Keep-Alive：使客户端到服务端之间的Http连接保持，不会断开，当再次对服务器发送请求时，keep-Alive功能避免了重新建立连接</span><br><span class="line"></span><br><span class="line">5.无状态：Http是一个无状态协议，就是每个请求都是独立的，数据传输完毕不会记录任何信息。缺点就是如果后续处理需要前面的信息，就必须重传，就会导致每次连接传送的数据量增加，如果服务器不需要前面信息的时候应答就会很快。</span><br><span class="line"></span><br><span class="line">（解决无状态）怎样保持http连接状态呢</span><br><span class="line">Cookie（每次http请求的时候，客户端都需要发送响应的cookie信息到服务端，服务端根据cookie判断来自哪个客户端）</span><br><span class="line">服务端生成cookie，客户端保存</span><br><span class="line"></span><br><span class="line">Session</span><br><span class="line">服务端生成一个sessionid，在客户端下次请求的时候在cookie里面记录这个sessionid，然后发送给服务端，服务端再根据cookie中的sessionid来识别客户端返回资源数据。</span><br><span class="line"></span><br><span class="line">禁用cookie怎么办？</span><br><span class="line">url重写，每次http请求的时候，在url后面拼接sid=**参数</span><br><span class="line"></span><br><span class="line">withCredentials:指定在涉及到跨域请求时，是否携带cookie信息，默认为false</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure><h2 id="cookie-和-session-的区别"><a href="#cookie-和-session-的区别" class="headerlink" title="cookie 和 session 的区别"></a>cookie 和 session 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.存取方式不同： cookie只能保存ASCII字符串，session能够存储任意类型的数据</span><br><span class="line">2.隐私策略不同</span><br><span class="line">3.cookie是存在客户端，session是存在服务器的</span><br><span class="line">4.浏览器的支持不同，浏览器可以禁用cookie</span><br></pre></td></tr></table></figure><h2 id="权限身份验证"><a href="#权限身份验证" class="headerlink" title="权限身份验证"></a>权限身份验证</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一般都是通过sessionid来进行用户身份验证，sessionid一般会存放在redis中。</span><br><span class="line">1.用户向服务端发送用户名和密码进行登陆</span><br><span class="line">2.服务器验证通过后，服务器为用户创建一个session，并将session信息存储起来</span><br><span class="line">3.服务器向用户返回一个sessionid，写入用户的cookie</span><br><span class="line">4.当用户保持登陆状态时，每次后续请求都会一起发送给后端</span><br><span class="line">5.服务器将存储在cookie中的sessionid和存储在内存或者数据库中的sessin信息进行一个比较，验证用户身份，然后返回响应信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1.依赖session的关键业务一定要确保客户端开启了cookie</span><br><span class="line">2.注意session的过期时间</span><br><span class="line"></span><br><span class="line">一般在http header的Authorization字段中添加token</span><br></pre></td></tr></table></figure><h2 id="禁用-cookie-之后-session-还能用吗？"><a href="#禁用-cookie-之后-session-还能用吗？" class="headerlink" title="禁用 cookie 之后 session 还能用吗？"></a>禁用 cookie 之后 session 还能用吗？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url重写，例如 https://javascript.cn/?session_id=xxx</span><br><span class="line">缺点是安全性降低，可以对sessionid进行一次加密后传输</span><br></pre></td></tr></table></figure><h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.url可见性：get参数url可见，post参数url不可见</span><br><span class="line">2.数据传输：get通过拼接url进行传递参数，post通过body体传输参数</span><br><span class="line">3.缓存性：get请求可以缓存，post请求不可以缓存</span><br><span class="line">4.get请求网页回退时，不产生影响，post请求网页回退会重新发请求</span><br><span class="line">5.传输数据：get一般传输数据大小不超过4k，post可以传输大量数据</span><br><span class="line">6.post较get安全性较高，get是不安全的因为url可见，可能会泄漏私密信息</span><br></pre></td></tr></table></figure><h2 id="http-常见的请求头字段"><a href="#http-常见的请求头字段" class="headerlink" title="http 常见的请求头字段"></a>http 常见的请求头字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Accept: 浏览器可接受的数据类型</span><br><span class="line">Accept-Charset: 浏览器可接受的字符集</span><br><span class="line">Accept-Encoding：浏览器能够进行解码的数据编码方式</span><br><span class="line">Accept-Language： 浏览器所希望的语言种类</span><br><span class="line">Connection：是否需要持久连接，值“Keep-Alive”，HTTP1.1默认进行持久连接</span><br><span class="line">Cookie：cookie信息</span><br><span class="line">content-type</span><br><span class="line">If-Modified-Since：内容被修改才会返回</span><br><span class="line">User-Agent：浏览器类型</span><br><span class="line"></span><br><span class="line">响应头：</span><br><span class="line">content-Length: 表示内容长度</span><br><span class="line">content-type：文档类型</span><br><span class="line">Date：当前时间</span><br><span class="line">Expires：指定缓存过期时间</span><br><span class="line">Last-Modified：文档过期时间</span><br></pre></td></tr></table></figure><h2 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http是超文本传输协议，信息是明文传输，https是更加安全的ssl加密传输协议</span><br><span class="line">http默认是80端口，https默认是443端口</span><br><span class="line">https需要申请CA证书</span><br><span class="line">https是http + ssl/tls（数字证书）进行组合的更加安全的传输协议</span><br><span class="line"></span><br><span class="line">https工作原理（非对称加密）</span><br><span class="line">1.服务端向客户端传递证书作为公钥</span><br><span class="line">2.客户端对证书进行解析，判断证书的办法机构和过期时间等，如果都没有问题，生成一个随机值作为私钥，然后使用证书进行加密发送给服务端</span><br><span class="line">3.服务端解密得到客户端私钥</span><br><span class="line">4.之后双方利用私钥进行加密解密，完成信息的通信</span><br></pre></td></tr></table></figure><h2 id="xss（跨域脚本攻击）csrf（跨站请求伪造）"><a href="#xss（跨域脚本攻击）csrf（跨站请求伪造）" class="headerlink" title="xss（跨域脚本攻击）csrf（跨站请求伪造）"></a>xss（跨域脚本攻击）csrf（跨站请求伪造）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">csrf: 需要用户先登陆网站A，获取cookie，利用的是网站A本身的漏洞，去请求网站A的api，---进行token验证，referer验证，只接收本站的请求</span><br><span class="line"></span><br><span class="line">xss：向网站A注入js代码，然后执行js代码，篡改网站A的内容，破坏页面正常结构，插入恶意广告。---编码转换</span><br></pre></td></tr></table></figure><h2 id="http1-0、http1-1-和-http2-0-的区别"><a href="#http1-0、http1-1-和-http2-0-的区别" class="headerlink" title="http1.0、http1.1 和 http2.0 的区别"></a>http1.0、http1.1 和 http2.0 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http/1.0 每个请求都要建立一个连接</span><br><span class="line">http/1.1 多了长连接keep-alive，若干个请求需要排队串行化单线程处理，会发生网络请求阻塞问题。</span><br><span class="line">http/2.0 同一个连接可以有多个请求，各个请求直接互不影响（进行了头部压缩和多路复用的优化）</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">单例模式 （class组件中new store创建store实例）</span><br><span class="line">工厂模式 （mobx store中creatLayoutStore）</span><br><span class="line">观察者模式</span><br><span class="line">发布订阅模式</span><br><span class="line">装饰器模式 （移动、pc配置同步@sync）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TCP-与-UDP-区别"><a href="#TCP-与-UDP-区别" class="headerlink" title="TCP 与 UDP 区别"></a>TCP 与 UDP 区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* TCP是面向连接的协议，发送数据前先要建立连接，TCP提供可靠的服务，通过TCP建立连接传输的数据不会丢失，没有重复，并且按照顺序到达。</span><br><span class="line">* UDP是无连接的协议，发送数据前不需要建立连接，是不可靠的</span><br><span class="line">* TCP只支持点对点通信，而UDP支持一对一，多对多</span><br><span class="line">* TCP是面向字节流的，UDP是面向报文的</span><br><span class="line">* TCP通信类似打电话，接通后需要确认身份，才可以开始通信</span><br><span class="line">* UDP类似广播直接进行通信</span><br></pre></td></tr></table></figure><h2 id="TCP-IP-模型"><a href="#TCP-IP-模型" class="headerlink" title="TCP/IP 模型"></a>TCP/IP 模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">应用层（应用层就是向用户提供通信服务的活动，提供用户程序接口HTTP、DNS）</span><br><span class="line">传输层（传输层为两台主机上的应用程序提供端到端的通信TCP，UDP）</span><br><span class="line">网络层（网络层实现数据包的选路和转发）</span><br><span class="line">数据链路层（ARP地址解析协议、RARP逆地址解析协议，使用物理地址寻找一台机器）</span><br></pre></td></tr></table></figure><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正向代理是客户端代理，服务端不知道是哪个客户端发起的请求</span><br><span class="line">反向代理是服务端代理，客户端不知道是哪个服务端提供的资源</span><br></pre></td></tr></table></figure><h2 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI 模型"></a>OSI 模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">应用层</span><br><span class="line">表示层</span><br><span class="line">会话层</span><br><span class="line"></span><br><span class="line">传输层</span><br><span class="line"></span><br><span class="line">网络层</span><br><span class="line"></span><br><span class="line">数据链路层</span><br><span class="line">物理层</span><br></pre></td></tr></table></figure><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>为什么需要三次握手？<br>两次握手第二次结束后，服务端并不能保证客户端已经接收到了第二次的应答信息，如此一来服务器会一直保持通信过程，因为 TCP 通信会占用端口，造成资源浪费。</p><p>防止已失效的连接请求报文段突然又传送到服务端，产生错误。<br>如上述情况，如果 client 没有再次向 server 发出确认，server 收不到确认就不会建立连接，可以避免 server 端一直等待浪费资源。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li><a href="https://blog.csdn.net/rememberyf/article/details/80309148">https://blog.csdn.net/rememberyf/article/details/80309148</a></li></ul><h2 id="301-和-302-的区别"><a href="#301-和-302-的区别" class="headerlink" title="301 和 302 的区别"></a>301 和 302 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">301 表示资源被永久移除，浏览器在拿到状态码后跳转到一个新的URL地址，可从相应头的location首部中获取，搜索引擎在抓取新内容的同时也将就地址交换为重定向之后的网址。</span><br><span class="line"></span><br><span class="line">302 表示地址资源还在，仍可以访问，搜索引擎会抓取新的内容而保存旧的地址，seo 302 优于301.</span><br><span class="line"></span><br><span class="line">重定向的原因：</span><br><span class="line">网站调整（改变网页目录结构）</span><br><span class="line">页面被移到一个新地址</span><br><span class="line">页面扩展名改变 .php -&gt;.html</span><br><span class="line">如果不做重定向会返回404页面，会白白流失用户访问量。</span><br><span class="line"></span><br><span class="line">1XX 信息性状态码，表示接受的请求正在处理</span><br><span class="line">2XX 成功状态码，表示请求被正常处理完毕</span><br><span class="line">3XX 重定向状态码，表示需要进行附加操作以完成请求</span><br><span class="line">4XX 客户端错误状态码，表示服务器无法处理请求</span><br><span class="line">    400 Bad Request请求出现语法错误</span><br><span class="line">    401 被请求的页面需要用户名和密码</span><br><span class="line">    403 forbidden 请求页面的访问被禁止</span><br><span class="line">    404 资源未找到</span><br><span class="line">5XX 服务器错误状态码，表示服务器处理请求出错</span><br><span class="line">    502 网关错误</span><br><span class="line">    503 服务器超负载或者停机维护，无法处理请求</span><br><span class="line">    504 网关超时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul><li>cookie 可用于传递少量数据，是一个再服务器和客户端之间来回传送文本值的内置机制，服务器可以根据 cookie 追踪用户在不同页面的访问信息。</li><li>cookie 特点<ul><li>1.大小限制，cookie 大小限制在 4KB 以内</li><li>2.宽带限制，cookie 数据会在服务器和浏览器之间来回传送，所以访问页面会消耗宽带。</li><li>3.安全风险，cookie 会频繁的在网络中传送，不加密的情况下是有安全风险的。</li><li>4.操作复杂<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function setCookie(name: string, value: string) &#123;</span><br><span class="line">    const exp = new Date();</span><br><span class="line">    //过期时间设置为一天</span><br><span class="line">    exp.setTime(exp.getTime() + 24 * 60 * 60 * 1000);</span><br><span class="line">    document.cookie = `$&#123;name&#125;=$&#123;escape(value);expires=$&#123;exp.toString()&#125;&#125;`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="localStorage-会话存储-和-sessionStorage-本地存储"><a href="#localStorage-会话存储-和-sessionStorage-本地存储" class="headerlink" title="localStorage 会话存储 和 sessionStorage 本地存储"></a>localStorage 会话存储 和 sessionStorage 本地存储</h2><ul><li>1.存储容量大</li><li>2.零宽带，仅存储在本地，不会和服务器发生任何交互行为，不存在网络宽带占用问题。</li><li>3.编程接口，提供一套丰富的接口，操作数据更加方便。</li><li>4.独立的存储空间，不会造成数据的混乱。</li></ul><ul><li><p>主要区别在于数据存储的 <code>时间范围</code>和<code>页面范围</code></p><ul><li>sessionStorage: 数据只存储到窗口或标签关闭时，只在当前窗口的当前标签内可见,5M 左右，不同浏览器不同大小。</li><li>localStorage: 数据会一直存在除非手动清除，数据可被同源(协议、域名、端口号一致)的每个窗口或标签共享,5M 左右，不同浏览器不同大小。</li></ul></li><li><p>监测是否支持 web Storage</p><ul><li>1.通过 window.sessionStorage,window.localStorage 判断浏览器是否支持</li><li>2.通过 try{}catch{} 执行一下 storage.setItem(‘key’, value);storage.removeItem(‘key’),判断接口方法是否可用。</li></ul></li></ul><h2 id="html5-的几种存储形式"><a href="#html5-的几种存储形式" class="headerlink" title="html5 的几种存储形式"></a>html5 的几种存储形式</h2><ul><li>1.本地存储 localStorage,sessionStorage</li><li>2.离线缓存 application cache</li><li><ol start="3"><li>indexedDb,webSQL</li></ol></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.负载均衡、CDN加速、设置缓存、</span><br><span class="line">2.业务逻辑优化</span><br><span class="line">3.代码程序优化（组件按需加载、图片懒加载，代码压缩）</span><br><span class="line">4.避免重绘回流</span><br><span class="line">重绘：页面元素的样式改变不会影响它在文档流中的位置时发生重绘</span><br><span class="line">回流：DOM尺寸大小结构发生变化时</span><br><span class="line">回流一定会导致重绘</span><br><span class="line">如何避免：</span><br><span class="line">1.避免频繁操作dom，通过创建document.createDocumentFragment()一次性插入需要操作的dom</span><br><span class="line">2.具有复杂动画的Dom元素使用绝对定位，使其脱离文档流</span><br><span class="line">3.合并对于Dom中style样式的操作</span><br><span class="line">4.避免使用css表达式 calc()</span><br></pre></td></tr></table></figure><h2 id="fetch-和-axios"><a href="#fetch-和-axios" class="headerlink" title="fetch 和 axios"></a>fetch 和 axios</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch取消发送</span><br><span class="line">1.创建一个AbortController实例</span><br><span class="line">2.该实例具有signal属性</span><br><span class="line">3.将signal传递给fetch option</span><br><span class="line">4.调用AbortController的abort属性来取消所有使用该信号的fetch</span><br><span class="line"></span><br><span class="line">axios取消发送</span><br><span class="line">1.const cancelToken = axios.CancelToken</span><br><span class="line">2.const source = CancelToken.source()</span><br><span class="line">3.axios.get(&#x27;/xxx&#x27;,&#123;cancelToken: source.token&#125;)</span><br></pre></td></tr></table></figure><h2 id="flex-常用属性，grid-布局"><a href="#flex-常用属性，grid-布局" class="headerlink" title="flex 常用属性，grid 布局"></a>flex 常用属性，grid 布局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flex属性：</span><br><span class="line">1.flex-direction属性，决定主轴方向</span><br><span class="line">2.flex-wrap属性，控制换行</span><br><span class="line">3.flex-flow属性，flex-direction和flex-wrap的简写形式，默认值flex-flow: row  nowrap;</span><br><span class="line">4.justify-content属性，项目主轴上的对齐方式</span><br><span class="line">5.align-item属性，项目在交叉轴上的对齐方式</span><br><span class="line">6.align-content属性，多个轴线的时候在元素在交叉轴的对齐方式，只有一根轴线时不起作用</span><br><span class="line">flex（子元素的属性）：</span><br><span class="line">1.order属性,定义项目的排列顺序，数值越小，排列越靠前，默认为0.</span><br><span class="line">2.align-self属性，允许单个项目与其他项目不一样的对齐方式，会覆盖align-items属性.</span><br><span class="line">3.flex属性，flex-grow、flex-shrink、flex-basis简写，默认为0 1 auto</span><br><span class="line">    auto(1 1 auto)       none(0 0 auto)</span><br><span class="line">4.flex-grow属性，定义项目的放大比例，默认为0，即如果存在剩余空间也不放大，1等分，一个项目为2，其他为1，则前者占据空间是其他的两倍。</span><br><span class="line">5.flex-shrink属性，定义项目的缩小比例，默认为1，空间不足则缩小，如果所有项目都为1，则等比例缩小，如果有的项目为0，则空间不足时为0的不缩小，负值无效</span><br><span class="line">6.flex-basis属性，项目占据的固定空间</span><br></pre></td></tr></table></figure><h2 id="padding-bottom-实现子元素高度等于父元素宽度问题"><a href="#padding-bottom-实现子元素高度等于父元素宽度问题" class="headerlink" title="padding-bottom 实现子元素高度等于父元素宽度问题"></a>padding-bottom 实现子元素高度等于父元素宽度问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当margin或者padding取值是百分比的时候，无论是left，right或者top，bottom，都是以父元素的width为参考物，进行提前占位</span><br></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在作用域的创建阶段（预编译阶段），会生成js的变量对象（VO对象）供js引擎去访问。</span><br><span class="line">1.创建ao对象</span><br><span class="line">2.找形参和变量声明，作为ao对象的属性名，值为undefined</span><br><span class="line">3.实参和形参相统一</span><br><span class="line">4.找函数声明，如果名字和变量相同则覆盖变量声明</span><br><span class="line">5.解释执行</span><br></pre></td></tr></table></figure><h2 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.箭头函数中的this是在定义函数的时候绑定的（继承自父执行上下文中的this），而不是执行函数时绑定。</span><br><span class="line">2.箭头函数没有this，所以不能用作构造函数。</span><br></pre></td></tr></table></figure><h2 id="Map-和-Set-两种新的数据结构的区别？"><a href="#Map-和-Set-两种新的数据结构的区别？" class="headerlink" title="Map 和 Set 两种新的数据结构的区别？"></a>Map 和 Set 两种新的数据结构的区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Map类似Object是一种键值对集合，区别在于Map的键不仅限于字符串，其他各种类型的值都可以作为Map的键</span><br><span class="line"></span><br><span class="line">2.Set是类似数组的一种数据结构，不点在于Set中没有重复的值</span><br></pre></td></tr></table></figure><h2 id="你对闭包了解多少？"><a href="#你对闭包了解多少？" class="headerlink" title="你对闭包了解多少？"></a>你对闭包了解多少？</h2><pre><code>解释一下作用域链是如何产生的解释一下js执行山下文的创建、执行过程解释一下闭包所产生的变量放在哪里</code></pre><ul><li>闭包的定义：闭包就是能够读取其他函数内部变量的函数。</li><li>闭包的底层实现原理</li><li>js 执行上下文：</li><li><img src="https://img-blog.csdnimg.cn/20190527213618675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTg4NDIx,size_16,color_FFFFFF,t_70" alt="image"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">js运行三部曲</span><br><span class="line">1.语法分析</span><br><span class="line">2.预编译</span><br><span class="line">3.解释执行</span><br><span class="line"></span><br><span class="line">js代码需要经过浏览器V8引擎进行预编译，里面涉及到变量提升、函数提升。</span><br><span class="line">预编译的环境需要个环境，这个环境就是执行上下文。</span><br><span class="line"></span><br><span class="line">js执行上下文分为三种：</span><br><span class="line">1.全局执行上下文：代码开始执行时首先进入的环境</span><br><span class="line">2.函数执行上下文：函数调用时，会开始执行函数中的代码</span><br><span class="line">3.eval执行上下文：不建议使用</span><br><span class="line"></span><br><span class="line">执行上下文的周期，分为两个阶段</span><br><span class="line">1.创建阶段</span><br><span class="line">    创建词法环境</span><br><span class="line">    生成变量对象VO，建立作用域链</span><br><span class="line">    确认this指向，并绑定this</span><br><span class="line">2.执行阶段</span><br><span class="line">    进行变量赋值，函数引用以及执行代码</span><br><span class="line"></span><br><span class="line">预编译发生在函数执行前，预编译四部曲：</span><br><span class="line">1.创建AO对象</span><br><span class="line">2.找形参和变量声明，将变量和形参作为AO的属性名，值为undefined</span><br><span class="line">3.将形参和实参相统一</span><br><span class="line">4.在函数体中找到函数声明，值赋予函数体（函数名相同，后者覆盖前者）</span><br><span class="line">5.最后程序输出变量值的时候，就是从AO对象中拿</span><br><span class="line">（此时就产生了外部作用域的引用，js查找变量的规则就是如果在函数执行上下文中找不到变量，</span><br><span class="line">就在调用上下文中寻找他，如果还没有就一直往上一级，直到全局执行上下文，如果还没有，就是undefined，js形成闭包）</span><br></pre></td></tr></table></figure><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student.__proto__ === Student.prototype</span><br><span class="line">1.每个函数function都由一个prototype，即显式原型。是在定义函数的时候自动添加的，默认是一个空的Object对象</span><br><span class="line">2.每个引用类型都有一个__proto__,即隐式原型。是创建对象时自动添加的，默认值为构造函数的prototype属性值</span><br><span class="line">实例对象的隐式原型 等于 对应构造函数或类的显式原型</span><br><span class="line">能直接操作显式原型，不能直接操作隐式原型</span><br></pre></td></tr></table></figure><h2 id="js-的-new-操作符都做了些什么？"><a href="#js-的-new-操作符都做了些什么？" class="headerlink" title="js 的 new 操作符都做了些什么？"></a>js 的 new 操作符都做了些什么？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个空的js对象&#123;&#125;</span><br><span class="line">2. 将空对象的隐式原型__proto__指向构造函数的原型</span><br><span class="line">3. 将空对象作为构造函数的上下文（改变this指向）</span><br><span class="line">4. 对构造函数返回值做判断</span><br><span class="line"></span><br><span class="line">实现：</span><br><span class="line">function create(fn, ...args) &#123;</span><br><span class="line">    let obj = Object.create(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    // obj.__proto__ = fn.prototype;</span><br><span class="line">    Object.setPrototypeOf(obj, fn.prototype);</span><br><span class="line"></span><br><span class="line">    let result = fn.apply(obj, args);</span><br><span class="line"></span><br><span class="line">    return result instanceof Object ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">在new的时候，会对构造函数的返回值做一些判断</span><br><span class="line">1. 如果返回值是基础类型数据，则忽略返回值</span><br><span class="line">2. 如果返回值是引用数据类型，则使用return的返回，也就是new操作符无效</span><br></pre></td></tr></table></figure><h2 id="calc-support-media-各自的含义及用法？"><a href="#calc-support-media-各自的含义及用法？" class="headerlink" title="calc, support, media 各自的含义及用法？"></a>calc, support, media 各自的含义及用法？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@support 主要用于检测浏览器是否支持css的某个属性，相当于条件语句，支持的话写一套样式，</span><br><span class="line">不支持写另外一套样式，例如</span><br><span class="line">    @supports (display: grid) &#123;</span><br><span class="line">      div &#123;</span><br><span class="line">        display: grid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @supports not (display: grid) &#123;</span><br><span class="line">      div &#123;</span><br><span class="line">        float: right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">calc(): 用于动态计算值，支持 + - * / 运算。</span><br><span class="line"></span><br><span class="line">@media查询：可以针对不同的媒体类型定义不同的样式。</span><br></pre></td></tr></table></figure><h2 id="什么是会话-cookie-什么是持久-cookie"><a href="#什么是会话-cookie-什么是持久-cookie" class="headerlink" title="什么是会话 cookie,什么是持久 cookie?"></a>什么是会话 cookie,什么是持久 cookie?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie是服务器返回的，指定了expire（有效期）的是持久cookie,没有指定的是会话cookie</span><br></pre></td></tr></table></figure><h2 id="img-标签-title-和-alt-属性"><a href="#img-标签-title-和-alt-属性" class="headerlink" title="img 标签 title 和 alt 属性"></a>img 标签 title 和 alt 属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alt: 图片加载失败时，显示在网页上的替代文字</span><br><span class="line">title: 鼠标放在图片上的提示文字</span><br><span class="line"></span><br><span class="line">alt是必须属性，可以为空；title为非必须</span><br></pre></td></tr></table></figure><h2 id="es6-新特性"><a href="#es6-新特性" class="headerlink" title="es6 新特性"></a>es6 新特性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.let和const</span><br><span class="line">2.模版字符串</span><br><span class="line">3.箭头函数</span><br><span class="line">4.函数可以设置默认参数值</span><br><span class="line">5.扩展运算符</span><br><span class="line">6.对象和数组的解构</span><br><span class="line">7.class</span><br></pre></td></tr></table></figure><h2 id="图片懒加载原理"><a href="#图片懒加载原理" class="headerlink" title="图片懒加载原理"></a>图片懒加载原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 浏览器是否发起请求是根据&lt;img /&gt;标签的src属性</span><br><span class="line">2. 所以懒加载的关键是：在图片没有进入可视区域时，</span><br><span class="line">先不给&lt;img /&gt;的src属性赋值，等到图片进入可是区域再给src赋值。</span><br><span class="line"></span><br><span class="line">当图片底边距离页面的偏移（图片高度+图片距离顶部偏移高度）</span><br><span class="line">小于等于</span><br><span class="line">浏览器底边距离页面顶部高度（浏览器一屏高度 + 滚动区域）</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="H5-新增了哪些标签？"><a href="#H5-新增了哪些标签？" class="headerlink" title="H5 新增了哪些标签？"></a>H5 新增了哪些标签？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article、aside、audio、video、footer、header、nav、section</span><br></pre></td></tr></table></figure><h2 id="SVG-和-Canvas-的区别？"><a href="#SVG-和-Canvas-的区别？" class="headerlink" title="SVG 和 Canvas 的区别？"></a>SVG 和 Canvas 的区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.svg:表示以XML格式定义图像的可伸缩矢量图形。</span><br><span class="line">2.canvas：通过js来绘制2D图形</span><br><span class="line"></span><br><span class="line">svg通过标签fill属性可以调整颜色</span><br></pre></td></tr></table></figure><h2 id="AMD-和-CMD-的区别"><a href="#AMD-和-CMD-的区别" class="headerlink" title="AMD 和 CMD 的区别"></a>AMD 和 CMD 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">共同点：</span><br><span class="line">1.两者都是框架在推广过程中对模块定义的规范产出</span><br><span class="line">2.都是异步加载模块</span><br><span class="line">不同点：</span><br><span class="line">1.AMD是RequireJs在推广过程中对模块定义的规范产出，CMD是SeaJs在推广过程中对模块定义的规范化产出</span><br><span class="line">2.AMD推崇依赖前置，CMD推崇依赖就近</span><br><span class="line">3.AMD的应用体验好，因为模块提前执行了，CMD性能好，因为只有用户需要的时候才执行</span><br></pre></td></tr></table></figure><h2 id="如何实现-js-倒计时的纠偏？"><a href="#如何实现-js-倒计时的纠偏？" class="headerlink" title="如何实现 js 倒计时的纠偏？"></a>如何实现 js 倒计时的纠偏？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 第一种通过前端定时向服务端发送请求获取最新的时间差，以此来校准倒计时时间。</span><br><span class="line">2. 通过前端根据偏差时间来自动调整下次间隔的时间来实现，首先以setTimeout递归的方式来实现倒计时，</span><br><span class="line">通过一个变量记录倒计时的秒数，根据秒数和间隔时间计算出此时无偏差时应该显示的时间，</span><br><span class="line">然后拿当前真实时间与这个时间相减，就可以得到时间的偏差大小，因此在设置下一个定时器的时候，</span><br><span class="line">间隔时间减去这个偏差大小就可以纠正时间误差。</span><br></pre></td></tr></table></figure><h2 id="js-的执行机制"><a href="#js-的执行机制" class="headerlink" title="js 的执行机制"></a>js 的执行机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">js是单线程的，处理js任务只能一个一个顺序执行，js中把任务分为了同步任务和异步任务，</span><br><span class="line">同步任务进入主线程先执行，异步任务进入Event Table并注册函数，指定事情完成后，Event Table就会将函数移入到事件队列Event Queque中，等待主线程任务执行完毕，</span><br><span class="line">就会从事件队列中取出对应事件进入主线程执行。</span><br><span class="line"></span><br><span class="line">macro-task（宏任务）：包括整体代码script、setTimeout、setInterval</span><br><span class="line">micro-task（微任务）：Promise.then、process.nextTick</span><br><span class="line">微任务先于宏任务先执行（除了script）执行过程不同任务进入不同的event quue</span><br><span class="line"></span><br><span class="line">js先执行整体的同步任务代码，遇到微任务就会将其放入到微任务事件队列，</span><br><span class="line">遇到宏任务放到宏任务事件队列中。</span><br><span class="line"></span><br><span class="line">然后整体的同步任务代码执行完之后，就会先执行微任务队列中的任务，</span><br><span class="line">等待微任务队列中的所有任务执行完毕之后，再去从宏任务队列中找到第一个任务进行执行，</span><br><span class="line">执行过程中，如果遇到微任务就会放到微任务队列中，等到该宏任务执行完毕之后，</span><br><span class="line">就会查看微任务队列中有没有微任务，如果有就先执行微任务队列中的任务，否则执行第二个宏任务，</span><br><span class="line">以此类推。</span><br></pre></td></tr></table></figure><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="请说一下你对-React-的理解？"><a href="#请说一下你对-React-的理解？" class="headerlink" title="请说一下你对 React 的理解？"></a>请说一下你对 React 的理解？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. react是一个网页的UI框架，通过组件化的方式解决视图层开发复用的问题，本质是一个组件化框架。</span><br><span class="line">2. react的核心设计思路有三个：</span><br><span class="line">声明式</span><br><span class="line">    命令式：命令程序一步一步的执行操作</span><br><span class="line">    声明式：只需告诉程序我们想要的结果，其他的交给程序去做。</span><br><span class="line">组件化</span><br><span class="line">    将视图拆分和模块复用，做到高内聚低耦合</span><br><span class="line"></span><br><span class="line">通用性</span><br><span class="line">    一次学习，随处编写。RN，react360等，跨平台底层靠虚拟DOM实现</span><br><span class="line"></span><br><span class="line">3. 缺点</span><br><span class="line">1.没有官方系统解决方案，在开发大型应用时需要向社区寻找并整合解决方案。</span><br><span class="line">2.过于灵活，需要注意代码规范</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="React-lazy-懒加载"><a href="#React-lazy-懒加载" class="headerlink" title="React.lazy 懒加载"></a>React.lazy 懒加载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// React.lazy方法可以异步加载组件</span><br><span class="line">const Foo = React.lazy(() =&gt; import(&#x27;../components/Foo&#x27;)</span><br><span class="line"></span><br><span class="line">// React.lazy不能单独使用，需要配合React.suspense,用来包裹异步组件，添加loading效果等。</span><br><span class="line">&lt;React.Suspense fallback=&#123;&lt;div&gt;loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">    &lt;Foo /&gt;</span><br><span class="line">&lt;/React.Suspense&gt;</span><br><span class="line"></span><br><span class="line">React.lazy原理</span><br><span class="line">React.lazy使用import来懒加载组件，import在webpack中最终会调用requireEnsure方法，动态插入script来请求js文件，类似jsonp的形式。</span><br></pre></td></tr></table></figure><h2 id="类组件和函数组件之间的区别？"><a href="#类组件和函数组件之间的区别？" class="headerlink" title="类组件和函数组件之间的区别？"></a>类组件和函数组件之间的区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">相同点：</span><br><span class="line">接受属性返回React元素</span><br><span class="line"></span><br><span class="line">不同点：</span><br><span class="line">    1.编程思想不同：类组件需要创建实例，基于面向对象的方式编程。函数式组件接受输入返回输出，属于函数式编程的思想。</span><br><span class="line">    2.内存占用：类组件需要创建实例，会占用内存，函数组件不需要创建实例，可以节约内存</span><br><span class="line">    3.捕获特性：函数组件具有捕获特性</span><br><span class="line">    4.可测试性：函数组件更方便编写单元测试</span><br><span class="line">    5.状态：类组件有实例可以维护自己的状态，函数组件可以使用useState维护自己的状态</span><br><span class="line">    6.声明周期：类组件有生命周期，可以在生命周期内写逻辑，函数组件可以在useEffect中</span><br><span class="line">    7.逻辑复用：函数组件通过继承实现逻辑复用，函数组件可以通过自定义hooks实现逻辑复用</span><br><span class="line">    8.性能优化：类组件通过shouldComponentUpdate和PureComponent来跳过更新，函数组件通过React.memo</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="当调用-setState-的时候，发生了什么事？"><a href="#当调用-setState-的时候，发生了什么事？" class="headerlink" title="当调用 setState 的时候，发生了什么事？"></a>当调用 setState 的时候，发生了什么事？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将传递给setState的参数对象合并到组件的当前的状态，react遍历dom节点，计算差异，更新UI。</span><br><span class="line">https://segmentfault.com/a/1190000018250127</span><br></pre></td></tr></table></figure><h2 id="为什么-setState-的参数是一个-callback-而不是一个对象"><a href="#为什么-setState-的参数是一个-callback-而不是一个对象" class="headerlink" title="为什么 setState 的参数是一个 callback 而不是一个对象"></a>为什么 setState 的参数是一个 callback 而不是一个对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因为this.props和this.state的更新可能是异步的，不能依赖它们的值去计算下一个state</span><br><span class="line">(更新状态不要直接修改this.state，虽然状态可以改变，但不会触发组件的更新)</span><br><span class="line"></span><br><span class="line">setState何时同步何时异步？</span><br><span class="line">异步：由React控制的事件处理程序以及生命周期函数中调用setState为异步</span><br><span class="line">同步：React控制之外的原生js绑定的事件、setTimeout/setInterval等。</span><br></pre></td></tr></table></figure><h2 id="setState-什么时候同步什么时候异步？"><a href="#setState-什么时候同步什么时候异步？" class="headerlink" title="setState 什么时候同步什么时候异步？"></a>setState 什么时候同步什么时候异步？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">react三个模式：</span><br><span class="line">1.legacy模式： 通过ReactDOM.render(&lt;App /&gt;, rootNode)创建的，当前react的使用方式</span><br><span class="line">2.blocking模式：通过ReactDOM.createBlockingRoot(rootNode).render(&lt;App /&gt;),实验阶段，作为迁移到concurrent模式的第一个步骤</span><br><span class="line">3.concurrent模式，通过ReactDOM.createRoot(rootNode).render(&lt;App /&gt;),实验阶段，未来react的默认开发模式</span><br><span class="line"></span><br><span class="line">setState 只在合成事件（react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件）和钩子函数（生命周期中）是异步的，在原生事件和setTimeout中都是同步的。</span><br><span class="line"></span><br><span class="line">不同模式执行结果不同，legacy模式命中batchedUpadates（批处理）时异步，为命中时同步</span><br><span class="line">concurrent模式都是异步的</span><br><span class="line"></span><br><span class="line">setState异步并不是说内部由异步代码实现，其本身执行过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了“异步”</span><br><span class="line"></span><br><span class="line">可以通过第二个参数的callback回调函数中拿到最新的值，在异步中如果对同一个值进行多次setState，那么setState的批量更新策略会将其覆盖，去最后一次的执行，如果同时setState多个值，会在更新时对其进行合并批量更新。</span><br></pre></td></tr></table></figure><h2 id="react-渲染机制"><a href="#react-渲染机制" class="headerlink" title="react 渲染机制"></a>react 渲染机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">首先打开页面会渲染出一颗DOM树，更新数据会生成一颗虚拟DOM树，通过diff算法，</span><br><span class="line">比较两颗DOM树的差异，找到更新的地方进行批量改动。</span><br><span class="line"></span><br><span class="line">diff：计算一棵树形结构到另一颗树形结构的最少操作。</span><br><span class="line"></span><br><span class="line">1.把树形结构按照层级分解，只比较同级元素</span><br><span class="line">2.给列表结构的每个单元添加唯一的 key 属性，方便比较</span><br><span class="line">3.diff只简单考虑同层级的节点位置变换，如果是跨层级的话，只有创建节点和删除节点的操作。（官方也不推荐）</span><br></pre></td></tr></table></figure><h2 id="React-StrictMode-目前有助于："><a href="#React-StrictMode-目前有助于：" class="headerlink" title="React.StrictMode 目前有助于："></a>React.StrictMode 目前有助于：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">识别不安全的生命周期</span><br><span class="line">关于使用过时字符串 ref API 的警告</span><br><span class="line">关于使用废弃的 findDOMNode 方法的警告</span><br><span class="line">检测意外的副作用</span><br><span class="line">检测过时的 context API</span><br></pre></td></tr></table></figure><h2 id="虚拟-DOM-优点"><a href="#虚拟-DOM-优点" class="headerlink" title="虚拟 DOM 优点"></a>虚拟 DOM 优点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 减少不必要的DOM操作</span><br><span class="line">    1.1虚拟dom可以将多次操作合并为一次操作，比如添加100个节点，确是一个一个操作的</span><br><span class="line">    1.2虚拟dom借助dom diff可以将多余的操作省略掉，比如添加100个节点，其中10个是新增的</span><br><span class="line"></span><br><span class="line">2. 跨平台渲染</span><br><span class="line">    1.因为虚拟dom本质上是一个js对象</span><br><span class="line"></span><br><span class="line">react虚拟dom结构:</span><br><span class="line"></span><br><span class="line">const vNode = &#123;</span><br><span class="line">    key: null,</span><br><span class="line">    props:&#123;</span><br><span class="line">        children: [</span><br><span class="line">            &#123;type: &#x27;span&#x27;, ....&#125;,</span><br><span class="line">        ],</span><br><span class="line">        className: &#x27;red&#x27;,</span><br><span class="line">        onClick: () =&gt; &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ref: null,</span><br><span class="line">    type: &#x27;div&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">创建虚拟dom：React.createElement</span><br></pre></td></tr></table></figure><h2 id="diff-策略"><a href="#diff-策略" class="headerlink" title="diff 策略"></a>diff 策略</h2><p>`<br>策略一： tree diff<br>1.React 对树进行分层比较，两颗虚拟 DOM 树只会对同一层级的 DOM 节点进行比较。<br>如果存在跨层级的操作，只会进行创建和删除 2.如果节点是组件就进行 Component diff 3.如果节点是标签就进行 Element diff</p><p>策略二：component diff<br>如果为非同类型组件的话标记组件为 dirty component，替换组件下所有子节点，<br>类型相同更新属性，然后深入组件进行 Tree diff（递归遍历对比）</p><p>策略三：element diff<br>如果节点是原生标签，则看标签名<br>标签名不同直接替换，相同更新属性，然后进入标签进行 Tree diff（递归遍历对比）<br>`</p><h2 id="shouldComponentUpdate-nextProps-nextState-是做什么的，（react-性能优化是哪个周期函数？）"><a href="#shouldComponentUpdate-nextProps-nextState-是做什么的，（react-性能优化是哪个周期函数？）" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)是做什么的，（react 性能优化是哪个周期函数？）"></a>shouldComponentUpdate(nextProps, nextState)是做什么的，（react 性能优化是哪个周期函数？）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate 这个方法用来判断是否需要调用render方法重新绘制dom,</span><br><span class="line">由于渲染dom非常消耗性能，合理的调用shouldComponentUpdate方法可以极大的提高性能。</span><br></pre></td></tr></table></figure><h2 id="createElement-和-cloneElement-有什么区别？"><a href="#createElement-和-cloneElement-有什么区别？" class="headerlink" title="createElement 和 cloneElement 有什么区别？"></a>createElement 和 cloneElement 有什么区别？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">React.createElement()构建React元素。</span><br><span class="line">接受三个参数，第一个参数为标签名，如div、span等，或者react组件，第二个参数为传入的属性，第三个为组件的子组件。</span><br><span class="line">React.createElement(</span><br><span class="line">    type,</span><br><span class="line">    [props],</span><br><span class="line">    [...children]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">React.cloneElement(),第一个参数传入react元素不是标签名，第二个参数传入属性，新添加的属性会并入原有的属性，第三个参数为子组件</span><br><span class="line">React.cloneElement(</span><br><span class="line">    element,</span><br><span class="line">    [props],</span><br><span class="line">    [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="虚拟-DOM-的优缺点？"><a href="#虚拟-DOM-的优缺点？" class="headerlink" title="虚拟 DOM 的优缺点？"></a>虚拟 DOM 的优缺点？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 处理了浏览器兼容性问题，避免了用户操作真实DOM</span><br><span class="line">2.内容经过xss处理，可以防范xss攻击</span><br><span class="line">3.跨平台开发</span><br><span class="line">4.更新的时候可以实现差异化更新，减少更新DOM的操作</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1.虚拟DOM需要消耗额外的内存</span><br><span class="line">2.首次渲染不一定会更快</span><br></pre></td></tr></table></figure><h2 id="React-中创建组件的方式"><a href="#React-中创建组件的方式" class="headerlink" title="React 中创建组件的方式"></a>React 中创建组件的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createClass()、ES6 class组件 无无状态函数式组件</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="react-中-key-的作用"><a href="#react-中-key-的作用" class="headerlink" title="react 中 key 的作用"></a>react 中 key 的作用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key在react中用于追踪哪些列表中元素被修改、添加或者移除的辅助标识。</span><br><span class="line"></span><br><span class="line">在开发中，需要保证某个元素的key在同级元素中具有唯一性。</span><br><span class="line"></span><br><span class="line">diff算法会借助元素的key值来判断元素是新创建的还是被移动而来的元素，从而减少不必要的元素重渲染</span><br></pre></td></tr></table></figure><h2 id="react-优势"><a href="#react-优势" class="headerlink" title="react 优势"></a>react 优势</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 速度快：不直接操作dom，采用虚拟dom的概念</span><br><span class="line">2.跨浏览器兼容，兼容性好</span><br><span class="line">3.一切都是component，代码更加模块化，可维护性高</span><br><span class="line">4.单向数据流，采用Flux单向数据层架构</span><br></pre></td></tr></table></figure><h2 id="react-事件机制"><a href="#react-事件机制" class="headerlink" title="react 事件机制"></a>react 事件机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">react的事件机制利用了事件委托机制，事件并没有真正的绑定在真实的dom节点上，</span><br><span class="line">而是把事件绑定在结构的最外层document，使用统一的事件监听器，所有事件都由这个监听器统一分发。</span><br><span class="line"></span><br><span class="line">组件挂载和更新时，会将绑定的事件分门别类的放进一个叫EvnentPluginHub的事件池中。</span><br><span class="line"></span><br><span class="line">事件触发时，根据事件产生的Event对象找到触发事件的组件，再通过组件标识和事件类型</span><br><span class="line">从事件池中找到对应的事件监听回调，然后执行相关的监听函数。</span><br></pre></td></tr></table></figure><h2 id="异步回调中怎么使用-syntheticEvent？"><a href="#异步回调中怎么使用-syntheticEvent？" class="headerlink" title="异步回调中怎么使用 syntheticEvent？"></a>异步回调中怎么使用 syntheticEvent？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在合成事件机制里，一旦事件监听回调执行，合成事件对象就会被销毁，异步回调执行的时候</span><br><span class="line">合成事件对象早就被销毁了。</span><br><span class="line">解决方法：执行event.persist(),通知react不需要回收。</span><br></pre></td></tr></table></figure><h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">React 16推出Fiber之后，如果要开启async rendering，那么在render函数之前的所有函数都有可能被执行多次</span><br><span class="line"></span><br><span class="line">废弃：</span><br><span class="line">componentWillMount</span><br><span class="line">componentWillReceiveProps(nextProps)</span><br><span class="line">componentWillUpdate(nextProps, nextState)</span><br><span class="line">代替：</span><br><span class="line">静态函数：static getDerivedStateFromProps(nextProps, prevState)</span><br><span class="line"></span><br><span class="line">静态函数：static getDerivedStateFromError(error) // 渲染备用UI</span><br><span class="line">此生命周期return的值会自动调用setState，将值和state合并</span><br><span class="line">运行事件节点：子组件被渲染发生错误后且在页面更新前</span><br><span class="line"></span><br><span class="line">getSnapshotBeforeUpdate(prevProps, prevState) 此生命周期的返回值将作为参数传递给componentDidUpdate()</span><br><span class="line"></span><br><span class="line">componentDidCatch(error, info) // 打印错误信息</span><br><span class="line"></span><br><span class="line">错误边界无法捕获的错误：</span><br><span class="line">1.组件自身的错误</span><br><span class="line">2.异步错误，setTimeout</span><br><span class="line">3.事件中的错误，比如click事件中发生错误</span><br></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 构建action，通过创建一个函数，返回一个对象，需要携带type属性</span><br><span class="line"></span><br><span class="line">2. 构建reducer，用来响应action，然后通过return把数据传回store</span><br><span class="line"></span><br><span class="line">3. 利用createStore来构建store，把reducer作为参数传入</span><br><span class="line"></span><br><span class="line">4. 利用store.subscribe()注册监听</span><br><span class="line"></span><br><span class="line">5. 利用store.dispatch()发送action</span><br><span class="line"></span><br><span class="line">6. 利用store.getState()拿到值</span><br></pre></td></tr></table></figure><h1 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h1><h2 id="ts-中-type-和-interface-的区别"><a href="#ts-中-type-和-interface-的区别" class="headerlink" title="ts 中 type 和 interface 的区别"></a>ts 中 type 和 interface 的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">相同点：</span><br><span class="line">1.都可以描述一个对象和函数</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">interface SetUser &#123;</span><br><span class="line">    (name: string): void;</span><br><span class="line">&#125;</span><br><span class="line">type User = &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">type SetUser = (name: string): void;</span><br><span class="line"></span><br><span class="line">2.扩展与交叉类型</span><br><span class="line">interface可以extends进行类型扩展，type可以通过交叉类型实现interface的extend行为。</span><br><span class="line">interface可以exteds  type，type也可以与interface类型交叉（&amp;符号）</span><br><span class="line">不同点：</span><br><span class="line">1.type可以声明基本类型别名，联合类型，元祖等类型</span><br><span class="line">基本类型别名</span><br><span class="line">type Name = string;</span><br><span class="line">联合类型</span><br><span class="line">interface Dog &#123;</span><br><span class="line">    wang();</span><br><span class="line">&#125;</span><br><span class="line">interface Cat &#123;</span><br><span class="line">    miao();</span><br><span class="line">&#125;</span><br><span class="line">type Pet = Dog | Cat;</span><br><span class="line">元祖类型</span><br><span class="line">type PetList = [Dog, Cat];</span><br><span class="line"></span><br><span class="line">2. interface能够声明合并</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">interface User &#123;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line">=</span><br><span class="line">/**</span><br><span class="line">interface User &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="ts-中如何实现一个函数的重载"><a href="#ts-中如何实现一个函数的重载" class="headerlink" title="ts 中如何实现一个函数的重载"></a>ts 中如何实现一个函数的重载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js是动态类型语言，所以是没有overload的，但js可以在运行的时候判断类型</span><br><span class="line">ts的重载只是重载函数声明，函数的实现还是只有一个</span><br></pre></td></tr></table></figure><h2 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable //被观察者</span><br><span class="line">Observer // 观察者</span><br><span class="line">Reaction //响应</span><br><span class="line"></span><br><span class="line">mobx底层对数据的观察是使用Object.defineProperty(mobx4)或Proxy(mobx5)</span><br><span class="line">observer这个装饰器，对react组件的render方法进行跟踪，将render方法加入到各个observable的依赖中，当observale发生变化的时候，就会调用forceUpdate更新组件</span><br><span class="line">（mobx4将Array用类数组对象来模拟的，通过包装类封装为一个对象）</span><br></pre></td></tr></table></figure><h2 id="webpack-常用-loader"><a href="#webpack-常用-loader" class="headerlink" title="webpack 常用 loader"></a>webpack 常用 loader</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样式：style-loader、css-loader、less-loader、sass-loader</span><br><span class="line">文件：file-loader、url-loader</span><br><span class="line">编译：babel-loader、ts-loader</span><br><span class="line">校验：eslint-loader</span><br><span class="line"></span><br><span class="line">常用的plugin</span><br><span class="line">html-webpack-plugin</span><br><span class="line">webpack-bundle-analyzer 打包分析</span><br><span class="line">HotModuleReplacementPlugin 热更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自己写webpack插件：</span><br><span class="line">主要就是通过访问compliler和compilation拦截webpack的执行</span><br></pre></td></tr></table></figure><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">垃圾收集器会定期（周期性）的找出那些不再继续使用的变量，释放其内存，因为开销比较大，所以会按照固定的时间间隔周期性的执行</span><br><span class="line"></span><br><span class="line">最常用的两种方法：标记清除（常用）和引用计数</span><br><span class="line"></span><br><span class="line">标记清除：变量进入作用域，进行标记，离开作用域进行清除回收</span><br><span class="line"></span><br><span class="line">引用计数：就是跟踪记录每个值被引用的次数，引用一次加1，删除减1，引用计数为0时，进行回收，（循环引用可能会导致内存泄漏）</span><br><span class="line"></span><br><span class="line">常见的内存泄漏原因：</span><br><span class="line">全局变量过多引起内存泄漏</span><br><span class="line">闭包</span><br><span class="line">dom事件未清除</span><br><span class="line">循环引用</span><br></pre></td></tr></table></figure><h2 id="谈谈你对-webpack-的理解？"><a href="#谈谈你对-webpack-的理解？" class="headerlink" title="谈谈你对 webpack 的理解？"></a>谈谈你对 webpack 的理解？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack是一个打包模块化js的工具，在webpack里一切文件皆模块</span><br><span class="line">，通过loader转换，通过plugin注入钩子，最后输出由多个</span><br><span class="line">模块组合成的文件，webpack专注构建模块化。WebPack可</span><br><span class="line">以看做是模块的打包机器：它做的事情是，分析你的项目</span><br><span class="line">结构，找到js模块及其它的一些浏览器不能直接运行的</span><br><span class="line">拓展语言，例如：Scss，TS等，并将其打包为合适的格式</span><br><span class="line">以供浏览器使用。</span><br></pre></td></tr></table></figure><h2 id="说说-webpack-与-grunt、gulp-的不同？"><a href="#说说-webpack-与-grunt、gulp-的不同？" class="headerlink" title="说说 webpack 与 grunt、gulp 的不同？"></a>说说 webpack 与 grunt、gulp 的不同？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">三者都是前端构建工具，grunt和gulp在早期比较流行，</span><br><span class="line">现在webpack相对来说比较主，不过一些轻量化的任务</span><br><span class="line">还是会用gulp来处理，比如单独打包CSS文件等。</span><br><span class="line"></span><br><span class="line">grunt和gulp是基于任务和流（Task、Stream）的。</span><br><span class="line">类似jQuery，找到一个（或一类）文件，对其做一</span><br><span class="line">系列链式操作，更新流上的数据，整条链式操作</span><br><span class="line">构成了一个任务，多个任务就构成了web的构建流程。</span><br><span class="line"></span><br><span class="line">webpack是基于入口的。webpack会自动地递归解析</span><br><span class="line">入口所需要加载的所有资源文件，然后用不同的</span><br><span class="line">Loader来处理不同的文件，用Plugin来扩展webpack功能。</span><br><span class="line"></span><br><span class="line">所以，从构建来说，gulp和grunt需要开发者将整个</span><br><span class="line">前端构建过程拆分成多个`Task`，并合理控制所有`Task`的</span><br><span class="line">调用关系；webpack需要开发者找到入口，并需要清楚对</span><br><span class="line">于不同的资源应该使什么Loader做何种解析和加工对</span><br><span class="line">于知识背景来说，gulp更像后端开发者的思路，</span><br><span class="line">需要对于整个流程了如指掌webpack更倾向于前端开发者的思路</span><br></pre></td></tr></table></figure><h2 id="什么是-bundle-什么是-chunk，什么是-module"><a href="#什么是-bundle-什么是-chunk，什么是-module" class="headerlink" title="什么是 bundle,什么是 chunk，什么是 module?"></a>什么是 bundle,什么是 chunk，什么是 module?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bundle：是由webpack打包出来的文件</span><br><span class="line">chunk：代码块，一个chunk由多个模块组合而成，用于代码的合并和分割</span><br><span class="line">module：是开发中的单个模块，在webpack的世界，一切皆模块，一个模块对应一个文件，webpack会从配置的entry中递归开始找出所有依赖的模块</span><br></pre></td></tr></table></figure><h2 id="什么是-Loader-什么是-Plugin"><a href="#什么是-Loader-什么是-Plugin" class="headerlink" title="什么是 Loader?什么是 Plugin?"></a>什么是 Loader?什么是 Plugin?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Loaders是用来告诉webpack如何转化处理某一类型的文件，</span><br><span class="line">并且引入到打包出的文中</span><br><span class="line">2）Plugin是用来自定义webpack打包过程的方式，</span><br><span class="line">一个插件是含有apply方法的一个，通过这个方法可以参与</span><br><span class="line">到整个webpack打包的各个流程(生命周期)。</span><br></pre></td></tr></table></figure><h2 id="有哪些常见的-Loader？他们是解决什么问题的？"><a href="#有哪些常见的-Loader？他们是解决什么问题的？" class="headerlink" title="有哪些常见的 Loader？他们是解决什么问题的？"></a>有哪些常见的 Loader？他们是解决什么问题的？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file-loader：把文件输出到一个文件夹中，在代码中通过</span><br><span class="line">相对URL去引用输出的文件</span><br><span class="line">url-loader：和file-loader类似，但是能在文件很小的情况下</span><br><span class="line">以base64的方式把文件内容注入到代码中去</span><br><span class="line">source-map-loader：加载额外的Source Map文件，以方便断点调试</span><br><span class="line">image-loader：加载并且压缩图片文件</span><br><span class="line">babel-loader：把ES6转换成ES5</span><br><span class="line">css-loader：加载CSS，支持模块化、压缩、文件导入等特性</span><br><span class="line">style-loader：把CSS代码注入到JavaScript中，通过DOM操作去加载CSS。</span><br><span class="line">eslint-loader：通过ESLint检查JavaScript代码</span><br></pre></td></tr></table></figure><h2 id="有哪些常见的-Plugin？他们是解决什么问题的？"><a href="#有哪些常见的-Plugin？他们是解决什么问题的？" class="headerlink" title="有哪些常见的 Plugin？他们是解决什么问题的？"></a>有哪些常见的 Plugin？他们是解决什么问题的？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define-plugin：定义环境变量</span><br><span class="line">commons-chunk-plugin：提取公共代码</span><br><span class="line">uglifyjs-webpack-plugin：通过UglifyES压缩ES6代码</span><br></pre></td></tr></table></figure><h2 id="Loader-和-Plugin-的不同？"><a href="#Loader-和-Plugin-的不同？" class="headerlink" title="Loader 和 Plugin 的不同？"></a>Loader 和 Plugin 的不同？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">不同的作用</span><br><span class="line">Loader直译为&quot;加载器&quot;。Webpack将一切文件视为模块，</span><br><span class="line">但是webpack原生是只能解析js文件，如果想将其他文件</span><br><span class="line">也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</span><br><span class="line"></span><br><span class="line">Plugin直译为&quot;插件&quot;。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</span><br><span class="line"></span><br><span class="line">不同的用法</span><br><span class="line">Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么</span><br><span class="line">类型的文件（test），使用什么加载(loader)和使用的参数（options）</span><br><span class="line"></span><br><span class="line">Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。</span><br></pre></td></tr></table></figure><h2 id="webpack-的构建流程是什么"><a href="#webpack-的构建流程是什么" class="headerlink" title="webpack 的构建流程是什么?"></a>webpack 的构建流程是什么?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</span><br><span class="line">初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</span><br><span class="line">开始编译：用上一步得到的参数初始化Compiler对象，</span><br><span class="line">加载所有配置的插件，执行对象的 run 方法开始执行编译；</span><br><span class="line"></span><br><span class="line">确定入口：根据配置中的 entry 找出所有的入口文件；</span><br><span class="line"></span><br><span class="line">编译模块：从入口文件出发，调用所有配置的 Loader</span><br><span class="line">对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到</span><br><span class="line">所有入口依赖的文件都经过了本步骤的处理；</span><br><span class="line"></span><br><span class="line">完成模块编译：在经过第4步使用Loader翻译完所有模块后，</span><br><span class="line">得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</span><br><span class="line"></span><br><span class="line">输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk转换成一个单独的文件加入到输</span><br><span class="line">出列表，这步是可以修改输出内容的最后机会；</span><br><span class="line"></span><br><span class="line">输出完成：在确定好输出内容后，根据配置确定输出的</span><br><span class="line">路径和文件名，把文件内容写入到文件系统。</span><br><span class="line"></span><br><span class="line">在以上过程中，Webpack会在特定的时间点广播出特定</span><br><span class="line">的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，</span><br><span class="line">并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</span><br></pre></td></tr></table></figure><h2 id="描述一下编写-loader-或-plugin-的思路？"><a href="#描述一下编写-loader-或-plugin-的思路？" class="headerlink" title="描述一下编写 loader 或 plugin 的思路？"></a>描述一下编写 loader 或 plugin 的思路？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loader像一个&quot;翻译官&quot;把读到的源文件内容转义成新的文件内容，</span><br><span class="line">并且每个Loader通过链式操作，将源文件一步步翻译成想要的样子。</span><br><span class="line">编写Loader时要遵循单一原则，每个Loader只做一种&quot;转义&quot;工作。 每个Loader的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用this.callback()方法，将内容返回给webpack。 还可以通过 this.async()生成一个callback函数，再用这个callback将处理后的内容输出出去。 此外webpack还为开发者准备了开发loader的工具函数集——loader-utils。</span><br><span class="line">相对于Loader而言，Plugin的编写就灵活了许多。 webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</span><br></pre></td></tr></table></figure><h2 id="如何利用-webpack-来优化前端性能？"><a href="#如何利用-webpack-来优化前端性能？" class="headerlink" title="如何利用 webpack 来优化前端性能？"></a>如何利用 webpack 来优化前端性能？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">用webpack优化前端性能是指优化webpack的输出结果，</span><br><span class="line">让打包的最终结果在浏览器运行快速高效。</span><br><span class="line"></span><br><span class="line">压缩代码。删除多余的代码、注释、简化代码的写法等等方式。</span><br><span class="line">可以利用webpack的UglifyJsPlugin和ParallelUglifyPlugin来压缩JS文件</span><br><span class="line">，利用cssnano（css-loader?minimize）来压缩css</span><br><span class="line"></span><br><span class="line">利用CDN加速。在构建过程中，将引用的静态资源路径修改为CDN上对</span><br><span class="line">应的路径。可以利用webpack对于output参数和各loader的publicPath</span><br><span class="line">参数来修改资源路径</span><br><span class="line"></span><br><span class="line">删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。</span><br><span class="line"></span><br><span class="line">可以通过在启动webpack时追加参数--optimize-minimize来</span><br><span class="line">实现提取公共代码。</span><br></pre></td></tr></table></figure><h2 id="如何提高-webpack-的构建速度？"><a href="#如何提高-webpack-的构建速度？" class="headerlink" title="如何提高 webpack 的构建速度？"></a>如何提高 webpack 的构建速度？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">多入口情况下，使用CommonsChunkPlugin来提取公共代码</span><br><span class="line">通过externals配置来提取常用库</span><br><span class="line">利用DllPlugin和DllReferencePlugin预编译资源模块 通过DllPlugin来对那些我们引用但是绝对不会修改的npm包来进行预编译，</span><br><span class="line">再通过DllReferencePlugin将预编译的模块加载进来。</span><br><span class="line">使用Happypack 实现多线程加速编译</span><br><span class="line">使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度</span><br><span class="line">使用Tree-shaking和Scope Hoisting来剔除多余代码</span><br></pre></td></tr></table></figure><h2 id="怎么配置单页应用？怎么配置多页应用？"><a href="#怎么配置单页应用？怎么配置多页应用？" class="headerlink" title="怎么配置单页应用？怎么配置多页应用？"></a>怎么配置单页应用？怎么配置多页应用？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单页应用可以理解为webpack的标准模式，直接在entry中指定单页应用的入口即可，这里不再赘述多页应用的话，可以使用webpack的AutoWebPlugin来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。</span><br><span class="line">多页应用中要注意的是：每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套css样式表,随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置</span><br></pre></td></tr></table></figure><h2 id="vue-项目中实现按需加载？"><a href="#vue-项目中实现按需加载？" class="headerlink" title="vue 项目中实现按需加载？"></a>vue 项目中实现按需加载？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为了快速开发前端项目，经常会引入现成的UI组件库如ElementUI、iView等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。</span><br><span class="line">不过很多组件库已经提供了现成的解决方案，如Element出品的babel-plugin-component和AntDesign出品的babel-plugin-import 安装以上插件后，在.babelrc配置中或babel-loader的参数中进行设置，即可实现组件按需加载了。</span><br><span class="line"></span><br><span class="line">单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。</span><br><span class="line"></span><br><span class="line">通过import(*)语句来控制加载时机，webpack内置了对于import(*)的解析，会将import(*)中引入的模块作为一个新的入口在生成一个chunk。当代码执行到import(*)语句时，会去加载Chunk对应生成的文件。import()会返回一个Promise对象，所以为了让浏览器支持，需要事先注入Promise polyfill</span><br></pre></td></tr></table></figure><p>自主搭建、灵活定制、高效复用</p><p>1.单向链表的创建、插入和反转 2.二叉搜索树的查找、插入、删除思想，写伪代码<br>3.tcp 链接和释放过程，http，https，tcp 和 udp 比较 4.链表顺序翻转</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;从浏览器地址栏输入-url-到显示页面的步骤&quot;&gt;&lt;a href=&quot;#从浏览器地址栏输入-url-到显示页面的步骤&quot; class=&quot;headerlink&quot; title=&quot;从浏览器地址栏输入 url 到显示页面的步骤&quot;&gt;&lt;/a&gt;从浏览器地址栏输入 url 到显示页面的步骤&lt;/h2&gt;</summary>
    
    
    
    <category term="面经" scheme="https://github.com/foolishmax/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://github.com/foolishmax/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>浏览器关闭清除token</title>
    <link href="https://github.com/foolishmax/2021/05/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD%E6%B8%85%E9%99%A4token/"/>
    <id>https://github.com/foolishmax/2021/05/24/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD%E6%B8%85%E9%99%A4token/</id>
    <published>2021-05-24T14:03:02.000Z</published>
    <updated>2022-07-30T04:14:13.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><span id="more"></span><ul><li>浏览器关闭会出发 <strong>beforeunload</strong> ，<strong>unload</strong> 这两个事件。</li><li>浏览器刷新也会触发，还会触发<strong>load</strong>事件</li></ul><h2 id="如何清除-token"><a href="#如何清除-token" class="headerlink" title="如何清除 token"></a>如何清除 token</h2><ul><li><p>方案一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.onbeforeunload = function () &#123;</span><br><span class="line">    localStorage.removeItem(&quot;token&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点： 刷新也会清空 token</p></li><li><p>方案二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">window.onunload = function() &#123;</span><br><span class="line">    localStorage.setItem(&quot;lastTime&quot;,new Date().getTime())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = function() &#123;</span><br><span class="line">    let lastTime = localStorage.getItem(&quot;lastTime&quot;);</span><br><span class="line">    const interval = 3 * 1000;</span><br><span class="line">    // 如果时间间隔大于3s，则清除token</span><br><span class="line">    if (!lastTime || new Date().getTime() - lastTime &gt; interval) &#123;</span><br><span class="line">        localStorage.remove(&quot;token&quot;);</span><br><span class="line">        console.log(&quot;remove token&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&quot;time is less than not remove token&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补充<br>可以使用 sessionStorage 代替 localStorage 来存储 token，当关闭浏览器时会自动清除 token，sessionStorage 不是持久化的本地存储，而是会话级别的存储，而 localStorage 是持久化的本地存储，除非主动删除数据，否则数据是不会过期的。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;</summary>
    
    
    
    <category term="token" scheme="https://github.com/foolishmax/categories/token/"/>
    
    
    <category term="token" scheme="https://github.com/foolishmax/tags/token/"/>
    
  </entry>
  
</feed>
