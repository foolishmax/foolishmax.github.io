<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Foolish-Max</title>
  
  <subtitle>合抱之木始于毫末，万丈高楼起于垒土</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-28T15:23:10.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Foolish-Max</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电脑转移测试文章</title>
    <link href="http://yoursite.com/2021/03/28/%E7%94%B5%E8%84%91%E8%BD%AC%E7%A7%BB%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2021/03/28/%E7%94%B5%E8%84%91%E8%BD%AC%E7%A7%BB%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</id>
    <published>2021-03-28T15:22:16.000Z</published>
    <updated>2021-03-28T15:23:10.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="电脑转移测试文章"><a href="#电脑转移测试文章" class="headerlink" title="电脑转移测试文章"></a>电脑转移测试文章</h3><p>测试成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;电脑转移测试文章&quot;&gt;&lt;a href=&quot;#电脑转移测试文章&quot; class=&quot;headerlink&quot; title=&quot;电脑转移测试文章&quot;&gt;&lt;/a&gt;电脑转移测试文章&lt;/h3&gt;&lt;p&gt;测试成功&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>你真的了解ES6吗？</title>
    <link href="http://yoursite.com/2020/10/07/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3ES6%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/10/07/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3ES6%E5%90%97%EF%BC%9F/</id>
    <published>2020-10-07T10:22:44.000Z</published>
    <updated>2020-10-07T14:03:10.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你真的了解ES6吗？"><a href="#你真的了解ES6吗？" class="headerlink" title="你真的了解ES6吗？"></a>你真的了解ES6吗？</h2><h3 id="下面的代码输出什么？"><a href="#下面的代码输出什么？" class="headerlink" title="下面的代码输出什么？"></a>下面的代码输出什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let promise &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line"></span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">       resolve(2)</span><br><span class="line">       console.log(3)</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">    reject(&#39;error&#39;)</span><br><span class="line">&#125;)</span><br><span class="line">promise</span><br><span class="line">.then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(5)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err &#x3D;&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1 error 3</span><br><span class="line">&#x2F;&#x2F;要点分析：</span><br><span class="line">&#x2F;&#x2F; + promise 创建之后会立即执行</span><br><span class="line">&#x2F;&#x2F; + 状态一旦改变就不会在变，也就是reject与resolve只会执行其中一个</span><br><span class="line">&#x2F;&#x2F; + 异步队列的执行顺序</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="下面的代码输出什么？-1"><a href="#下面的代码输出什么？-1" class="headerlink" title="下面的代码输出什么？"></a>下面的代码输出什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const first &#x3D; () &#x3D;&gt; (new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">    let p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(2);</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(3);</span><br><span class="line">            resolve(4);</span><br><span class="line">        &#125;, 0)</span><br><span class="line">        resolve(5);</span><br><span class="line">    &#125;);</span><br><span class="line">    resolve(6);</span><br><span class="line">    p.then((arg) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(arg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br><span class="line">first().then((arg) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(arg);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(7);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1 2 7 5 6 3</span><br><span class="line">&#x2F;&#x2F;要点解析：</span><br><span class="line">&#x2F;&#x2F; + promise创建立即执行，依次输出1 2</span><br><span class="line">&#x2F;&#x2F; + 执行同步任务，输出 7</span><br><span class="line">&#x2F;&#x2F; + 在执行上一步的时候已经将p.then 以及 first.then 加入到微任务执行队列，所以依次输出 5 6</span><br><span class="line">&#x2F;&#x2F; + 最后执行宏任务 setTimeout，输出 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="下面的代码输出什么？-2"><a href="#下面的代码输出什么？-2" class="headerlink" title="下面的代码输出什么？"></a>下面的代码输出什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(1)</span><br><span class="line">.then(2)</span><br><span class="line">.then(Promise.resolve(3))</span><br><span class="line">.then(console.log)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 答案： 1</span><br><span class="line">&#x2F;&#x2F; + 如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为resolved。</span><br><span class="line">&#x2F;&#x2F; + then方法接收的参数是函数！！！，而如果传递的并非是一个函数就会导致前一个Promise的结果穿透到下面。</span><br></pre></td></tr></table></figure><h3 id="const-和-Object-freeze-有什么区别？"><a href="#const-和-Object-freeze-有什么区别？" class="headerlink" title="const 和 Object.freeze 有什么区别？"></a>const 和 Object.freeze 有什么区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;const 声明一个常量，一旦声明，常量的值就不能改变，对于复杂的数据类型，比如对象是可以修改其属性的。const实际保证的不是变量的值，而是变量指向的内存地址所指向的数据不能改变</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Object.freeze适用于对象值，使得对象不可变，即不能改变对象属性，但是如果对象的属性值仍是复杂数据类型，那么是可以修改成功的。</span><br></pre></td></tr></table></figure><h3 id="for…in和for…of"><a href="#for…in和for…of" class="headerlink" title="for…in和for…of"></a>for…in和for…of</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对于纯对象的遍历，for...in更合适</span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: [],</span><br><span class="line">    c: function()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">for( let key in obj) &#123;</span><br><span class="line">    console.log(key);&#x2F;&#x2F; a b c</span><br><span class="line">    console.log(obj[key]); &#x2F;&#x2F;1 [] function()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对于数组遍历，如果不需要知道索引，for...of迭代更合适，还可以中断</span><br><span class="line">const arr &#x3D; [3, 5, 7];</span><br><span class="line">for(let i of arr)&#123;</span><br><span class="line">    console.log(i);&#x2F;&#x2F;3 5 7</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组遍历如果需要知道索引forEach()更合适</span><br><span class="line">arr.forEach((value, index) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(value);&#x2F;&#x2F;3 5 7</span><br><span class="line">    console.log(index);&#x2F;&#x2F;0 1 2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...in对于数组遍历，会遍历得到索引值，可以通过数组索引取得对应得值，但是，for...in不仅可以枚举数组自身，还会枚举数组的原型(可通过arr.hasOwnProperty(i)去除)以及数组对象本身属性值。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...of可以迭代字符串</span><br><span class="line">let str &#x3D; &#39;foo&#39;</span><br><span class="line">for(let value of str) &#123;</span><br><span class="line">    console.log(value); &#x2F;&#x2F; &quot;f&quot; &quot;o&quot; &quot;o&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...of可以直接迭代arguments类数组对象</span><br><span class="line">(function()&#123;</span><br><span class="line">    for(let arg of arguments) &#123;</span><br><span class="line">        console.log(arg);&#x2F;&#x2F;1 2 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(1, 2, 3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...of 还可以迭代NodeList这类DOM集合</span><br><span class="line">let elements &#x3D; document.querySelectorAll(&#39;body&#39;);</span><br><span class="line">for(let element of elements) &#123;</span><br><span class="line">    console.log(element.tagName); &#x2F;&#x2F;&quot;BODY&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...of迭代Map</span><br><span class="line">let mapData &#x3D; new Map([[&#39;a&#39;,1],[&#39;b&#39;,2]]);</span><br><span class="line">for(let [key, value] of mapData) &#123;</span><br><span class="line">    console.log(value); &#x2F;&#x2F;1 2 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...of迭代Set</span><br><span class="line">let setData &#x3D; new Set([1, 2, 3, 2, 1]);</span><br><span class="line">for(let value of setData) &#123;</span><br><span class="line">    console.log(value);&#x2F;&#x2F;1 2 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;你真的了解ES6吗？&quot;&gt;&lt;a href=&quot;#你真的了解ES6吗？&quot; class=&quot;headerlink&quot; title=&quot;你真的了解ES6吗？&quot;&gt;&lt;/a&gt;你真的了解ES6吗？&lt;/h2&gt;&lt;h3 id=&quot;下面的代码输出什么？&quot;&gt;&lt;a href=&quot;#下面的代码输出什么？&quot;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6实用技巧</title>
    <link href="http://yoursite.com/2020/10/07/ES6%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2020/10/07/ES6%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2020-10-07T00:41:28.000Z</published>
    <updated>2020-10-07T14:42:44.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6实用技巧"><a href="#ES6实用技巧" class="headerlink" title="ES6实用技巧"></a>ES6实用技巧</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;js变量命名：小驼峰，前缀应当是名词，例如 maxCount、tableTitle</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;js常量：全大写，单词以_分割</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;js函数命名：小驼峰，前缀应当是动词，例如 setCount、getTitle</span><br><span class="line">&#x2F;&#x2F;常见动词：can has is get set load</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类 &amp; 构造函数：大驼峰，首字母大写</span><br><span class="line">&#x2F;&#x2F; class Person &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的成员</span><br><span class="line">&#x2F;&#x2F;公共属性和方法：跟变量和函数的命名一样</span><br><span class="line">&#x2F;&#x2F;私有属性和方法，前缀为_(下划线)，同上</span><br><span class="line">&#x2F;&#x2F;private _name: string;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ES6新增了let和const两个命令，let用来定义变量，const用于定义常量，let和const都是块级作用域。</span><br><span class="line">const对于对象类型使用的是指针式引用，常量只是指向了对象的指针，对象本身的内容却依然可以被修改。</span><br><span class="line">在使用中，建议使用let和const完全代替var命令</span><br></pre></td></tr></table></figure><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const foo &#x3D; &#96;this is a $&#123;example&#125;&#96;;</span><br></pre></td></tr></table></figure><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转换</span><br><span class="line">Number.parseInt —— 将字符串或数字转换为整数</span><br><span class="line">Number.parseFloat —— 将字符串或数字转换为浮点数</span><br><span class="line"></span><br><span class="line">上述两个方法与parseInt和parseFloat功能一致，在ES6中推荐使用Number.的方法调用，目的是为了减少全局性方法，使语言逐步模块化。</span><br></pre></td></tr></table></figure><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;合并数组</span><br><span class="line">let a &#x3D; [1,2]</span><br><span class="line">let b &#x3D; [3]</span><br><span class="line">let c &#x3D; [...a, ...b]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Array.from() 将伪数组对象或可遍历对象转换为真数组</span><br><span class="line">&#x2F;&#x2F;典型的伪数组有：函数的arguments对象，以及大多数DOM元素，还有字符串</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;快速转换为数组</span><br><span class="line">Array.of(3, 4, 5)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断对象是否为数组</span><br><span class="line">if(Array.isArray(obj))&#123;...&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;检索数据中是否有5</span><br><span class="line">[1, 2, 3].includes(5) &#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找出第一个匹配表达式的结果，只要匹配到一项，函数就返回</span><br><span class="line">let a &#x3D;[1, 3, 4, -89].find((value, index, arr) &#x3D;&gt; &#123;</span><br><span class="line">    return value &lt; 0;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(a); &#x2F;&#x2F;-89</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找出第一个匹配表达式的结果的下标</span><br><span class="line">let a &#x3D; [1, 2, 3, -2].findIndex((value, index, arr) &#x3D;&gt; &#123;</span><br><span class="line">    return value &lt; 0;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(a); &#x2F;&#x2F;3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;内容过滤</span><br><span class="line">let a &#x3D; [1, 2, 3, -4].filter((item) &#x3D;&gt; &#123;</span><br><span class="line">    return item &gt; 0;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(a); &#x2F;&#x2F;[1, 2, 3]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;内容实例</span><br><span class="line">.keys() —— 获得数组中所有元素的键名(索引下标)</span><br><span class="line">.values() —— 获得数组中所有元素的数据</span><br><span class="line">.entries() —— 获得数组中所有数据的键名和数据</span><br><span class="line">类似Object中的同名函数</span><br></pre></td></tr></table></figure><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对象内容合并</span><br><span class="line">let a &#x3D; &#123;a:1,b:2&#125;, &#x2F;&#x2F;&#123;a: 1, b: 4&#125;</span><br><span class="line">    b &#x3D; &#123;b:3&#125;,</span><br><span class="line">    c &#x3D; &#123;b:4,c:5&#125;</span><br><span class="line">let d &#x3D; Object.assign(a, b, c) &#x2F;&#x2F;&#123;a: 1, b: 4, c: 5&#125;</span><br><span class="line">&#x2F;&#x2F; 合并的同时更新a对象的内容</span><br><span class="line">&#x2F;&#x2F; a自身没有的属性不会被添加，只会更新</span><br><span class="line">&#x2F;&#x2F; 只会影响a第一个，不会影响后面的b、c</span><br><span class="line">&#x2F;&#x2F; 推荐使用下面这种</span><br><span class="line">let d &#x3D; Object.assign(&#123;&#125;, a, b, c)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对象内容</span><br><span class="line">Object.keys() —— 获取所有键名，以数组形式返回</span><br><span class="line">Object.values() —— 获取所有值内容，以数组形式返回</span><br><span class="line">Object.entries() —— 获取所有键名和值内容，以数组形式返回，成员内容也是数组形式 例如：[[&#39;a&#39;, 1],[&#39;b&#39;, 2]]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断对象是否为数组对象</span><br><span class="line">if(Object.isArray(obj))&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断对象是否为空对象</span><br><span class="line">if(obj &amp;&amp; Object.keys(obj).length)</span><br></pre></td></tr></table></figure><h3 id="Destructuring解构赋值"><a href="#Destructuring解构赋值" class="headerlink" title="Destructuring解构赋值"></a>Destructuring解构赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c] &#x3D; [1, 2, 3] &#x2F;&#x2F;如果个数不匹配，没有对应上的为undefined</span><br><span class="line"></span><br><span class="line">let [a, b, c &#x3D; &#39;default&#39;] &#x3D; [12, 23] &#x2F;&#x2F;指定默认值</span><br><span class="line"></span><br><span class="line">let [a, ...b] &#x3D; [1, 2, 3] &#x2F;&#x2F;b的值为[2, 3]</span><br><span class="line"></span><br><span class="line">let [a, b, c] &#x3D; &#39;yes&#39; &#x2F;&#x2F;a的值为y，b的值为e，c的值为s</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果名称是字符串的自带属性，则会获得属性的值</span><br><span class="line">let &#123; length &#125; &#x3D; &#39;yes&#39; &#x2F;&#x2F;length 为3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;解构赋值使用实例，作为函数传参，使用默认值</span><br><span class="line">let obj &#x3D; &#123;a: 1, b: 2&#125;</span><br><span class="line">function test(&#123;a &#x3D; 10, b&#125;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">test(obj)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象结构解构赋值</span><br><span class="line">let obj &#x3D; &#123;a: 1, b: 2&#125;;</span><br><span class="line">let &#123; a, b &#125; &#x3D; obj; &#x2F;&#x2F;a &#x3D; 1,b &#x3D; 2,需要严格匹配名称，数组的模式是严格匹配下标。</span><br><span class="line"></span><br><span class="line">let obj &#x3D; &#123;a: 1, b: 2&#125;;</span><br><span class="line">let &#123; a &#x3D; 0, b &#x3D; 3 &#125; &#x3D; obj; &#x2F;&#x2F;赋值并给定默认值</span><br><span class="line"></span><br><span class="line">let obj &#x3D; &#123; a: 1, b: 2&#125;;</span><br><span class="line">let &#123;a: A, b&#125; &#x3D; obj; &#x2F;&#x2F;获得内容后，将变量会从新命名</span><br><span class="line"></span><br><span class="line">let a &#x3D; 0;</span><br><span class="line">(&#123;a, b&#125; &#x3D; obj);&#x2F;&#x2F;对已存在的a进行修改值，并生成新的变量b</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;解构的同时使用重命名和设置默认值的语法</span><br><span class="line">const person &#x3D; &#123;name: &quot;zhangsan&quot;,sex: &quot;male&quot;&#125;;</span><br><span class="line">const &#123;name: middleName &#x3D; &quot;zhangxiaosan&quot;&#125; &#x3D; person;</span><br><span class="line">console.log(middleName); &#x2F;&#x2F;&quot;zhangsan&quot;</span><br><span class="line">&#x2F;&#x2F; 首先声明middleName这个变量，查询person的middle属性，如果存在则赋值给middleNmae，如果不存在使用默认值&quot;zhangxiaosan&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;多层解构赋值</span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">    arr: [&#39;aaa&#39;, &#123;a: 1&#125;]</span><br><span class="line">&#125;</span><br><span class="line">let &#123;arr: [b, &#123;a&#125;]&#125; &#x3D; obj; &#x2F;&#x2F;b为&#39;aaa&#39;,a为1，注意结构要对应。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组转化为对象</span><br><span class="line">const points &#x3D; [</span><br><span class="line">    [1,2],</span><br><span class="line">    [3,4]</span><br><span class="line">];</span><br><span class="line">let newPoints &#x3D; points.map(item &#x3D;&gt; &#123;</span><br><span class="line">    const [x,y] &#x3D; item;</span><br><span class="line">    return &#123;x, y&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">or</span><br><span class="line">let newPoints &#x3D; points.map(([x, y]) &#x3D;&gt; &#123;</span><br><span class="line">    return &#123;x, y&#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newPoints);</span><br><span class="line">&#x2F;&#x2F;[</span><br><span class="line">&#x2F;&#x2F;  &#123;x:1,y:2&#125;,</span><br><span class="line">&#x2F;&#x2F;  &#123;x:3,y:4&#125;</span><br><span class="line">&#x2F;&#x2F;]</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错</span><br><span class="line">&#x2F;&#x2F;报错，会报SyntaxError</span><br><span class="line">let count &#x3D; num &#x3D;&gt; &#123;base: 50&#125;;</span><br><span class="line">&#x2F;&#x2F;正确返回方式</span><br><span class="line">let count &#x3D; num &#x3D;&gt; (&#123;base: 50&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;特点：更简洁的函数和封闭上下文的this指向。</span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;基本用法</span><br><span class="line">let name &#x3D; Symbol(&quot;name&quot;);</span><br><span class="line">console.log(name); &#x2F;&#x2F;Symbol(name)</span><br><span class="line">console.log(typeof name); &#x2F;&#x2F;&quot;symbol&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Symbol 函数不能用new命令，因为Symbol是原始数据类型，不是对象</span><br><span class="line">&#x2F;&#x2F; Symbol表示独一无二的值，因此带有相同参数的两个Symbol值也不相等</span><br><span class="line">let name1 &#x3D; Symbol();</span><br><span class="line">let name2 &#x3D; Symbol();</span><br><span class="line">name1 &#x3D;&#x3D;&#x3D; name2;&#x2F;&#x2F; false</span><br><span class="line">let name1 &#x3D; Symbol(&quot;name&quot;);</span><br><span class="line">let name2 &#x3D; Symbol(&quot;name&quot;);</span><br><span class="line">name1 &#x3D;&#x3D;&#x3D; name2; &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol不能进行隐式类型转换</span><br><span class="line">let name &#x3D; Symbol(&#39;foo&#39;);</span><br><span class="line">console.log(&quot;nihao&quot; + name);</span><br><span class="line">&#x2F;&#x2F;浏览器报错：Uncaught TypeError:Cannot convert a Symbol value to a string.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol值可以显示转换为字符串</span><br><span class="line">let name &#x3D; Symbol(&#39;foo&#39;);</span><br><span class="line">String(name); &#x2F;&#x2F;&quot;Symbol(foo)&quot;</span><br><span class="line">name.toString(); &#x2F;&#x2F;&quot;Symbol(foo)&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol值不能转换为数字</span><br><span class="line">let name &#x3D; Symbol(&#39;foo&#39;);</span><br><span class="line">Number(name);</span><br><span class="line">&#x2F;&#x2F;浏览器报错：Uncaught TypeError:Cannot convert a Symbol value to a number.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol值可以转换为布尔值</span><br><span class="line">let name &#x3D; Symbol(&#39;foo&#39;);</span><br><span class="line">Boolean(name); &#x2F;&#x2F;true</span><br><span class="line">!name &#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol变量不能作为webStorage的键使用</span><br><span class="line">let name &#x3D; Symbol();</span><br><span class="line">localStorage.setItem(name,&quot;aaaa&quot;);</span><br><span class="line">&#x2F;&#x2F;浏览器报错：Uncaught TypeError:Cannot convert a Symbol value to a string.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用场景</span><br><span class="line">&#x2F;&#x2F;作为对象属性名</span><br><span class="line">&#x2F;&#x2F;不能用.只能用[]</span><br><span class="line">let name &#x3D; Symbol();</span><br><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">obj[name] &#x3D; &quot;zhangsan&quot;;</span><br><span class="line">console.log(obj); &#x2F;&#x2F;&#123;Symbol():&quot;zhangsan&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol作为属性名时，该属性时公有属性不是私有属性，可以在类的外部访问，但是不会出现在for...in,for...of的循环中，也不会被Object.keys()、Object.getOwnPropertyNames()返回。</span><br><span class="line">&#x2F;&#x2F;可以通过Object.getOwnPropertySymbols()和Reflect.ownKeys()取到。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义常量，保证唯一性</span><br><span class="line">const COLOR_RED &#x3D; Symbol(&quot;red&quot;);</span><br><span class="line">const MY_RED &#x3D; Symbol(&quot;red&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol.for() </span><br><span class="line">&#x2F;&#x2F;作用：用于将描述相同的Symbol变量指向同一个Symbol值</span><br><span class="line">&#x2F;&#x2F;Symbol()定义的值每次都是新建的，即使描述相同值也不同</span><br><span class="line">&#x2F;&#x2F;Symbol.for() 会先检查给定的描述是否存在，不存在才会新建一个值，并将这个值登记在全局环境中供搜索。</span><br><span class="line">let a1 &#x3D; Symbol.for(&#39;a&#39;);</span><br><span class="line">let a2 &#x3D; Symbol.for(&#39;a&#39;);</span><br><span class="line">a1 &#x3D;&#x3D;&#x3D; a2 &#x2F;&#x2F;true</span><br><span class="line">typeof a1 &#x2F;&#x2F;&quot;symbol&quot;</span><br><span class="line">typeof a2 &#x2F;&#x2F;&quot;symbol&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol.keyFor()</span><br><span class="line">&#x2F;&#x2F;检测Symbol值是否被登记过，返回一个已登记的Symbol类型值的key</span><br><span class="line">let a1 &#x3D; Symbol.for(&#39;a&#39;);</span><br><span class="line">Symbol.keyFor(a1); &#x2F;&#x2F;&quot;a&quot;</span><br><span class="line"></span><br><span class="line">let a2 &#x3D; Symbol(&#39;a&#39;);</span><br><span class="line">Symbol.keyFor(a2); &#x2F;&#x2F;undefined</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Symbol的属性</span><br><span class="line">&#x2F;&#x2F;Symbol.peorotype.description 用于返回Symbol数据的描述</span><br><span class="line">let a &#x3D; Symbol(&quot;accc&quot;);</span><br><span class="line">a.description &#x2F;&#x2F;&quot;accc&quot;</span><br></pre></td></tr></table></figure><h3 id="排除Object中不需要的键值"><a href="#排除Object中不需要的键值" class="headerlink" title="排除Object中不需要的键值"></a>排除Object中不需要的键值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const obj &#x3D; &#123;a:1,b:2,c:3&#125;;</span><br><span class="line"></span><br><span class="line">const &#123;a,...rest&#125; &#x3D; obj; &#x2F;&#x2F;获取除了a之外的所有属性</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用reduce对象数组的某一个属性求和</span><br><span class="line">const obj &#x3D; [</span><br><span class="line">    &#123;name: &quot;lilei&quot;,score: 98&#125;,</span><br><span class="line">    &#123;name: &quot;hanmeimei&quot;,score: 90&#125;</span><br><span class="line">]</span><br><span class="line">const scoreTotal &#x3D; objs.reduce((total, obj) &#x3D;&gt; &#123;</span><br><span class="line">    return total + obj.score;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用reduce同时做到map和filter的作用</span><br><span class="line">const number &#x3D; [10,20,30,40];</span><br><span class="line">const doubledOver50 &#x3D; number.reduce((finalList, num) &#x3D;&gt; &#123;</span><br><span class="line">    num &#x3D; num * 2;</span><br><span class="line"></span><br><span class="line">    if(num &gt; 50) &#123;</span><br><span class="line">        finalList.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    return finalList;</span><br><span class="line">&#125;,[]);</span><br><span class="line">doubledOver50; &#x2F;&#x2F;[60, 80]</span><br></pre></td></tr></table></figure><h3 id="import-动态加载"><a href="#import-动态加载" class="headerlink" title="import() 动态加载"></a>import() 动态加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;把import作为一个函数可以实现动态加载模块</span><br><span class="line">if(true) &#123;</span><br><span class="line">    import(&#39;.&#x2F;module.js).then(res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES6实用技巧&quot;&gt;&lt;a href=&quot;#ES6实用技巧&quot; class=&quot;headerlink&quot; title=&quot;ES6实用技巧&quot;&gt;&lt;/a&gt;ES6实用技巧&lt;/h2&gt;&lt;h3 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习</title>
    <link href="http://yoursite.com/2020/09/05/Jquery%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/09/05/Jquery%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-09-05T00:59:32.000Z</published>
    <updated>2020-09-06T13:50:21.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery学习"><a href="#jQuery学习" class="headerlink" title="jQuery学习"></a>jQuery学习</h2><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><ul><li>jQuery入口函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    &#x2F;&#x2F;执行代码</span><br><span class="line">&#125;)</span><br><span class="line">或者（简写）</span><br><span class="line">$(function()&#123;</span><br><span class="line">    &#x2F;&#x2F;执行代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span></li><li>javascript入口函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    &#x2F;&#x2F;执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>jQuery的入口函数是在html的所有标签DOM都加载之后，就会执行包裹的代码，可以执行多次，并且不会覆盖上次。</li><li>javascript的window.onload事件是等到所有内容，包括外部图片之类的文件加载完成后，才会执行，只能执行一次，如果第二次会把第一次的执行覆盖。</li></ul><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><ul><li><p>元素选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;)</span><br></pre></td></tr></table></figure></li><li><p>id选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#test&quot;)</span><br></pre></td></tr></table></figure></li><li><p>class选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.test&quot;)</span><br></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;[href]&quot;)</span><br></pre></td></tr></table></figure></li><li><p>:empty 选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;:empty&quot;)</span><br><span class="line">&#x2F;&#x2F;选择空的元素，既不不含子元素也不包含文本的元素</span><br><span class="line">$(&quot;div:empty&quot;) &#x2F;&#x2F;选择div中为空的div元素</span><br></pre></td></tr></table></figure></li><li><p>:parent选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;td:parent&quot;)</span><br><span class="line">&#x2F;&#x2F;选取所有带有子元素或文本的&lt;td&gt;标签元素</span><br></pre></td></tr></table></figure></li><li><p>:contains 选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div:contains(&#39;hello&#39;)&quot;)</span><br><span class="line">&#x2F;&#x2F;找到div中包含文本hello的指定元素</span><br></pre></td></tr></table></figure></li><li><p>:has选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div:has(p)&quot;)</span><br><span class="line">&#x2F;&#x2F;找到包含p标签元素的div</span><br></pre></td></tr></table></figure></li><li><p>补充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;:button&quot;) &#x2F;&#x2F;获取所有type为button的&lt;input&gt;元素和&lt;button&gt;元素，去掉冒号，只能获取&lt;button&gt;元素。</span><br></pre></td></tr></table></figure><h3 id="常用jQuery事件方法"><a href="#常用jQuery事件方法" class="headerlink" title="常用jQuery事件方法"></a>常用jQuery事件方法</h3></li><li><p>click() 点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).click(function()&#123;</span><br><span class="line">    $(this).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>dblclick() 双击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).dblclick(function()&#123;</span><br><span class="line">    $(this).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>mouseenter() 鼠标指针穿过元素时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).mouseenter(function()&#123;</span><br><span class="line">    alert(&quot;您的鼠标移到了p标签元素上！&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>mouseleave() 鼠标指针离开元素时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).mouseleave(function()&#123;</span><br><span class="line">    alert(&quot;您的鼠标离开了该p标签元素！&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>mouseup() 当在元素上松开鼠标时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).mouseup(()&#x3D;&gt;&#123;</span><br><span class="line">    alert(&quot;鼠标在p标签上松开！&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>hover() 模拟光标悬停事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).hover(</span><br><span class="line">    function()&#123;</span><br><span class="line">        alert(&quot;你进入了p标签！&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    function()&#123;</span><br><span class="line">        alert(&quot;你离开了p标签！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>focus()  当元素获得焦点时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">    $(this).css(&quot;background-color&quot;,&quot;#ccc&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>blur() 当元素失去焦点时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input&quot;).blur(function()&#123;</span><br><span class="line">    $(this).css(&quot;background-color&quot;,&quot;#fff&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>keypress,keydown,keyup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取按键代码或ASCII码</span><br><span class="line">$(window).keydown(function(event)&#123;</span><br><span class="line">    &#x2F;&#x2F;通过event.which可以拿到按键代码，如果是keypress事件中则拿到ASCII码。</span><br><span class="line">    console.log(event);</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;获取事件对象</span><br><span class="line">$(window).keypress(function(event)&#123;    </span><br><span class="line">    &#x2F;&#x2F;获取事件对象，里面包含各种有用的信息。</span><br><span class="line">    console.log(event);</span><br><span class="line">    &#x2F;&#x2F;console.log(event.which);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;keypress事件获取键入的字符</span><br><span class="line">$(window).keypress(function(event)&#123;</span><br><span class="line">    &#x2F;&#x2F;event.which是获取ASCII码，前面的函数是将ASCII码转换成字符，空格键和Enter键输出均为空白。</span><br><span class="line">    console.log(String.fromCharCode(event.which));</span><br><span class="line">    &#x2F;&#x2F;从event对象中key属性获取字符，但是Enter键的key值为&quot;Enter&quot;，空白键还是空白&quot; &quot;。</span><br><span class="line">    console.log(event.key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>off() 事件移除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).off() &#x2F;&#x2F;移除所有button元素身上绑定的事件</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).off(&quot;click&quot;) &#x2F;&#x2F;移除所有的click事件，移除指定类型</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).off(&quot;click&quot;, test) &#x2F;&#x2F;移除click事件中的test回调方法，移除指定类型的事件</span><br></pre></td></tr></table></figure></li><li><p>阻止事件冒泡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.son&quot;).click(function(event)&#123;</span><br><span class="line">    alert(&quot;son&quot;)</span><br><span class="line">    &#x2F;&#x2F;return false;</span><br><span class="line">    event.stopPropagation(); &#x2F;&#x2F;阻止事件冒泡</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&quot;.father&quot;).click(function()&#123;</span><br><span class="line">    alert(&quot;father&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>阻止默认行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;a标签跳转、submit提交按钮等</span><br><span class="line">$(&quot;a&quot;).click(function(event)&#123;</span><br><span class="line">    alert(&quot;弹出注册框！&quot;);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>trigger()、triggerHandler() 自动触发事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;触发绑定到被选元素的所有事件</span><br><span class="line">$(&quot;.father&quot;).click(function()&#123;</span><br><span class="line">    alert(&quot;father&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;.father&quot;).trigger(&quot;click&quot;);   &#x2F;&#x2F;方法一:会触发事件冒泡</span><br><span class="line">$(&quot;.father&quot;).triggerHandler(&quot;click&quot;); &#x2F;&#x2F;方法二:只触发事件，不会触发事件冒泡</span><br><span class="line">-------------------------------</span><br><span class="line">$(&quot;input[type&#x3D;&#39;submit&#39;]&quot;).click(function()&#123;</span><br><span class="line">    alert(&quot;submit&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;input[type&#x3D;&#39;submit&#39;]&quot;).trigger(&quot;click&quot;); &#x2F;&#x2F;方法一：触发事件的同时，还会触发默认行为。</span><br><span class="line">$(&quot;input[type&#x3D;&#39;submit&#39;]&quot;).triggerHandler(&quot;click&quot;) &#x2F;&#x2F;方法二：只触发事件，不触发默认行为。</span><br><span class="line">&#x2F;&#x2F;注意：这里&lt;a&gt;标签有点特殊，这两个方法都不会触发默认行为，如果想使用trigger()触发&lt;a&gt;标签的事件和默认行为的话，可以在&lt;a&gt;标签中添加一个&lt;span&gt;,例如&lt;a href &#x3D;&quot;#&quot;&gt;&lt;span&gt;百度&lt;&#x2F;span&gt;&lt;&#x2F;a&gt; 这种写法。</span><br></pre></td></tr></table></figure></li><li><p>自定义事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">* 想要自定义事件，必须满足两个条件</span><br><span class="line">* 1.事件必须是通过on绑定的</span><br><span class="line">* 2.事件必须通过trigger来触发</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).on(&quot;myClick&quot;,function()&#123;</span><br><span class="line">    alert(&quot;son&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).trigger(&quot;myClick&quot;);</span><br><span class="line">or</span><br><span class="line">$(&quot;.son&quot;).triggerHandler(&quot;myClick&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>事件命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">* 想要事件的命名空间有效，必须满足两个条件</span><br><span class="line">* 1.事件通过on来绑定(自定义事件)</span><br><span class="line">* 2.通过trigger()或者triggerHandler()来触发</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).on(&quot;eventName.zs&quot;,function()&#123;</span><br><span class="line">    alert(&quot;click zhangsan&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;.son&quot;).on(&quot;eventName.ls&quot;,function()&#123;</span><br><span class="line">    alert(&quot;click lisi&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;.son&quot;).trigger(&quot;click.zs&quot;);</span><br><span class="line">or</span><br><span class="line">$(&quot;.son&quot;).triggerHandler(&quot;click.zs&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h3><ul><li><p>hide() 隐藏html元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#hide&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>show() 显示html元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#show&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).show();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>语法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(selector).hide(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).show(speed,callback);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可选的speed参数表示规定显示&#x2F;隐藏的速度(slow、fast、毫秒)</span><br><span class="line">&#x2F;&#x2F;可选的callback参数是隐藏或显示完成后所执行的函数名称</span><br><span class="line"></span><br><span class="line">$(&quot;.hidebtn&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).hide(1000,&quot;linear&quot;,function()&#123;</span><br><span class="line">        alert(&quot;Hide() 方法已完成!&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二个参数是一个字符串，表示过渡使用哪种缓动函数，jQuery自身提供(linear、swing)</span><br><span class="line">&#x2F;&#x2F;补充：callback函数名后面加上括号，会立刻执行函数体，而不是等到显示&#x2F;隐藏之后才执行,如add()作为callback参数会立即执行，而add作为参数则不会，callback函数可以是匿名函数，$(selector)选中的元素个数为n个，则callback函数会执行n次。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>toggle() 切换hide()和show()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).toggle();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><ul><li><p>fadeIn() 用于淡入以隐藏的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeIn(3000);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法： $(selector).fadeIn(speed, callback)</span><br><span class="line">&#x2F;&#x2F; 可选的speed参数规定效果的时长(slow、fast、毫秒)</span><br><span class="line">&#x2F;&#x2F; 可选的callback参数是fading完成后所执行的函数名称</span><br></pre></td></tr></table></figure></li><li><p>fadeOut() 用于淡出可见元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeOut(&quot;slow&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法： $(selector).fadeOut(speed, callback)</span><br><span class="line">&#x2F;&#x2F; 可选的speed参数规定效果的时长(slow、fast、毫秒)</span><br><span class="line">&#x2F;&#x2F; 可选的callback参数是fading完成后所执行的函数名称</span><br></pre></td></tr></table></figure></li><li><p>fadeToggle() 用于在fadeIn()与fadeOut()方法之间进行切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeToggle();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法： $(selector).fadeToggle(speed, callback)</span><br><span class="line">&#x2F;&#x2F; 可选的speed参数规定效果的时长(slow、fast、毫秒)</span><br><span class="line">&#x2F;&#x2F; 可选的callback参数是fading完成后所执行的函数名称</span><br></pre></td></tr></table></figure></li><li><p>fadeTo() 允许渐变为给定的不透明度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeTo(&quot;slow&quot;, 0.3);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法：$(selector).fadeTo(speed, opacity, callback)</span><br><span class="line">&#x2F;&#x2F;必须的speed参数规定效果时长(slow、fast、毫秒)</span><br><span class="line">&#x2F;&#x2F;必须的opacity规定不透明度(介于0-1之间)</span><br></pre></td></tr></table></figure></li></ul><h3 id="滑动方法"><a href="#滑动方法" class="headerlink" title="滑动方法"></a>滑动方法</h3><ul><li><p>slideDown() 用于元素向下滑动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).slideDown();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法：$(selector).slideDown(speed,callback)</span><br><span class="line">&#x2F;&#x2F;可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span><br><span class="line">&#x2F;&#x2F;可选的 callback 参数是滑动完成后所执行的函数名称。</span><br></pre></td></tr></table></figure></li><li><p>slideUp() 用于元素向上滑动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).slideUp();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法：$(selector).slideUp(speed,callback)</span><br><span class="line">&#x2F;&#x2F;可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span><br><span class="line">&#x2F;&#x2F;可选的 callback 参数是滑动完成后所执行的函数名称。</span><br></pre></td></tr></table></figure></li><li><p>slideToggle() 在slideDown()与slideUp()方法之间进行切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).slideToggle();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法：$(selector).slideToggle(speed,callback)</span><br><span class="line">&#x2F;&#x2F;可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span><br><span class="line">&#x2F;&#x2F;可选的 callback 参数是滑动完成后所执行的函数名称。</span><br></pre></td></tr></table></figure></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li><p>animate()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;默认情况下，所有html元素都有一个静态位置，且无法移动。</span><br><span class="line">&#x2F;&#x2F;先将p标签元素设置为position:relative&#x2F;absolute&#x2F;fixed</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;p&quot;).animate(&#123;</span><br><span class="line">      left:&#39;250px&#39;,</span><br><span class="line">      opacity:&#39;0.5&#39;,</span><br><span class="line">      height:&#39;400px&#39;,</span><br><span class="line">      width: &#39;400px&#39;,</span><br><span class="line">      paddingLeft:&#39;10px&#39;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;语法： $(selector).animate(&#123;params&#125;,speed,callback)</span><br><span class="line">&#x2F;&#x2F; params参数可以操作几乎所有的css属性，但名字要采用camel标记法</span><br></pre></td></tr></table></figure></li><li><p>stop() 停止动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> $(&quot;#flip&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#panel&quot;).slideDown(5000);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;#stop&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#panel&quot;).stop();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">语法: $(selector).stop(stopAll,goToEnd)</span><br><span class="line">&#x2F;&#x2F;可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停&#x2F;止活动的动画，允许任何排入队列的动画向后执行。</span><br><span class="line">&#x2F;&#x2F;可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</span><br></pre></td></tr></table></figure></li><li><p>jQuery方法链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;)</span><br><span class="line">  .slideUp(2000)</span><br><span class="line">  .slideDown(2000);</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery获取内容和属性"><a href="#jQuery获取内容和属性" class="headerlink" title="jQuery获取内容和属性"></a>jQuery获取内容和属性</h3><ul><li><p>获取内容 text()、html()、val()</p><ul><li>text() 设置或返回所选元素的文本内容</li><li>html() 设置或返回所选元素的内容(包括html标记)</li><li>val() 设置或返回表单字段的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).text());</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;-----------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).html())</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;------------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  alert($(&quot;input&quot;).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取属性 attr()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;项目QC刚用过</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    console.log($(&quot;p&quot;).attr(&quot;data-text&quot;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>补充：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prop()函数返回相应属性或空字符串。</span><br><span class="line">attr()函数返回相应属性或undefined</span><br><span class="line">1.对于HTML元素本身就带有的固有属性，在处理时使用prop方法</span><br><span class="line">2.对HTML元素我们自己定义的DOM属性，在处理时使用attr方法</span><br><span class="line">3.具有true和false两个属性的属性，如checked、selected或者disabled使用prop()</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置内容和属性"><a href="#设置内容和属性" class="headerlink" title="设置内容和属性"></a>设置内容和属性</h3><ul><li><p>设置内容 text()、html()、val()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).text(&quot;hello&quot;));</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;-----------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).html(&quot;hello&quot;))</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;------------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  alert($(&quot;input&quot;).val(&quot;hello&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>text()、html() 以及 val() 的回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).text(function(i,orignText)&#123;</span><br><span class="line">        &#x2F;&#x2F;i 为被选元素列表中当前元素的下标</span><br><span class="line">        &#x2F;&#x2F;orignText 为原来的值</span><br><span class="line">        &#x2F;&#x2F;return 为返回的新值</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>设置属性 attr()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).attr(&quot;data-text&quot;,&quot;hello world&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 允许同时设置多个属性</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).attr(&#123;</span><br><span class="line">        &quot;data-text&quot;,&quot;hello world&quot;,</span><br><span class="line">        &quot;title&quot;,&quot;jQuery学习！&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>attr() 也存在回调函数(同上)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;#runoob&quot;).attr(&quot;href&quot;, function(i,origValue)&#123;</span><br><span class="line">    return origValue + &quot;&#x2F;jquery&quot;; </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><ul><li><p>removeAttr()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;span&quot;).removeAttr(&quot;class name&quot;);</span><br><span class="line">&#x2F;&#x2F;表示同时删除span标签的class和name属性</span><br></pre></td></tr></table></figure></li><li><p>removeProp()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;span&quot;).removeProp(&quot;class&quot;);</span><br><span class="line">&#x2F;&#x2F;表示删除所有span标签的class属性</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery-添加元素"><a href="#jQuery-添加元素" class="headerlink" title="jQuery 添加元素"></a>jQuery 添加元素</h3><ul><li><p>append/prepend 是在选择元素内容嵌入(文本或标签)</p></li><li><p>after/before 实在元素外部追加(文本或标签)</p></li><li><p>参数可以是多个，可以是一个list</p></li></ul><h3 id="jQuery-删除元素"><a href="#jQuery-删除元素" class="headerlink" title="jQuery 删除元素"></a>jQuery 删除元素</h3><ul><li><p>remove() 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).remove()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;remove() 方法删除被选元素及其子元素</span><br></pre></td></tr></table></figure></li><li><p>empty() 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).empty()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;empty() 方法删除被选元素的子元素而不删除自身</span><br></pre></td></tr></table></figure></li><li><p>过滤被删除的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).remove(&quot;.italic&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;表示删除所有&lt;p&gt;标签元素中class &#x3D; &quot;italic&quot;的元素</span><br><span class="line">&#x2F;&#x2F;过滤时，只能作用于同级元素之间</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery-获取并设置CSS类"><a href="#jQuery-获取并设置CSS类" class="headerlink" title="jQuery 获取并设置CSS类"></a>jQuery 获取并设置CSS类</h3><ul><li><p>addClass() 向不用的元素添加class属性，在添加类时可以选取多个元素,也可以设置多个类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">$(&quot;h1, h3, p&quot;).addClass(&quot;fontColor fontSize&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>removeClass() 在不同元素中删除指定的class属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">$(&quot;h1, h3, p&quot;).removeClass(&quot;fontSize&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>toggleClass() 对被选元素进行添加/删除类的切换操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;h1, h3, p&quot;).toggleClass(&quot;fontColor2&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="css-方法"><a href="#css-方法" class="headerlink" title="css() 方法"></a>css() 方法</h3><ul><li>返回css属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;background-color&quot;);</span><br></pre></td></tr></table></figure></li><li>设置css属性,可以同时设置多个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&#123;&quot;background-color&quot;:&quot;yellow&quot;,&quot;font-size&quot;:&quot;200%&quot;&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><ul><li><p>width()、height()</p><ul><li>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）</li><li>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).width() &#x2F;&#x2F;获取</span><br><span class="line">$(&quot;p&quot;).width(20) &#x2F;&#x2F;设置</span><br></pre></td></tr></table></figure></li></ul></li><li><p>innerWidth()、innerHeight()</p><ul><li>innerWidth() 方法返回元素的宽度（包括内边距）。</li><li>innerHeight() 方法返回元素的高度（包括内边距）。</li></ul></li><li><p>outerWidth()、outerHeight()</p><ul><li>outerWidth() 方法返回元素的宽度（包括内边距和边框）。</li><li>outerHeight() 方法返回元素的高度（包括内边距和边框）。</li></ul></li><li><p>offset()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.son&quot;).offset().left &#x2F;&#x2F;元素距离窗口的偏移距离</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).offset(&#123;</span><br><span class="line">    left: 20,</span><br><span class="line">&#125;) &#x2F;&#x2F;设置元素距离窗口的偏移距离</span><br></pre></td></tr></table></figure></li><li><p>position()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.son&quot;).position().left &#x2F;&#x2F;获取元素距离定位元素的偏移距离</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意点：position() 方法只能获取不能设置</span><br></pre></td></tr></table></figure></li><li><p>scrollTop() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;scroller&quot;).scrollTop() &#x2F;&#x2F;获取元素相对滚动条顶部的偏移</span><br><span class="line"></span><br><span class="line">$(&quot;scroller&quot;).scrollTop(300) &#x2F;&#x2F;设置元素相对滚动条顶部的偏移</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取网页滚动的偏移(考虑兼容)</span><br><span class="line">$(&quot;body&quot;).scrollTop() + $(&quot;html&quot;).scrollTop() &#x2F;&#x2F;ie-&gt;body,chrome...-&gt;html</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置网页滚动的偏移(考虑兼容)</span><br><span class="line">$(&quot;html,body&quot;).scrollTop(300) </span><br></pre></td></tr></table></figure></li><li><p>补充：设置了box-sizing后，width()=width - padding - border</p></li></ul><h3 id="jQuery遍历"><a href="#jQuery遍历" class="headerlink" title="jQuery遍历"></a>jQuery遍历</h3><h4 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h4><ul><li><p>parent() 返回元素的直接父元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parents();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>parents() 返回被选元素的所有祖先元素，直到文档根元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parents();</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;过滤所有祖先，并且是&lt;ul&gt;元素</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parents(&quot;ul&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>parentsUntil() 返回给定的两个元素之间的所有祖先元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;返回&lt;span&gt;与&lt;div&gt;元素之间的所有祖先元素</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parentsUntil(&quot;div&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="后代"><a href="#后代" class="headerlink" title="后代"></a>后代</h4><ul><li><p>children() 返回被选元素的所有直接子元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).children();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可以使用可选参数来过滤子元素的搜索</span><br><span class="line">$(&quot;div&quot;).children(&quot;p.aaa&quot;); &#x2F;&#x2F;返回类名为aaa的&lt;p&gt;元素，且是div的直接子元素。</span><br></pre></td></tr></table></figure></li><li><p>find() 返回被选元素的后代元素，一路向下直到最后一个后代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).find(&quot;span&quot;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="同胞"><a href="#同胞" class="headerlink" title="同胞"></a>同胞</h4><ul><li><p>siblings() 返回被选元素的所有同胞元素，可以使用可选参数过滤搜索。</p></li><li><p>next() 返回被选元素的下一个同胞元素，只返回一个元素</p></li><li><p>nextAll() 返回被选元素的所有跟随的同胞元素</p></li><li><p>nextUntil() 返回介于两个给定参数之间的所有跟随的同胞元素</p></li><li><p>pre()、prevAll()、prevUntil() 同上，方向相反</p></li></ul><h4 id="过滤：缩小搜索元素的范围"><a href="#过滤：缩小搜索元素的范围" class="headerlink" title="过滤：缩小搜索元素的范围"></a>过滤：缩小搜索元素的范围</h4><ul><li><p>first() 返回被选元素的首个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).first();</span><br></pre></td></tr></table></figure></li><li><p>last() 返回被选元素的最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).last();</span><br></pre></td></tr></table></figure></li><li><p>eq() 返回被选元素中带有指定索引号的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).eq(1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;索引号从0开始，eq(1)选择的是第二个&lt;p&gt;元素</span><br></pre></td></tr></table></figure></li><li><p>filter() 允许规定一个标准，返回匹配的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).filter(&quot;.className&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;返回带有类名className的所有&lt;p&gt;元素</span><br></pre></td></tr></table></figure></li><li><p>not() 返回所有不匹配的元素，与filter()相反</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).not(&quot;.className&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;返回所有不带有类名className的&lt;p&gt;元素</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;jQuery学习&quot;&gt;&lt;a href=&quot;#jQuery学习&quot; class=&quot;headerlink&quot; title=&quot;jQuery学习&quot;&gt;&lt;/a&gt;jQuery学习&lt;/h2&gt;&lt;h3 id=&quot;入口函数&quot;&gt;&lt;a href=&quot;#入口函数&quot; class=&quot;headerlink&quot; title=&quot;入口函数&quot;&gt;&lt;/a&gt;入口函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jQuery入口函数&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(document).ready(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F;执行代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者（简写）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F;执行代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>13个超实用的JavaScript数组操作技巧</title>
    <link href="http://yoursite.com/2020/07/18/13%E4%B8%AA%E8%B6%85%E5%AE%9E%E7%94%A8%E7%9A%84JavaScript%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2020/07/18/13%E4%B8%AA%E8%B6%85%E5%AE%9E%E7%94%A8%E7%9A%84JavaScript%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</id>
    <published>2020-07-18T15:26:33.000Z</published>
    <updated>2020-07-19T01:30:36.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="13个超实用的JavaScript数组操作技巧"><a href="#13个超实用的JavaScript数组操作技巧" class="headerlink" title="13个超实用的JavaScript数组操作技巧"></a>13个超实用的JavaScript数组操作技巧</h2><h3 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let fruits &#x3D; [&quot;banana&quot;,&quot;apple&quot;,&quot;orange&quot;&quot;watermelon&quot;,&quot;apple&quot;,&quot;orrage&quot;]</span><br><span class="line">&#x2F;&#x2F;第一种方法</span><br><span class="line">let uniqueFruits &#x3D; Array.from(new Set(fruits))</span><br><span class="line">&#x2F;&#x2F;第二种方法</span><br><span class="line">let uniqueFruits2 &#x3D; [...new Set(fruits)]</span><br></pre></td></tr></table></figure><h3 id="2-替换数组中的特定值"><a href="#2-替换数组中的特定值" class="headerlink" title="2.替换数组中的特定值"></a>2.替换数组中的特定值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用.splice(start,value to remove,valueToAdd),返回删除对象，并修改原数组</span><br><span class="line">let fruits &#x3D; [&quot;banana&quot;,&quot;apple&quot;,&quot;orange&quot;,&quot;watermelon&quot;,&quot;apple&quot;,&quot;orrage&quot;]</span><br><span class="line">fruits.splice(0,2,&quot;potato&quot;,&quot;tomato&quot;)</span><br><span class="line">console.log(fruits)</span><br></pre></td></tr></table></figure><h3 id="3-不使用-map-映射数组"><a href="#3-不使用-map-映射数组" class="headerlink" title="3.不使用.map()映射数组"></a>3.不使用.map()映射数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let friends &#x3D; [</span><br><span class="line">    &#123; name: &#39;John&#39;, age: 22 &#125;,</span><br><span class="line">    &#123; name: &#39;Peter&#39;, age: 23 &#125;,</span><br><span class="line">    &#123; name: &#39;Mark&#39;, age: 24 &#125;,</span><br><span class="line">    &#123; name: &#39;Maria&#39;, age: 22 &#125;,</span><br><span class="line">    &#123; name: &#39;Monica&#39;, age: 21 &#125;,</span><br><span class="line">    &#123; name: &#39;Martha&#39;, age: 19 &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">let friendsNames &#x3D; Array.from(friends, (&#123;name&#125;) &#x3D;&gt; name)</span><br><span class="line"></span><br><span class="line">console.log(friendsNames)&#x2F;&#x2F;returns [&quot;John&quot;, &quot;Peter&quot;, &quot;Mark&quot;, &quot;Maria&quot;, &quot;Monica&quot;, &quot;Martha&quot;]</span><br></pre></td></tr></table></figure><h3 id="4-清空数组"><a href="#4-清空数组" class="headerlink" title="4.清空数组"></a>4.清空数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let fruits &#x3D; [&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;watermelon&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, &quot;apple&quot;];</span><br><span class="line">&#x2F;&#x2F;要清空数组，仅需要将数组的长度设置为0</span><br><span class="line">fruits.length &#x3D; 0;</span><br><span class="line">console.log(fruits); &#x2F;&#x2F; returns []</span><br></pre></td></tr></table></figure><h3 id="5-数组转对象"><a href="#5-数组转对象" class="headerlink" title="5.数组转对象"></a>5.数组转对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let fruits &#x3D; [&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;watermelon&quot;];</span><br><span class="line"></span><br><span class="line">let fruitsObj &#x3D; &#123;...fruits&#125;;</span><br><span class="line"></span><br><span class="line">console.log(fruitsObj) &#x2F;&#x2F; returns &#123;0: &quot;banana&quot;, 1: &quot;apple&quot;, 2: &quot;orange&quot;, 3: &quot;watermelon&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="6-用数据填充数组"><a href="#6-用数据填充数组" class="headerlink" title="6.用数据填充数组"></a>6.用数据填充数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let newArray &#x3D; new Array(10).fill(&quot;1&quot;)</span><br><span class="line"></span><br><span class="line">console.log(newArray)</span><br></pre></td></tr></table></figure><h3 id="7-合并数组"><a href="#7-合并数组" class="headerlink" title="7.合并数组"></a>7.合并数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var fruits &#x3D; [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;];</span><br><span class="line">var meat &#x3D; [&quot;poultry&quot;, &quot;beef&quot;, &quot;fish&quot;];</span><br><span class="line">var vegetables &#x3D; [&quot;potato&quot;, &quot;tomato&quot;, &quot;cucumber&quot;];</span><br><span class="line">&#x2F;&#x2F;使用扩展运算符...</span><br><span class="line">var food &#x3D; […fruits, …meat, …vegetables];</span><br><span class="line">console.log(food); </span><br></pre></td></tr></table></figure><h3 id="8-求数组的交集"><a href="#8-求数组的交集" class="headerlink" title="8.求数组的交集"></a>8.求数组的交集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr1 &#x3D; [0,2,3,5,6,8,6]</span><br><span class="line">var arr2 &#x3D; [1,2,3,4,5,6,4]</span><br><span class="line">var duplicatedValues &#x3D; [...new Set(arr1)].filter(item&#x3D;&gt;arr2.includes(item))</span><br><span class="line">console.log(duplicatedValues)</span><br></pre></td></tr></table></figure><h3 id="9-从数组中删除虚值"><a href="#9-从数组中删除虚值" class="headerlink" title="9.从数组中删除虚值"></a>9.从数组中删除虚值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;虚值有：false、0、null、NaN、undefined、&quot;&quot;.</span><br><span class="line">var mixedArr &#x3D; [0,&quot;blue&quot;,&quot;&quot;,NaN,9,true,undefined,&quot;white&quot;,false]</span><br><span class="line">var trueArr &#x3D; mixedArr.filter(Boolean)</span><br><span class="line">console.log(trueArr)</span><br></pre></td></tr></table></figure><h3 id="10-从数组中获取随机值"><a href="#10-从数组中获取随机值" class="headerlink" title="10.从数组中获取随机值"></a>10.从数组中获取随机值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var colors &#x3D; [&quot;blue&quot;, &quot;white&quot;, &quot;green&quot;, &quot;navy&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;];</span><br><span class="line"></span><br><span class="line">var randomColor &#x3D; colors[(Math.floor(Math.random() * (color.length)))]</span><br></pre></td></tr></table></figure><h3 id="11-反转数组"><a href="#11-反转数组" class="headerlink" title="11.反转数组"></a>11.反转数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var colors &#x3D; [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];</span><br><span class="line">var reversedColors &#x3D; colors.reverse();</span><br><span class="line">console.log(reversedColors); </span><br></pre></td></tr></table></figure><h3 id="12-lastIndexOf-方法"><a href="#12-lastIndexOf-方法" class="headerlink" title="12.lastIndexOf()方法"></a>12.lastIndexOf()方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查找给定元素的最后依次出现的索引</span><br><span class="line">var nums &#x3D; [1, 5, 2, 6, 3, 5, 2, 3, 6, 5, 2, 7];</span><br><span class="line">var lastIndex &#x3D; nums.lastIndexOf(5);</span><br><span class="line">console.log(lastIndex); &#x2F;&#x2F; returns 9</span><br></pre></td></tr></table></figure><h3 id="13-对数组中所有值求和"><a href="#13-对数组中所有值求和" class="headerlink" title="13.对数组中所有值求和"></a>13.对数组中所有值求和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var nums &#x3D; [1,5,4,3]</span><br><span class="line">var sum &#x3D; nums.reduce((x,y)&#x3D;&gt;x+y)</span><br><span class="line">console.log(sum)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;13个超实用的JavaScript数组操作技巧&quot;&gt;&lt;a href=&quot;#13个超实用的JavaScript数组操作技巧&quot; class=&quot;headerlink&quot; title=&quot;13个超实用的JavaScript数组操作技巧&quot;&gt;&lt;/a&gt;13个超实用的JavaScript</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript常用api合集</title>
    <link href="http://yoursite.com/2020/07/17/javascript%E5%B8%B8%E7%94%A8api%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2020/07/17/javascript%E5%B8%B8%E7%94%A8api%E5%90%88%E9%9B%86/</id>
    <published>2020-07-17T02:04:52.000Z</published>
    <updated>2020-07-17T09:13:49.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、节点"><a href="#一、节点" class="headerlink" title="一、节点"></a>一、节点</h2><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Node.nodeName &#x2F;&#x2F;返回节点名称，只读</span><br><span class="line">Node.nodeType &#x2F;&#x2F;返回节点类型的常数值，只读</span><br><span class="line">Node.nodeValue &#x2F;&#x2F;返回Text或Comment节点的文本值，只读</span><br><span class="line">Node.textContent &#x2F;&#x2F;返回当前节点和它的所有后代节点的文本内容，可读写</span><br><span class="line">Node.baseURI &#x2F;&#x2F;返回当前网页的绝对路径</span><br><span class="line"></span><br><span class="line">Node.ownerDocument &#x2F;&#x2F;返回当前节点所在的顶层文档对象，即document</span><br><span class="line">Node.nextSibling &#x2F;&#x2F;返回紧跟在当前节点后面的第一个兄弟节点</span><br><span class="line">Node.previousSibling &#x2F;&#x2F;返回当前节点前面的、距离最近的一个兄弟节点</span><br><span class="line">Node.parentNode &#x2F;&#x2F;返回当前节点的父节点</span><br><span class="line">Node.parentElement &#x2F;&#x2F;返回当前节点的父Element节点</span><br><span class="line">Node.childNodes &#x2F;&#x2F;返回当前节点的所有子节点</span><br><span class="line">Node.firstChild &#x2F;&#x2F;返回当前节点的第一个子节点</span><br><span class="line">Node.lastChild &#x2F;&#x2F;返回当前节点的最后一个子节点</span><br><span class="line"></span><br><span class="line">Node.children &#x2F;&#x2F;返回当前节点的所有Element子节点</span><br><span class="line">Node.firstElementChild &#x2F;&#x2F;返回当前节点的第一个Element子节点</span><br><span class="line">Node.lastElementChild &#x2F;&#x2F;返回当前节点的最后一个Element子节点</span><br><span class="line">Node.childElementCount &#x2F;&#x2F;返回当前节点所有Element子节点的数目</span><br></pre></td></tr></table></figure><!--more--><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Node.appendChild(node) &#x2F;&#x2F;向节点添加最后的子节点</span><br><span class="line">Node.hasChildNodes() &#x2F;&#x2F;返回布尔值，表示当前节点是否有子节点</span><br><span class="line">Node.cloneNode(true) &#x2F;&#x2F;默认为false(克隆节点),true(克隆节点及其属性，以及后代)</span><br><span class="line">Node.insertBefore(newNode,oldNode) &#x2F;&#x2F;在指定子节点前插入新的子节点</span><br><span class="line">Node.removeChild(node) &#x2F;&#x2F;删除节点，在要删除节点的父节点上操作</span><br><span class="line">Node.replaceChild(newChild,oldChild) &#x2F;&#x2F;替换节点</span><br><span class="line">Node.contains(node) &#x2F;&#x2F;返回一个布尔值，表示参数节点是否为当前节点的后代节点</span><br><span class="line">Node.compareDocumentPosition(node) &#x2F;&#x2F;返回一个7个比特位的二进制值，表示参数节点和当前节点的关系</span><br><span class="line">Node.isEqualNode(node) &#x2F;&#x2F;返回布尔值，用于检查两个节点是否想等，所谓的相等节点，指的的两个节点的类型、属性、子节点都相同</span><br><span class="line">Node.normalize() &#x2F;&#x2F;用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个</span><br><span class="line"></span><br><span class="line">ChildNode.remove()  &#x2F;&#x2F;用于删除当前节点</span><br><span class="line">ChildNode.before()  &#x2F;&#x2F;在ChildNode前插入元素节点或者文本节点</span><br><span class="line">ChildNode.after()  &#x2F;&#x2F;在ChildNode后插入元素或文本节点</span><br><span class="line">ChildNode.replaceWith()  &#x2F;&#x2F;替换该节点的父节点下的子节点，可以为文本或元素对象</span><br></pre></td></tr></table></figure><h3 id="Document节点"><a href="#Document节点" class="headerlink" title="Document节点"></a>Document节点</h3><h4 id="Document节点的属性"><a href="#Document节点的属性" class="headerlink" title="Document节点的属性"></a>Document节点的属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">document.doctype &#x2F;&#x2F;返回当前文档关联的文档类型定义(DTD)</span><br><span class="line">document.documentElement &#x2F;&#x2F;返回当前文档的根节点(html)</span><br><span class="line">document.defaultView &#x2F;&#x2F;返回document对象所在的window对象</span><br><span class="line">document.body &#x2F;&#x2F;返回当前文档的&lt;body&gt;节点</span><br><span class="line">document.head &#x2F;&#x2F;返回当前文档的&lt;head&gt;节点</span><br><span class="line">document.activeElement &#x2F;&#x2F;返回当前文档中获得焦点的那个元素</span><br><span class="line"></span><br><span class="line">document.links &#x2F;&#x2F;返回当前文档的所有a元素</span><br><span class="line">document.forms &#x2F;&#x2F;返回页面中所有表单元素</span><br><span class="line">document.images &#x2F;&#x2F;返回页面中所有图片元素</span><br><span class="line">document.embeds &#x2F;&#x2F;返回网页中所有嵌入对象</span><br><span class="line">document.scripts &#x2F;&#x2F;返回当前文档的所有脚本</span><br><span class="line">document.styleSheets &#x2F;&#x2F;返回当前网页的所有样式表</span><br><span class="line"></span><br><span class="line">document.documentURI &#x2F;&#x2F;表示当前文档的网址</span><br><span class="line">document.URI &#x2F;&#x2F;返回当前文档的网址</span><br><span class="line">document.domain &#x2F;&#x2F;返回当前文档的域名</span><br><span class="line">document.lastModified &#x2F;&#x2F;返回当前文档最后修改的时间戳</span><br><span class="line">document.location &#x2F;&#x2F;返回location对象，提供当前文档的URL信息</span><br><span class="line">document.referrer &#x2F;&#x2F;返回当前文档的访问来源</span><br><span class="line">document.title &#x2F;&#x2F;返回当前文档的标题</span><br><span class="line">document.characterSet &#x2F;&#x2F;属性返回渲染当前文档的字符集，比如UTF-8</span><br><span class="line">document.readyState &#x2F;&#x2F;返回当前文档的状态</span><br><span class="line">document.designMode &#x2F;&#x2F;控制当前文档是否可编辑，可读写</span><br><span class="line">document.compatMode &#x2F;&#x2F;返回浏览器处理文档的模式</span><br><span class="line">document.cookie &#x2F;&#x2F;用来操作Cookie</span><br></pre></td></tr></table></figure><h3 id="Document节点的方法"><a href="#Document节点的方法" class="headerlink" title="Document节点的方法"></a>Document节点的方法</h3><h4 id="读写方法"><a href="#读写方法" class="headerlink" title="读写方法"></a>读写方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.open() &#x2F;&#x2F;用于新建并打开一个文档</span><br><span class="line">document.close() &#x2F;&#x2F;关闭open方法所新建的文档</span><br><span class="line">document.write() &#x2F;&#x2F;用于向当前文档写入内容</span><br><span class="line">document.writeIn() &#x2F;&#x2F;用于向当前文档写入内容，尾部添加换行符</span><br></pre></td></tr></table></figure><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(selectors) &#x2F;&#x2F;接收一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点</span><br><span class="line">document.querySelectorAll(selectors) &#x2F;&#x2F;接收一个CSS选择器作为参数，返回所有匹配该选择器的元素节点</span><br><span class="line">document.getElementsByTagName(tagName) &#x2F;&#x2F;返回所有指定HTML标签的元素</span><br><span class="line">document.getElementsByClassName(className) &#x2F;&#x2F;返回包括了所有class名字符合指定条件的元素</span><br><span class="line">document.getElementsByName(name) &#x2F;&#x2F;用于选择拥有name属性的HTML元素(比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;object&gt;等)</span><br><span class="line">document.getElementById(id) &#x2F;&#x2F;返回匹配指定id属性的元素节点</span><br><span class="line">document.elementFromPoint(x,y) &#x2F;&#x2F;返回位于页面指定位置最上层的Element子节点</span><br></pre></td></tr></table></figure><h4 id="生成节点"><a href="#生成节点" class="headerlink" title="生成节点"></a>生成节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(tagName) &#x2F;&#x2F;用来生成HTML元素节点</span><br><span class="line">document.createTextNode(text) &#x2F;&#x2F;用来生成文本节点</span><br><span class="line">document.createAttribute(name) &#x2F;&#x2F;生成一个新的属性对象节点，并返回</span><br><span class="line">document.createDocumentFragment() &#x2F;&#x2F;生成一个DocumentFragment对象</span><br></pre></td></tr></table></figure><h4 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.createEvent(type) &#x2F;&#x2F;生成一个事件对象，该对象能被element.dispatchEvent()方法使用</span><br><span class="line">document.addEventListener(type,listener,capture) &#x2F;&#x2F;注册事件</span><br><span class="line">document.removeEventListener(type,listener,capture) &#x2F;&#x2F;注销事件</span><br><span class="line">document.dispatchEvent(event) &#x2F;&#x2F;触发事件</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.hasFocus() &#x2F;&#x2F;返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点</span><br><span class="line">document.adoptNode(externalNode) &#x2F;&#x2F;将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点</span><br><span class="line">document.importNode(externalNode,deep) &#x2F;&#x2F;从外部文档拷贝指定节点，插入当前文档</span><br></pre></td></tr></table></figure><h3 id="Element节点"><a href="#Element节点" class="headerlink" title="Element节点"></a>Element节点</h3><h4 id="Element节点的属性"><a href="#Element节点的属性" class="headerlink" title="Element节点的属性"></a>Element节点的属性</h4><h5 id="特性属性"><a href="#特性属性" class="headerlink" title="特性属性"></a>特性属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Element.attributes &#x2F;&#x2F;返回当前元素节点的所有属性节点</span><br><span class="line">Element.id &#x2F;&#x2F;返回指定元素的id属性，可读写</span><br><span class="line">Element.tagName &#x2F;&#x2F;返回指定元素的大写标签名</span><br><span class="line">Element.innerHTML &#x2F;&#x2F;返回该元素包含的HTML代码，可读写</span><br><span class="line">Element.outerHTML &#x2F;&#x2F;返回该元素节点的所有HTML代码，包括自身和所有子元素，可读写</span><br><span class="line">Element.className &#x2F;&#x2F;返回当前元素的class属性，可读写</span><br><span class="line">Element.classList &#x2F;&#x2F;返回当前元素节点的所有class集合</span><br><span class="line">Element.dataset &#x2F;&#x2F;返回元素节点中所有data-*属性</span><br></pre></td></tr></table></figure><h5 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Element.clientHeight &#x2F;&#x2F;返回元素节点可见部分的高度</span><br><span class="line">Element.clientWidth &#x2F;&#x2F;返回元素节点可见部分的宽度</span><br><span class="line">Element.clientLeft &#x2F;&#x2F;返回元素节点左边框的宽度</span><br><span class="line">Element.clientTop &#x2F;&#x2F;返回元素节点顶部边框的宽度</span><br><span class="line"></span><br><span class="line">Element.scrollHeight &#x2F;&#x2F;返回元素节点的总高度</span><br><span class="line">Element.scrollWidth &#x2F;&#x2F;返回元素节点的总宽度</span><br><span class="line">Element.scrollLeft &#x2F;&#x2F;返回元素节点的水平滚动条向右滚动的像素数值，通过设置这个属性可以改变元素滚动的位置</span><br><span class="line">Element.scrollTop &#x2F;&#x2F;返回元素节点的垂直滚动向下滚动的像素数值</span><br><span class="line"></span><br><span class="line">Element.offsetHeight &#x2F;&#x2F;返回元素的垂直高度(包含border，padding)</span><br><span class="line">Element.offsetWidth &#x2F;&#x2F;返回元素的水平宽度(包含border，padding)</span><br><span class="line">Element.offsetLeft &#x2F;&#x2F;返回当前元素左上角相对于Element.offsetParent节点的垂直偏移</span><br><span class="line">Element.offsetTop &#x2F;&#x2F;返回水平位移</span><br><span class="line"></span><br><span class="line">Element.style &#x2F;&#x2F;返回元素节点的行内样式</span><br></pre></td></tr></table></figure><h5 id="节点相关属性"><a href="#节点相关属性" class="headerlink" title="节点相关属性"></a>节点相关属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Element.children &#x2F;&#x2F;包括当前元素节点的所有子元素</span><br><span class="line">Element.childElementCount &#x2F;&#x2F;返回当前元素节点包含的子HTML元素节点的个数</span><br><span class="line">Element.firstElementChild &#x2F;&#x2F;返回当前节点的第一个Element子节点</span><br><span class="line">Element.lastElementChild &#x2F;&#x2F;返回当前节点的最后一个Element子节点</span><br><span class="line">Element.nextElementSibling &#x2F;&#x2F;返回当前元素节点的下一个兄弟HTML元素节点</span><br><span class="line">Element.previousElementSibling &#x2F;&#x2F;返回当前元素节点的前一个兄弟HTML元素节点</span><br><span class="line">Element.offsetParent &#x2F;&#x2F;返回当前元素节点的最靠近、并且CSS的position属性不等于static的父元素</span><br></pre></td></tr></table></figure><h4 id="Element节点的方法"><a href="#Element节点的方法" class="headerlink" title="Element节点的方法"></a>Element节点的方法</h4><h5 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getBoundingClientRect() &#x2F;&#x2F;获取元素位置</span><br><span class="line">getClientRects() &#x2F;&#x2F;返回当前元素在页面上的矩形区域</span><br></pre></td></tr></table></figure><h5 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element.getAttribute() &#x2F;&#x2F;读取指定属性</span><br><span class="line">Element.setAttribute() &#x2F;&#x2F;设置指定属性</span><br><span class="line">Element.hasAttribute() &#x2F;&#x2F;返回一个布尔值，表示当前元素节点是否有指定属性</span><br><span class="line">Element.removeAttribute() &#x2F;&#x2F;移除指定属性</span><br></pre></td></tr></table></figure><h5 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element.querySelector() </span><br><span class="line">Element.querySelectorAll()</span><br><span class="line">Element.getElementByTagName()</span><br><span class="line">Element.getElementByClassName()</span><br></pre></td></tr></table></figure><h5 id="事件方法-1"><a href="#事件方法-1" class="headerlink" title="事件方法"></a>事件方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Element.addEventListener() &#x2F;&#x2F;添加事件的回调函数</span><br><span class="line">Element.removeEventListener() &#x2F;&#x2F;移除事件监听函数</span><br><span class="line">Element.dispatchEvent() &#x2F;&#x2F;触发事件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ie8</span><br><span class="line">Element.attachEvent(oneventName,listener)</span><br><span class="line">Element.detachEvent(oneventName,listener)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;event对象</span><br><span class="line">var event &#x3D; window.event||event</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;事件的目标节点</span><br><span class="line">var target &#x3D; event.target || event.srcElement</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;事件代理</span><br><span class="line">ul.addEventListener(&#39;click&#39;,function(event)&#123;</span><br><span class="line">    if(event.target.tagName.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">        console.log(event.target.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Element.scrollIntoView()   &#x2F;&#x2F;滚动当前元素，进入浏览器的可见区域</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;解析HTML字符串，然后将生成的节点插入DOM树的指定位置。</span><br><span class="line">Element.insertAdjacentHTML(where, htmlString); </span><br><span class="line">Element.insertAdjacentHTML(&#39;beforeBegin&#39;, htmlString); &#x2F;&#x2F; 在该元素前插入  </span><br><span class="line">Element.insertAdjacentHTML(&#39;afterBegin&#39;, htmlString); &#x2F;&#x2F; 在该元素第一个子元素前插入 </span><br><span class="line">Element.insertAdjacentHTML(&#39;beforeEnd&#39;, htmlString); &#x2F;&#x2F; 在该元素最后一个子元素后面插入 </span><br><span class="line">Element.insertAdjacentHTML(&#39;afterEnd&#39;, htmlString); &#x2F;&#x2F; 在该元素后插入</span><br><span class="line"></span><br><span class="line">Element.remove()  &#x2F;&#x2F;用于将当前元素节点从DOM中移除</span><br><span class="line">Element.focus()   &#x2F;&#x2F;用于将当前页面的焦点，转移到指定元素上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、CSS操作"><a href="#二、CSS操作" class="headerlink" title="二、CSS操作"></a>二、CSS操作</h2><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;ie8以下</span><br><span class="line">Element.className  &#x2F;&#x2F;获取元素节点的类名</span><br><span class="line">Element.className +&#x3D; &#39; &#39; + newClassName  &#x2F;&#x2F;新增一个类名</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断是否有某个类名</span><br><span class="line">function hasClass(element,className)&#123;</span><br><span class="line">  return new RegExp(className,&#39;gi&#39;).test(element.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;移除class</span><br><span class="line">function removeClass(element,className)&#123;</span><br><span class="line">  element.className &#x3D; element.className.replace(new RegExp(&#39;(^|\\b)&#39; + className.split(&#39; &#39;).join(&#39;|&#39;) + &#39;(\\b|$)&#39;, &#39;gi&#39;),&#39;&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ie10 </span><br><span class="line">element.classList.add(className)  &#x2F;&#x2F;新增</span><br><span class="line">element.classList.remove(className)  &#x2F;&#x2F;删除</span><br><span class="line">element.classList.contains(className)  &#x2F;&#x2F;是否包含</span><br><span class="line">element.classList.toggle(className)  &#x2F;&#x2F;toggle class</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="style操作"><a href="#style操作" class="headerlink" title="style操作"></a>style操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(&#39;style&#39;,&#39;&#39;)</span><br><span class="line"></span><br><span class="line">element.style.backgroundColor &#x3D; &#39;red&#39;</span><br><span class="line"></span><br><span class="line">element.style.cssText &#x2F;&#x2F;用来读写或删除整个style属性</span><br><span class="line"></span><br><span class="line">element.style.setProperty(propertyName,value)  &#x2F;&#x2F;设置css属性</span><br><span class="line">element.style.getPropertyValue(property)  &#x2F;&#x2F;获取css属性</span><br><span class="line">element.style.removeProperty(property)  &#x2F;&#x2F;删除css属性</span><br><span class="line">操作非内联样式</span><br><span class="line">&#x2F;&#x2F;ie8</span><br><span class="line">element.currentStyle[attrName]</span><br><span class="line">&#x2F;&#x2F;ie9+</span><br><span class="line">window.getComputedStyle(el,null)[attrName] </span><br><span class="line">window.getComputedStyle(el,null).getPropertyValue(attrName)</span><br><span class="line">&#x2F;&#x2F;伪类</span><br><span class="line">window.getComputedStyle(el,&#39;:after&#39;)[attrName]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h3><h4 id="生成实例对象"><a href="#生成实例对象" class="headerlink" title="生成实例对象"></a>生成实例对象</h4><pre><code>var o = new Object()</code></pre><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><pre><code>Object.prototype //返回原型对象</code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre><code>Object.keys(o) //遍历对象的可枚举属性Object.getOwnPropertyName(o) //遍历对象不可枚举的属性</code></pre><h4 id="对象实例的方法"><a href="#对象实例的方法" class="headerlink" title="对象实例的方法"></a>对象实例的方法</h4><pre><code>valueOf() //返回当前对象对应的值toString() //返回当前对象对应的字符串形式toLocaleString() //返回当前对象对应的本地字符串形式hasOwnProperty() //判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性isPrototypeof() //判断当前对象是否为另一个对象的原型propertyIsEnumerable() //判断某个属性是否可枚举</code></pre><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><h4 id="生成实例对象-1"><a href="#生成实例对象-1" class="headerlink" title="生成实例对象"></a>生成实例对象</h4><pre><code>var a = new Array()</code></pre><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><pre><code>a.length //长度</code></pre><h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h4><pre><code>Array.isArray(a) //用来判断一个值是否为数组</code></pre><h4 id="Array实例的方法"><a href="#Array实例的方法" class="headerlink" title="Array实例的方法"></a>Array实例的方法</h4><pre><code>a.valueof()   //返回数组本身a.toString()  //返回数组的字符串形式a.push(value,vlaue....)   //用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。pop()   //用于删除数组的最后一个元素，并返回该元素join()  //以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。concat()  //用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。shift()  //用于删除数组的第一个元素，并返回该元素。unshift(value)  //用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。reverse()   //用于颠倒数组中元素的顺序，返回改变后的数组slice(start_index, upto_index);   //用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。splice(index, count_to_remove, addElement1, addElement2, ...);   //用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。sort()   //对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。map()   //对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。map(elem,index,arr)   //map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。forEach()   //遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。filter()   //参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。some()    //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。every()   //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。所有数组成员的返回值都是true，才返回true，否则false。reduce()   //依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员到最后一个成员）reduceRight()  //依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）indexOf(s)   //返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置lastIndexOf()  //返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</code></pre><h3 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h3><h4 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h4><pre><code>var n = new Number()</code></pre><h4 id="Number对象的属性"><a href="#Number对象的属性" class="headerlink" title="Number对象的属性"></a>Number对象的属性</h4><pre><code>Number.POSITIVE_INFINITY：正的无限，指向Infinity。Number.NEGATIVE_INFINITY：负的无限，指向-Infinity。Number.NaN：表示非数值，指向NaN。Number.MAX_VALUE：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。Number.MIN_VALUE：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。Number.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即9007199254740991。Number.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即-9007199254740991。</code></pre><h4 id="Number对象实例的方法"><a href="#Number对象实例的方法" class="headerlink" title="Number对象实例的方法"></a>Number对象实例的方法</h4><pre><code>toString()   //用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。toFixed()   //用于将一个数转为指定位数的小数，返回这个小数对应的字符串。toExponential()  //用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。toPrecision()  //用于将一个数转为指定位数的有效数字。</code></pre><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><h4 id="生成实例对象-2"><a href="#生成实例对象-2" class="headerlink" title="生成实例对象"></a>生成实例对象</h4><pre><code>var s = new String()</code></pre><h4 id="String对象的属性"><a href="#String对象的属性" class="headerlink" title="String对象的属性"></a>String对象的属性</h4><pre><code>s.length //返回字符串的长度</code></pre><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><pre><code>s.chatAt(index)   //返回指定位置的字符s.fromCharCode()    //该方法的参数是一系列Unicode码点，返回对应的字符串。s.charCodeAt(index)    //返回给定位置字符的Unicode码点（十进制表示）s.concat(s2)  //用于连接两个字符串s.slice(start,end)   //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。s.substring(start,end)  //用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。s.substr(start,length)   //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。s.indexOf(s)   //返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置 s.lastIndexOf()  //返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。s.trim()  //用于去除字符串两端的空格，返回一个新字符串s.toLowerCase()  //用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。s.toUpperCase()  //全部转为大写s.localeCompare(s2)  //用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。s.match(regexp)   //用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。s.search()  //返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。s.replace(oldValue,newValue)  //用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。s.split()  //按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。</code></pre><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><pre><code>Math.E：常数e。Math.LN2：2的自然对数。Math.LN10：10的自然对数。Math.LOG2E：以2为底的e的对数。Math.LOG10E：以10为底的e的对数。Math.PI：常数Pi。Math.SQRT1_2：0.5的平方根。Math.SQRT2：2的平方根。</code></pre><h4 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h4><pre><code>Math.abs()：返回参数的绝对值  Math.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。Math.floor()：向下取整  Math.max(n,n1,...)：可接受多个参数，返回最大值  Math.min(n,n1,..)：可接受多个参数，返回最小值  Math.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。Math.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回NaN。Math.log()：返回以e为底的自然对数值。Math.exp()：返回e的指数，也就是常数e的参数次方。Math.round()：四舍五入  Math.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</code></pre><h4 id="三角函数方法"><a href="#三角函数方法" class="headerlink" title="三角函数方法"></a>三角函数方法</h4><pre><code>Math.sin()：返回参数的正弦  Math.cos()：返回参数的余弦  Math.tan()：返回参数的正切  Math.asin()：返回参数的反正弦（弧度值）  Math.acos()：返回参数的反余弦（弧度值）  Math.atan()：返回参数的反正切（弧度值）</code></pre><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><pre><code>JSON.stringify()   //用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。JSON.parse()   //用于将JSON字符串转化成对象。</code></pre><h3 id="console对象"><a href="#console对象" class="headerlink" title="console对象"></a>console对象</h3><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><pre><code>console.log(text,text2,...)   //用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。console.info()   //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。console.debug()  //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。console.warn()  //输出信息时，在最前面加一个黄色三角，表示警告；console.error()  //输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈console.table()  //可以将复合类型的数据转为表格显示。console.count()  //用于计数，输出它被调用了多少次。console.dir()    //用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。console.dirxml()  //用于以目录树的形式，显示DOM节点。console.assert()  //接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。//这两个方法用于计时，可以算出一个操作所花费的准确时间。console.time()console.timeEnd()//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。console.profile()  //用来新建一个性能测试器（profile），它的参数是性能测试器的名字。console.profileEnd()  //用来结束正在运行的性能测试器。console.group()console.groupend()//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。console.groupCollapsed()  //用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。console.trace()  //显示当前执行的代码在堆栈中的调用路径。console.clear()  //用于清除当前控制台的所有输出，将光标回置到第一行。</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、节点&quot;&gt;&lt;a href=&quot;#一、节点&quot; class=&quot;headerlink&quot; title=&quot;一、节点&quot;&gt;&lt;/a&gt;一、节点&lt;/h2&gt;&lt;h3 id=&quot;节点属性&quot;&gt;&lt;a href=&quot;#节点属性&quot; class=&quot;headerlink&quot; title=&quot;节点属性&quot;&gt;&lt;/a&gt;节点属性&lt;/h3&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://yoursite.com/2019/11/17/webpack/"/>
    <id>http://yoursite.com/2019/11/17/webpack/</id>
    <published>2019-11-17T14:43:46.000Z</published>
    <updated>2019-11-17T14:47:08.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><pre><code>npm install --global webpack</code></pre><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><pre><code>npm init -ynpm install webpack webpack-cli -D</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h4 id=&quot;全局安装&quot;&gt;&lt;a href=&quot;#全局安装&quot; class=&quot;headerlink&quot; title=&quot;全局安装&quot;&gt;&lt;/a&gt;全局安装&lt;/h</summary>
      
    
    
    
    <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>JS垃圾回收机制</title>
    <link href="http://yoursite.com/2019/10/19/JS%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/10/19/JS%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2019-10-19T09:24:19.000Z</published>
    <updated>2020-07-16T15:47:03.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谈谈JS垃圾回收机制？"><a href="#谈谈JS垃圾回收机制？" class="headerlink" title="谈谈JS垃圾回收机制？"></a>谈谈JS垃圾回收机制？</h2> <span id="more"></span><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><pre><code>Javascript中的内存管理是自动执行的，而且是不可见的。在我们创建基本类型、对象、函数时，这些都需要内存，当不需要某样东西时，JavaScript引擎会利用垃圾回收机制清除它。在局部作用域中，当函数执行完毕，局部变量也就没必要存在了，因此垃圾收集器很容易做出判断回收。但是全局变量什么时候需要自动释放内存空间很难判断，因此在开发中，需要尽量避免使用全局变量。</code></pre><h4 id="可达性"><a href="#可达性" class="headerlink" title="可达性"></a>可达性</h4><p>JavaScript中内存管理的主要概念是可达性。</p><p>当一些值以某种方式可访问或可用，它们会被存储在内存中，叫做可达值。</p><ul><li>一些固有可达值，由于显而易见的原因无法删除。例如：<ul><li>本地函数的局部变量或参数</li><li>当前嵌套调用链上的其他函数的变量和参数</li><li>全局变量等</li></ul></li></ul><p>这些值 称为 根</p><ul><li>如果引用或引用链 可以从根访问任何其他值，则认为该值是可访问的。<ul><li>一个对象引用另一个对象的属性，则该对象是为可达性。</li></ul></li></ul><p>JavaScript引擎中有一个后台进程称为垃圾回收器，它监视所有对象，并删除哪些不可访问的对象。</p><h4 id="内部算法"><a href="#内部算法" class="headerlink" title="内部算法"></a>内部算法</h4><p>v8的垃圾回收策略基于分代式垃圾回收机制。将内存分为新生代和老生代，分别采用不同<br>的算法。</p><p>新生代采用Scavenge算法(赋值算法)</p><ul><li><p>Scavenge为新生代采用的算法，是一种采用复制的方式实现的垃圾回收算法。它将内存分<br>为from和to两个空间。每次gc,会将from空间的存活对象复制到to空间。然后两个空间角色<br>对换(又称反转)。</p></li><li><p>该算法是牺牲空间换时间，所以适合新生代，因为它的对象生存周期较短。</p></li></ul><p>老生代采用Mark-Sweep(标记清除)和Mark-Compact(标记整理)</p><ul><li>标记-清除算法，定期执行一下“垃圾回收”步骤：<ul><li>垃圾回收器获取根并“标记”它们</li><li>然后访问并标记所有来自它们的引用</li><li>然后访问标记的对象 并 标记它们的引用</li><li>以此类推，知道有为访问的引用为止</li><li>除了标记的对象外，所有对象都被删除。</li></ul></li></ul><p>Mark-Compact算法(标记整理)</p><ul><li>标记清除存在一个问题，清除死亡对象后会造成内存空间不连续，这时候v8会使用<br>Mark-Compact算法(标记整理)，它会在标记完成之后将活着的对象往一端移动，移动完成<br>后直接清理掉边界外的内存。</li></ul><p>Reference Counting(引用计数算法)</p><ul><li>引用计数，就是记录每个对象被引用的次数，每次新建对象、赋值引用和删除引用的同时<br>更新计数器，如果计数器值为0则直接回收内存。 很明显，引用计数最大的优势是暂停时间短</li></ul><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul><li><p>增量回收：如果有很多对象，并且我们试图一次遍历并标记整个对象集，那么可能会花费<br>一些时间，并在执行中会有一定的延迟。因此，引擎试图将垃圾回收分解为多个部分，然后<br>各个部分分别执行，这需要额外的标记来跟踪变化，这样有很多微小的延迟，而不是很大的延迟。</p></li><li><p>空闲时间收集：垃圾回收器只在CPU空闲时运行，以减少对执行的可能影响。</p></li></ul><h4 id="v8的内存限制"><a href="#v8的内存限制" class="headerlink" title="v8的内存限制"></a>v8的内存限制</h4><ul><li>64位系统最大约为1.4G</li><li>32位系统最大约为0.7G</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;谈谈JS垃圾回收机制？&quot;&gt;&lt;a href=&quot;#谈谈JS垃圾回收机制？&quot; class=&quot;headerlink&quot; title=&quot;谈谈JS垃圾回收机制？&quot;&gt;&lt;/a&gt;谈谈JS垃圾回收机制？&lt;/h2&gt;</summary>
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="http://yoursite.com/2019/10/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/10/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2019-10-18T16:28:59.000Z</published>
    <updated>2020-07-16T15:47:08.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h4 id="文件主要目录及文件作用"><a href="#文件主要目录及文件作用" class="headerlink" title="文件主要目录及文件作用"></a>文件主要目录及文件作用</h4> <span id="more"></span><ul><li>component 组件文件夹<ul><li>navBar 底部组件<ul><li>navBar.js 底部组件的js代码</li><li>navBar.json 底部组件的配置文件</li><li>navBar.wxml 底部组件的html代码</li><li>navBar.wxss 底部组件的css代码</li></ul></li></ul></li><li>pages 页面文件夹<ul><li>index 首页<ul><li>index.js 首页的js代码</li><li>index.json 首页的配置文件</li><li>index.wxml 首页的html代码</li><li>index.wxss 首页的css代码</li></ul></li></ul></li><li>public 图片文件夹</li><li>utils 工具文件夹<ul><li>api.js 控制api的文件</li><li>md5.js 工具：MD5加密文件</li><li>timestamp.js 工具：事件戳文件</li></ul></li><li>app.json 设置全局的基础数据等</li><li>app.wxss 公共样式，可通过import导入更多</li><li>project.config.json 项目配置文件</li></ul><h4 id="微信小程序生命周期"><a href="#微信小程序生命周期" class="headerlink" title="微信小程序生命周期"></a>微信小程序生命周期</h4><ul><li>onLoad(): 页面加载时触发，一个页面只会调用一次，可以在onLoad中获取打开当前页面<br>所调用的query参数。</li><li>onShow(): 页面显示/切入前台时触发，每次打开页面都会调用一次。</li><li>onReady(): 页面初次渲染完成时触发，一个页面只会调用一次。</li><li>onHide(): 页面隐藏/切入后台时触发，当navigateTo或底部tab切换时调用。</li><li>onUnload(): 页面卸载时触发。</li></ul><h4 id="app-json是对当前小程序的全局配置，讲述三个配置各个项的含义"><a href="#app-json是对当前小程序的全局配置，讲述三个配置各个项的含义" class="headerlink" title="app.json是对当前小程序的全局配置，讲述三个配置各个项的含义?"></a>app.json是对当前小程序的全局配置，讲述三个配置各个项的含义?</h4><ul><li>pages字段：用于描述当前小程序所有页面路径，为了让微信客户端知道当前小程序页面<br>定义在那个目录。</li><li>window字段：小程序所有页面的顶部背景颜色，文字颜色定义等。</li><li>tab字段：小程序全局顶部tab或底部tab。</li></ul><h4 id="小程序的wxss和css有哪些不一样的地方？"><a href="#小程序的wxss和css有哪些不一样的地方？" class="headerlink" title="小程序的wxss和css有哪些不一样的地方？"></a>小程序的wxss和css有哪些不一样的地方？</h4><ul><li>新像素单位rpx</li><li>样式可直接使用import导入</li></ul><h4 id="小程序wxml和标准的html的异同？"><a href="#小程序wxml和标准的html的异同？" class="headerlink" title="小程序wxml和标准的html的异同？"></a>小程序wxml和标准的html的异同？</h4><p>都是用来描述页面的结构，都是由标签、属性等构成。</p><ul><li>标签名字不一样，且小程序标签更少，单一标签更多。</li><li>多了一些wx:if这样的属性和双大括号这样的表达式。</li><li>wxml只能在微信小程序开发者工具中预览，html可以在浏览器内预览。</li><li>组件封装不同，wxml对组件进行了重新封装。</li><li>小程序运行在JS Core内，没有DOM树和window对象，小程序无法使用window对象和document<br>对象。</li></ul><h4 id="小程序wxss和css的异同？"><a href="#小程序wxss和css的异同？" class="headerlink" title="小程序wxss和css的异同？"></a>小程序wxss和css的异同？</h4><p>都是用来描述页面的样子</p><ul><li>wxss具有css大部分的特性，也做了一些扩充和修改。</li><li>wxss新增了尺寸单位，wxss在底层支持新的尺寸单位rpx。</li><li>wxss仅支持部分css选择器。</li><li>wxss提供全局样式和局部样式。</li></ul><h4 id="小程序页面间有哪些传递数据的方法？"><a href="#小程序页面间有哪些传递数据的方法？" class="headerlink" title="小程序页面间有哪些传递数据的方法？"></a>小程序页面间有哪些传递数据的方法？</h4><ul><li>使用全局变量实现数据传递</li><li>页面跳转或重定向时，使用url带参数传递数据</li><li>使用组件模板template传递参数</li><li>使用数据库传递数据</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;微信小程序&quot;&gt;&lt;a href=&quot;#微信小程序&quot; class=&quot;headerlink&quot; title=&quot;微信小程序&quot;&gt;&lt;/a&gt;微信小程序&lt;/h2&gt;&lt;h4 id=&quot;文件主要目录及文件作用&quot;&gt;&lt;a href=&quot;#文件主要目录及文件作用&quot; class=&quot;headerlink&quot; title=&quot;文件主要目录及文件作用&quot;&gt;&lt;/a&gt;文件主要目录及文件作用&lt;/h4&gt;</summary>
    
    
    
    <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Chrome打开一个页面需要启动多少线程？分别有哪些线程？</title>
    <link href="http://yoursite.com/2019/10/14/Chrome%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%9C%80%E8%A6%81%E5%90%AF%E5%8A%A8%E5%A4%9A%E5%B0%91%E7%BA%BF%E7%A8%8B%EF%BC%9F%E5%88%86%E5%88%AB%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BA%BF%E7%A8%8B%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/10/14/Chrome%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%9C%80%E8%A6%81%E5%90%AF%E5%8A%A8%E5%A4%9A%E5%B0%91%E7%BA%BF%E7%A8%8B%EF%BC%9F%E5%88%86%E5%88%AB%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BA%BF%E7%A8%8B%EF%BC%9F/</id>
    <published>2019-10-14T06:37:34.000Z</published>
    <updated>2019-10-19T17:50:46.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chrome打开一个页面需要启动多少线程？分别有哪些线程？"><a href="#Chrome打开一个页面需要启动多少线程？分别有哪些线程？" class="headerlink" title="Chrome打开一个页面需要启动多少线程？分别有哪些线程？"></a>Chrome打开一个页面需要启动多少线程？分别有哪些线程？</h2><pre><code>最新Chrome浏览器包括：一个浏览器(Browser)主线程、一个GPU进程、一个网络(NetWork)进程、多个渲染进程和多个插件进程</code></pre><ul><li><p>线程：</p><ul><li>浏览器进程：主要负责界面显示、用户交互、子进程管理、同时提供存储等功能。</li><li>渲染进程：核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的网页，<br>排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个<br>Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li>GPU进程：Chrome刚开始的时候是没有GPU进程的，而GPU使用的使用初衷是为了实现<br>3D CSS效果，之后随后网页、Chrome的UI界面都选择采用GPU来绘制，这使得GPU称为<br>浏览器普遍的需求，最后，Chrome在其多进程架构上也引入了GPU进程。</li><li>网络进程：主要负责网页的网络资源加载，之前是作为一个模块运行在浏览器进程里面<br>的，最近才独立出来，称为一个单独的进程。</li><li>插件进程：主要负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以<br>保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Chrome打开一个页面需要启动多少线程？分别有哪些线程？&quot;&gt;&lt;a href=&quot;#Chrome打开一个页面需要启动多少线程？分别有哪些线程？&quot; class=&quot;headerlink&quot; title=&quot;Chrome打开一个页面需要启动多少线程？分别有哪些线程？&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏</title>
    <link href="http://yoursite.com/2019/10/11/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>http://yoursite.com/2019/10/11/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</id>
    <published>2019-10-11T01:34:26.000Z</published>
    <updated>2019-10-11T01:40:32.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="造成内存泄漏的原因？"><a href="#造成内存泄漏的原因？" class="headerlink" title="造成内存泄漏的原因？"></a>造成内存泄漏的原因？</h2><ul><li>意外的全局变量<ul><li>无法被回收</li></ul></li><li>定时器<ul><li>未被正确关闭，导致所引用的外部变量无法被释放</li></ul></li><li>事件监听<ul><li>没有正确销毁</li></ul></li><li>闭包<ul><li>会导致父级中的变量无法被释放</li></ul></li><li>DOM引用<ul><li>DOM被删除时，内存中的引用未被正确清空</li></ul></li></ul><h2 id="如何查看内存变化情况？"><a href="#如何查看内存变化情况？" class="headerlink" title="如何查看内存变化情况？"></a>如何查看内存变化情况？</h2><ul><li>使用Chrome的Performance面板进行内存标记，可视化查看内存变化情况，找出异常点。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;造成内存泄漏的原因？&quot;&gt;&lt;a href=&quot;#造成内存泄漏的原因？&quot; class=&quot;headerlink&quot; title=&quot;造成内存泄漏的原因？&quot;&gt;&lt;/a&gt;造成内存泄漏的原因？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;意外的全局变量&lt;ul&gt;
&lt;li&gt;无法被回收&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端安全</title>
    <link href="http://yoursite.com/2019/10/10/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2019/10/10/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</id>
    <published>2019-10-10T05:50:51.000Z</published>
    <updated>2019-10-10T15:21:26.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h2><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><ul><li>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，<br>最终达到欺骗服务器执行恶意的SQL命令</li></ul><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><ul><li>xss：跨站脚本攻击(Cross Site Scripting),攻击者通过注入非法的html标签<br>或者JavaScript代码，从而当用户浏览该网页时，控制用户浏览器。</li><li>xss主要分为三类：<ul><li>DOM xss<ul><li>DOM即文本对象模型，DOM通常代表在html、xhtml和xml中的对象，使用DOM<br>可以允许程序和脚本动态的访问和更新文档的内容、结构和样式。它不需要服务器<br>解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端<br>的事情。</li></ul></li><li>反射型 xss<ul><li>反射型XSS也被称为非持久性XSS，是现在最容易出现的一种XSS漏洞。发出请<br>求时，XSS代码出现在URL中 ，最后输入提交到服务器，服务器解析后在响应内容<br>中出现这段XSS代码，最后浏览器解析执行。</li></ul></li><li>存储型 xss<ul><li>存储型XSS又被称为持久性XSS，它是最危险的一种跨站脚本，相比反射型XSS<br>和DOM型XSS具有更高的隐蔽性，所以危害更大，因为它不需要用户手动触发。<br>允许用户存储数据的web程序都可能存在存储型XSS漏洞，当攻击者提交一段XSS<br>代码后，被服务器端接收并存储，当所有浏览者访问某个页面时都会被XSS，其中<br>最典型的例子就是留言板。</li></ul></li></ul></li><li>主要影响：<ul><li>利用虚假输入表单骗取用户个人信息</li><li>利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li><li>显示伪造的文章或者图片</li></ul></li><li>防御措施：<ul><li>设置httpOnly：在cookie中设置HttpOnly属性后，js脚本将无法读取到cookie的信息。</li><li>输入检查，对于用户输入进行格式检查。<ul><li>移除用户上传的DOM属性，如onerror事件等。</li><li>移除用户上传的style节点、script节点、iframe节点。</li></ul></li></ul></li></ul><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4><ul><li><p>csrf：跨站请求伪造(Cross-Site Request Forgeries)，冒充用户发起请求，完成<br>一些违背用户意愿的事情。</p></li><li><p>防御措施</p><ul><li>Token验证：<ul><li>第一步：后端随机产生一个token，把这个token保存在session状态中，同时<br>后端把token交给前端页面；</li><li>第二步：前端页面提交请求时，把token加入到请求数据或者头信息中，一起<br>传给后端；</li><li>后端验证前端传来的token与session是否一致，一致则合法，否则非法请求。</li></ul></li><li>Referer check：请求来源验证，但是不能保证100%有效，因为服务器并不是什么<br>时候都能取到Referer，而且低版本浏览器存在伪造Referer的风险。</li><li>验证码：强制用户必须和应用进行交互，完成最终请求，但用户体验比较差。</li></ul></li></ul><h4 id="clickjacking"><a href="#clickjacking" class="headerlink" title="clickjacking"></a>clickjacking</h4><ul><li><p>clickjacking: 点击劫持，利用透明的按钮或连接做成陷阱，覆盖在web页面之上，然后<br>诱使用户在不知的情况下，点击那个链接访问内容的一种攻击手段。又称为界面伪装。</p></li><li><p>大概有两种方式：</p><ul><li>攻击者使用一个透明iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，<br>此时用将在不知情的情况下点击透明的iframe页面。</li><li>攻击者使用一张图片覆盖在网页，遮挡网页原有的位置含义。</li></ul></li><li><p>防御措施：</p><ul><li>X-FRAME-OPTIONS 响应头是用来给浏览器指示允许一个页面可否在<code>&lt;frame&gt;</code>,<br><code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站<br>内容没有被嵌到别人的网站中去，也从而避免点击劫持的攻击。</li></ul></li></ul><h5 id="控制台注入代码"><a href="#控制台注入代码" class="headerlink" title="控制台注入代码"></a>控制台注入代码</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端安全&quot;&gt;&lt;a href=&quot;#前端安全&quot; class=&quot;headerlink&quot; title=&quot;前端安全&quot;&gt;&lt;/a&gt;前端安全&lt;/h2&gt;&lt;h4 id=&quot;sql注入&quot;&gt;&lt;a href=&quot;#sql注入&quot; class=&quot;headerlink&quot; title=&quot;sql注入&quot;&gt;</summary>
      
    
    
    
    <category term="前端安全" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端安全" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>浏览器是怎么对HTML5的离线存储资源进行管理和加载的？</title>
    <link href="http://yoursite.com/2019/10/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AF%B9HTML5%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/10/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AF%B9HTML5%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%EF%BC%9F/</id>
    <published>2019-10-08T03:44:55.000Z</published>
    <updated>2019-10-08T03:50:23.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器是怎么对HTML5的离线存储资源进行管理和加载的？"><a href="#浏览器是怎么对HTML5的离线存储资源进行管理和加载的？" class="headerlink" title="浏览器是怎么对HTML5的离线存储资源进行管理和加载的？"></a>浏览器是怎么对HTML5的离线存储资源进行管理和加载的？</h2><ul><li><p>在线的情况下：浏览器发现html头部有manifest属性，会请求manifest文件，如果是<br>第一次访问app，浏览器会根据manifest文件的内容下载相应的资源并进行离线缓存。如果<br>已经离线存储了，浏览器会使用离线的资源加载页面，然后浏览器会比对新的manifest文件<br>与旧的manifest文件，如果文件没有发生改变，就不要做任何操作，如果文件改变，就会重新<br>下载文件中的资源并进行离线存储。</p></li><li><p>离线的情况下：浏览器就直接使用离线存储的资源。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浏览器是怎么对HTML5的离线存储资源进行管理和加载的？&quot;&gt;&lt;a href=&quot;#浏览器是怎么对HTML5的离线存储资源进行管理和加载的？&quot; class=&quot;headerlink&quot; title=&quot;浏览器是怎么对HTML5的离线存储资源进行管理和加载的？&quot;&gt;&lt;/a&gt;浏览</summary>
      
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTML语义化</title>
    <link href="http://yoursite.com/2019/09/30/HTML%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/30/HTML%E8%AF%AD%E4%B9%89%E5%8C%96/</id>
    <published>2019-09-30T08:04:32.000Z</published>
    <updated>2019-09-30T08:09:31.023Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什么是HTML语义化？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据内容的结构化，选择合适的标签，便于开发者阅读和写出更优雅的代码的同时利于SEO的优化。</span><br></pre></td></tr></table></figure><ul><li>为什么要语义化？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；</span><br><span class="line">-  用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；</span><br><span class="line">- 有利于SEO ：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息： 爬虫依赖于</span><br><span class="line">标签来确定上下文和各个关键字的权重；</span><br><span class="line">- 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</span><br><span class="line">- 便于团队开发和维护，语义化更具可读性，是下一步网页的重要动向，遵循W3C标准的</span><br><span class="line">团队都遵循这个标准，可以减少差异化。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;什么是HTML语义化？&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td</summary>
      
    
    
    
    <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
    <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>本地存储</title>
    <link href="http://yoursite.com/2019/09/30/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2019/09/30/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</id>
    <published>2019-09-30T08:02:46.000Z</published>
    <updated>2020-07-16T14:24:05.746Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>客户端的本地存储：</p><ul><li><p>localStorage</p><span id="more"></span><ul><li>生命周期永久生效，除非手动删除，否则关闭页面也会存在</li><li>可以在同一浏览器多窗口共享</li><li>以键值对的形式存储使用</li><li>方法：<ul><li>存储数据：localStorage.setItem(key, value)</li><li>获取数据：localStorage.getItem(key)</li><li>删除数据：localStorage.removeItem(key)</li><li>删除所有数据：localStorage.clear()</li></ul></li></ul></li><li><p>sessionStorage </p><ul><li>声明周期为关闭浏览器窗口</li><li>在同一个窗口中数据可以共享</li><li>以键值对的形式存储</li><li>方法：<ul><li>存储数据：sessionStorage.setItem(key, value)</li><li>获取数据：sessionStorage.getItem(key)</li><li>删除数据：sessionStorage.removeItem(key)</li><li>删除所有数据：sessionStorage.clear()</li></ul>  <a href='https://www.cnblogs.com/pengc/p/8714475.html'>localStorage和sessionStorage</a>  <a href='https://www.cnblogs.com/8023-CHD/p/11067141.html'>cookie和session</a></li></ul></li><li><p>IndexDB 离线存储，当网络断开，可以从浏览器中读取数据，用来做一些离线应用</p></li><li><p>Cookie </p><ul><li>包含字段<ul><li>name: cookie名称</li><li>value: 值</li><li>domain: cookie生效的域名</li><li>path: cookie生效的路径</li><li>expires/max-age: cookie过期时间</li><li>size: 大小</li><li>HttpOnly: 用户端不可更改</li></ul></li><li>存储用户信息，通过在客户端记录信息确定用户身份，最大为4kb</li><li>会话Cookie，若不设置过期时间，表示这个cookie的生命周期为浏览器会话期间，浏览器<br>关闭，cookie就消失，会话cookie会保存在内存中而不是硬盘上。</li><li>持久Cookie，若设置了过期时间，浏览器会把cookie保存在硬盘上，关闭浏览器仍然有效直到<br>超过设定的过期时间。</li><li>cookie数据始终在同源的http请求中携带(即使不需要)，即会在浏览器和服务器之间来回传递。</li><li>Cookie具有不可跨域名性，例如浏览器访问百度不会带上谷歌的cookie</li></ul></li></ul></li><li><p>服务端的存储：</p><ul><li>Session<ul><li>Session 服务器端一种记录客户端状态的机制</li><li>cookie数据存放在客户的浏览器上，session将数据存放在服务器端</li><li>Session相对Cookie来说比较安全，别人可以分析本地存放的cookie进行cookie欺骗</li><li>Session会在一定时间内保存在服务器上，访问量较多的时候会比较占用服务器的性能，<br>考虑到减轻服务器性能方面的时候，应当使用cookie</li><li>可以将登陆等重要信息保存在session，其他信息放在cookie中</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;客户端的本地存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;localStorage&lt;/p&gt;</summary>
    
    
    
    <category term="本地存储" scheme="http://yoursite.com/categories/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    
    <category term="本地存储" scheme="http://yoursite.com/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见设计模式</title>
    <link href="http://yoursite.com/2019/09/27/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/27/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-09-27T14:29:40.000Z</published>
    <updated>2019-09-27T14:31:11.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见的设计模式"><a href="#常见的设计模式" class="headerlink" title="常见的设计模式"></a>常见的设计模式</h3><ul><li><p>单例模式</p></li><li><p>构造函数模式</p></li><li><p>建造者模式</p></li><li><p>工厂模式</p></li><li><p>代理模式</p></li><li><p>命令模式</p></li><li><p>观察者模式</p></li><li><p>适配器模式</p></li><li><p>职责链模式</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;常见的设计模式&quot;&gt;&lt;a href=&quot;#常见的设计模式&quot; class=&quot;headerlink&quot; title=&quot;常见的设计模式&quot;&gt;&lt;/a&gt;常见的设计模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单例模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造函数模式&lt;/p&gt;
&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>getcomputedstyle和style的区别</title>
    <link href="http://yoursite.com/2019/09/26/getcomputedstyle%E5%92%8Cstyle%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/09/26/getcomputedstyle%E5%92%8Cstyle%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-09-26T09:13:46.000Z</published>
    <updated>2019-09-26T09:26:08.596Z</updated>
    
    <content type="html"><![CDATA[<p>S</p><h2 id="getomputedstyle-和-style-的区别？"><a href="#getomputedstyle-和-style-的区别？" class="headerlink" title="getomputedstyle 和 style 的区别？"></a>getomputedstyle 和 style 的区别？</h2><ul><li><p>getComputedStyle方法是只读的，只能获取样式，不能设置；而element.style能读写。</p></li><li><p>getComputedStyle方法获取的是最终应用在元素上的所有Css属性样式(即使没有css代码)，<br>而element.style只能获取元素style属性中的css样式。</p></li><li><p>getComputedStyle可以获取伪元素的样式。</p></li><li><p>兼容性：getComputedStyle方法在IE6~IE8是不支持的。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;S&lt;/p&gt;
&lt;h2 id=&quot;getomputedstyle-和-style-的区别？&quot;&gt;&lt;a href=&quot;#getomputedstyle-和-style-的区别？&quot; class=&quot;headerlink&quot; title=&quot;getomputedstyle 和 style 的区别</summary>
      
    
    
    
    <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
    <category term="Css" scheme="http://yoursite.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>git commit提示Your branch is up-to-date with &#39;origin/master&#39;</title>
    <link href="http://yoursite.com/2019/09/21/git-commit%E6%8F%90%E7%A4%BAYour-branch-is-up-to-date-with-origin-master/"/>
    <id>http://yoursite.com/2019/09/21/git-commit%E6%8F%90%E7%A4%BAYour-branch-is-up-to-date-with-origin-master/</id>
    <published>2019-09-21T03:48:12.000Z</published>
    <updated>2019-09-21T03:54:14.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-commit提示Your-branch-is-up-to-date-with-‘origin-master’"><a href="#git-commit提示Your-branch-is-up-to-date-with-‘origin-master’" class="headerlink" title="git commit提示Your branch is up-to-date with ‘origin/master’"></a>git commit提示Your branch is up-to-date with ‘origin/master’</h3><ul><li><p>新建一个分支</p><blockquote><p>git branch newbranch</p></blockquote></li><li><p>然后检查分支是否创建成功</p><blockquote><p>git branch</p></blockquote></li><li><p>切换到新的分支</p><blockquote><p>git checkout newbranch</p></blockquote></li><li><p>将改动提交到新的分支上</p><blockquote><p>git add .<br>git commit -m “0.0.1”</p></blockquote></li><li><p>然后可以检查是否成功</p><blockquote><p>git status</p></blockquote></li><li><p>然后切换到主分支</p><blockquote><p>git checkout master</p></blockquote></li><li><p>然后将新分支提交的改动合并到主分支上</p><blockquote><p>git merge newbanch</p></blockquote></li><li><p>push到仓库</p><blockquote><p>git push -u origin master</p></blockquote></li><li><p>最后还可以删除这个分支</p><blockquote><p>git branch -D newbranch</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git-commit提示Your-branch-is-up-to-date-with-‘origin-master’&quot;&gt;&lt;a href=&quot;#git-commit提示Your-branch-is-up-to-date-with-‘origin-master’&quot; cl</summary>
      
    
    
    
    <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vuex &amp; Redux工作流程</title>
    <link href="http://yoursite.com/2019/09/18/Vuex-Redux%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/09/18/Vuex-Redux%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</id>
    <published>2019-09-18T02:11:38.000Z</published>
    <updated>2019-09-18T11:01:59.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-核心原理"><a href="#Vue-核心原理" class="headerlink" title="Vue 核心原理"></a>Vue 核心原理</h2><span id="more"></span><img src="https://raw.githubusercontent.com/foolishmax/static/master/images/vuex.png" width="450" /><ul><li><p>Store : 统一的状态管理容器对象</p></li><li><p>Vue Components : Vue组件</p></li><li><p>dispatch : 操作行为触发方法，是唯一能执行action的方法</p></li><li><p>actions : 操作行为处理模块。 负责处理Vue Components接收的所有交互行为，</p></li><li><p>commit : 状态改变提交操作方法，对mutation进行提交，是唯一能执行mutation<br>的方法</p></li><li><p>mutation : 状态改变操作方法，Vuex中修改state的唯一推荐方法，该方法只能<br>进行同步操作</p></li><li><p>getter : state对象读取方法，类似computed计算属性。</p></li></ul><blockquote><p>过程：Vue组件接收交互行为，调用dispatch方法触发action相关处理，若页面状态需要<br>改变，则调用commit方法提交mutation修改state，通过getters获取到state新值，<br>重新渲染Vue Components，界面随之更新。</p></blockquote><h2 id="Redux-核心原理"><a href="#Redux-核心原理" class="headerlink" title="Redux 核心原理"></a>Redux 核心原理</h2><img src="https://raw.githubusercontent.com/foolishmax/static/master/images/redux.png" width="450" /><ul><li><p>只使用redux，流程是这样的：</p><blockquote><p>component –&gt; dispatch(action) –&gt; reducer –&gt; subscribe –&gt; getState –&gt; component</p></blockquote></li><li><p>使用react-redux 之后，流程是这样的：</p><blockquote><p>component –&gt; actionCreator(data) –&gt; reducer –&gt; component</p></blockquote></li></ul><p>store的三大功能：dispatch,subscribe,getState都不需要手动来写了，react-redux帮我们<br>做了这些，同时提供了Provider 和 connect</p><ul><li><p>注意点:</p><ul><li>store是唯一的</li><li>只有store能够改变自己的内容</li><li>reducer必须是一个纯函数（给定固定的输入，一定会有固定的输出，不会产生副作用）</li></ul></li><li><p>核心API</p><ul><li>createStore(reducer)<ul><li>创建store，并将reducer传递给store</li></ul></li><li>store.dispatch(action)<ul><li>创建action之后，负责将action传给store</li><li>action是一个对象形式，会包含Type(告诉store要做的事情)、Value(参数结果)</li></ul></li><li>store.getState()<ul><li>获取store内容</li></ul></li><li>store.subscribe()<ul><li>订阅store改变，只要store发生改变，其中的回调函数就会被执行</li></ul></li></ul></li></ul><h2 id="Vuex-和-Redux-的区别？"><a href="#Vuex-和-Redux-的区别？" class="headerlink" title="Vuex 和 Redux 的区别？"></a>Vuex 和 Redux 的区别？</h2><ul><li><p>都是状态管理系统，除了具备床柜的状态管理的功能之外，也针对自身框架进行一些优化特性。</p></li><li><p>状态注入组件：</p><ul><li>React-Redux: 通过<code>&lt;Provider/&gt;</code>组件拿到store之后，还需要显示指定容器组件，<br>即用connect包装一下该组件。</li><li>Vue通过Vue.use(Vuex)将vuex应用为全局的插件，将store传入跟实例，就可以<br>使得store对象运行在任何vue组件中。</li></ul></li><li><p>vuex借鉴redux，通过弱化概念（action、reducer），弱化了dispatch的存在感，<br>任何东西都没做实质性消减，但同时使得整套框架更加易于理解了</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Vue-核心原理&quot;&gt;&lt;a href=&quot;#Vue-核心原理&quot; class=&quot;headerlink&quot; title=&quot;Vue 核心原理&quot;&gt;&lt;/a&gt;Vue 核心原理&lt;/h2&gt;</summary>
    
    
    
    <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>掘金面经笔记</title>
    <link href="http://yoursite.com/2019/09/13/%E6%8E%98%E9%87%91%E9%9D%A2%E7%BB%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/13/%E6%8E%98%E9%87%91%E9%9D%A2%E7%BB%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2019-09-12T16:19:19.000Z</published>
    <updated>2019-10-19T06:25:12.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何监听未处理的异常"><a href="#如何监听未处理的异常" class="headerlink" title="如何监听未处理的异常"></a>如何监听未处理的异常</h3><span id="more"></span><ul><li>try…catch<ul><li>无法捕捉到语法错误，只能捕捉运行时错误</li><li>可以拿到出错的信息(出错的文件，行号，列号)</li></ul></li><li>window.onerror<ul><li>由于try…catch只能捕获块里面的错误，全局的一些错误可以用window.onerror来捕获</li></ul></li></ul><h3 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h3><ul><li>http是一种一种广泛使用的网络协议，是一个客户端和服务器请求和应答的标准。</li><li>http工作在TCP协议的80端口，https工作在TCP协议的443端口</li><li>http协议运行在TCP协议之上，所有的传输内容都是明文，https运行在SSL/TLS之上，<br>SSL/TLS运行在TCP之上，所有的传输内容都是经过加密的。</li><li>https是以安全为目标的http通道，是http的安全版。是http加上SSL层对传输的信息和url做了一些加密处理，更加安全</li></ul><h3 id="为什么https不会被截取信息"><a href="#为什么https不会被截取信息" class="headerlink" title="为什么https不会被截取信息"></a>为什么https不会被截取信息</h3><ul><li>完成TCP三次同步握手</li><li>客户端验证服务器数字证书，通过，进入步骤3 </li><li>DH算法协商对称加密算法的密钥、hash算法的密钥</li><li>SSL安全加密隧道协商完成</li><li>网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；<br>用协商的hash算法进行数据完整性保护，保证数据不被篡改</li></ul><h3 id="浏览器如何缓存"><a href="#浏览器如何缓存" class="headerlink" title="浏览器如何缓存"></a>浏览器如何缓存</h3><ul><li>html meta标签控制缓存<ul><li><code>&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cahce&quot;&gt;</code> //告诉浏览器当前页面不被缓存</li></ul></li><li>http头信息控制缓存<ul><li>Expires ——&gt; 过期时间</li><li>Cache-Control 响应头信息(no-cache、no-store、max-age、public)</li></ul></li></ul><h3 id="TCP协议如何保证传输的可靠性"><a href="#TCP协议如何保证传输的可靠性" class="headerlink" title="TCP协议如何保证传输的可靠性"></a>TCP协议如何保证传输的可靠性</h3><ul><li>校验和</li><li>确认应答 + 序列号</li><li>超时重传</li><li>流浪控制</li><li>拥塞控制</li><li>TCP的连接管理</li><li>滑动窗口</li></ul><h3 id="UDP-amp-TCP-的区别"><a href="#UDP-amp-TCP-的区别" class="headerlink" title="UDP &amp; TCP 的区别"></a>UDP &amp; TCP 的区别</h3><ul><li><p>相同点：</p><ul><li>UDP协议 和 TCP协议 都是运输层协议</li></ul></li><li><p>不同点：</p><ul><li>UDP特点：<ul><li>无连接 —— 知道对端的IP和端口号就直接进行传输，不需要建立连接</li><li>不可靠 —— 没有确认机制，没有重传机制，即使因为网络故障无法发送到<br>对方，UDP协议也不会给应用层返回任何错误信息</li><li>面向数据报</li><li>传输速 度块</li></ul></li><li>TCP特点：<ul><li>面向连接，在客户端和服务器进行交换数据前，必须先在双方之间建立一个<br>TCP连接</li><li>可靠传输，具有确认应答机制、超时重传机制、拥塞控制、流量控制、<br>滑动窗口机制、延迟应答等。</li><li>面向字节流</li></ul></li></ul></li><li><p>UDP的响应速度优于TCP，安全性和数据可靠性不如TCP</p></li><li><p>UDP一般用在网络负担非常重，但对响应速度要求高，数据类型都是短消息的情况下</p></li></ul><h3 id="样式导入方式及优先级？"><a href="#样式导入方式及优先级？" class="headerlink" title="样式导入方式及优先级？"></a>样式导入方式及优先级？</h3><ul><li>引入方式<ul><li>行内样式</li><li>内联式</li><li>外链式</li><li>导入式: @import url(reset.css)</li></ul></li><li>各种方式的优先级<ul><li>行内样式 &gt; 外链式 &gt; 内联式 &gt; @import导入式</li></ul></li></ul><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>BFC(block formatting context)翻译为“块级格式化上下文”，它会生成独立的渲染区域<br>(不影响外面的元素，同时也不受外部元素的影响)，它有一下规则：</p><ul><li>内部的box会在垂直方向上一个接一个的放置。</li><li>内部box在垂直方向上的距离由margin决定，同属一个BFC内的相邻box会发生margin重叠。</li><li>BFC的区域不会与float box发生重叠。</li><li>计算BFC的高度时，浮动元素也参与计算(清除浮动)</li></ul><p>触发BFC的条件：</p><ul><li>float属性不为none</li><li>position为absolute或者fixed</li><li>display为inline-block、table-cell、table-caption、flex、inline-flex</li><li>overflow不为visible</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;如何监听未处理的异常&quot;&gt;&lt;a href=&quot;#如何监听未处理的异常&quot; class=&quot;headerlink&quot; title=&quot;如何监听未处理的异常&quot;&gt;&lt;/a&gt;如何监听未处理的异常&lt;/h3&gt;</summary>
    
    
    
    <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
</feed>
