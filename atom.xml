<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>foolishmax</title>
  <icon>https://www.gravatar.com/avatar/3dd40b488a7a6e8c5c6c1fee3a49eaf9</icon>
  <subtitle>仅作为个人学习记录</subtitle>
  <link href="https://github.com/foolishmax/atom.xml" rel="self"/>
  
  <link href="https://github.com/foolishmax/"/>
  <updated>2023-07-20T03:01:55.636Z</updated>
  <id>https://github.com/foolishmax/</id>
  
  <author>
    <name>foolishmax</name>
    <email>827864735@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx指南</title>
    <link href="https://github.com/foolishmax/2023/07/20/nginx%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/foolishmax/2023/07/20/nginx%E6%8C%87%E5%8D%97/</id>
    <published>2023-07-20T02:56:39.000Z</published>
    <updated>2023-07-20T03:01:55.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="负载均衡4种策略"><a href="#负载均衡4种策略" class="headerlink" title="负载均衡4种策略"></a>负载均衡4种策略</h2><ul><li>轮询：默认方式</li><li>weight：在轮询基础上增加权重，也就是轮询到的几率不同</li><li>ip_hash：按照ip的hash分配，保证每个访客的请求固定访问一个服务器，解决session问题</li><li>fair：按照相应时间来分配，需要安装nginx-upstream-fair插件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认轮询</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weight</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ip_hash</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;负载均衡4种策略&quot;&gt;&lt;a href=&quot;#负载均衡4种策略&quot; class=&quot;headerlink&quot; title=&quot;负载均衡4种策略&quot;&gt;&lt;/a&gt;负载均衡4种策略&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;轮询：默认方式&lt;/li&gt;
&lt;li&gt;weight：在轮询基础上增加权重，也就是轮询</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://github.com/foolishmax/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>实现一个多人协作在线文档有哪些技术难点？</title>
    <link href="https://github.com/foolishmax/2023/06/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%9A%BE%E7%82%B9%EF%BC%9F/"/>
    <id>https://github.com/foolishmax/2023/06/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%9A%BE%E7%82%B9%EF%BC%9F/</id>
    <published>2023-06-29T03:24:18.000Z</published>
    <updated>2023-06-29T05:56:17.753Z</updated>
    
    <content type="html"><![CDATA[<p>多人协作提供了稳定、高效、安全的协作环境，这种类似的产品需要克服的技术难点还是很多的，如：</p><span id="more"></span><ol><li><p>实时同步</p><p> 实现实时同步的难点在于如何快速传输用户的操作。<br> 常见的做法是websocket等技术，建立持久化连接，实时推送数据。<br> 同时为了减少网络传输量，可以采用差量同步的方式，只传输变化的部分数据。</p></li><li><p>冲突解决</p><p> 多个用户同时编辑同一个文档时，可能会冲突。<br> 常见解决方案是采用OT（Operational Transformation）技术，将用户的操作换成操作序列，并在服务器上合并，最后同步给用户，还需要采用<strong>锁机制</strong>，保证同一时间只有一个用户能够编辑文档。</p></li><li><p>高并发</p><p> 在线文档需要支持多人同时访问和编辑，就需要处理高并发的情况。<br> 提高并发性能，可以采用分布式架构、负载均衡等技术</p></li><li><p>安全性</p><p> 在线文档需要保证用户数据安全，包括用户身份验证、数据传输加密等。<br> 解决：采用HTTPS协议、SSL证书等技术实现数据传输加密，密码、验证码进行用户身份验证等</p></li><li><p>数据存储</p><p> 可以采用分布式数据库、缓存等技术提高数据存储和管理的效率和性能</p></li><li><p>实时性能</p><p> 在线文档需要保证实时性能，即用户的操作能够实时生效，不能出现延迟等问题。<br> 解决：采用异步IO、事件驱动等技术，同时对系统进行优化和调整，提高系统性能和响应速度。</p></li></ol><p>两个主要的技术难点就是：实时通信、编辑冲突</p><ul><li>实时通信：long pull 或者 websocket</li><li>编辑冲突：编辑锁、GUN diff-patch（类似git版本控制diff）、OT（Operational Transformation）、Myer’s diff-patch</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;多人协作提供了稳定、高效、安全的协作环境，这种类似的产品需要克服的技术难点还是很多的，如：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何优化网站以符合谷歌的Core Web Vitals标准</title>
    <link href="https://github.com/foolishmax/2023/06/25/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E4%BB%A5%E7%AC%A6%E5%90%88%E8%B0%B7%E6%AD%8C%E7%9A%84Core-Web-Vitals%E6%A0%87%E5%87%86/"/>
    <id>https://github.com/foolishmax/2023/06/25/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E4%BB%A5%E7%AC%A6%E5%90%88%E8%B0%B7%E6%AD%8C%E7%9A%84Core-Web-Vitals%E6%A0%87%E5%87%86/</id>
    <published>2023-06-25T02:02:04.000Z</published>
    <updated>2023-06-27T07:51:23.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要做Core-Web-Vitals"><a href="#为什么要做Core-Web-Vitals" class="headerlink" title="为什么要做Core Web Vitals?"></a>为什么要做Core Web Vitals?</h2><p>网站响应速度越快，在谷歌中的排名越高的机会就越大</p><span id="more"></span><h2 id="谷歌排名的主要因素（优先级从高到低）"><a href="#谷歌排名的主要因素（优先级从高到低）" class="headerlink" title="谷歌排名的主要因素（优先级从高到低）"></a>谷歌排名的主要因素（优先级从高到低）</h2><ol><li><p>高质量的内容</p><p> 在Google排名因素里绝对以‘内容为王，外链为皇’，如果能创造对用户来说独特、新颖、且有帮助的内容，那么Google搜索引擎会将结果页面排到更高位置。</p><p> Google特别关注内容质量，无论如何优化网站，如果内容没有价值，就不要期望能获得更高的排名。</p><p> 那么，什么才算是高质量的内容呢？</p><p> <strong>原创、独特、有价值的内容</strong></p><p> 如果内容重复或者跟其他网站类似，那么就会对SEO产生负面影响，对于新网站来说Google可能就不会去索引你的页面，网站就不会获得排名。如果经常发布重复内容，Google会减少抓去你的网站内容的频率。</p><p> <strong>经常更新内容</strong></p><p> 通过定期更新网站，为其添加新东西，通过增加内容新鲜度给搜索引擎发出一个积极的信号。如果内容主题涉及到新闻或者某件事的发展趋势，可以通过Google Trends工具找到最新的信息来保持内容的新鲜度。</p><p> <strong>内容长度</strong></p><p> 平均长度1890个词的文章会排在第一页，但对字数的限制没有一个硬性规定。更好的解决办法是撰写具有深度的内容，能够完全回答用户的问题并提供详细的解决方案。</p><p> <strong>内容结构和组织方式</strong></p><p> 组织合理、结构清晰的网页，可以让访客更轻松的、更方便的阅读并找到问题的解决方案。<br> 优化文章的结构和组织可以使用多个标题和副标题（H2、H3、H4等），还可以使用列表的形式组织内容，好处就是Google会为不同的关键词筛选带列表形式的高质量内容，将其展示为答案盒子。<br> 通过整理内容的结构和组织方式，内容的可读性将大大提高，正反馈就是提高了用户体验，增加了<code>停留时间（Dwell Time）</code>间接的增加了提高排名的机会。</p></li><li><p>反向链接</p><p> Google排名算法中第二优先级排名因素就是反向链接。<br> 如果你的网站能从权重高的网站获得反向链接，通过这些链接相当于给Google传递了一个信号，即你的内容是值得信赖的，因为有这么多不同的网站都可以为你做担保。<br> 通过这些反向链接（入站链接）可以为你的网站带来更多流量，就有极大的可能获取更高的排名。</p></li><li><p>搜索意图</p><p> 你的网站内容是否匹配用户的搜索意图对Google排名的影响非常重要。<br> 这就意味着如果你想写关于某个主题的内容，一定要匹配搜索意图，如果想为某个搜索关键字排名，则应该制作视频或者信息图表等。<br> 通过匹配搜索意图，可以回答这些问题并创建人们正在寻找的内容。</p></li><li><p>网站加载速度</p><p> 提高网站加载速度不仅可以提高Google搜索引擎的排名，还可以降低网站的跳出率，提高其转换率，提供更高的用户体验。<br> 可以使用Google免费的工具<a href="https://pagespeed.web.dev/">PageSpeed Insights</a>来检查你的网站加载速度，PageSpeed Insights会生成网页的实际性能报告，并能提供如何改进响应网页的建议。<br> 如何提高网站的加载速度？</p></li><li><p>移动友好</p><p> 在GSMA智库近日发布了《2023年全球移动经济报告发展》报告，报告显示截至2022年底，全球独立移动用户数为54亿，其中移动互联网用户数为44亿，且自从Google在2019年提出移动优先的口号，所以网站自适应移动端就称为了关键。<br> 这就意味着Google会优先使用你的网站移动版去索引和排名，如果想快速提升你的网站排名，那么就需要让你的网站变成移动端友好型网站。</p></li><li><p>域名权威</p><p> “域名权威”是 SEO 相关的术语，指网站的域名在某领域相关内容具有权威性，一般域名建站时间越久、反链越多、流量越大、搜索引擎点击数越高、跳出率越低，域名就越权威。<br> 通过专注在自己的领域，创造出更优秀的内容，可以通过关键词分析工具，找到访客感兴趣的主题，围绕这些主题打造高质量内容增加话题的权威性。<br> 如此，Google变为逐渐把你的网站当作该主题领域的权威专家，提高你的网站的域名权威，从而提高网站在搜索引擎的排名</p></li><li><p>关键词优化</p><p> 关键词即用户搜索框输入的内容，它如实的反馈了用户的需求，所以找准关键词，也就意味着锁定了目标用户。<br> 所以你的网站中包含了你的受众群体正在搜索的关键词是非常关键的。</p><p> 如何做网站关键词优化？<br> ·标题：在SEO标题的开始就包含目标关键词<br> ·元描述：写吸引人的描述，然后添加关键词，告诉用户这个页面是做什么的，提高用户的自然搜索点击率<br> ·图片alt文字：可以将关键词添加到alt文本中告诉Google这是什么<br> ·锚文本：Google使用锚文本来查找页面内容，给关键词加上锚文本链接帮助Google识别页面内容<br> ·使用LSI关键词：用户会搜索除主要关键词之外的其他相关词条，这些词条被称LSI（潜在语义索引）关键词，通过在页面上包含这些内容，可以帮助Google找出有关内容。<br> ·避免关键词堆砌：不可不断重复主要关键词，这是一种不好的SEO做法。<br> ·在H2和H3中添加关键词：通过关键词变体来进一步优化内容组织结构<br> ·URL中添加关键词</p></li><li><p>网站结构</p><p> 站内结构决定了网站是否容易被收录，是否方便用户浏览，是否符合蜘蛛的爬取等等。<br> 网站结构是指网站中页面之间的层次关系。从用户角度来讲，能够使用户方便快捷的在网站中浏览内容，不至于迷失。对搜索引擎来说，优化网站结构，可以帮助蜘蛛快速抓取网站内容</p></li><li><p>网站安全</p><p> HTTPS会影响网站的排名，HTTPS保证了您的站点是否在用户的浏览器和Web服务器之间建立了安全连接，它可以加密网站和用户浏览器之间的数据</p></li><li><p>用户体验</p><p>网站的整体的用户体验也是影响Google排名的一个重要因素，但是Google是如何衡量的呢？<br>Google使用了一个名为RankBrain的人工智能程序，该程序结合了其他的排名要素，例如：<br>·自然搜索点击率（CTR）：通过提高网站链接的点击率，可以提高排名<br>·停留时间（Dwell Time）：从搜索结果到你的网站后的停留时间<br>·跳出率：进入网站到离开网站没有任何交互，Google会任务该页面不相关，不会对其进行排名</p></li></ol><p>总结：<br>    以上就是本文的所有内容，希望你能够习惯这篇关于影响Google排名10大因素的文章。</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/110720993">SEO站内优化：网站结构优化</a><br><a href="https://www.zhihu.com/question/351325115">怎么做网站关键词优化？</a><br><a href="https://developers.google.cn/speed/docs/insights/about?hl=zh-CN">PageSpeed Insights</a><br><a href="https://blog.csdn.net/coslay/article/details/43539913">优化网站加载速度的14个技巧</a><br><a href="https://www.wbolt.com/organic-ctr.html">什么是自然搜索点击率（Organic CTR）？</a><br><a href="https://www.wbolt.com/organic-ctr.html">什么是跳出率及如何保持网站较低跳出率</a></p><h2 id="谷歌如何评估网站性能？"><a href="#谷歌如何评估网站性能？" class="headerlink" title="谷歌如何评估网站性能？"></a>谷歌如何评估网站性能？</h2><p>性能度量应用程序（如浏览器开发工具）报告技术度量，例如</p><ul><li>阻塞时间：等待下载开始所花费的时间。</li><li>DNS解析：将主机名解析为IP地址以索引资产的时间。</li><li>连接时间：初始化TCP连接的时间。</li><li>首字节时间（TTFB）：请求和响应第一个字节之间的总时间。</li><li>接受时间：检索整个资产的时间</li><li>DOM加载时间：下载和呈现HTML文档对象模型的时间，分析和修改DOM的脚本可以可靠运行的第一个点。</li><li>页面加载时间：下载页面和所有资产（图像、样式表、脚本等）的时间</li><li>总页面重量：所有资产总大小，通常报告为压缩（下载）和未压缩大小</li><li>DOM元素数：页面上HTML元素的总数，元素越多，页面处理时间越长</li><li>首次内容绘制（FCP）：浏览器第一个元素像素之前所有的时间</li><li>首个有意义慧智（FMP）：主页内容对用户可见之间所花费的时间。</li><li>交互时间（TTI）：页面完全交互并能够可靠响应用户输入所花费的时间。</li><li>首次CPU空间（FCI）：CPU呈现页面并运行所有初始化脚本，等待进一步输入的时间</li><li>CPU使用率：呈现页面和响应用户输入时所需的处理活动</li><li>每秒布局数：浏览器必须重新计算样式和页面布局的速率</li></ul><p>以上这些可以用于确定特定的瓶颈，如服务器负载、CMS缓存、浏览器缓存、下载速度和javascript效率。但无法确定页面提供的用户体验是否良好。<br>如：应用程序可以快速下载并显示，但第一次交互后会变得无响应，因为它正在执行大量未优化javascript代码。</p><h2 id="什么是Core-Web-Vitals"><a href="#什么是Core-Web-Vitals" class="headerlink" title="什么是Core Web Vitals?"></a>什么是Core Web Vitals?</h2><ul><li>最大内容绘制（LCP）：加载性能</li><li>首次输入延迟（FID）：交互性能</li><li>累计布局偏移（CLS）：视觉稳定性</li></ul><h2 id="最大内容绘制-LCP"><a href="#最大内容绘制-LCP" class="headerlink" title="最大内容绘制 LCP"></a>最大内容绘制 LCP</h2><p>本质上代表的是可用内容在页面上呈现的速度有多快？</p><p>LCP分数低的常见原因：</p><ol><li>在客户端上生成的页面内容，而不是在服务器上生成的内容需要更长的时间，LCP客户端渲染（CSR） &gt; 服务端渲染（SSR），顺便提一下SSR更有利于首屏渲染，CSR更利于页面交互</li><li>服务端限制，服务端响应慢</li><li>HTML中国呢引用了阻塞CSS和javascript，导致延迟页面加载</li><li>大型图像或视频占用网络带宽，导致需要更长的渲染时间</li></ol><p>如何提高LCP分数：</p><ol><li>升级服务器和/或主机服务。确保下载速度即使在高使用率时也保持快速。</li><li>激活服务器压缩和HTTP/2+。没有理由不这样做！</li><li>减少服务器工作。删除未使用的代码和CMS插件，然后启用有效缓存。</li><li>确保浏览器可以有效缓存文件。在HTTP头中设置适当的Expires、Last Modified和/或ETag哈希，以便不再请求文件。</li><li>使用内容交付网络（CDN）在地理位置更靠近用户的服务器上拆分负载和托管资源。</li><li>优化你的图像。将它们减少到最小尺寸，并使用适当的格式来最小化文件大小。确保尽早请求最大内容块中的任何图像；预加载可能会有所帮助。</li><li>通过添加loading=”lazy”属性延迟加载图像。添加宽度和高度属性，以确保在图像完成加载之前在页面上保留适当的空间。</li><li>最小化第三方请求，并将移动资产考虑到主域以避免无关DNS查找。</li><li>最小化请求文件的数量和大小，尤其是在HTML的顶部。</li><li>确保仅加载所需的web字体。切换到web安全字体以获得最佳性能。</li><li>删除未使用的JavaScript和CSS文件。</li><li>连接并缩小JavaScript和CSS文件。</li><li>避免CSS@import语句-它们是串联的渲染块和加载样式。</li><li>避免Base64编码-它会增加文件大小并需要额外的处理。</li><li>考虑关键的联机CSS。在页面顶部的&lt;link&gt;块中嵌入基本的“折叠上方”CSS，然后异步加载更多样式表。</li><li>稍后使用异步、延迟或ES模块JavaScript运行脚本。在服务工作者中执行长时间运行的JavaScript进程。</li></ol><h2 id="首次输入延迟-FID"><a href="#首次输入延迟-FID" class="headerlink" title="首次输入延迟 FID"></a>首次输入延迟 FID</h2><p>本质上代表网页对用户的输入、点击和滚动等操作的响应速度有多快？</p><p>FID分数低的常见原因：</p><p>FID和TBT分数低通常是由占用处理器的客户端代码引起的，例如：</p><ol><li>大量的呈现阻塞CSS和JavaScript，这会在下载和解析代码时停止页面加载</li><li>加载页面时立即运行的大型流程密集型脚本</li><li>长时间运行或优化较差的JavaScript任务</li></ol><p>默认情况下，浏览器运行在单个线程上，一次只能处理一个任务。如果一个JavaScript函数需要一秒钟的时间来执行，那么所有其他渲染过程都会在这一秒钟内被阻塞。页面无法响应用户输入、更新DOM、显示动画等。甚至GIF动画也可以在旧浏览器中被阻塞。</p><p>如何提高FID分数：</p><ol><li>在服务器上生成并缓存尽可能多的静态HTML内容。尽量不要依赖客户端JavaScript框架为每个人呈现相同的HTML。</li><li>确保浏览器可以有效缓存文件。在HTTP头中设置适当的Expires、Last Modified和/或ETag哈希，以便不再请求文件。</li><li>采用渐进式增强技术，因此在JavaScript运行之前，该界面可以在HTML和CSS中使用。</li><li>删除未使用的JavaScript和CSS文件。</li><li>连接并缩小JavaScript和CSS文件。</li><li>避免过度使用昂贵的CSS属性，如框阴影和过滤器。</li><li>稍后使用异步、延迟或ES模块JavaScript运行脚本。</li><li>最小化对分析、社交媒体小部件、论坛等的第三方JavaScript请求。这些请求可以快速加载到数兆字节的JavaScript。</li><li>根据需要延迟加载JavaScript组件，例如聊天窗口小部件、视频播放器等。</li><li>延迟加载不太重要的脚本，如分析、广告和社交媒体工具。</li><li>将长时间运行的JavaScript任务分解为一系列较小的作业，这些作业在短时间的requestIdleCallback、setTimeout或requestAnimationFrame延迟后执行。</li><li>考虑在Web工作者中使用一个后台线程来执行长时间运行的JavaScript进程。</li></ol><h2 id="累计布局偏移-CLS"><a href="#累计布局偏移-CLS" class="headerlink" title="累计布局偏移 CLS"></a>累计布局偏移 CLS</h2><p>本质上代表页面内容是否会意外移动或者跳转尤其是在初始加载期间</p><p>通过以下指标相乘计算累计布局偏移CLS：</p><ul><li>影响分数：视口中国呢所有不稳定元素的总面积（%）</li><li>距离分数：不稳定元素移动的最大距离（px），移动像素/视口大小</li></ul><p>手动测测CLS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cls = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onLayoutShiftEntry</span>(<span class="params">entry: any</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry.<span class="property">hadRecentInput</span>) &#123;</span><br><span class="line">    cls += entry.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entries.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="title function_">onLayoutShiftEntry</span>(entry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">observe</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;layout-shift&quot;</span>, <span class="attr">buffered</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主动触发</span></span><br><span class="line">observer.<span class="title function_">takeRecords</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> <span class="title function_">onLayoutShiftEntry</span>(entry));</span><br></pre></td></tr></table></figure><p>累积布局偏移分数低的常见原因：</p><p>CLS分数低通常是由于加载页面资产和动态或未调整大小的DOM元素速度慢造成的：</p><ol><li>页面上的空间不用于图像、iFrame、广告等。</li><li>内容被动态地注入DOM，通常是在网络请求广告、社交媒体小部件等之后。</li><li>Web字体加载会导致不可见文本（FOIT）或未设置样式文本（FOUT）的明显闪烁。</li></ol><p>如何提高累积布局偏移分数：<br>客户端审计可以发现问题，但通常是确保在内容下载之前为内容预留空间。为最大内容绘制建议的服务器优化提示将有一些好处，但可能会有进一步的改进：</p><ol><li>在HTML的&lt;img&gt;和&lt;iframe&gt;标记中添加宽度和高度属性，或者使用新的CSS纵横比属性确保在下载资产之前在页面上保留适当的空间。</li><li>为封装第三方内容（如广告和小部件）的容器元素设置适当的尺寸。</li><li>确保尽早请求显示在页面顶部的图像和其他资产-预加载可能会有所帮助。</li><li>尽量减少Web字体的使用，并考虑在可能的时候使用常用的OS字体。</li><li>加载web字体并将CSS字体显示设置为可选或交换。确保使用大小相似的回退字体，以最小化布局偏移。</li><li>避免向页面顶部插入元素，除非页面响应用户操作（如单击）。</li><li>确保在输入触发器的500毫秒内完成用户交互。</li><li>使用CSS变换和不透明度可以获得更高效的动画，而不会导致重新布局。</li><li>考虑关键的联机CSS。在页面顶部的&lt;link&gt;块中嵌入基本的“折叠上方”CSS，然后异步加载其他样式表。</li><li>必要时，考虑包容，一种新的CSS特性，允许您识别页面的孤立子树。浏览器可以通过渲染或不渲染特定的DOM内容块来优化处理。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么要做Core-Web-Vitals&quot;&gt;&lt;a href=&quot;#为什么要做Core-Web-Vitals&quot; class=&quot;headerlink&quot; title=&quot;为什么要做Core Web Vitals?&quot;&gt;&lt;/a&gt;为什么要做Core Web Vitals?&lt;/h2&gt;&lt;p&gt;网站响应速度越快，在谷歌中的排名越高的机会就越大&lt;/p&gt;</summary>
    
    
    
    
    <category term="网站" scheme="https://github.com/foolishmax/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>代码的艺术</title>
    <link href="https://github.com/foolishmax/2023/06/16/%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>https://github.com/foolishmax/2023/06/16/%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2023-06-16T03:14:28.000Z</published>
    <updated>2023-06-20T03:11:12.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一流代码的特性"><a href="#一流代码的特性" class="headerlink" title="一流代码的特性"></a>一流代码的特性</h2><ul><li><p>正确和性能</p><ul><li>鲁棒性</li><li>高效</li></ul></li><li><p>可读性和可维护</p><ul><li>简洁</li><li>简短</li><li>可测试</li></ul></li><li><p>共享和重用</p><ul><li>共享</li><li>可移植</li></ul></li><li><p>运维和运营</p><ul><li>可监控/可观测</li><li>可运维</li><li>可扩展</li></ul></li></ul><h2 id="好的代码从哪里来？"><a href="#好的代码从哪里来？" class="headerlink" title="好的代码从哪里来？"></a>好的代码从哪里来？</h2><p>编码前：需求分析，系统设计<br>编码中：编写代码，单元测试<br>编码后：集成测试、上线、持续运营/迭代改进</p><p>一个好的系统/产品是以上过程持续迭代的结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一流代码的特性&quot;&gt;&lt;a href=&quot;#一流代码的特性&quot; class=&quot;headerlink&quot; title=&quot;一流代码的特性&quot;&gt;&lt;/a&gt;一流代码的特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正确和性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鲁棒性&lt;/li&gt;
&lt;li&gt;高效&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="代码" scheme="https://github.com/foolishmax/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>mongo数据库</title>
    <link href="https://github.com/foolishmax/2023/05/31/mongo%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://github.com/foolishmax/2023/05/31/mongo%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2023-05-31T10:21:27.000Z</published>
    <updated>2023-06-09T08:57:03.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启-MongoDB-服务器"><a href="#开启-MongoDB-服务器" class="headerlink" title="开启 MongoDB 服务器"></a>开启 MongoDB 服务器</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  mongod --dbpath /usr/local/var/mongodb</span><br></pre></td></tr></table></figure><h2 id="连接-MongoDB-服务器"><a href="#连接-MongoDB-服务器" class="headerlink" title="连接 MongoDB 服务器"></a>连接 MongoDB 服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><h2 id="退出-MongoDB-服务器"><a href="#退出-MongoDB-服务器" class="headerlink" title="退出 MongoDB 服务器"></a>退出 MongoDB 服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>show dbs</p><ul><li>查看显示所有数据库</li></ul></li><li><p>db</p><ul><li>产看当前操作的数据库</li></ul></li><li><p>use 数据库名称</p><ul><li>切换到指定的数据库（没有会新建）</li></ul></li><li><p>show collections</p><ul><li>显示集合</li></ul></li><li><p>db.cats.find()</p><ul><li>查看并显示内容</li></ul></li><li><p><a href="https://github.com/mongodb/node-mongodb-native">node 中使用 mongodb</a></p></li></ul><h2 id="使用第三方-mongoose-来操作-MongoDB-数据库"><a href="#使用第三方-mongoose-来操作-MongoDB-数据库" class="headerlink" title="使用第三方 mongoose 来操作 MongoDB 数据库"></a>使用第三方 mongoose 来操作 MongoDB 数据库</h2><ul><li><p><a href="https://mongoosejs.com/">mongoose</a></p></li><li><p>安装<br><code>npm install mongoose</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//引入包</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">//连接数据库（数据库不需要存在，在插入第一条语句，就会自动创建）</span><br><span class="line"></span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost:27017/test&#x27;, &#123;useNewUrlParser: true&#125;);</span><br><span class="line"></span><br><span class="line">//设计数据库集合结构</span><br><span class="line">//创建一个Cat表</span><br><span class="line">const Cat = mongoose.model(&#x27;Cat&#x27;, &#123; name: String &#125;);</span><br><span class="line"></span><br><span class="line">//实例化一个Cat，实例对象为kitty</span><br><span class="line">const kitty = new Cat(&#123; name: &#x27;Zildjian&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">//持久化保存kitty实例</span><br><span class="line">kitty.save().then(() =&gt; console.log(&#x27;meow&#x27;));</span><br></pre></td></tr></table></figure><ul><li>mongoose 的基本使用</li></ul><ul><li>生成模型构造函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">var Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">//设计集合结构（表结构）schema---&gt;提要，纲要</span><br><span class="line">//字段名称就是表结构中的属性名称</span><br><span class="line">//值类型</span><br><span class="line">//约束的目的：为了保证数的完整性</span><br><span class="line">var blogSchema = new Schema(&#123;</span><br><span class="line">  title:  String,</span><br><span class="line">  author: String,</span><br><span class="line">  body:   String,</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    typte: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">  comments: [&#123; body: String, date: Date &#125;],</span><br><span class="line">  date: &#123; type: Date, default: Date.now &#125;,</span><br><span class="line">  hidden: Boolean,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    votes: Number,</span><br><span class="line">    favs:  Number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//将文档结构发布为模型</span><br><span class="line">// 参数一：大写单数表示数据库名称</span><br><span class="line">//         mongoose会自动将大写单数改为小写复数</span><br><span class="line">// 参数二： 架构 Schema</span><br><span class="line">// 返回值： 模型构造函数</span><br><span class="line">var User = mongoose.model(&#x27;User&#x27;, blogSchema)</span><br><span class="line">// module.exports = mongoose.model(&#x27;Student&#x27;, blogSchema)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 生成添加一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var admin = new User(&#123;</span><br><span class="line">    username: &#x27;admin&#x27;,</span><br><span class="line">    password: &#x27;1245435&#x27;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line">admin.save(function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;保存失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;保存成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 查询数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//查询所有数据</span><br><span class="line">User.find(function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">         console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//promise 查询所有</span><br><span class="line">User.find()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//按条件查询</span><br><span class="line"> User.find(&#123;</span><br><span class="line">    username: &#x27;xx&#x27;</span><br><span class="line"> &#125;, function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//查找符合条件的第一个（可以写多个条件）,没有条件的话，为第一条数据</span><br><span class="line"> User.findOne(&#123;</span><br><span class="line">    username: &#x27;xx&#x27;</span><br><span class="line"> &#125;, function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 按条件更新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//Model.update(conditions, doc, [options], [callback])</span><br><span class="line">//Model.findOneAndUpdate([conditions], [update], [options], [callback])</span><br><span class="line">User.findByIdAndUpdate(&#x27;5a7d8f2sd78ag6g&#x27;,&#123;</span><br><span class="line">    username: &#x27;zs&#x27;</span><br><span class="line">&#125;, function(err, ret)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">       console.log(&#x27;更新失败&#x27;)</span><br><span class="line">    else &#123;</span><br><span class="line">       console.log(&#x27;更新成功&#x27;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.remove(&#123;</span><br><span class="line">    username: &#x27;zs&#x27;</span><br><span class="line">&#125;, function(err, ret)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">       console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    else &#123;</span><br><span class="line">       console.log(ret)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="补充（node-使用-mysql）"><a href="#补充（node-使用-mysql）" class="headerlink" title="补充（node 使用 mysql）"></a>补充（node 使用 mysql）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//引包</span><br><span class="line">var mysql      = require(&#x27;mysql&#x27;);</span><br><span class="line">//创建连接</span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : &#x27;localhost&#x27;,</span><br><span class="line">  user     : &#x27;me&#x27;,</span><br><span class="line">  password : &#x27;secret&#x27;,</span><br><span class="line">  database : &#x27;my_db&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> //连接数据库</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"> //执行数据操作,可以直接使用 SQL 语句</span><br><span class="line"> //查找</span><br><span class="line">connection.query(&#x27;SELECT * FROM `users`&#x27;, function (error, results, fields) &#123;</span><br><span class="line">  if (error) throw error;</span><br><span class="line">  console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加</span><br><span class="line"> connection.query(&#x27;INSERT INTO users VALUES(NULL, &quot;admin&quot;:&quot;123&quot;)&#x27;, function (error, results, fields) &#123;</span><br><span class="line">   if (error) throw error;</span><br><span class="line">   console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line"> &#125;);</span><br><span class="line"> //关闭数据库</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h2><ol><li>安装 nodejs</li><li>安装 mongod</li><li>安装 redis<br>3.1 redis-server 启动 redis<br>3.2 ps axu | grep redis 查看 redis 服务进程</li><li>安装 nginx<br>4.1 nginx -s reopen // 重新指定日志打印的文件<br>4.2 nginx - t //检测配置文件是否有语法错误<br>4.3 nginx -s reload // 重新加载配置文件</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;开启-MongoDB-服务器&quot;&gt;&lt;a href=&quot;#开启-MongoDB-服务器&quot; class=&quot;headerlink&quot; title=&quot;开启 MongoDB 服务器&quot;&gt;&lt;/a&gt;开启 MongoDB 服务器&lt;/h2&gt;</summary>
    
    
    
    <category term="node" scheme="https://github.com/foolishmax/categories/node/"/>
    
    
    <category term="node" scheme="https://github.com/foolishmax/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>标准项目流程</title>
    <link href="https://github.com/foolishmax/2023/05/29/%E6%A0%87%E5%87%86%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/"/>
    <id>https://github.com/foolishmax/2023/05/29/%E6%A0%87%E5%87%86%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/</id>
    <published>2023-05-29T06:30:18.000Z</published>
    <updated>2023-05-31T09:47:39.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目开发三大要素"><a href="#项目开发三大要素" class="headerlink" title="项目开发三大要素"></a>项目开发三大要素</h2><span id="more"></span><ul><li><p>工作流程（15 个流程）</p><ul><li>需求分析： PD、PM、用户</li><li>PRD 评审： 产品、交互、前端、后端、测试</li><li>交互/UI（稿）评审： 产品、交互、UI、前端、后端、测试</li><li>技术方案评审： 前端、后端、测试</li><li>接口设计评审： 前端、后端</li><li>代码开发： 前端、后端</li><li>前后端联调： 前端、后端、测试</li><li>冒烟用例： 前端、后端</li><li>提测：前端、后端</li><li>测试：测试</li><li>预发验收：用户、PD</li><li>发布上线/验证：用户、PD</li><li>观察用户数据：PM、后端、测试</li><li>复盘：ALL</li><li>敏捷迭代：下一轮循环</li></ul></li><li><p>人员</p><ul><li>用户（C 端用户、B 端用户）</li><li>产品(PD)/项目经理(PM)</li><li>UI 设计师</li><li>交互设计师（UE）</li><li>前端开发</li><li>后端开发</li><li>测试</li></ul></li><li><p>文档</p><ul><li>产品需求文档（PRD-product requirement document）</li><li>交互稿</li><li>UI 稿</li><li>技术方案</li><li>接口文档</li><li>冒烟测试用例</li><li>测试用例</li><li>发布日志</li><li>上线报告</li><li>复盘文档</li></ul></li></ul><h2 id="PRD-包含哪些部分（五部分）？"><a href="#PRD-包含哪些部分（五部分）？" class="headerlink" title="PRD 包含哪些部分（五部分）？"></a>PRD 包含哪些部分（五部分）？</h2><ul><li>需求背景（业务价值）</li><li>需求简介（列表）</li><li>业务架构（产品结构、业务逻辑）</li><li>产品原型（全局说明）</li><li>非功能性需求</li></ul><p>考虑点：</p><ol><li>投入产出比 ROI（return on inverstment）</li><li>产品效果 PV、UV</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>可控性</li><li>稳定性</li><li>适用性</li><li>易用性</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;项目开发三大要素&quot;&gt;&lt;a href=&quot;#项目开发三大要素&quot; class=&quot;headerlink&quot; title=&quot;项目开发三大要素&quot;&gt;&lt;/a&gt;项目开发三大要素&lt;/h2&gt;</summary>
    
    
    
    <category term="项目" scheme="https://github.com/foolishmax/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://github.com/foolishmax/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>脚手架开发</title>
    <link href="https://github.com/foolishmax/2023/04/04/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/foolishmax/2023/04/04/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/</id>
    <published>2023-04-04T07:15:25.000Z</published>
    <updated>2023-05-31T09:48:09.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h2><span id="more"></span><p>开发脚手架的核心目标：提升前端研发效能</p><p>内容：</p><ul><li>创建项目+通用代码<ul><li>埋点</li><li>http 请求</li><li>工具方法</li><li>组件库</li></ul></li><li>git 操作<ul><li>创建仓库</li><li>代码冲突</li><li>远程代码同步</li><li>创建版本</li><li>发布打 tag</li></ul></li><li>构建和发布上线<ul><li>依赖安装和构建</li><li>资源上传 cdn</li><li>域名绑定</li><li>测试/正式服务器</li></ul></li></ul><p>脚手架核心价值将研发过程：</p><ul><li>自动化：项目重复代码拷贝/git 操作/发布上线操作</li><li>标准化：项目创建/git flow/发布流程/回滚流程</li><li>数据化：研发过程系统化、数据化，使得研发过程可量化</li></ul><p>自动化构建工具：jenkins、trvis 通常需要 git hooks 触发，在服务端运行需要定制化操作，整个过程比较复杂</p><p>脚手架执行原理：<br>以 vue-cli 为例子</p><ol><li>在终端输入 vue create xxx</li><li>终端解析出 vue 命令</li><li>终端在环境变量中找到(相当于 which vue，找不到提示 commond not found) vue 命令</li><li>根据 node/bin/目录下 vue 命令（软连接）连接到 node 全局依赖 lib/node_modules 包下的 vue.js</li><li>终端利用 node(/usr/bin/env node) 执行 vue.js</li><li>vue.js 解析 command/options</li><li>vue.js 执行 command</li><li>执行完毕，退出</li></ol><p>疑问：</p><ol><li>为什么全局安装@vue/cli 会添加 vue 命令？<br>答： 在 package.json 中的 {bin: {‘vue’: ‘bin/vue.js’}}配置</li><li>全局安装 npm install -g @vue/cli 时发生了什么？<br>答：首先会把@vue/cli 这个项目安装在 node 的 lib/node_modules 目录下，然后检查项目中 package 中是否存在 bin 属性，如果存在的话会在 node 的 bin 目录下创建一个对应的软连接</li><li>执行 vue 命令发生了什么？<br>答：操作系统会找到 which vue 的目录路径并执行这个路径的文件（先去环境变量中找对应命令，拿到目录执行）</li><li>怎么直接执行一个 js 文件，不通过 node？<br>答：在文件顶部写 #！/usr/bin/env node,相当于告诉操作系统去环境变量中找 node 命令去执行这个文件；/usr/bin/env node xxx.js = xxx.js(顶部添加指令) = node test.js</li></ol><p>创建软连接命令：</p><ul><li>ln -s /Users/foo/xxx.js vue</li></ul><p>脚手架开发难点：</p><ol><li>分包：将复杂的系统拆分成若干个模块</li><li>命令注册：vue create、vue add 等</li><li>参数解析 vue command options(全称、简称) params,帮助信息：Usage： vue &lt;’xxx’&gt; [‘options’]; Options: xxx</li><li>命令行交互（让用户选择或者输入）</li><li>日志打印</li><li>命令行文字变色</li><li>网络通信：http/websocket</li><li>文件处理</li></ol><p>从应用角度看如何开发一个脚手架：</p><ol><li>开发 npm 项目，项目中包含一个 bin/vue.js 文件，并将项目发布到 npm</li><li>将 npm 项目安装到 node 的 lib/node_modules 中</li><li>在 node 的 bin 目录下配置 vue 软连接到 lib/node_modules/@vue/cli/bin/vue.js</li><li>执行 vue 的命令时就可以找到 vue.js 执行</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;脚手架开发&quot;&gt;&lt;a href=&quot;#脚手架开发&quot; class=&quot;headerlink&quot; title=&quot;脚手架开发&quot;&gt;&lt;/a&gt;脚手架开发&lt;/h2&gt;</summary>
    
    
    
    <category term="脚手架" scheme="https://github.com/foolishmax/categories/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
    
    <category term="脚手架" scheme="https://github.com/foolishmax/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="https://github.com/foolishmax/2023/03/31/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>https://github.com/foolishmax/2023/03/31/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2023-03-31T08:45:36.000Z</published>
    <updated>2023-05-31T09:48:19.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><span id="more"></span><blockquote><p>把复杂的代码按照功能的不同划分成不同的模块单独维护，提高开发效率，方便后期维护。<br>服务端规范主要是 CommonJS，例如 nodejs。<br>客户端主要有 AMD（异步模块定义，推崇依赖前置 requirejs）、CMD（通用模块定义，推崇依赖就近，seajs），但是随着 ES6 的普及，前端的这些第三方的模块化实现已经在渐渐的淘汰</p></blockquote><p>模块化的演进：</p><ol><li>基于文件划分模块的方式</li><li>每个模块暴露一个全局对象，所有模块成员都挂载在这个对象中，例如 jQuery 库把它的 api 都放在了 window.$下面，但zepto也是在window.$下容易命名冲突</li><li>使用 IIFE 为模块提供私有空间</li><li>利用 IIFE 的参数作为依赖声明使用</li><li>模块化规范（AMD、CMD、CommonJS、ESM 等）</li></ol><h2 id="CommonJS-解析"><a href="#CommonJS-解析" class="headerlink" title="CommonJS 解析"></a>CommonJS 解析</h2><blockquote><p>CommonJS 的核心思想是通过 require 方法来同步加载依赖的其他模块，通过 module.export 来导出需要暴露的接口</p></blockquote><p>require 内部逻辑：<br>例如：require(X)</p><ol><li>如果 X 是内置模块（比如 require(‘http’)）<br>a. 返回该模块<br>b. 不再继续执行</li><li>如果 X 以 ‘./‘或者 ‘../‘开头<br>a. 根据 X 所在父模块，确定 X 的绝对路径<br>b. 将 X 当作文件，依次查找以下文件（.x ｜.x.js | .x.json | .x.node），只要一个存在就返回该文件，不再继续执行<br>c. 把 X 当作目录，依次查找以下文件（.x/package.json | .x/index.js | .x/index.json | .x/index.node），只要一个存在就返回并不再执行</li><li>如果 X 不带路径<br>a. 根据 X 所在父模块，确定 X 可能的安装目录，依次往上级目录查找，把 X 当成文件名或目录名加载</li><li>找不到抛错’not found’</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前端模块化&quot;&gt;&lt;a href=&quot;#前端模块化&quot; class=&quot;headerlink&quot; title=&quot;前端模块化&quot;&gt;&lt;/a&gt;前端模块化&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>git分布式版本控制系统</title>
    <link href="https://github.com/foolishmax/2023/03/28/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://github.com/foolishmax/2023/03/28/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-03-28T04:36:25.000Z</published>
    <updated>2023-03-29T06:46:48.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-git-commit-后，如何修改-commit-的信息？"><a href="#使用-git-commit-后，如何修改-commit-的信息？" class="headerlink" title="使用 git commit 后，如何修改 commit 的信息？"></a>使用 git commit 后，如何修改 commit 的信息？</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="gitlab-CI-CD-流程"><a href="#gitlab-CI-CD-流程" class="headerlink" title="gitlab CI/CD 流程"></a>gitlab CI/CD 流程</h2><p>生产环境<br>1、推送代码-&gt;编译-&gt;生成的 jar 包发布到私服-&gt;打包为 docker 镜像-&gt;推送到 Harbor 镜像仓库（成功，微信通知，c 结束返回成功|失败，微信通知，ci 结束返回失败）<br>2、运维人员 触发部署到 k8s 集群-&gt;健康检查（成功，微信通知，c 结束返回成功|失败，微信通知，ci 结束返回失败）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用-git-commit-后，如何修改-commit-的信息？&quot;&gt;&lt;a href=&quot;#使用-git-commit-后，如何修改-commit-的信息？&quot; class=&quot;headerlink&quot; title=&quot;使用 git commit 后，如何修改 commit 的信息？&quot;&gt;&lt;/a&gt;使用 git commit 后，如何修改 commit 的信息？&lt;/h2&gt;</summary>
    
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/categories/typescript/"/>
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>vue3核心技术揭秘</title>
    <link href="https://github.com/foolishmax/2023/03/24/vue3%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98/"/>
    <id>https://github.com/foolishmax/2023/03/24/vue3%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98/</id>
    <published>2023-03-24T06:52:21.000Z</published>
    <updated>2023-04-24T06:53:44.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-的特点（优点）"><a href="#vue-的特点（优点）" class="headerlink" title="vue 的特点（优点）"></a>vue 的特点（优点）</h2><span id="more"></span><ul><li>vue 关注视图层，用数据操作的方式代替了 dom 操作</li><li>vue 通过响应式的数据绑定实现了数据和视图之间的更新交互</li><li>vue 通过组件化开发让工程结构更加明确，更易于维护</li><li>vue 通过虚拟 DOM，优化了 DOM 操作，实现了性能提高</li><li>vue 拥有自己的 vue-cli/vite 脚手架工具，对良好的工程化性能</li></ul><h2 id="vue3-生命周期"><a href="#vue3-生命周期" class="headerlink" title="vue3 生命周期"></a>vue3 生命周期</h2><ul><li>onBeforMount -&gt; vue 实例挂载之前执行</li><li>onMounted -&gt; vue 实例挂载完成执行</li><li>onBeforeUpdate -&gt; 组件内数据发生变化之前执行</li><li>onUpdated -&gt; 组件内数据发生变化之后执行</li><li>onBeforeUnmount -&gt; 组件销毁之前</li><li>onUnmounted -&gt; 组件销毁之后</li><li>onActivated -&gt; keep-alive 组件激活时执行</li><li>onDeactivated -&gt; keep-alive 组件销毁时执行</li><li>onErrorCaptured -&gt; 捕获错误</li><li>onRenderTracked -&gt; dev 组件更新时跟踪所有变量和方法</li><li>onRenderTriggered -&gt; dev 触发渲染时调用，返回变化新旧值</li></ul><h2 id="vue3-相比于-vue2-有哪些不同？"><a href="#vue3-相比于-vue2-有哪些不同？" class="headerlink" title="vue3 相比于 vue2 有哪些不同？"></a>vue3 相比于 vue2 有哪些不同？</h2><ul><li>组合式（composition）api<ul><li>vue2 是选项式（option）api</li></ul></li><li>响应式原理<ul><li>vue2 响应式原理基础是 Object.defineProperty<ul><li>深层嵌套递归数据响应式</li><li>缺点：无法监听对象或数据新增、删除的元素</li><li>解决方案：针对数组原型方法 push、pop、shift、unshift、splice、sort 等进行 hack 处理，提供 Vue.set 监听对象/数组新增属性</li><li>tips：Object.defineProperty 可以监听数组已有元素，vue2 没有提供是因为性能问题</li></ul></li><li>vue3 是 Proxy（配合 Reflect）<ul><li>兼容性：放弃了 IE11 以下</li><li>动态属性增删都可以拦截</li><li>使用 Reflect 可以修正 Proxy 的 this 指向问题</li><li>vue3 使用 Proxy 并不能监听对象内部深层次的属性变化，处理方式是在 getter 中递归响应式，只有真正访问内部属性时才会变成响应式，节约性能</li></ul></li></ul></li><li>生命周期的变化<ul><li>vue3 需要添加 on ，使用上需要先引入，vue 可以直接调用</li><li>移除了 beforeCrete、created</li></ul></li><li>多根节点<ul><li>vue3 支持多根节点</li></ul></li><li>异步组件<ul><li>vue3 提供 Suspense 组件，通过 fallback 插槽提供异步组件渲染兜底的内容，如 loading 等</li></ul></li><li>Teleport<ul><li>vue3 提供 Teleport 组件可将部分组件移动到指定 dom 节点位置，如 Dialog 组件</li></ul></li><li>css 变量<ul><li>支持在 style 标签中使用 v-bind,给 css 绑定 js 变量</li></ul></li><li>代码打包体积<ul><li>vue3 的 api 可以被 tree-shaking，使用了 es6module，tree-shaking 依赖于 es6 模块的静态结构特性</li></ul></li><li>虚拟 dom<ul><li>vue3 静态提升：保存静态节点（pathchflag 为 -1）直接复用，添加更新类型标记 pathchflag（为 1 是动态绑定的元素）</li><li>事件缓存，可以在第一次渲染后缓存事件，vue2 每次渲染都会传递一个新函数</li></ul></li><li>diff 算法<ul><li>vue2 双端比较</li><li>vue3 最长递归子序列</li></ul></li></ul><h2 id="defineProperty-和-Proxy-的区别？"><a href="#defineProperty-和-Proxy-的区别？" class="headerlink" title="defineProperty 和 Proxy 的区别？"></a>defineProperty 和 Proxy 的区别？</h2><ul><li><p>Object.defineProperty 是 Es5 的方法，Proxy 是 Es6 的方法</p></li><li><p>defineProperty 是劫持对象属性，Proxy 是代理整个对象；</p></li><li><p>defineProperty 不能监听(重置可以)到对象<strong>新增</strong>属性和<strong>修改</strong>新增属性的变化，Proxy 可以</p></li><li><p>defineProperty 不能监听根据自身数组下标<strong>修改</strong>数组元素的变化（所以 vue2 提供了 Vue.$set和Vue.$delete）</p></li><li><p>defineProperty 不兼容 IE8，Proxy 不兼容 IE11</p></li><li><p>defineProperty 不支持 Map、Set 等数据结构</p></li><li><p>defineProperty 只能监听 get、set，而 Proxy 可以拦截多达 13 种方法；</p></li><li><p>Reflect 是为了在执行对应的拦截操作的方法时能传递正确的 this 上下文</p><ul><li>Proxy handler 中的 receiver 指向<ul><li>正常情况下，<code>receiver</code>指向的是<code>当前的代理对象</code></li><li>特殊情况下，<code>receiver</code>指向引发<code>当前操作的对象</code>（obj）<ul><li>Object.setPrototypeOf(obj, proxy)，访问 obj.name 时如果没有 name 就会根据原型链查找</li></ul></li></ul></li></ul></li><li><p>Proxy 兼容性相对较差，且无法通过 pollyfill 解决；所以 Vue3 不支持 IE11 以下；</p></li><li><p>Proxy 返回的是一个新对象</p></li><li><p>Proxy 也是不能对对象进行深层次响应的，实现动态递归响应式，只有在使用（get）的时候才会做响应式处理</p></li></ul><h2 id="vue3-响应式原理"><a href="#vue3-响应式原理" class="headerlink" title="vue3 响应式原理"></a>vue3 响应式原理</h2><ul><li>activeEffect 解决匿名函数问题</li><li>WeakMap、Map、Set 存储对象属性的相关副作用函数</li><li>track()实现依赖收集、层级依赖追踪、依赖清理（解决嵌套副作用）</li><li>trigger()当某个依赖值发生变化时，通过执行副作用函数获得与依赖变化后对应的最新值</li></ul><h2 id="v-if-和-v-for-的优先级？"><a href="#v-if-和-v-for-的优先级？" class="headerlink" title="v-if 和 v-for 的优先级？"></a>v-if 和 v-for 的优先级？</h2><p>v-if 的优先级高于 v-for</p><h2 id="ref-和-reactive-定义响应式数据"><a href="#ref-和-reactive-定义响应式数据" class="headerlink" title="ref 和 reactive 定义响应式数据"></a>ref 和 reactive 定义响应式数据</h2><p>ref 原理</p><ol><li>ref 内部封装一个 RefImpl 类，并设置 get/set，当通过.value 调用就会触发劫持，从而实现响应式</li><li>当接受的对象或数组时，内部仍然是 reactive 去实现的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码路径：packages/reactivity/src/ref.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  private <span class="attr">_value</span>: T</span><br><span class="line">  private <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  public dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  public readonly __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, public readonly __v_isShallow: boolean</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = __v_isShallow ? value : <span class="title function_">toRaw</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    newVal = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>reactive 原理</p><ol><li>使用 Proxy 代理传入对象实现响应式</li><li>Proxy 拦截数据的更新和获取操作，使用 Reflect 完成原本的操作（get/set）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target,</span></span><br><span class="line"><span class="params">  isReadonly,</span></span><br><span class="line"><span class="params">  baseHandlers,</span></span><br><span class="line"><span class="params">  collectionHandlers,</span></span><br><span class="line"><span class="params">  proxyMap</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!shared.<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;<span class="built_in">String</span>(target)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target is already a Proxy, return it.</span></span><br><span class="line">  <span class="comment">// exception: calling readonly() on a reactive object</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[<span class="string">&#x27;__v_raw&#x27;</span> <span class="comment">/* RAW */</span>] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[<span class="string">&#x27;__v_isReactive&#x27;</span> <span class="comment">/* IS_REACTIVE */</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target already has corresponding Proxy</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// only specific value types can be observed.</span></span><br><span class="line">  <span class="keyword">const</span> targetType = <span class="title function_">getTargetType</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="number">0</span> <span class="comment">/* INVALID */</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="number">2</span> <span class="comment">/* COLLECTION */</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  );</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy);</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue3-中-watch-和-watchEffect-有什么区别？"><a href="#vue3-中-watch-和-watchEffect-有什么区别？" class="headerlink" title="vue3 中 watch 和 watchEffect 有什么区别？"></a>vue3 中 watch 和 watchEffect 有什么区别？</h2><ul><li><p>watch 显式指定依赖源，依赖源变化时执行回调函数</p><ul><li>第一个参数为不同形式的数据源<ul><li>单个 ref</li><li>计算属性</li><li>getter 函数（要有返回值）</li><li>响应式对象(默认时深层遍历)，不能直接侦听响应式对象的属性，应该用一个返回该属性的 getter 函数</li><li>以上类型的值组成的数组</li></ul></li><li>第二个参数是数据发生变化时执行的回调函数<ul><li>接收三个参数：新值、旧值、清理副作用的回调函数（例如清除无效的副作用，等待中的异步请求）</li></ul></li><li>第三个参数是一个可选对象<ul><li>immediate：在侦听器创建时立即触发回调</li><li>deep：深度遍历</li><li>flush：回调的触发时机<ul><li>pre：默认，dom 更新前调用</li><li>post：dom 更新后调用</li><li>sync：sync 同步调用</li></ul></li><li>onTrack/onTrigger: 用于调试的钩子，在依赖收集和回调函数触发时被调用</li></ul></li><li>其他：<ul><li>watch 的返回值是一个用来停止该副作用的函数</li><li>使用同步语句创建的侦听器，会自动绑定到宿主组件实例实例上，并在宿主组件卸载时自动停止</li><li>异步回调（setTimeout 等）创建的侦听器，则不会绑定到当前组件上，必须手动停止，以防止内存泄漏</li></ul></li></ul></li><li><p>watchEffect 自动收集依赖源，依赖源变化时重新执行自身</p><ul><li>接收两个参数<ul><li>第一个参数是一个回调函数<ul><li>回调函数的参数为一个 onCleanup 函数，用来清除副作用</li></ul></li><li>第二个参数是一个可选对象<ul><li>flush：回调的触发时机<ul><li>pre：默认，dom 更新前调用</li><li>post：dom 更新后调用</li><li>sync：sync 同步调用</li></ul></li></ul></li></ul></li><li>watchEffect 的回调函数会立即执行，即{immediate: true}</li><li>computed 其实类似一个带输出的同步版本 watchEffect</li><li>watchEffect 仅会在同步执行期间才会追踪依赖，使用异步回调时，只有在第一个 await 之前访问到的依赖才会被追踪</li><li>watchEffect 无法访问侦听数据的新值和旧值</li><li>动态新增的依赖也会被收集</li></ul></li><li><p>使用场景：</p><ul><li>大部分时候使用 watch 显示指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖</li><li>watchEffect 使用于逻辑相对简单，依赖源和逻辑强相关的场景</li></ul></li></ul><h2 id="vue-中动态引入的图片为什么要是-require？"><a href="#vue-中动态引入的图片为什么要是-require？" class="headerlink" title="vue 中动态引入的图片为什么要是 require？"></a>vue 中动态引入的图片为什么要是 require？</h2><p>因为动态添加 src 被当作<u><strong>静态资源</strong></u>处理了，而动态 src 编译过后的地址与图片编译后的资源地址不一致导致无法正确引入资源，而使用 require 返回的资源文件就是编译后的文件地址，所以可以正确的引入资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue文件中使用require动态的引入一张图片</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 使用require动态引入图片 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;require(&#x27;../assets/logo.png&#x27;)&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终编译的结果</span></span><br><span class="line"><span class="comment">//这张图片是可以被正确打开的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/logo.6c137b82.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>什么是静态资源？</p><p>静态资源就是直接放在项目中的资源，不需要发送请求获取<br>动态资源就是需要发送请求获取资源（数据库连接数据处理）</p></li><li><p>为什么静态引入图片，没有使用 require 返回的依然是编译后的文件地址？</p><p>因为 webpack 编译 vue 文件时，遇见 src 等属性会默认使用 require 引入资源路径</p><ul><li>如 <code>url(./image.png)</code> 会转为 <code>require(&#39;./image.png&#39;)</code></li><li><code>&lt;img src=&#39;./image.png&#39; /&gt;</code> 会被编译为 <code>h(&#39;img&#39;,&#123;attrs: &#123;src: require(&#39;./image.png&#39;)&#125;&#125;)</code></li></ul></li><li><p>动态引入图片，src 后面的属性值 webpack 会认为是一个变量，根据 v-bind 指令去解析 src 的属性值，并不会通过 require 引入资源路径</p></li><li><p>引入 public 下面静态资源的时候，也会默认使用 require 引入吗？</p><p>官方：<br><code>任何放置在public文件夹下的静态资源会被简单的复制，而不经过webpack，你需要通过绝对路径来引用它们</code></p><p>答：不会，使用 require 引入资源的前提是该资源是 webpack 解析的模块，而 public 下的文件压根不会走编译，所以不会使用 require</p></li><li><p>为什么使用 public 下的资源一定要用绝对路径？</p><p>答：public 文件不会被编译返回的是代码中定义的文件地址，src 下的文件被编译，编译后生成的文件目录（dist）下会找不到对应目录</p></li></ul><h2 id="Vue2、Vue3、React-三者-diff-算法有什么区别？"><a href="#Vue2、Vue3、React-三者-diff-算法有什么区别？" class="headerlink" title="Vue2、Vue3、React 三者 diff 算法有什么区别？"></a>Vue2、Vue3、React 三者 diff 算法有什么区别？</h2><ul><li>严格的 Tree diff 算法的时间复杂度是 O(n*3)</li><li>vue、react 框架对 tree diff 进行了优化 O(n)<ul><li>只比较同一层级，不跨级比较</li><li>tag 不同则删除重建</li><li>子节点通过 key 区分<ul><li>vdom diff 算法会根据 key 判断元素是否需要删除</li><li>匹配了 key，则只移动元素 - 性能较好</li><li>未匹配 key，则删除重建 - 性能较差</li></ul></li></ul></li><li>区别<ul><li>react 仅右移</li><li>vue2 双端比较</li><li>vue3 最长递增子序列</li></ul></li></ul><h2 id="KeepAlive-组件实现原理"><a href="#KeepAlive-组件实现原理" class="headerlink" title="KeepAlive 组件实现原理"></a>KeepAlive 组件实现原理</h2><blockquote><p>KeepAlive 是一个内置组件，主要用于组件缓存，它包裹的组件在切换后不会被销毁，而是保留在内存中，避免重复渲染 DOM，include/exclude 用于包含/排除组件，max 用于限制最大缓存实例个数，使用 LRU 缓存算法(最大最小使用缓存)：超过最大数量时移除最久没被访问的实例</p></blockquote><h2 id="Vue-router-三种模式（React-router-也一样）"><a href="#Vue-router-三种模式（React-router-也一样）" class="headerlink" title="Vue-router 三种模式（React-router 也一样）"></a>Vue-router 三种模式（React-router 也一样）</h2><ul><li>Hash</li><li>WebHistory</li><li>MemoryHistory（v4 之前叫做 abstract history）</li></ul><h2 id="如何统一监听-Vue-组件报错？"><a href="#如何统一监听-Vue-组件报错？" class="headerlink" title="如何统一监听 Vue 组件报错？"></a>如何统一监听 Vue 组件报错？</h2><ul><li><p>window.onerror</p><ul><li>全局监听所有 js 错误</li><li>try…catch 中的错误无法被监听到</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">msg, source, line, column, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, source, line, column, error);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>errorCaptured 生命周期</p><ul><li>监听所有下级组件的错误</li><li>返回 false 会阻止向上传播</li></ul></li><li><p>errorHandler 配置</p><ul><li>Vue 全局错误监听，所有组件错误都会汇总到这里</li><li>但 errorCaptured 返回 false，不会传播到这里</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error, vm, info);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>异步错误</p><ul><li>异步回调里面的错误，errorHandler 监听不到</li><li>需要使用 window.onerror</li></ul></li></ul><h2 id="vue-router-路由钩子"><a href="#vue-router-路由钩子" class="headerlink" title="vue-router 路由钩子"></a>vue-router 路由钩子</h2><p>const router = createRouter({});</p><ul><li>全局前置守卫<ul><li>router.beforeEach((to, from)=&gt;{})</li></ul></li><li>全局解析守卫<ul><li>router.beforeResolve：和 router.beforeEach 类似，因为它在 每次导航时都会触发，但是确保在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被正确调用</li></ul></li><li>全局后置钩子<ul><li>router.afterEach((to, from)=&gt;{})</li></ul></li><li>路由独享守卫<ul><li>beforeEnter:(to, from)=&gt;{}</li></ul></li><li>组件内守卫<ul><li>onBeforeRouteLeave</li><li>onBeforeRouteUpdate</li></ul></li></ul><h2 id="pinia-原理浅析"><a href="#pinia-原理浅析" class="headerlink" title="pinia 原理浅析"></a>pinia 原理浅析</h2><ul><li>通过 createPinia 创建 pinia 实例，在 app.use 的时候执行 pinia 内部的 install 方法<ul><li>install 方法通过 vue 的 provide 将当前 pinia 实例注入到每个 vue 组件实例中</li></ul></li><li>在业务中使用 useXxx 的时候调用 defineStore 方法，该方法在正真调用的时候才会初始化对应模块的数据参数<ul><li>defineStore 首先创建一个 store 对象，将 options 上面的 state、getters 利用 vue 的响应式 composition API 进行处理和转换，使之成为响应式数据并挂载在 store 对象上</li><li>通过 Object.assign 对这个 store 进行一些扩展 api（reset、$patch 等）</li><li>返回 store 对象作为 defineStore 方法的返回值</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vue-的特点（优点）&quot;&gt;&lt;a href=&quot;#vue-的特点（优点）&quot; class=&quot;headerlink&quot; title=&quot;vue 的特点（优点）&quot;&gt;&lt;/a&gt;vue 的特点（优点）&lt;/h2&gt;</summary>
    
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://github.com/foolishmax/2023/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://github.com/foolishmax/2023/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2023-03-22T09:41:21.000Z</published>
    <updated>2023-05-31T09:49:16.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><span id="more"></span><p>http 是超文本传输协议，信息是明文传输，https 是更加安全的 ssl 加密传输协议<br>http 默认是 80 端口，https 默认是 443 端口<br>https 需要申请 CA 证书<br>https 是 http + ssl/tls（数字证书）进行组合的更加安全的传输协议</p><p>https 工作原理（非对称加密） 1.服务端向客户端传递证书作为公钥 2.客户端对证书进行解析，判断证书的办法机构和过期时间等，如果都没有问题，生成一个随机值作为私钥，然后使用证书进行加密发送给服务端 3.服务端解密得到客户端私钥 4.之后双方利用私钥进行加密解密，完成信息的通信</p><h2 id="HTTP-协议-1-0、1-1、2-0-有什么区别？"><a href="#HTTP-协议-1-0、1-1、2-0-有什么区别？" class="headerlink" title="HTTP 协议 1.0、1.1、2.0 有什么区别？"></a>HTTP 协议 1.0、1.1、2.0 有什么区别？</h2><ul><li><p>HTTP 1.0</p><ul><li>最基础的 HTTP 协议</li><li>支持基本的 GET、POST 方法</li></ul></li><li><p>HTTP 1.1</p><ul><li>缓存策略 cache-control、E-tag 等</li><li>支持长连接 Connection: keep-alive,一次 TCP 连接多次请求</li><li>支持断点续传，状态码 206</li><li>支持新的方法 PUT、DELETE 等，可用于 Restful API</li></ul></li><li><p>HTTP 2.0</p><ul><li>头部数据压缩：http2.0 使用 HPACK 算法对 header 对头部数据进行压缩，体积变小后，网络传输速度会更快<ul><li>http/1.1 版本的头部信息是本文，而 http/2.0 头部数据就是二进制</li></ul></li><li>多路复用，一次 TCP 连接中可以多个 HTTP 并行请求</li><li>服务端推送</li></ul></li></ul><h2 id="301-和-302-的区别"><a href="#301-和-302-的区别" class="headerlink" title="301 和 302 的区别"></a>301 和 302 的区别</h2><p>301 表示资源被永久移除，浏览器在拿到状态码后跳转到一个新的 URL 地址，可从相应头的 location 首部中获取，搜索引擎在抓取新内容的同时也将就地址交换为重定向之后的网址。</p><p>302 表示地址资源还在，仍可以访问，搜索引擎会抓取新的内容而保存旧的地址，seo 302 优于 301.</p><p>重定向的原因：<br>网站调整（改变网页目录结构）<br>页面被移到一个新地址<br>页面扩展名改变 .php -&gt;.html<br>如果不做重定向会返回 404 页面，会白白流失用户访问量。</p><p>1XX 信息性状态码，表示接受的请求正在处理<br>2XX 成功状态码，表示请求被正常处理完毕<br>3XX 重定向状态码，表示需要进行附加操作以完成请求<br>4XX 客户端错误状态码，表示服务器无法处理请求<br>400 Bad Request 请求出现语法错误<br>401 被请求的页面需要用户名和密码<br>403 forbidden 请求页面的访问被禁止<br>404 资源未找到<br>5XX 服务器错误状态码，表示服务器处理请求出错<br>502 网关错误<br>503 服务器超负载或者停机维护，无法处理请求<br>504 网关超时</p><h2 id="HTTP-协议和-UDP-协议有什么区别？"><a href="#HTTP-协议和-UDP-协议有什么区别？" class="headerlink" title="HTTP 协议和 UDP 协议有什么区别？"></a>HTTP 协议和 UDP 协议有什么区别？</h2><ul><li>网络协议<ul><li>HTTP 协议在应用层</li><li>TCP、UDP 协议在传输层<ul><li>TCP 协议<ul><li>有连接，有断开</li><li>稳定传输</li></ul></li><li>UDP 协议<ul><li>无连接，无断开</li><li>不稳定传输，但效率高</li><li>如视频会议、语音通话</li></ul></li></ul></li></ul></li></ul><h2 id="UDP-amp-TCP-的区别"><a href="#UDP-amp-TCP-的区别" class="headerlink" title="UDP &amp; TCP 的区别"></a>UDP &amp; TCP 的区别</h2><ul><li><p>相同点：</p><ul><li>UDP 协议 和 TCP 协议 都是运输层协议</li></ul></li><li><p>不同点：</p><ul><li><p>UDP 特点：</p><ul><li>无连接 —— 知道对端的 IP 和端口号就直接进行传输，不需要建立连接</li><li>不可靠 —— 没有确认机制，没有重传机制，即使因为网络故障无法发送到<br>对方，UDP 协议也不会给应用层返回任何错误信息</li><li>面向数据报</li><li>传输速 度块</li></ul></li><li><p>TCP 特点：</p><ul><li>面向连接，在客户端和服务器进行交换数据前，必须先在双方之间建立一个<br>TCP 连接</li><li>可靠传输，具有确认应答机制、超时重传机制、拥塞控制、流量控制、<br>滑动窗口机制、延迟应答等。</li><li>面向字节流</li></ul></li></ul></li><li><p>UDP 的响应速度优于 TCP，安全性和数据可靠性不如 TCP</p></li><li><p>UDP 一般用在网络负担非常重，但对响应速度要求高，数据类型都是短消息的情况下</p></li></ul><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>OSI(open system interconnect)参考模型</p><ul><li>应用层（为应用程序提供网络服务）</li><li>表示层（数据格式化，加密等）</li><li>会话层（建立、维护管理会话连接）</li><li>传输层（建立、维护管理到端连接）</li><li>网络层（IP 寻址和路由选择）<ul><li>寻址就是根据 IP 地址找到具体的设备</li><li>路由就是选择数据传输的线路</li></ul></li><li>数据链路层（控制网络层和物理层之间通信）</li><li>物理层（通过光缆、无线电波等方式连接组网）</li></ul><p>TCP/IP 模型</p><ul><li>应用层（应用层就是向用户提供通信服务的活动，提供用户程序接口 HTTP、FTP、DNS）</li><li>传输层（传输层为两台主机上的应用程序提供端到端的通信 TCP，UDP）</li><li>网络层（网络层实现数据包的选路和转发）</li><li>数据链路层（ARP 地址解析协议、RARP 逆地址解析协议，使用物理地址寻找一台机器）</li></ul><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><pre><code>WebSocket是html5定义的新协议，特点是即时通信、替代轮训与传统http协议不同，实现了浏览器和服务器的全双工通信</code></pre><p>HTTP 和 WebSocket</p><p>相同点：</p><ul><li>都是基于 TCP 可靠传输协议</li></ul><p>不同点：</p><ul><li>WebSocket 是全双工通信协议，通信双方可以同时发送和接收消息，http 是单向的</li><li>WebSocket 没有 Request 和 Response 概念</li><li>WebSocket 需要依赖 http 协议进行一次握手，握手成功后直接从 TCP 通道传输，与 http 无关</li><li>WebSocket 数据格式较轻量，数据包头部较小，http 协议每次通信需要携带完成头部信息</li><li>WebSocket 无跨域问题</li><li>WebSocket 多了两个属性 Upgrade: webSocket、Connection: Upgrade，服务端返回 101 成功状态码</li></ul><p>单工、半双工和全双工通信</p><ul><li>单工通信：指消息只能单向传输的工作方式，数据信息从一端到另一端是单向的。例如：广播</li><li>半双工通信：可以双向通信，但必须交替进行。例如：对讲机</li><li>全双工通信：指在通信的任意时刻，都允许数据同时在两个方向上传输，通讯双方都设置了发送器和接收器。</li></ul><h2 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h2><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个域名配置多个 IP 地址,在应答 DNS 查询时,DNS 服务器对每个查询将以 DNS 文件中主机记录的 IP 地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p><h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><p>强缓存：（expires、Cache-Control）在过期时间内，浏览器再次加载资源时，不会向服务器发起请求，直接从缓存中读取资源</p><p>协商缓存：向服务器发送请求，服务器会根据请求头（request header）的一些参数（Etag、last-modified）来判断是否命中协商缓存，首先根据 Etag 的值判断请求的文件有没有被修改，如果 Etag 一致则没有被修改，命中协商缓存返回 304，如果不一致则返回新的资源并带上新的 Etag 返回 200 状态码。如果没有 Etag 值，则对比 If-Modified-Since 和请求文件的最后修改时间，一致则命中协商缓存返回 304，不一致则返回新的 last-modified 和 200 状态码</p><h2 id="http-协议的特点"><a href="#http-协议的特点" class="headerlink" title="http 协议的特点"></a>http 协议的特点</h2><p>1.支持客户/服务器模式 2.简单快速：客户向服务器发送请求时，只需传送请求方法和路径。 3.灵活：http 允许传输任意类型的数据对象（Content-Type 内容编码类型）</p><p>application/x-www-form-urlencoded 常见 post 提交数据格式（key-value 格式）<br>application/json</p><p>4.无连接：限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。（原因是早期服务器需要同时面对全世界数十万、上百万的客户端的网页访问，但是每次客户端与服务端传输的数据关联性很低，就会导致大部分通过会很空闲，无端占用资源）</p><p>（解决无连接）Keep-Alive：使客户端到服务端之间的 Http 连接保持，不会断开，当再次对服务器发送请求时，keep-Alive 功能避免了重新建立连接</p><p>5.无状态：Http 是一个无状态协议，就是每个请求都是独立的，数据传输完毕不会记录任何信息。缺点就是如果后续处理需要前面的信息，就必须重传，就会导致每次连接传送的数据量增加，如果服务器不需要前面信息的时候应答就会很快。</p><p>（解决无状态）怎样保持 http 连接状态呢<br>Cookie（每次 http 请求的时候，客户端都需要发送响应的 cookie 信息到服务端，服务端根据 cookie 判断来自哪个客户端）<br>服务端生成 cookie，客户端保存</p><p>Session<br>服务端生成一个 sessionid，在客户端下次请求的时候在 cookie 里面记录这个 sessionid，然后发送给服务端，服务端再根据 cookie 中的 sessionid 来识别客户端返回资源数据。</p><p>禁用 cookie 怎么办？<br>url 重写，每次 http 请求的时候，在 url 后面拼接 sid=**参数</p><p>withCredentials:指定在涉及到跨域请求时，是否携带 cookie 信息，默认为 false<br>Access-Control-Allow-Credentials: true</p><h2 id="cookie-和-session-的区别"><a href="#cookie-和-session-的区别" class="headerlink" title="cookie 和 session 的区别"></a>cookie 和 session 的区别</h2><ol><li>存取方式不同： cookie 只能保存 ASCII 字符串，session 能够存储任意类型的数据</li><li>隐私策略不同</li><li>cookie 是存在客户端，session 是存在服务器的</li><li>浏览器的支持不同，浏览器可以禁用 cookie</li></ol><h2 id="权限身份验证"><a href="#权限身份验证" class="headerlink" title="权限身份验证"></a>权限身份验证</h2><p>一般都是通过 sessionid 来进行用户身份验证，sessionid 一般会存放在 redis 中。</p><ol><li>用户向服务端发送用户名和密码进行登陆</li><li>服务器验证通过后，服务器为用户创建一个 session，并将 session 信息存储起来</li><li>服务器向用户返回一个 sessionid，写入用户的 cookie</li><li>当用户保持登陆状态时，每次后续请求都会一起发送给后端</li><li>服务器将存储在 cookie 中的 sessionid 和存储在内存或者数据库中的 sessin 信息进行一个比较，验证用户身份，然后返回响应信息</li></ol><p>注意： 1.依赖 session 的关键业务一定要确保客户端开启了 cookie 2.注意 session 的过期时间</p><p>一般在 http header 的 Authorization 字段中添加 token</p><h2 id="禁用-cookie-之后-session-还能用吗？"><a href="#禁用-cookie-之后-session-还能用吗？" class="headerlink" title="禁用 cookie 之后 session 还能用吗？"></a>禁用 cookie 之后 session 还能用吗？</h2><p>url 重写，例如 <a href="https://javascript.cn/?session_id=xxx">https://javascript.cn/?session_id=xxx</a><br>缺点是安全性降低，可以对 sessionid 进行一次加密后传输</p><h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h2><ol><li>url 可见性：get 参数 url 可见，post 参数 url 不可见</li><li>数据传输：get 通过拼接 url 进行传递参数，post 通过 body 体传输参数</li><li>缓存性：get 请求可以缓存，post 请求不可以缓存</li><li>get 请求网页回退时，不产生影响，post 请求网页回退会重新发请求</li><li>传输数据：get 一般传输数据大小不超过 4k，post 可以传输大量数据</li><li>post 较 get 安全性较高，get 是不安全的因为 url 可见，可能会泄漏私密信息</li></ol><h2 id="http-常见的请求头字段"><a href="#http-常见的请求头字段" class="headerlink" title="http 常见的请求头字段"></a>http 常见的请求头字段</h2><p>Accept: 浏览器可接受的数据类型<br>Accept-Charset: 浏览器可接受的字符集<br>Accept-Encoding：浏览器能够进行解码的数据编码方式<br>Accept-Language： 浏览器所希望的语言种类<br>Connection：是否需要持久连接，值“Keep-Alive”，HTTP1.1 默认进行持久连接<br>Cookie：cookie 信息<br>content-type<br>If-Modified-Since：内容被修改才会返回<br>User-Agent：浏览器类型</p><p>响应头：<br>content-Length: 表示内容长度<br>content-type：文档类型<br>Date：当前时间<br>Expires：指定缓存过期时间<br>Last-Modified：文档过期时间</p><h2 id="xss（跨域脚本攻击）csrf（跨站请求伪造）"><a href="#xss（跨域脚本攻击）csrf（跨站请求伪造）" class="headerlink" title="xss（跨域脚本攻击）csrf（跨站请求伪造）"></a>xss（跨域脚本攻击）csrf（跨站请求伪造）</h2><p>csrf: 需要用户先登陆网站 A，获取 cookie，利用的是网站 A 本身的漏洞，去请求网站 A 的 api，—进行 token 验证，referer 验证，只接收本站的请求</p><p>xss：向网站 A 注入 js 代码，然后执行 js 代码，篡改网站 A 的内容，破坏页面正常结构，插入恶意广告。—编码转换</p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">正向代理是客户端代理，服务端不知道是哪个客户端发起的请求</span><br><span class="line">反向代理是服务端代理，客户端不知道是哪个服务端提供的资源</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>为什么需要三次握手？<br>两次握手第二次结束后，服务端并不能保证客户端已经接收到了第二次的应答信息，如此一来服务器会一直保持通信过程，因为 TCP 通信会占用端口，造成资源浪费。</p><p>防止已失效的连接请求报文段突然又传送到服务端，产生错误。<br>如上述情况，如果 client 没有再次向 server 发出确认，server 收不到确认就不会建立连接，可以避免 server 端一直等待浪费资源。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li><a href="https://blog.csdn.net/rememberyf/article/details/80309148">https://blog.csdn.net/rememberyf/article/details/80309148</a></li></ul><h2 id="什么是-HTTPS-中间人攻击？如何预防？"><a href="#什么是-HTTPS-中间人攻击？如何预防？" class="headerlink" title="什么是 HTTPS 中间人攻击？如何预防？"></a>什么是 HTTPS 中间人攻击？如何预防？</h2><ul><li><p>HTTPS 加密传输</p><ul><li>HTTP 明文传输</li><li>HTTPS 加密传输 HTTP + TLS/SSL</li><li><img src="/images/md_img/https.jpg" alt="https加密"></li></ul></li><li><p>答案</p><ul><li>使用正规厂商的加密证书可以防止中间人攻击</li></ul></li></ul><h2 id="WebSocket-和-HTTP-有什么区别？"><a href="#WebSocket-和-HTTP-有什么区别？" class="headerlink" title="WebSocket 和 HTTP 有什么区别？"></a>WebSocket 和 HTTP 有什么区别？</h2><ul><li><p>WebSocket</p><ul><li><p>支持端对端通讯</p></li><li><p>可以由 client 发起，也可以由 server 发起</p></li><li><p>用于：消息通知，直播间讨论区，聊天室，协同编辑</p></li><li><p>client</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">WebSocketServer</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wsServer = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connection&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了信息&#x27;</span>, msg.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ws.<span class="title function_">send</span>(<span class="string">&#x27;服务端已经收到了信息&#x27;</span> + msg.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- server</span><br><span class="line"></span><br><span class="line">```typescript</span><br><span class="line">const ws = new WebSocket(&#x27;ws://127.0.0.1:3000&#x27;);</span><br><span class="line">ws.onopen = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;opened&#x27;);</span><br><span class="line">  ws.send(&#x27;client opened&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = (event) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;收到了信息&#x27;, event.data);</span><br><span class="line">&#125;;</span><br><span class="line">const btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;clicked&#x27;);</span><br><span class="line"></span><br><span class="line">  ws.send(&#x27;当前时间&#x27; + Date.now());</span><br><span class="line">&#125;);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- WebSocket 连接过程</span><br><span class="line"></span><br><span class="line">  - 先发起一个 http 请求</span><br><span class="line">  - 成功之后再升级到 WebSocket 协议，再通讯</span><br><span class="line"></span><br><span class="line">- WebSocket 和 HTTP 区别？</span><br><span class="line"></span><br><span class="line">  - WebSocket 协议名是 ws://,可双端发起请求</span><br><span class="line">  - WebSocket 没有跨域限制</span><br><span class="line">  - 通过 send 和 onmessage 通讯（HTTP 通过 req 和 res）</span><br><span class="line"></span><br><span class="line">- ws 可升级为 wss（like https）</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  import &#123; createServer &#125; from &#x27;https&#x27;;</span><br><span class="line">  import &#123; readFileSync &#125; from &#x27;fs&#x27;;</span><br><span class="line">  import &#123; WebSocketServer &#125; from &#x27;ws&#x27;;</span><br><span class="line"></span><br><span class="line">  const server = createServer(&#123;</span><br><span class="line">    cert: readFileSync(&#x27;/path/to/cert.pem&#x27;),</span><br><span class="line">    key: readFileSync(&#x27;/path/to/key.pem&#x27;),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  const wss = new WebSocketServer(&#123; server &#125;);</span><br><span class="line">  ```</span><br><span class="line"></span><br><span class="line">- 实际项目推荐 socket.io,API 更简洁</span><br><span class="line"></span><br><span class="line">## WebSocket 和 HTTP 长轮询的区别？</span><br><span class="line"></span><br><span class="line">- 区别</span><br><span class="line"></span><br><span class="line">  - HTTP 长轮询：客户端发起请求，服务端阻塞，不会立即返回</span><br><span class="line">  - WebSocket：客户端可发起请求，服务端也可发起请求</span><br><span class="line"></span><br><span class="line">- 注意</span><br><span class="line">  - HTTP 长轮询，需处理 timeout，即 timeout 之后重新发请求</span><br><span class="line"></span><br><span class="line">## ajax</span><br><span class="line"></span><br><span class="line">- xhr.readyState</span><br><span class="line"></span><br><span class="line">  - 0 (未初始化)还没有调用 send()方法</span><br><span class="line">  - 1 (载入)已调用 send()方法，正在发送请求</span><br><span class="line">  - 2 (载入完成) send()方法执行完成，已经接收到全部响应内容</span><br><span class="line">  - 3 (交互) 正在解析响应内容</span><br><span class="line">  - 4 (完成) 响应内容解析完成，可以在客户端调用</span><br><span class="line"></span><br><span class="line">- xhr.status</span><br><span class="line">  - 2xx 表示成功处理请求，如 200</span><br><span class="line">  - 3xx 需要重定向，浏览器直接跳转，如 301、302、304</span><br><span class="line">  - 4xx 客户端请求错误，如 404、403</span><br><span class="line">  - 5xx 服务端错误</span><br><span class="line"></span><br><span class="line">## 常见状态码？</span><br><span class="line"></span><br><span class="line">信息响应</span><br><span class="line"></span><br><span class="line">- 101 协议切换</span><br><span class="line"></span><br><span class="line">成功响应</span><br><span class="line"></span><br><span class="line">- 200 成功</span><br><span class="line">- 204 请求成功，不返回任何内容</span><br><span class="line">- 206 分块请求成功</span><br><span class="line"></span><br><span class="line">重定向</span><br><span class="line"></span><br><span class="line">- 301 永久重定向（配合 location，浏览器自动处理）</span><br><span class="line">- 302 临时重定向（配合 location，浏览器自动处理）</span><br><span class="line">- 304 资源未被修改（协商缓存 ）</span><br><span class="line"></span><br><span class="line">客户端响应</span><br><span class="line"></span><br><span class="line">- 400 无法被服务器理解</span><br><span class="line">- 401 未授权</span><br><span class="line">- 403 禁止访问</span><br><span class="line">- 404 资源未找到</span><br><span class="line">- 405 没有权限,请求方法(get/post 等)错误</span><br><span class="line"></span><br><span class="line">服务端响应</span><br><span class="line"></span><br><span class="line">- 500 服务器错误</span><br><span class="line">- 503 服务不可达</span><br><span class="line">- 504 网关超时</span><br><span class="line"></span><br><span class="line">- 本身状态码就是一种约定，一种协议和规范，不要尝试违反规范，例如 IE 浏览器</span><br><span class="line"></span><br><span class="line">## http 常见 methods？</span><br><span class="line"></span><br><span class="line">- 传统 methods</span><br><span class="line"></span><br><span class="line">  - get 获取服务器的数据</span><br><span class="line">  - post 向服务器提交数据</span><br><span class="line"></span><br><span class="line">- 新的 methods</span><br><span class="line">  - get 获取数据</span><br><span class="line">  - post 新建数据</span><br><span class="line">  - patch/put 更新数据</span><br><span class="line">  - delete 删除数据</span><br><span class="line"></span><br><span class="line">## Restful API</span><br><span class="line"></span><br><span class="line">- 一种新的 API 设计方法</span><br><span class="line">- 传统 API 设计：把每个 url 当作一个功能</span><br><span class="line">- Restful API 设计：把每个 url 当作一个唯一的资源</span><br><span class="line"></span><br><span class="line">- 原则</span><br><span class="line">  - 不使用 url 参数</span><br><span class="line">    - 传统 API 设计：/api/list?pageIndex=2</span><br><span class="line">    - Restful API 设计：/api/list/2</span><br><span class="line">  - 用 method 表示操作类型</span><br><span class="line">    - 传统 API 设计</span><br><span class="line">      - post 请求 /api/create-blog</span><br><span class="line">      - post 请求 /api/update-blog?id=100</span><br><span class="line">      - get 请求 /api/get-blog?id=100</span><br><span class="line">    - Restful API 请求</span><br><span class="line">      - post 请求 /api/blog</span><br><span class="line">      - patch 请求 /api/blog/100</span><br><span class="line">      - get 请求 /api/blog/100</span><br><span class="line"></span><br><span class="line">## 常见 http headers？</span><br><span class="line"></span><br><span class="line">- Request Headers</span><br><span class="line"></span><br><span class="line">  - Accept 浏览器可接收的数据格式</span><br><span class="line">  - Accept-Encoding 浏览器可接收的压缩算法，如 gzip</span><br><span class="line">  - Accept-Languange 浏览器可接收的语言，如 zh-CN</span><br><span class="line">  - Connection: keep-alive 一次 TCP 连接重复使用</span><br><span class="line">  - cookie</span><br><span class="line">  - Host 如：www.baidu.com</span><br><span class="line">  - Cache-Control</span><br><span class="line">  - User-Agent （简称 UA）浏览器信息</span><br><span class="line">  - Content-type 发送数据的格式，如 application/json</span><br><span class="line"></span><br><span class="line">- Response Headers</span><br><span class="line"></span><br><span class="line">  - Content-type 返回数据的格式，如 application/json</span><br><span class="line">  - Content-length 返回数据的大小，多少字节</span><br><span class="line">  - Content-Encoding 返回数据的压缩算法，如 gzip</span><br><span class="line">  - Set-Cookie</span><br><span class="line">  - Expires</span><br><span class="line">  - Etag</span><br><span class="line">  - date</span><br><span class="line"></span><br><span class="line">- 自定义 header</span><br><span class="line"></span><br><span class="line">- 缓存相关的 headers</span><br><span class="line">  - Cache-Control Expires</span><br><span class="line">  - Last-Modified If-Modified-Since</span><br><span class="line">  - Etag If-None-Match</span><br><span class="line"></span><br><span class="line">## TCP 协议如何保证传输的可靠性</span><br><span class="line"></span><br><span class="line">- 校验和</span><br><span class="line">- 确认应答 + 序列号</span><br><span class="line">- 超时重传</span><br><span class="line">- 流浪控制</span><br><span class="line">- 拥塞控制</span><br><span class="line">- TCP 的连接管理</span><br><span class="line">- 滑动窗口</span><br><span class="line"></span><br><span class="line">## http 和 https 的区别</span><br><span class="line"></span><br><span class="line">- http 是一种一种广泛使用的网络协议，是一个客户端和服务器请求和应答的标准。</span><br><span class="line">- http 工作在 TCP 协议的 80 端口，https 工作在 TCP 协议的 443 端口</span><br><span class="line">- http 协议运行在 TCP 协议之上，所有的传输内容都是明文，https 运行在 SSL/TLS 之上，</span><br><span class="line">  SSL/TLS 运行在 TCP 之上，所有的传输内容都是经过加密的。</span><br><span class="line">- https 是以安全为目标的 http 通道，是 http 的安全版。是 http 加上 SSL 层对传输的信息和 url 做了一些加密处理，更加安全</span><br><span class="line"></span><br><span class="line">## 为什么 https 不会被截取信息</span><br><span class="line"></span><br><span class="line">- 完成 TCP 三次同步握手</span><br><span class="line">- 客户端验证服务器数字证书，通过，进入步骤 3</span><br><span class="line">- DH 算法协商对称加密算法的密钥、hash 算法的密钥</span><br><span class="line">- SSL 安全加密隧道协商完成</span><br><span class="line">- 网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；</span><br><span class="line">  用协商的 hash 算法进行数据完整性保护，保证数据不被篡改</span><br><span class="line"></span><br><span class="line">## 如何处理 TCP 的粘包?</span><br><span class="line"></span><br><span class="line">发生 TCP 粘包或拆包有很多原因，现列出常见的几点：</span><br><span class="line"></span><br><span class="line">要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包。</span><br><span class="line">待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。</span><br><span class="line">要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包。</span><br><span class="line">接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</span><br><span class="line"></span><br><span class="line">关键点：如何给每个数据包添加边界信息</span><br><span class="line"></span><br><span class="line">发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</span><br><span class="line"></span><br><span class="line">发送端将每个数据包封装为固定长度（不够的可以通过补 0 填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</span><br><span class="line"></span><br><span class="line">可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</span><br><span class="line"></span><br><span class="line">## 请说说 HTTPS 的握手过程？</span><br><span class="line"></span><br><span class="line">HTTPS 的握手过程主要包括以下步骤：</span><br><span class="line"></span><br><span class="line">客户端向服务端发送一个加密过的客户端随机数和客户端支持的加密算法列表，同时请求建立 SSL/TLS 连接。</span><br><span class="line"></span><br><span class="line">服务端在接收到请求后，向客户端发送一个包含服务端随机数、服务器支持的加密算法列表以及服务器的数字证书的报文。</span><br><span class="line"></span><br><span class="line">客户端在接收到服务器的响应后，会对证书进行校验。如果证书被认为是合法的，那么客户端将使用证书中包含的公钥对一个随机数进行加密，并将加密后的随机数发送给服务端。</span><br><span class="line"></span><br><span class="line">服务端在接收到客户端的响应后，使用私钥对加密的随机数进行解密，得到客户端生成的随机数。同时，服务端也会生成一个加密的会话密钥，并使用客户端和服务端的随机数以及协商出的加密算法对该密钥进行加密，最后将加密后的密钥发送给客户端。</span><br><span class="line"></span><br><span class="line">客户端接收到服务端发送的加密的会话密钥后，使用服务端公布的公钥进行解密，得到原始的会话密钥。</span><br><span class="line"></span><br><span class="line">客户端和服务端都会使用会话密钥进行加密和解密，从而实现安全的通信。</span><br><span class="line"></span><br><span class="line">这个过程中，客户端和服务端会进行多次来回的通信，以建立安全的 SSL/TLS 连接。其中数字证书的校验和会话密钥的生成都是关键步骤，它们保证了通信的安全性。</span><br><span class="line"></span><br><span class="line">## 请说说什么是数字证书？它有什么作用?</span><br><span class="line"></span><br><span class="line">- 数字证书是一种加密技术，用于验证在线交互中的身份和信息安全性。它是由可信任的第三方机构（例如数字证书颁发机构）颁发的一份电子文档，其中包含了一些加密信息，如公钥、数字签名等。数字证书的作用是确保通信双方的身份和数据的完整性和保密性。</span><br><span class="line"></span><br><span class="line">- 在使用数字证书进行加密通信时，服务端会向证书颁发机构申请一份数字证书。数字证书包含了服务端的公钥，以及一些描述服务端身份的信息，例如域名、组织名称等。客户端在与服务端建立连接时，会向服务端请求数字证书，并验证证书的真实性和合法性。如果验证成功，客户端就可以使用服务端的公钥加密数据并发送给服务端了。同时，服务端也可以使用客户端的公钥进行数据的加密和验证。这样就可以确保通信过程中的数据不被窃听或篡改。</span><br><span class="line"></span><br><span class="line">- 数字证书的使用广泛，特别是在网站安全和电子商务领域。它可以用来验证网站的真实性和合法性，确保网站访问过程中的信息安全。此外，数字证书还可以用于文件签名、电子邮件加密等其他领域。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;http-和-https-的区别&quot;&gt;&lt;a href=&quot;#http-和-https-的区别&quot; class=&quot;headerlink&quot; title=&quot;http 和 https 的区别&quot;&gt;&lt;/a&gt;http 和 https 的区别&lt;/h2&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://github.com/foolishmax/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://github.com/foolishmax/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>微前端源码剖析</title>
    <link href="https://github.com/foolishmax/2023/03/22/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%89%96%E6%9E%90/"/>
    <id>https://github.com/foolishmax/2023/03/22/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%89%96%E6%9E%90/</id>
    <published>2023-03-22T03:07:28.000Z</published>
    <updated>2023-04-24T01:41:03.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要微前端？"><a href="#为什么需要微前端？" class="headerlink" title="为什么需要微前端？"></a>为什么需要微前端？</h2><span id="more"></span><ul><li><p>将不同的功能按照不同维度拆分成多个子应用（将子应用打包成一个个 lib），当路径切换时通过主应用来加载这些子应用当路径切换时通过主应用来加载这些子应用当路径切换时通过主应用来加载这些子应用</p></li><li><p>核心：先拆-&gt;后合</p></li></ul><h2 id="微前端解决的问题？"><a href="#微前端解决的问题？" class="headerlink" title="微前端解决的问题？"></a>微前端解决的问题？</h2><ul><li>不同团队（技术栈不同），开发同一个应用</li><li>每个团队开发的模块独立开发，独立部署</li><li>增量迁移</li></ul><h2 id="实现微前端技术方案？"><a href="#实现微前端技术方案？" class="headerlink" title="实现微前端技术方案？"></a>实现微前端技术方案？</h2><ul><li><p>实现微前端考虑要点</p><ul><li>如何进行应用拆分</li><li>如何进行应用通信</li><li>如何进行应用隔离</li></ul></li><li><p>技术方案</p><ul><li><p>iframe</p><ul><li>通过 postMessage 通信</li><li>自带的沙箱机制可以进行应用隔离</li><li>缺点：用户体验差，弹框只能在 iframe 中、内部刷新切换状态丢失等</li></ul></li><li><p>Web Components</p><ul><li>将前端应用程序分解为自定义 html 元素</li><li>通过 CustomEvent 通信</li><li>Shadow DOM 天生的作用域隔离</li><li>缺点：兼容问题、学习成本、调试困难</li></ul></li><li><p>single-spa</p><ul><li>通过路由劫持，采用 SystemJS，子应用暴露固定钩子 bootstrap、mount、unmount 接入协议</li><li>基于 props 进行通信</li><li>无沙箱机制，需要自己实现 JS 沙箱和 CSS 沙箱</li><li>缺点：学习成本、无沙箱机制、应用改造、资源重复加载问题</li></ul></li><li><p>Module federation</p><ul><li>通过模块联邦将组件打包导出</li><li>共享模块通信</li><li>无 CSS 沙箱和 JS 沙箱</li><li>缺点：需要 webpack5</li><li>百度 EMP</li></ul></li></ul></li></ul><h2 id="微前端框架"><a href="#微前端框架" class="headerlink" title="微前端框架"></a>微前端框架</h2><ul><li><p>qiankun(基于 single-spa)</p><ul><li>沙箱（sandbox、快照、window.proxy）</li><li>样式隔离（shadowDom、scopedCss）</li></ul></li><li><p>micro-app（基于 webComponent）</p><ul><li>webComponent<ul><li>允许用户自定义一个元素，名字随便起</li><li>shadowDom 样式隔离是 webComponent 的一部分</li><li>支持组件的模版、插槽、生命周期、属性等</li></ul></li></ul></li></ul><h2 id="简易版-single-spa-源码实现"><a href="#简易版-single-spa-源码实现" class="headerlink" title="简易版 single-spa 源码实现"></a>简易版 single-spa 源码实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;go(&#x27;#/a&#x27;)&quot;</span>&gt;</span>a应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;go(&#x27;#/b&#x27;)&quot;</span>&gt;</span>b应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- navigation-event.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对用户的路径切换 进行劫持，劫持后，重新调用reroute方法，进行计算应用的加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">urlRoute</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>(<span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, urlRoute);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, urlRoute); <span class="comment">// 浏览器历史切换的时候会执行此方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 但是当路由切换的时候 我们触发single-spa的addEventLister, 应用中可能也包含addEventLister</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需要劫持原生的路由系统，保证当我们加载完后再切换路由</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> capturedEventListeners = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hashchange</span>: [],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">popstate</span>: [],</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> listentingTo = [<span class="string">&#x27;hashchange&#x27;</span>, <span class="string">&#x27;popstate&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> originalAddEventListener = <span class="variable language_">window</span>.<span class="property">addEventListener</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> originalRemoveEventListener = <span class="variable language_">window</span>.<span class="property">removeEventListener</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">addEventListener</span> = <span class="keyword">function</span> (<span class="params">eventName, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 有要监听的事件， 函数不能重复</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">          listentingTo.<span class="title function_">includes</span>(eventName) &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          !capturedEventListeners[eventName].<span class="title function_">some</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">(<span class="params">listener</span>) =&gt;</span> listener === callback</span></span><br><span class="line"><span class="language-javascript">          )</span></span><br><span class="line"><span class="language-javascript">        ) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> capturedEventListeners[eventName].<span class="title function_">push</span>(callback);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> originalAddEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">removeEventListener</span> = <span class="keyword">function</span> (<span class="params">eventName, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 有要监听的事件， 函数不能重复</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (listentingTo.<span class="title function_">includes</span>(eventName)) &#123;</span></span><br><span class="line"><span class="language-javascript">          capturedEventListeners[eventName] = capturedEventListeners[</span></span><br><span class="line"><span class="language-javascript">            eventName</span></span><br><span class="line"><span class="language-javascript">          ].<span class="title function_">filter</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn !== callback);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> originalRemoveEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">callCaptureEventListeners</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> eventType = e[<span class="number">0</span>].<span class="property">type</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (listentingTo.<span class="title function_">includes</span>(eventType)) &#123;</span></span><br><span class="line"><span class="language-javascript">            capturedEventListeners[eventType].<span class="title function_">forEach</span>(<span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              listener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, e);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">patchFn</span>(<span class="params">updateState, methodName</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> urlBefore = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> r = updateState.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 调用此方法 确实发生了路径的变化</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> urlAfter = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (urlBefore !== urlAfter) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 手动派发popstate事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">PopStateEvent</span>(<span class="string">&#x27;popstate&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> r;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span> = <span class="title function_">patchFn</span>(<span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span>, <span class="string">&#x27;pushState&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span> = <span class="title function_">patchFn</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;replaceState&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- app.helpers.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// app status</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_LOADED</span> = <span class="string">&#x27;NOT_LOADED&#x27;</span>; <span class="comment">// 没有被加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">LOADING_SOURCE_CODE</span> = <span class="string">&#x27;LOADING_SOURCE_CODE&#x27;</span>; <span class="comment">// 路径匹配了 要去加载这个资源</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">LOAD_ERROR</span> = <span class="string">&#x27;LOAD_ERROR&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 启动的过程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_BOOTSTRAPED</span> = <span class="string">&#x27;NOT_BOOTSTRAPED&#x27;</span>; <span class="comment">// 资源加载完毕了 需要启动，此时还没有启动</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">BOOTSTRAPING</span> = <span class="string">&#x27;BOOTSTRAPING&#x27;</span>; <span class="comment">// 启动中</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_MOUNTED</span> = <span class="string">&#x27;NOT_MOUNTED&#x27;</span>; <span class="comment">// 没有被挂载</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 挂载流程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">MOUNTING</span> = <span class="string">&#x27;MOUNTING&#x27;</span>; <span class="comment">// 正在挂载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">MOUNTED</span> = <span class="string">&#x27;MOUNTED&#x27;</span>; <span class="comment">// 挂载完成</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载流程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">UNMOUNTING</span> = <span class="string">&#x27;UNMOUNTING&#x27;</span>; <span class="comment">// 卸载中</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 加载正在下载应用 LOADING_SOURCE_CODE，激活已经运行了</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 看一下这个应用是否正在被激活</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">isActive</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> app.<span class="property">status</span> === <span class="variable constant_">MOUNTED</span>; <span class="comment">// 此应用正在被激活</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 看一下此应用是否被激活</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">shouldBeActive</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> app.<span class="title function_">activeWhen</span>(<span class="variable language_">window</span>.<span class="property">location</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">getAppChanges</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToLoad = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToMount = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToUnmount = [];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        apps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> appShouldBeActive = <span class="title function_">shouldBeActive</span>(app);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">switch</span> (app.<span class="property">status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_LOADED</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">LOADING_SOURCE_CODE</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 1） 标记当前路径下 哪些应用要被加载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToLoad.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_BOOTSTRAPED</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">BOOTSTRAPING</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_MOUNTED</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 2) 当前路径下 哪些应用要被挂在</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToMount.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">MOUNTED</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 3） 当前路径下 哪些应用要被卸载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (!appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToUnmount.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123; appsToLoad, appsToMount, appsToUnmount &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lifecycles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// load</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">flattenArrayToPromise</span>(<span class="params">fns</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        fns = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(fns) ? fns : [fns];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// redux</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> fns.<span class="title function_">reduce</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">(<span class="params">rPromise, fn</span>) =&gt;</span> rPromise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">fn</span>(props)),</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toLoadPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_LOADED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此应用加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">LOADING_SOURCE_CODE</span>; <span class="comment">// 正在加载应用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// loadApp 对于之前的内容 System.import()</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">loadApp</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123; bootstrap, mount, unmount &#125; = v;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_BOOTSTRAPED</span>;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">bootstrap</span> = <span class="title function_">flattenArrayToPromise</span>(bootstrap);</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">mount</span> = <span class="title function_">flattenArrayToPromise</span>(mount);</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">unmount</span> = <span class="title function_">flattenArrayToPromise</span>(unmount);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// mount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toMountPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_MOUNTED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">mount</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// unmount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toUnmountPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">MOUNTED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">UNMOUNTING</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// app.unmount 方法用户可能写的是一个数组。。。。。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">unmount</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// bootstrap</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toBootstrapPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_BOOTSTRAPED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此应用加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">BOOTSTRAPING</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">bootstrap</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- reroute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 后续路径变化 也需要走这里， 重新计算哪些应用被加载或者写在</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> appChangeUnderWay = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> peopleWaitingOnAppChange = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">reroute</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果多次触发reroute 方法我们可以创造一个队列来屏蔽这个问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (appChangeUnderWay) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            peopleWaitingOnAppChange.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              resolve,</span></span><br><span class="line"><span class="language-javascript">              reject,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取app对应的状态 进行分类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; appsToLoad, appsToMount, appsToUnmount &#125; = <span class="title function_">getAppChanges</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 加载完毕后 需要去挂载的应用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (started) &#123;</span></span><br><span class="line"><span class="language-javascript">          appChangeUnderWay = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 用户调用了start方法 我们需要处理当前应用要挂载或者卸载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title function_">performAppChange</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 先拿到应用去加载  -》</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">loadApps</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">loadApps</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 应用的加载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(appsToLoad.<span class="title function_">map</span>(toLoadPromise)).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            callEventListener</span></span><br><span class="line"><span class="language-javascript">          ); <span class="comment">// 目前我们没有调用start</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">performAppChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 将不需要的应用卸载掉, 返回一个卸载的promise</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1) 稍后测试销毁逻辑</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> unmountAllPromises = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToUnmount.<span class="title function_">map</span>(toUnmountPromise)</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 流程加载需要的应用  -》 启动对应的应用 -》 卸载之前的 -》 挂载对应的应用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 2) 加载需要的应用（可能这个应用在注册的时候已经被加载了）</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 默认情况注册的时候 路径是 /a , 但是当我们start的时候应用是/b</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> loadMountPromises = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToLoad.<span class="title function_">map</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">toLoadPromise</span>(app).<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当应用加载完毕后 需要启动和挂载，但是要保证挂载前 先卸载掉来的应用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">tryBootstrapAndMount</span>(app, unmountAllPromises);</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果应用 没有加载   加载 -》启动挂载   如果应用已经加载过了  挂载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> <span class="title class_">MountPromises</span> = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToMount.<span class="title function_">map</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">tryBootstrapAndMount</span>(app, unmountAllPromises)</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">function</span> <span class="title function_">tryBootstrapAndMount</span>(<span class="params">app, unmountAllPromises</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title function_">shouldBeActive</span>(app)) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 保证卸载完毕在挂载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="title function_">toBootstrapPromise</span>(app).<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">                unmountAllPromises.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">toMountPromise</span>(app))</span></span><br><span class="line"><span class="language-javascript">              );</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([loadMountPromises, <span class="title class_">MountPromises</span>]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 卸载完毕后</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">callEventListener</span>();</span></span><br><span class="line"><span class="language-javascript">            appChangeUnderWay = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (peopleWaitingOnAppChange.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              peopleWaitingOnAppChange = []; <span class="comment">// 多次操作 我缓存起来，。。。。</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">callEventListener</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">callCaptureEventListeners</span>(event);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- registerApplication --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> apps = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">registerApplication</span>(<span class="params">appName, loadApp, activeWhen, customProps</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> registeration = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: appName,</span></span><br><span class="line"><span class="language-javascript">          loadApp,</span></span><br><span class="line"><span class="language-javascript">          activeWhen,</span></span><br><span class="line"><span class="language-javascript">          customProps,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">status</span>: <span class="variable constant_">NOT_LOADED</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        apps.<span class="title function_">push</span>(registeration);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>(); <span class="comment">// 重写路由</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> started = <span class="literal">false</span>; <span class="comment">// 默认没有调用start方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        started = <span class="literal">true</span>; <span class="comment">// 用户启动了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 入口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app1 = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bootstrap</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 bootstrap1&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 bootstrap2&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mount</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> (props) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 mount1&#x27;</span>, props);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 mount2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unmount</span>: <span class="keyword">async</span> (props) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 unmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app2 = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bootstrap</span>: <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 bootstrap1&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mount</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reejct</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 mount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unmount</span>: <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 unmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">registerApplication</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> () =&gt; app1,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;#/a&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">registerApplication</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> () =&gt; app2,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;#/b&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 开启路径的监控，路径切换的时候 可以调用对应的mount unmount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">start</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个监控操作 应该被延迟到 当应用挂挂载完毕后再行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>, <span class="string">&#x27;p----&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用户调用pushState replaceState 此方法不会触发逻辑reroute</span></span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="literal">null</span>, url);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么需要微前端？&quot;&gt;&lt;a href=&quot;#为什么需要微前端？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要微前端？&quot;&gt;&lt;/a&gt;为什么需要微前端？&lt;/h2&gt;</summary>
    
    
    
    <category term="微前端" scheme="https://github.com/foolishmax/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="微前端" scheme="https://github.com/foolishmax/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue响应式系统实现</title>
    <link href="https://github.com/foolishmax/2022/08/07/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/foolishmax/2022/08/07/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-08-07T03:52:47.000Z</published>
    <updated>2022-08-24T10:36:11.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bucket = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="comment">// 用一个全局变量存储当前激活的effect函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">// effect栈</span></span><br><span class="line"><span class="keyword">const</span> effectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn, options = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">effectFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用cleanup函数完成清除工作</span></span><br><span class="line">    <span class="title function_">cleanup</span>(effectFn);</span><br><span class="line">    <span class="comment">// 当调用effect注册副作用函数时，将副作用函数赋值给activeEffect</span></span><br><span class="line">    activeEffect = effectFn;</span><br><span class="line">    <span class="comment">// 调用副作用函数之前将当前副作用函数压入栈顶</span></span><br><span class="line">    effectStack.<span class="title function_">push</span>(effectFn);</span><br><span class="line">    <span class="comment">// 把fn的执行结果存储在res中</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">fn</span>();</span><br><span class="line">    <span class="comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并将activeEffect还原为之前的值</span></span><br><span class="line">    effectStack.<span class="title function_">pop</span>();</span><br><span class="line">    activeEffect = effectStack[effectStack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 将options挂载到effectFn上</span></span><br><span class="line">  effectFn.<span class="property">options</span> = options;</span><br><span class="line">  <span class="comment">// 用来存储所有与该副作用函数相关的依赖集合</span></span><br><span class="line">  effectFn.<span class="property">deps</span> = [];</span><br><span class="line">  <span class="comment">// 只有非lazy的时候，才执行</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="title function_">effectFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">getter</span>) &#123;</span><br><span class="line">  <span class="comment">// 用来缓存上一次计算的值</span></span><br><span class="line">  <span class="keyword">let</span> value;</span><br><span class="line">  <span class="comment">// dirty标志，用来识别是否需要重新计算值，为true时则意味着“脏”，需要计算</span></span><br><span class="line">  <span class="keyword">let</span> dirty = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> effectFn = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">scheduler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dirty) &#123;</span><br><span class="line">        dirty = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应</span></span><br><span class="line">        <span class="title function_">trigger</span>(obj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (dirty) &#123;</span><br><span class="line">        value = <span class="title function_">effectFn</span>();</span><br><span class="line">        dirty = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 当读取value时，手动调用track函数进行追踪</span></span><br><span class="line">      <span class="title function_">track</span>(obj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">source, cb, options = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">// 如果是函数，说明用户传递的不再是一个响应式数据，而是一个getter函数，直接把source赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则调用traverse递归读取响应式数据属性</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(source);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">// cleanup用来存储用户注册的国旗回调</span></span><br><span class="line">  <span class="keyword">let</span> cleanup;</span><br><span class="line">  <span class="comment">// 定义onInvalidate函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onInvalidate</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 将过期回调存储到cleanup中</span></span><br><span class="line">    cleanup = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提取调度器scheduler为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">job</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在scheduler中重新执行副作用函数，得到的是新值</span></span><br><span class="line">    newValue = <span class="title function_">effectFn</span>();</span><br><span class="line">    <span class="comment">// 在调用糊掉函数cb之前，先调用过期回调</span></span><br><span class="line">    <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">      <span class="title function_">cleanup</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将旧值和新值作为回调函数的参数</span></span><br><span class="line">    <span class="title function_">cb</span>(newValue, oldValue);</span><br><span class="line">    <span class="comment">// 更新旧值，不然下次会得到错误的旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 使用effect注册副作用函数时，开启lazy选项，并把返回值存储到effectFn中一边后续手动调用</span></span><br><span class="line">  <span class="keyword">const</span> effectFn = <span class="title function_">effect</span>(<span class="function">() =&gt;</span> <span class="title function_">getter</span>(), &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">scheduler</span>: job,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">immediate</span>) &#123;</span><br><span class="line">    <span class="comment">// 当immediate为true时立即执行job，从而触发回调执行</span></span><br><span class="line">    <span class="title function_">job</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 手动调用副作用函数，拿到的值就是旧值</span></span><br><span class="line">    oldValue = <span class="title function_">effectFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">value, seen = <span class="keyword">new</span> <span class="built_in">Set</span>()</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果要读取的数据是原始值，或者已经被读取过了，那么什么都不做</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&quot;object&quot;</span> || value === <span class="literal">null</span> || seen.<span class="title function_">has</span>(value)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 将数据添加到seen中，代表便利地读取过了，避免循环引用引起的死循环</span></span><br><span class="line">  seen.<span class="title function_">add</span>(value);</span><br><span class="line">  <span class="comment">// 暂时不考虑数组等其他结构</span></span><br><span class="line">  <span class="comment">// 假设value是一个对象，使用for...in读取对新啊个的每一个值，并递归调用traverse进行处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">    <span class="title function_">traverse</span>(value[k], seen);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params">effectFn</span>) &#123;</span><br><span class="line">  <span class="comment">// 遍历effectFn.deps数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; effectFn.<span class="property">deps</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// deps是依赖集合</span></span><br><span class="line">    <span class="keyword">const</span> deps = effectFn.<span class="property">deps</span>[i];</span><br><span class="line">    <span class="comment">// 将effectFn从依赖集合中移除</span></span><br><span class="line">    deps.<span class="title function_">delete</span>(effectFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后需要重置effectFn.deps数组</span></span><br><span class="line">  effectFn.<span class="property">deps</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在get拦截函数内调用track函数追踪变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 没有activeEffect，直接return</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span> target[key];</span><br><span class="line">  <span class="comment">// 根据target从“桶”中取得depsMap，也是一个Map类型：key --&gt; effects</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = bucket.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="comment">// 如果不存在depsMap，新建一个Map并与target关联</span></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    bucket.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据key从depsMap中取得deps，它是一个Set类型，</span></span><br><span class="line">  <span class="comment">// 里面存储着所有与当前key相关联的副作用函数：effects</span></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, (deps = <span class="keyword">new</span> <span class="title class_">Set</span>()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后将当前激活的副作用函数添加到“桶”中</span></span><br><span class="line">  deps.<span class="title function_">add</span>(activeEffect);</span><br><span class="line">  <span class="comment">// deps就是一个与当前副作用函数存在联系的依赖集合</span></span><br><span class="line">  <span class="comment">// 将其添加到activeEffect.deps数组中</span></span><br><span class="line">  activeEffect.<span class="property">deps</span>.<span class="title function_">push</span>(deps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在set函数拦截内调用trigger函数出发变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 根据target从桶中取出depsMap，它是 key --&gt; effects</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = bucket.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 根据key取得所有副作用函数effects</span></span><br><span class="line">  <span class="keyword">const</span> effects = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line">  <span class="comment">// 在调用forEach遍历Set集合时，如果一个值已经被访问过了，</span></span><br><span class="line">  <span class="comment">// 但该值被删除并重新添加集合，如果此时forEach遍历还没结束</span></span><br><span class="line">  <span class="comment">// 该值会重新被访问，就会导致无限循环执行。</span></span><br><span class="line">  <span class="comment">// 解决方法：构造另一个Set集合遍历它</span></span><br><span class="line">  <span class="keyword">const</span> effectsToRun = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="comment">// 执行副作用函数</span></span><br><span class="line">  effects &amp;&amp;</span><br><span class="line">    effects.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果trigger触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行</span></span><br><span class="line">      <span class="keyword">if</span> (effectFn !== activeEffect) &#123;</span><br><span class="line">        effectsToRun.<span class="title function_">add</span>(effectFn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  effectsToRun.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果一个副作用函数存在调度器，则调用该调度器，并将副作用函数作为参数传递</span></span><br><span class="line">    <span class="keyword">if</span> (effectFn.<span class="property">options</span>.<span class="property">scheduler</span>) &#123;</span><br><span class="line">      effectFn.<span class="property">options</span>.<span class="title function_">scheduler</span>(effectFn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则直接执行副作用函数</span></span><br><span class="line">      <span class="title function_">effectFn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>, <span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="comment">// 拦截读取操作</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="comment">// 将副作用函数activeEffect添加到存储副作用函数的桶中</span></span><br><span class="line">    <span class="title function_">track</span>(target, key);</span><br><span class="line">    <span class="comment">// 返回属性值</span></span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截设置操作</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置属性值</span></span><br><span class="line">    target[key] = newVal;</span><br><span class="line">    <span class="comment">// 把副作用函数从桶中取出并执行</span></span><br><span class="line">    <span class="title function_">trigger</span>(target, key);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp1, temp2;</span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">foo</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">obj.<span class="property">foo</span>++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="comment">// const sum = computed(() =&gt; obj.foo + obj.bar);</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(sum.value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.foo++;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lazy</span></span><br><span class="line"><span class="comment">// const effectFn = effect(</span></span><br><span class="line"><span class="comment">//   () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(obj.text);</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     lazy: true,</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="comment">// effectFn();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的effect与effect栈</span></span><br><span class="line"><span class="comment">// effect(function effectFn1() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;effectFn1 执行&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   effect(function effectFn2() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;effectFn2 执行&quot;);</span></span><br><span class="line"><span class="comment">//     temp2 = obj.ok;</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   temp1 = obj.text;</span></span><br><span class="line"><span class="comment">//   obj.text += &quot;1&quot;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分支切换与cleanup</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;effect run&#x27;);</span></span><br><span class="line"><span class="comment">//   document.body.innerText =  obj.ok ? obj.text : &quot;not&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   obj.text = &#x27;foolishmax&#x27;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不存在的属性不添加响应式</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   obj.text = &quot;hello vue3&quot;;</span></span><br><span class="line"><span class="comment">//   // obj.notExist = &#x27;hello vue3&#x27;</span></span><br><span class="line"><span class="comment">// &#125;, 3000);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;源码实现&quot;&gt;&lt;a href=&quot;#源码实现&quot; class=&quot;headerlink&quot; title=&quot;源码实现&quot;&gt;&lt;/a&gt;源码实现&lt;/h2&gt;</summary>
    
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>实现精简版useSize</title>
    <link href="https://github.com/foolishmax/2022/08/04/%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%AE%80%E7%89%88useSize/"/>
    <id>https://github.com/foolishmax/2022/08/04/%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%AE%80%E7%89%88useSize/</id>
    <published>2022-08-04T03:22:47.000Z</published>
    <updated>2022-08-04T03:30:24.654Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ahooks.gitee.io/">ahooks</a>是阿里开源的一套 React Hooks 库，里面封装了大量好用的 Hooks，最近也在项目中频繁使用到了库中<a href="https://ahooks.gitee.io/hooks/use-size">useSize</a>这个钩子函数，于是就学习了一下它的源码实现，并且实现了一个精简版<strong>useSize</strong>。</p><span id="more"></span><p>要点一：<strong>ResizeObserver</strong>监听 Element 内容区域的边界框改变</p><p>要点二：<strong>requestAnimationFrame</strong>优化高频刷新情况下的数据更新</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">MutableRefObject</span>,</span><br><span class="line">  useCallback,</span><br><span class="line">  useEffect,</span><br><span class="line">  useLayoutEffect,</span><br><span class="line">  useRef,</span><br><span class="line">  useState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TargetValue</span>&lt;T&gt; = T | <span class="literal">undefined</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TargetType</span> = <span class="title class_">HTMLElement</span> | <span class="title class_">Element</span> | <span class="title class_">Window</span> | <span class="title class_">Document</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">BasicTarget</span>&lt;T <span class="keyword">extends</span> <span class="title class_">TargetType</span> = <span class="title class_">Element</span>&gt; =</span><br><span class="line">  | (<span class="function">() =&gt;</span> <span class="title class_">TargetValue</span>&lt;T&gt;)</span><br><span class="line">  | <span class="title class_">TargetValue</span>&lt;T&gt;</span><br><span class="line">  | <span class="title class_">MutableRefObject</span>&lt;<span class="title class_">TargetValue</span>&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Size</span> = &#123; <span class="attr">width</span>: <span class="built_in">number</span>; <span class="attr">height</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useSize</span>(<span class="params">target: BasicTarget</span>): <span class="title class_">Size</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState&lt;<span class="title class_">Size</span> | <span class="literal">undefined</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [resizeObserver, setResizeObserver] = useState&lt;<span class="title class_">ResizeObserver</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> setRafState = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">value: Size | ((prevState?: Size) =&gt; Size)</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(ref.<span class="property">current</span>);</span><br><span class="line"></span><br><span class="line">      ref.<span class="property">current</span> = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setState</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resizeObserver?.<span class="title function_">disconnect</span>();</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(ref.<span class="property">current</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">targetEl</span>: <span class="title class_">TargetValue</span>&lt;<span class="title class_">TargetType</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;current&quot;</span> <span class="keyword">in</span> target) &#123;</span><br><span class="line">      targetEl = target.<span class="property">current</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      targetEl = <span class="title function_">target</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      targetEl = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!targetEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resizeObserver = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; clientWidth, clientHeight &#125; = entry.<span class="property">target</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">setRafState</span>(&#123;</span><br><span class="line">          <span class="attr">width</span>: clientWidth,</span><br><span class="line">          <span class="attr">height</span>: clientHeight,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setResizeObserver</span>(resizeObserver);</span><br><span class="line"></span><br><span class="line">    resizeObserver?.<span class="title function_">observe</span>(targetEl);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> size = <span class="title function_">useSize</span>(ref);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">red</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to resize the preview window <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        width: &#123;size?.width&#125;px, height: &#123;size?.height&#125;px</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅作为自己的学习积累，有什么需要改进的地方请大家多多批评指点 😅！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ahooks.gitee.io/&quot;&gt;ahooks&lt;/a&gt;是阿里开源的一套 React Hooks 库，里面封装了大量好用的 Hooks，最近也在项目中频繁使用到了库中&lt;a href=&quot;https://ahooks.gitee.io/hooks/use-size&quot;&gt;useSize&lt;/a&gt;这个钩子函数，于是就学习了一下它的源码实现，并且实现了一个精简版&lt;strong&gt;useSize&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="react-hooks" scheme="https://github.com/foolishmax/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>aliyun服务器实践</title>
    <link href="https://github.com/foolishmax/2022/08/02/aliyun%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>https://github.com/foolishmax/2022/08/02/aliyun%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-08-02T08:11:31.000Z</published>
    <updated>2022-08-05T02:20:27.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建新的账号"><a href="#创建新的账号" class="headerlink" title="创建新的账号"></a>创建新的账号</h2><p>默认使用 root 登录，由于 root 权限太高，出于安全考虑，创建 foolishmax（自定义）账号</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增账号foolishmax</span></span><br><span class="line">adduser foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改foolishmax的密码</span></span><br><span class="line">passwd foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为foolishmax账号添加sudo权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到文件位置 /etc/sudoers</span></span><br><span class="line">whereis sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u 标识所有者、w 表示写权限 + 表示添加</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 /etc/sudoers</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到 `root ALL=(ALL) ALL`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再加一行 `work ALL=(ALL) ALL`</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原权限</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换foolishmax用户</span></span><br><span class="line">su foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换回root</span></span><br><span class="line">su</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换成功</span></span><br></pre></td></tr></table></figure><h2 id="下载常用工具"><a href="#下载常用工具" class="headerlink" title="下载常用工具"></a>下载常用工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// git</span><br><span class="line">yum -y install git</span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line">// 安装docker</span><br><span class="line">yum -y install docker</span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">// 安装docker-compose</span><br><span class="line">// 1. 下载二进制文件</span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64</span><br><span class="line">// 2.移动文件</span><br><span class="line">mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">// 3.赋予可执行权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">// 4.创建软链</span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">// 5.测试是否安装成功</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p><a href="https://ecs.console.aliyun.com/securityGroupDetail/region/cn-shanghai/groupId/sg-uf6ecwnj4s2zj738k4a8/detail/intranetIngress">aliyun 控制台服务</a></p><h2 id="发布测试机"><a href="#发布测试机" class="headerlink" title="发布测试机"></a>发布测试机</h2><p>思路：</p><ol><li>使用 github actions 监听 dev 分支 push</li><li>登录测试机，获取最新 dev 分支代码</li><li>重建构建镜像 <strong>docker-compose build project-name</strong></li><li>重启所有容器 <strong>docker-compose up -d</strong></li></ol><p>github actions<br>代码在项目 <strong>.github/workflows</strong> 目录下面的 <strong>.yml</strong> 格式文件<br><strong>deplop-dev.yml</strong>示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This workflow will <span class="keyword">do</span> a clean install of node dependencies, build the <span class="built_in">source</span> code and run tests across different versions of node</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github actions 中文文档 https://docs.github.com/cn/actions/getting-started-with-github-actions</span></span><br><span class="line"></span><br><span class="line">name: deploy for dev</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">    push:</span><br><span class="line">        branches:</span><br><span class="line">            - &#x27;dev&#x27; # 只针对 dev 分支</span><br><span class="line">        paths:</span><br><span class="line">            - &#x27;.github/workflows/*&#x27;</span><br><span class="line">            # - &#x27;__test__/**&#x27; # dev 不需要立即测试</span><br><span class="line">            - &#x27;src/**&#x27;</span><br><span class="line">            - &#x27;Dockerfile&#x27;</span><br><span class="line">            - &#x27;docker-compose.yml&#x27;</span><br><span class="line">            - &#x27;bin/*&#x27;</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">    deploy-dev:</span><br><span class="line">        runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">        steps:</span><br><span class="line">            - uses: actions/checkout@v2</span><br><span class="line">            - name: set ssh key # 临时设置 ssh key</span><br><span class="line">              run: |</span><br><span class="line">                  mkdir -p ~/.ssh/</span><br><span class="line">                  echo &quot;$&#123;&#123;secrets.WFP_ID_RSA&#125;&#125;&quot; &gt; ~/.ssh/id_rsa # secret 在这里配置 https://github.com/imooc-lego/biz-editor-server/settings/secrets</span><br><span class="line">                  chmod 600 ~/.ssh/id_rsa</span><br><span class="line">                  ssh-keyscan &quot;182.92.xxx.xxx&quot; &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">            - name: deploy # 部署</span><br><span class="line">              run: |</span><br><span class="line">                  ssh work@182.92.xxx.xxx &quot;</span><br><span class="line">                    # 【注意】用 work 账号登录，手动创建 /home/work/imooc-lego 目录</span><br><span class="line">                    # 然后 git clone https://username:password@github.com/imooc-lego/biz-editor-server.git -b dev （私有仓库，使用 github 用户名和密码）</span><br><span class="line">                    # 记得删除 origin ，否则会暴露 github 密码</span><br><span class="line"></span><br><span class="line">                    cd /home/work/imooc-lego/biz-editor-server;</span><br><span class="line">                    git remote add origin https://wangfupeng1988:$&#123;&#123;secrets.WFP_PASSWORD&#125;&#125;@github.com/imooc-lego/biz-editor-server.git;</span><br><span class="line">                    git checkout dev;</span><br><span class="line">                    git pull origin dev; # 重新下载最新代码</span><br><span class="line">                    git remote remove origin; # 删除 origin ，否则会暴露 github 密码</span><br><span class="line">                    # 启动 docker</span><br><span class="line">                    docker-compose build editor-server; # 和 docker-compose.yml service 名字一致</span><br><span class="line">                    docker-compose up -d;</span><br><span class="line">                  &quot;</span><br><span class="line">            - name: delete ssh key # 删除 ssh key</span><br><span class="line">              run: rm -rf ~/.ssh/id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;创建新的账号&quot;&gt;&lt;a href=&quot;#创建新的账号&quot; class=&quot;headerlink&quot; title=&quot;创建新的账号&quot;&gt;&lt;/a&gt;创建新的账号&lt;/h2&gt;&lt;p&gt;默认使用 root 登录，由于 root 权限太高，出于安全考虑，创建 foolishmax（自定义）账号&lt;/p&gt;</summary>
    
    
    
    
    <category term="aliyun" scheme="https://github.com/foolishmax/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>docker实践指南</title>
    <link href="https://github.com/foolishmax/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/foolishmax/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-31T02:09:12.000Z</published>
    <updated>2023-08-12T02:31:01.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><span id="more"></span><h3 id="获取镜像-docker-pull"><a href="#获取镜像-docker-pull" class="headerlink" title="获取镜像 docker pull"></a>获取镜像 docker pull</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull 从镜像仓库中拉取或者更新指定镜像</span></span><br><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure><h3 id="列出已经下载的镜像-docker-images"><a href="#列出已经下载的镜像-docker-images" class="headerlink" title="列出已经下载的镜像 docker images"></a>列出已经下载的镜像 docker images</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出某一个镜像</span></span><br><span class="line">docker images ubuntu</span><br></pre></td></tr></table></figure><h3 id="删除镜像-docker-rmi"><a href="#删除镜像-docker-rmi" class="headerlink" title="删除镜像 docker rmi"></a>删除镜像 docker rmi</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 501</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">docker rmi centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker prune命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被tag标记或者未被容器使用的镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被容器使用的镜像</span></span><br><span class="line">docker image prune -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有停止运行的容器</span></span><br><span class="line">docker container prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被挂载的卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有网络</span></span><br><span class="line">docker network prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker所有资源</span></span><br><span class="line">docker system prune</span><br></pre></td></tr></table></figure><h3 id="上传镜像-docker-push"><a href="#上传镜像-docker-push" class="headerlink" title="上传镜像 docker push"></a>上传镜像 docker push</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker push:将本地的镜像上传到镜像仓库，先登录镜像仓库</span></span><br><span class="line">docker image push mynode:v1</span><br></pre></td></tr></table></figure><h3 id="save镜像"><a href="#save镜像" class="headerlink" title="save镜像"></a>save镜像</h3><p>docker image save nginx:1.20.0 -o nginx.name</p><h3 id="load镜像"><a href="#load镜像" class="headerlink" title="load镜像"></a>load镜像</h3><p>docker image load -i ./nginx.name</p><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="列出容器-docker-ps"><a href="#列出容器-docker-ps" class="headerlink" title="列出容器 docker ps"></a>列出容器 docker ps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a :显示所有的容器，包括未运行的</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="停止容器-docker-stop"><a href="#停止容器-docker-stop" class="headerlink" title="停止容器 docker stop"></a>停止容器 docker stop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止运行中的容器myrunoob</span></span><br><span class="line">docker stop myrunoob</span><br></pre></td></tr></table></figure><h3 id="启动容器-docker-start"><a href="#启动容器-docker-start" class="headerlink" title="启动容器 docker start"></a>启动容器 docker start</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已被停止的容器myrunoob</span></span><br><span class="line">docker start myrunoob</span><br></pre></td></tr></table></figure><h3 id="重启容器-docker-restart"><a href="#重启容器-docker-restart" class="headerlink" title="重启容器 docker restart"></a>重启容器 docker restart</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器myrunoob</span></span><br><span class="line">docker restart myrunoob</span><br></pre></td></tr></table></figure><h3 id="删除容器-docker-rm"><a href="#删除容器-docker-rm" class="headerlink" title="删除容器 docker rm"></a>删除容器 docker rm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除容器 db01、db02</span></span><br><span class="line">docker rm -f db01 db02</span><br></pre></td></tr></table></figure><h3 id="查看容器信息-docker-inspect"><a href="#查看容器信息-docker-inspect" class="headerlink" title="查看容器信息 docker inspect"></a>查看容器信息 docker inspect</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取容器/镜像的元数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像mysql:5.6的元信息</span></span><br><span class="line">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure><h3 id="查看容器中运行的进程信息"><a href="#查看容器中运行的进程信息" class="headerlink" title="查看容器中运行的进程信息"></a>查看容器中运行的进程信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker contaienr top [id]</span><br></pre></td></tr></table></figure><h3 id="查看容器日志-docker-logs"><a href="#查看容器日志-docker-logs" class="headerlink" title="查看容器日志 docker logs"></a>查看容器日志 docker logs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪查看容器mynginx的日志输出</span></span><br><span class="line">docker logs -f mynginx</span><br></pre></td></tr></table></figure><h3 id="进入容器控制台-docker-exec"><a href="#进入容器控制台-docker-exec" class="headerlink" title="进入容器控制台 docker exec"></a>进入容器控制台 docker exec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在运行的容器中执行命令</span><br><span class="line">// -d:分离模式，在后台运行</span><br><span class="line">// -i: 即使没有附加也保持STDIN打开</span><br><span class="line">// -t: 分配一个伪终端</span><br><span class="line">// docker exec -it &lt;container-id&gt; /bin/sh</span><br><span class="line"></span><br><span class="line">// 执行 exit 退出</span><br></pre></td></tr></table></figure><h2 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h2><!--more--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Docker.app</span><br></pre></td></tr></table></figure><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p>eg1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/echo &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure><p>各个参数解析：</p><ul><li><p>docker：Docker 的二进制执行文件</p></li><li><p>run：与 docker 组合来运行一个容器</p></li><li><p>ubuntu:15.10 指定要运行的景象，docker 先从本地主机查找景象是否存在，如不存在，docker 就会从 <a href="https://hub.docker.com/">Docker hub</a>镜像仓库下载公共镜像</p></li><li><p>/bin/echo ‘hello world’：在启动的容器中执行的命令</p></li></ul><p>注意：</p><ul><li><p>不存在时会出现错误信息： <em>Unable to find image ‘ubuntu:15.10’ locally</em></p></li><li><p>之后便会从镜像仓库下载公共镜像</p></li><li><p>打印 hello world</p></li><li><p>M1-Mac 可能会出现如下警告：<em>WARNING: The requested image’s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested</em></p><ul><li>解决方法：<strong>docker run –platform linux/amd64 ubuntu:15.10 /bin/echo ‘hello world’</strong></li></ul></li></ul><p>eg2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 启动容器 docker run -p xxx:xxx -v=hostPath:containerPath -d --name &lt;container-name&gt; &lt;image-name&gt;</span><br><span class="line">// -p 端口映射</span><br><span class="line">// -v 数据卷，文件映射</span><br><span class="line">// -d 后台运行</span><br><span class="line">// --name 定义容器名称</span><br><span class="line">docker run -p 81:80 -d --name nginx1 nginx</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文件内容包含一条条构建镜像所需的指令和说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Dockerfile</span></span><br><span class="line">FROM node:latest</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line">RUN npm set registry https://registry.npm.taobao.org</span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm install pm2 -g</span><br><span class="line"></span><br><span class="line">CMD echo $SERVER_NAME &amp;&amp; echo $AUTHOR_NAME &amp;&amp; npm run start &amp;&amp; npx npm2 log</span><br><span class="line"></span><br><span class="line">ENV SERVER_NAME = &#x27;react-demo&#x27;</span><br><span class="line">ENV AUTHOR_NAME = &#x27;foolishmax&#x27;</span><br></pre></td></tr></table></figure><h2 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><h2 id="始构建镜像"><a href="#始构建镜像" class="headerlink" title="始构建镜像"></a>始构建镜像</h2><p>在 Dockerfile 文件的存放目录下，执行构建动作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t aaa:ccc .</span><br></pre></td></tr></table></figure><p>-t: 指定要创建的目标镜像名<br>.:Dockerfile文件所在目录，可以指定Dockerfile的绝对路径<br>aaa:镜像名<br>ccc:镜像的标签</p><h2 id="查看镜像分层情况"><a href="#查看镜像分层情况" class="headerlink" title="查看镜像分层情况"></a>查看镜像分层情况</h2><p>docker image history e34293</p><h2 id="docker-images-查看"><a href="#docker-images-查看" class="headerlink" title="docker images 查看"></a>docker images 查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">react-demo-image   latest    35c499bddac6   3 minutes ago   1.22GB</span><br><span class="line">node-test          latest    028a51c6e54d   8 months ago    945MB</span><br><span class="line">nginx              latest    f1325989da19   8 months ago    134MB</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8081:3000 -d --name react-demo-server react-demo-image</span><br></pre></td></tr></table></figure><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE              COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class="line">f71ef1480035   react-demo-image   &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 3 seconds   0.0.0.0:8081-&gt;3000/tcp   react-demo-server</span><br></pre></td></tr></table></figure><h2 id="contaier保存为镜像"><a href="#contaier保存为镜像" class="headerlink" title="contaier保存为镜像"></a>contaier保存为镜像</h2><p>docker container commit 884 hello/nginx</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>docker logs f71ef1480035</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 这两行对应Dockerfile中的CMD变量打印</span><br><span class="line">= react-demo</span><br><span class="line">= foolishmax</span><br><span class="line"></span><br><span class="line">&gt; react-demo@0.1.0 start</span><br><span class="line">&gt; react-scripts start</span><br><span class="line"></span><br><span class="line">(node:27) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: &#x27;onAfterSetupMiddleware&#x27; option is deprecated. Please use the &#x27;setupMiddlewares&#x27; option.</span><br><span class="line">(Use `node --trace-deprecation ...` to show where the warning was created)</span><br><span class="line">(node:27) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: &#x27;onBeforeSetupMiddleware&#x27; option is deprecated. Please use the &#x27;setupMiddlewares&#x27; option.</span><br><span class="line">Starting the development server...</span><br><span class="line"></span><br><span class="line">Compiled successfully!</span><br><span class="line"></span><br><span class="line">You can now view react-demo in the browser.</span><br><span class="line"></span><br><span class="line">  Local:            http://localhost:3000</span><br><span class="line">  On Your Network:  http://172.17.0.2:3000</span><br><span class="line"></span><br><span class="line">Note that the development build is not optimized.</span><br><span class="line">To create a production build, use npm run build.</span><br><span class="line"></span><br><span class="line">webpack compiled successfully</span><br><span class="line">Compiling...</span><br><span class="line">Compiled successfully!</span><br><span class="line">webpack compiled successfully</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>// 列出所有container<br>docker container ps -a<br>// 列出所有container的id<br>docker container ps -aq<br>// 停止所有的container<br>docker container stop $(docker container ps -aq)<br>// 指定某个id停止容器<br>docker stop f71ef1480035</p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>// 删除所有的container<br>docker container rm $(docker container ps -aq)<br>// 指定某个id删除容器<br>docker rm f71ef1480035</p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>docker rmi 35c499bddac6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Untagged: react-demo-image:latest</span><br><span class="line">Deleted: sha256:35c499bddac6675ff20a7d951fc1c1f6770a10430278fec6f2b8d1c866037624</span><br></pre></td></tr></table></figure><h2 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">edditor-server:</span> <span class="comment"># service name</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span> <span class="comment">#当前目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment">#  基于Dockerfile构建</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">editor-server</span> <span class="comment">#依赖当前dockerfile创建出来的镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:3000</span> <span class="comment">#宿主机通过8081访问</span></span><br><span class="line">  <span class="attr">editor-redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span> <span class="comment">#引用官方redis镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6378</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">  <span class="attr">editor-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span> <span class="comment"># 引用官网 mysql 镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 出错则重启</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span> <span class="comment"># 高权限，执行下面的 mysql/init</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="comment"># 远程访问</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3305</span><span class="string">:3306</span> <span class="comment"># 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库，和 redis 一样</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.docker-volumes/mysql/log:/var/log/mysql</span> <span class="comment"># 记录日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.docker-volumes/mysql/data:/var/lib/mysql</span> <span class="comment"># 数据持久化</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/init:/docker-entrypoint-initdb.d/</span> <span class="comment"># 初始化 sql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=imooc_lego_course</span> <span class="comment"># 初始化容器时创建数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=Mysql_2019</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">  <span class="attr">editor-mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span> <span class="comment"># 引用官网 mongo 镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.docker-volumes/mongo/data:/data/db&#x27;</span> <span class="comment"># 数据持久化,映射本地文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_DATABASE=imooc_lego_course</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;27016:27017&#x27;</span> <span class="comment"># 宿主机可以用 127.0.0.1:27016 即可连接容器中的数据库</span></span><br></pre></td></tr></table></figure><ul><li>构建容器 docker-compose build <service-name></li><li>启动所有服务器 docker-compose up -d,后台启动</li><li>查看服务 docker-compose ps (相比较 docker ps 等于多了层作用域)</li><li>停止所有服务 docker-compose down</li></ul><p>注意：<br>经过以上操作之后需修改.gitignore 文件，增加一行 <em>.docker-volumes/</em></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;镜像操作&quot;&gt;&lt;a href=&quot;#镜像操作&quot; class=&quot;headerlink&quot; title=&quot;镜像操作&quot;&gt;&lt;/a&gt;镜像操作&lt;/h2&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://github.com/foolishmax/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>面试手写篇</title>
    <link href="https://github.com/foolishmax/2022/03/31/%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99%E7%AF%87/"/>
    <id>https://github.com/foolishmax/2022/03/31/%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99%E7%AF%87/</id>
    <published>2022-03-30T16:36:27.000Z</published>
    <updated>2023-05-15T09:59:36.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2>  <span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(arr[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arrp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用filter + indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用Es6中的Set数据结构(扩展运算符)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.form 方法将set结构转换为数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = arr.flat(Infinity)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = JSON.parse(JSON.stringify(arr).replace(/\[|\]/g,&quot;&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> accu.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(curr) ? <span class="title function_">flatArr</span>(curr) : curr);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatArr</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只考虑对象类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign()</span></span><br><span class="line"><span class="comment">// arr.slice(0)</span></span><br><span class="line"><span class="comment">// arr.concat()</span></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只考虑普通对象属性，不考虑内置对象和函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] =</span><br><span class="line">        <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">deepClone</span>(obj[key]) : obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse(JSON.stringify())</span></span><br><span class="line"><span class="comment">// lodash: _.cloneDeep()</span></span><br></pre></td></tr></table></figure><h2 id="实现一个-compose-组合-函数"><a href="#实现一个-compose-组合-函数" class="headerlink" title="实现一个 compose(组合)函数"></a>实现一个 compose(组合)函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">    <span class="keyword">if</span>(fn.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> fn[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">accu</span>(<span class="title function_">curr</span>(...args)) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">compose</span>(fn1, fn2, fn3, fn4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">res</span>(<span class="number">5</span>)); <span class="comment">// 5+4+3+2+1=15</span></span><br></pre></td></tr></table></figure><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><blockquote><p>函数柯里化就是让我们传递参数的方式不在局限于一次传完，可以分步，所以柯里化的核心就在于等到接收到的参数等于函数参数时再调用函数把所有参数传递进去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 需要柯里化的函数fn，也可以支持初始参数的传入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//参数缓存在args里面,合并上次参数和本次参数</span></span><br><span class="line">    args = [...args, ...<span class="variable language_">arguments</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断参数个数，不够继续递归</span></span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &lt; fn.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//参数足够返回函数执行结果</span></span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">curry</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">assign</span> = <span class="keyword">function</span> (<span class="params">target, ...source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target === <span class="literal">null</span> || target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Cannot convert undefined or null to object&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Object</span>(target);</span><br><span class="line"></span><br><span class="line">  source.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">          result[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line"></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索联想，用户在不断输入时，用防抖来节约请求资源</span></span><br><span class="line"><span class="comment">// window触发resize的时候</span></span><br></pre></td></tr></table></figure><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">      previous = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标不断点击触发，可以使其单位时间内只触发一次</span></span><br><span class="line"><span class="comment">// 监听滚动事件</span></span><br><span class="line"><span class="comment">// 防止高频点击提交</span></span><br></pre></td></tr></table></figure><h2 id="如何把字符串中大小写取反"><a href="#如何把字符串中大小写取反" class="headerlink" title="如何把字符串中大小写取反"></a>如何把字符串中大小写取反</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;LiBoShi&#x27;</span>;</span><br><span class="line"></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> content.<span class="title function_">toUpperCase</span>() === content</span><br><span class="line">    ? content.<span class="title function_">toLowerCase</span>()</span><br><span class="line">    : content.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf"><a href="#从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf" class="headerlink" title="从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf"></a>从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">T</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="variable language_">this</span>.<span class="property">length</span> - T.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">substr</span>(i, T.<span class="property">length</span>) === T) &#123;</span><br><span class="line">      <span class="keyword">return</span> (index = i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myIndexOf</span> = myIndexOf;</span><br><span class="line"><span class="comment">// 正则方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">T</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(T);</span><br><span class="line">  <span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res === <span class="literal">null</span> ? -<span class="number">1</span> : res.<span class="property">index</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造一个全新的对象</span></span><br><span class="line"><span class="comment">// 新对象会被执行[[prototype]]连接</span></span><br><span class="line"><span class="comment">// 新对象绑定到函数调用的this</span></span><br><span class="line"><span class="comment">// 如果函数没有返回其他对象，那么返回对象本身，否则返回其他对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">const</span> result = fn.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result !== <span class="literal">null</span> ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="title function_">newFn</span>(<span class="title class_">Person</span>, <span class="string">&#x27;Jerome&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p.name :&gt;&gt; &#x27;</span>, p.<span class="property">name</span>); <span class="comment">// p.name :&gt;&gt;  Jerome</span></span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">desc</span>: <span class="keyword">function</span> (<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>来自<span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>去往<span class="subst">$&#123;to&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lbs&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">desc</span>.<span class="title function_">myCall</span>(person, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">content, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">...newFnArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 检测 New</span></span><br><span class="line">    <span class="comment">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">fn</span>(...args, ...newFnArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">myApply</span>(context, [...args, ...newFnArgs]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过left.__proto__.__proto__这种方式从下往上的获取原型对象</span></span><br><span class="line"><span class="comment">// 2. 通过Object.create(null)的实例是没有原型链</span></span><br><span class="line"><span class="comment">// 3. 有原型链的实例的尽头都是Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!left.<span class="property">__proto__</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (right === <span class="title class_">Object</span> || left.<span class="property">__proto__</span> === right.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_instanceof</span>(left.<span class="property">__proto__</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">_instanceof</span>(<span class="regexp">/123/</span>, <span class="title class_">RegExp</span>);</span><br></pre></td></tr></table></figure><h2 id="手写-Object-is"><a href="#手写-Object-is" class="headerlink" title="手写 Object.is"></a>手写 Object.is</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">is</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="comment">// x,y都为0，但是1 / +0 = +Infinity,1 / -0 = -Infinity 是不一样的</span></span><br><span class="line">    <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//NaN === NaN = false是不对的，做一个拦截操作</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">method, url, headers, body</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> req = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      req = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">open</span>(method, url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">      req.<span class="title function_">setRequestHeader</span>(key, headers[key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">onreadystatechange</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">readystate</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; req.<span class="property">status</span> &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">send</span>(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">fn, toThis</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> _this = toThis || <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = fn.<span class="title function_">call</span>(_this, arr[i], i, arr);</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写-promise"><a href="#手写-promise" class="headerlink" title="手写 promise"></a>手写 promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise1</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">PENDING</span>; <span class="comment">//默认状态，进行中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span>; <span class="comment">//成功值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span>; <span class="comment">// 失败原因</span></span><br><span class="line">    <span class="comment">// 解决异步问题</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">FULFILLED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">REJECTED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      onFulfilled = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      onRejected = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">reason</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">REJECTED</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(<span class="params">result, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise1</span>) &#123;</span><br><span class="line">        result.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise1</span>) &#123;</span><br><span class="line">        value.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">length</span> === promises.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aaa = <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;lbs&#x27;</span>);</span><br><span class="line">  <span class="comment">//     reject(&#x27;error&#x27;)</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">aaa.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa);</span><br></pre></td></tr></table></figure><h2 id="手写-promise-allSettled"><a href="#手写-promise-allSettled" class="headerlink" title="手写 promise.allSettled"></a>手写 promise.allSettled</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseAllSettled</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseArr)) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;arguments must be an array&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promiseArr[i])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          res[i] = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>,</span><br><span class="line">            value,</span><br><span class="line">            <span class="comment">// 出题：输入一个 Promise 实例数组，输出最快、最慢的实例，以及每个实例的响应时长</span></span><br><span class="line">            <span class="comment">//加一个执行时间计算</span></span><br><span class="line">            <span class="attr">cost</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">          res[i] = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>,</span><br><span class="line">            reason,</span><br><span class="line">            <span class="comment">//加一个执行时间计算</span></span><br><span class="line">            <span class="attr">cost</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          count++;</span><br><span class="line">          <span class="keyword">if</span> (count == promiseLen) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写-event-bus"><a href="#手写-event-bus" class="headerlink" title="手写 event bus"></a>手写 event bus</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxListeners</span> = maxListeners || <span class="title class_">Infinity</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">event, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cbs = <span class="variable language_">this</span>.<span class="property">events</span>[event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cbs) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有这个事件函数&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cbs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> cb.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxListeners</span> !== <span class="title class_">Infinity</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxListeners</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当事件超过了最大监听数&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">push</span>(cb);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(event, fn);</span><br><span class="line">      cb.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(event, func);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cb) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== cb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lbs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lbs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//寄生式组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = obj.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, obj);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = obj.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object.create()</span></span><br><span class="line"><span class="comment">// 方法创建一个新对象，使用现有的对象来提供新创建对象的__proto__</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">constructor</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Student</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;lbs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br></pre></td></tr></table></figure><h2 id="createElement-手写"><a href="#createElement-手写" class="headerlink" title="createElement 手写"></a>createElement 手写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolFor = <span class="title class_">Symbol</span>.<span class="property">for</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REACT_ELEMENT_TYPE</span> = <span class="title function_">symbolFor</span>(<span class="string">&#x27;react.element&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESERVED_PROPS</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">ref</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__self</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__source</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, config, children</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config !== <span class="literal">null</span>) &#123;</span><br><span class="line">    key = config.<span class="property">key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable constant_">RESERVED_PROPS</span>.<span class="title function_">hasOwnProperty</span>(propName)) &#123;</span><br><span class="line">      props[propName] = config[propName];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="variable language_">arguments</span>.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.<span class="property">children</span> = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="title class_">Array</span>(childrenLength);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="variable language_">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    props.<span class="property">children</span> = childArray;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="attr">$$typeof</span>: <span class="variable constant_">REACT_ELEMENT_TYPE</span>,</span><br><span class="line">    type,</span><br><span class="line">    key,</span><br><span class="line">    props,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字"><a href="#编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字" class="headerlink" title="编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字"></a>编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正向预查 ？= 必须</span><br><span class="line">反向预查 ？！必须不</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z]+$)(?!^[0-9]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line">补充：数字、字母、下划线组成字符串，必须有_</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?=_)\w/</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z0-9]+$)^\w&#123;1,10&#125;$/</span>; 限制<span class="number">1</span>-<span class="number">10</span>位</span><br></pre></td></tr></table></figure><h2 id="获取所有属性为-name，值为-value-的元素集合"><a href="#获取所有属性为-name，值为-value-的元素集合" class="headerlink" title="获取所有属性为 name，值为 value 的元素集合"></a>获取所有属性为 name，值为 value 的元素集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则\b单词边界</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getElements</span>(<span class="params">property, value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">  elements = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br><span class="line">  elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当前元素property对应的值</span></span><br><span class="line">    <span class="keyword">let</span> itemValue = item.<span class="title function_">getAttribute</span>(propertype);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (property === <span class="string">&#x27;class&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`\b<span class="subst">$&#123;value&#125;</span>\b`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg.<span class="title function_">test</span>(itemValue)) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (itemValue === value) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;中国hello你好&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/gi</span>;</span><br><span class="line"></span><br><span class="line">str = str</span><br><span class="line">  .<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">` <span class="subst">$&#123;value&#125;</span> `</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">trim</span>(); <span class="comment">// 去除首尾空格</span></span><br></pre></td></tr></table></figure><h2 id="js-实现斐波那契数列的几种方法"><a href="#js-实现斐波那契数列的几种方法" class="headerlink" title="js 实现斐波那契数列的几种方法"></a>js 实现斐波那契数列的几种方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.尾递归(每次调用都在收集结果，避免了线性递归不收集结果只依次展开消耗内存的坏处)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n, res1 = <span class="number">1</span>, res2 = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> res2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, res2, res1 + res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt; n; i++) &#123;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;输入的数字不能小于0&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js-并发调度器"><a href="#js-并发调度器" class="headerlink" title="js 并发调度器"></a>js 并发调度器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题目：</span></span><br><span class="line"><span class="comment">// 延迟函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时进行的任务最多2个</span></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加异步任务</span></span><br><span class="line"><span class="comment">// time: 任务执行的时间</span></span><br><span class="line"><span class="comment">// val: 参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, val</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sleep</span>(time).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">max</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">max</span> = max;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">p</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(p);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &gt;= <span class="variable language_">this</span>.<span class="property">max</span> || !<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span></span><br><span class="line">      .<span class="title function_">shift</span>()()</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发加载"><a href="#并发加载" class="headerlink" title="并发加载"></a>并发加载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitLoad</span>(<span class="params">urls, handler, limit</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promises = [];</span><br><span class="line">  <span class="keyword">const</span> limitUrls = urls.<span class="title function_">slice</span>(<span class="number">0</span>, limit);</span><br><span class="line">  <span class="keyword">const</span> restUrls = urls.<span class="title function_">slice</span>(limit);</span><br><span class="line">  promises = limitUrls.<span class="title function_">map</span>(<span class="function">(<span class="params">url, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; restUrls.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    p = p.<span class="title function_">then</span>(<span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">      promises[index] = <span class="title function_">handler</span>(restUrls[i]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">info</span> + <span class="string">&#x27;---OK!!!&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, url.<span class="property">time</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urls = [</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">1</span>, <span class="attr">time</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">2</span>, <span class="attr">time</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">3</span>, <span class="attr">time</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">4</span>, <span class="attr">time</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">5</span>, <span class="attr">time</span>: <span class="number">5000</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title function_">limitLoad</span>(urls, loadImg, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="前端内存处理"><a href="#前端内存处理" class="headerlink" title="前端内存处理"></a>前端内存处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 内存的生命周期</span><br><span class="line">    内存分配：声明变量、函数对象的时候，js会自动分配内存</span><br><span class="line">    内存使用</span><br><span class="line">    内存回收</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> js中的垃圾回收机制</span><br><span class="line">    引用计数：缺点循环引用无法清除</span><br><span class="line">    标记清除</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 常见内存泄漏</span><br><span class="line">    全局变量（记得手动回收）</span><br><span class="line">    未被清除的定时器</span><br><span class="line">    闭包</span><br><span class="line">    dom的引用</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 怎么避免内存泄漏</span><br><span class="line">    减少不必要的全局变量</span><br><span class="line">    使用完数据，及时解除引用</span><br><span class="line"></span><br><span class="line">实现sizeOf，传入object，计算其所占字节大小</span><br><span class="line"><span class="attr">number</span>: <span class="number">8</span> 字节</span><br><span class="line"><span class="attr">string</span>: <span class="number">2</span> 字节</span><br><span class="line">boolean; <span class="number">4</span> 字节</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sizeOfObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = keys[i];</span><br><span class="line">        bytes += <span class="title function_">calculator</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (seen.<span class="title function_">has</span>(obj[key])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            seen.<span class="title function_">add</span>(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes += <span class="title function_">calculator</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculator</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(objType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> obj.<span class="property">length</span> * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj.<span class="title function_">map</span>(calculator).<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> accu + curr</span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">sizeOfObject</span>(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据结构就是在计算机中存储和组织数据的方式。</p><p>算法（Algorithm）解决问题的逻辑或步骤</p><h2 id="封装函数使字符串以驼峰式命名"><a href="#封装函数使字符串以驼峰式命名" class="headerlink" title="封装函数使字符串以驼峰式命名"></a>封装函数使字符串以驼峰式命名</h2><ul><li>已知字符串 foo = ‘get-element-by-id’,写一个函数将其转换为驼峰式命名“getElementById”</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;get-element-by-id&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = foo.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  arr[i] = arr[i].<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + arr[i].<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//封装</span><br><span class="line">function toString(foo) &#123;</span><br><span class="line">    var arr = foo.split(&#x27;-&#x27;);</span><br><span class="line"></span><br><span class="line">    for(var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].substr(1, arr[i].length - 1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr.join(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(toString(&#x27;get-element-by-id&#x27;))</span><br></pre></td></tr></table></figure><ul><li>把 the-first-name 变成 theFirstName</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var reg = /-(\w)/g</span><br><span class="line">var str = &quot;the-first-name&quot;</span><br><span class="line">console.log(str.replace(reg, function($, $1)&#123;</span><br><span class="line">    return $1.toUpperCase()</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>把 aabb 换成 bbaa</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aabb&#x27;</span>;</span><br><span class="line"><span class="comment">// console.log(str.replace(reg,&quot;$2$2$1$1&quot;));//&quot;bbaa&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  str.<span class="title function_">replace</span>(reg, <span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span>, $<span class="number">2</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">2</span> + $<span class="number">2</span> + $<span class="number">1</span> + $<span class="number">1</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>正则简单的去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaaabbbbbccccc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">replace</span>(reg,<span class="string">&quot;$1&quot;</span>));<span class="comment">//abc</span></span><br></pre></td></tr></table></figure><h2 id="定制化输出特定数组"><a href="#定制化输出特定数组" class="headerlink" title="定制化输出特定数组"></a>定制化输出特定数组</h2><ul><li>随机生成一个长度为 10 的整数类型的数据</li><li>例如 [2, 10, 3, 35, 5, 11, 10, 11, 20]</li><li>将其排列成一个新数组，要求新数组形式如下：</li><li>[[2, 3, 5], [10, 11],[20],[35]]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取随机数 0-99</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomNumber</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">  max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>) + min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;, <span class="function">() =&gt;</span> <span class="title function_">getRandomNumber</span>(<span class="number">0</span>, <span class="number">99</span>));</span><br><span class="line"><span class="comment">// 2. 去重(没必要)</span></span><br><span class="line">arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="comment">// 3. 排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="comment">// 4. 存储 0-9 10-19 20-29</span></span><br><span class="line"><span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Math</span>.<span class="title function_">floor</span>(item / <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!map[key]) &#123;</span><br><span class="line">    map[key] = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map[key].<span class="title function_">push</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">  result.<span class="title function_">push</span>(map[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h2 id="深度比较-isEqual"><a href="#深度比较-isEqual" class="headerlink" title="深度比较 isEqual"></a>深度比较 isEqual</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line">  <span class="comment">//其中一个为值类型或null</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj1) || !<span class="title function_">isObject</span>(obj2)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否两个参数是同一个变量</span></span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断keys数是否相等</span></span><br><span class="line">  <span class="keyword">const</span> obj1Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1);</span><br><span class="line">  <span class="keyword">const</span> obj2Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2);</span><br><span class="line">  <span class="keyword">if</span> (obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//深度比较每一个key</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isEqual</span>(obj1[key], obj2[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据数组的-key-去重"><a href="#根据数组的-key-去重" class="headerlink" title="根据数组的 key 去重"></a>根据数组的 key 去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dedup</span> = (<span class="params">data, getKey = () =&gt; &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dateMap = data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title function_">getKey</span>(cur);</span><br><span class="line">    <span class="keyword">if</span> (!pre[key]) &#123;</span><br><span class="line">      pre[key] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(dateMap);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">v</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">v</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">v</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dedup</span>(data, <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span>));</span><br></pre></td></tr></table></figure><h2 id="react-自定义封装不会反复创建的定时器（setInterval）"><a href="#react-自定义封装不会反复创建的定时器（setInterval）" class="headerlink" title="react 自定义封装不会反复创建的定时器（setInterval）"></a>react 自定义封装不会反复创建的定时器（setInterval）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useTimer</span> = (<span class="params">step = <span class="number">1</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setNum</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">    &#125;, step * <span class="number">1000</span>);</span><br><span class="line">    timer.<span class="property">current</span> = timeout;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    num,</span><br><span class="line">    start,</span><br><span class="line">    clear,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改下面代码，顺序输出-0-99"><a href="#修改下面代码，顺序输出-0-99" class="headerlink" title="修改下面代码，顺序输出 0-99"></a>修改下面代码，顺序输出 0-99</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求：</span></span><br><span class="line"><span class="comment">// 1. 只能修改 setTimeout</span></span><br><span class="line"><span class="comment">// 2. 不能修改Math.floor(Math.random() * 1000)</span></span><br><span class="line"><span class="comment">// 3. 不能使用全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">  &#125;, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// 方法1: 立即执行函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: setTimeout第三个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-循环和-splice-的坑"><a href="#for-循环和-splice-的坑" class="headerlink" title="for 循环和 splice 的坑"></a>for 循环和 splice 的坑</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环和splice的坑</span></span><br><span class="line"><span class="comment">// 具体描述：在对一个数组执行for循环时，</span></span><br><span class="line"><span class="comment">// 删除数组元素，会存在什么问题</span></span><br><span class="line"><span class="comment">// 方法1: i--</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">    i--; <span class="comment">// 需要处理下 i--</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: 倒序</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[index] === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    index--; <span class="comment">// 仍然会有问题</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><!--more--><ul><li>程序执行时需要的计算量和内存空间</li><li>复杂度是数量级，不是具体的数字</li><li>一般是针对一个具体的算法，而非一个完整的系统</li></ul><h2 id="将一个数组旋转-K-步"><a href="#将一个数组旋转-K-步" class="headerlink" title="将一个数组旋转 K 步"></a>将一个数组旋转 K 步</h2><ul><li>输入一个数组[1, 2, 3, 4, 5, 6, 7]</li><li>k=3,即旋转 3 步</li><li>输出[5, 6, 7, 1, 2, 3, 4]</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 步数</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n^2),空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate1</span>(<span class="params">arr: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!k || length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> step = <span class="title class_">Math</span>.<span class="title function_">abs</span>(k % length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; step; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// unshift内置api时间复杂度位O(n),开销比较大</span></span><br><span class="line">      arr.<span class="title function_">unshift</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 步数</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(1)，空间复杂度O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate2</span>(<span class="params">arr: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!k || length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> step = <span class="title class_">Math</span>.<span class="title function_">abs</span>(k % length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> part1 = arr.<span class="title function_">slice</span>(-step);</span><br><span class="line">  <span class="keyword">const</span> part2 = arr.<span class="title function_">slice</span>(<span class="number">0</span>, length - step);</span><br><span class="line">  <span class="keyword">const</span> part3 = part1.<span class="title function_">concat</span>(part2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> * <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate1&#x27;</span>);</span><br><span class="line"><span class="title function_">rotate1</span>(arr, <span class="number">9</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate2&#x27;</span>);</span><br><span class="line"><span class="title function_">rotate2</span>(arr, <span class="number">9</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate2&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="两个栈实现一个队列"><a href="#两个栈实现一个队列" class="headerlink" title="两个栈实现一个队列"></a>两个栈实现一个队列</h2><ul><li>请用两个栈实现一个队列</li><li>API：add delete length</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">stack1</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">stack2</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">push</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delete</span>(): <span class="built_in">number</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (stack1.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = stack1.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack2.<span class="title function_">push</span>(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = stack2.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (stack2.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = stack2.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack1.<span class="title function_">push</span>(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义一个-js-函数，反转单向链表"><a href="#定义一个-js-函数，反转单向链表" class="headerlink" title="定义一个 js 函数，反转单向链表"></a>定义一个 js 函数，反转单向链表</h2><p>链表是一种物理结构(非逻辑结构),类似数组<br>数组需要一段连续的内存空间，而链表是零散的<br>链表节点的数据结构{ value, next?, prev? }</p><p>链表 vs 数组<br>都是有序结构<br>链表：查询慢 O(n),新增和删除快 O(1)<br>数组：查询快 O(1),新增和删除慢 O(n)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  next?: <span class="title class_">ILinkListNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLinkList</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;arr is empty&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">curNode</span>: <span class="title class_">ILinkListNode</span> = &#123;</span><br><span class="line">    <span class="attr">value</span>: arr[length - <span class="number">1</span>],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">1</span>) <span class="keyword">return</span> curNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    curNode = &#123;</span><br><span class="line">      <span class="attr">value</span>: arr[i],</span><br><span class="line">      <span class="attr">next</span>: curNode,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="keyword">const</span> list = <span class="title function_">createLinkList</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;list&#x27;</span>, list);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转单向链表，返回反转后的head node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listNode 需要操作的链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseLinkList</span>(<span class="params">listNode: ILinkListNode</span>): <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">prevNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">curNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">nextNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span> = listNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (nextNode) &#123;</span><br><span class="line">    <span class="comment">// 第一个元素，删除next指针，防止循环引用</span></span><br><span class="line">    <span class="keyword">if</span> (curNode &amp;&amp; !prevNode) &#123;</span><br><span class="line">      <span class="keyword">delete</span> curNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转指针</span></span><br><span class="line">    <span class="keyword">if</span> (curNode &amp;&amp; prevNode) &#123;</span><br><span class="line">      curNode.<span class="property">next</span> = prevNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prevNode = curNode;</span><br><span class="line">    curNode = nextNode;</span><br><span class="line">    nextNode = nextNode?.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理链表最后一个元素</span></span><br><span class="line">  curNode!.<span class="property">next</span> = prevNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curNode!;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverseList = <span class="title function_">reverseLinkList</span>(list);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;reverseList&#x27;</span>, reverseList);</span><br></pre></td></tr></table></figure><h2 id="栈-封装"><a href="#栈-封装" class="headerlink" title="栈(封装)"></a>栈(封装)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">  <span class="comment">// 1. 将元素压入栈</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 2.从栈中取出元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 3.查看一下栈顶元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 4.判断栈是否为空</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 5.获取栈中元素个数</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6. toString方法</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      res += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span> `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例：将十进制转换成二进制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec2bin</span>(<span class="params">decimalNumber</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">  <span class="keyword">let</span> binary = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (decimalNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    stack.<span class="title function_">push</span>(decimalNumber % <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    decimalNumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(decimalNumber / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    binary += stack.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度封装-typeof-判断"><a href="#深度封装-typeof-判断" class="headerlink" title="深度封装 typeof 判断"></a>深度封装 typeof 判断</h2><pre><code>function myTypeof(val) &#123;    var type = typeof(val)    var res = &#123;        &#39;[object Object]&#39; : &#39;object&#39;,        &#39;[object Array]&#39; : &#39;array&#39;,        &#39;[object Number]&#39; : &#39;object number&#39;,        &#39;[object String]&#39; : &#39;object string&#39;,        &#39;[object Boolean]&#39; : &#39;object boolean&#39;    &#125;    if (val === null) &#123;        return &#39;null&#39;    &#125; else if (type == &#39;object&#39;) &#123;        var str = Object.prototype.toString.call(val)        return res[str]    &#125; else &#123;        return type    &#125;&#125;</code></pre><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="title function_">reverseList</span>(head.<span class="property">next</span>);</span><br><span class="line"></span><br><span class="line">  head.<span class="property">next</span>.<span class="property">next</span> = head;</span><br><span class="line">  head.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cur === <span class="literal">null</span> || cur.<span class="property">next</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = cur.<span class="property">next</span>;</span><br><span class="line">    cur.<span class="property">next</span> = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cur.next = null</span></span><br><span class="line">    <span class="comment">// cur.next.next = cur</span></span><br><span class="line">    <span class="comment">// cur = cur.nexxt</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打乱数组"><a href="#打乱数组" class="headerlink" title="打乱数组"></a>打乱数组</h2><pre><code>1. 常见的sort打乱数组的方法function shuffle(arr) &#123;   return arr.sort (function () &#123;        return Math.random() - 0.5    &#125;)&#125;var arr = [1,2,3,4,5,6,7]shuffle(arr)更加简洁的ES6写法function shuffle(arr) &#123;    return arr.sort(() =&gt; Math.random() - 0.5)&#125;但是这种写法有问题，并不能真正地随机打乱数组，经过大量的实验发现每个元素仍然有很大的几率出现在它原来的位置附近。2.洗牌算法    从最后一个数据开始往前，每次随机一个位置，将两者的位置进行交换，直到数组交换完毕。ES6实现：function shuffle(arr) &#123;    let i =  arr.length;    while(i) &#123;        let j = Math.floor(Math.random() * i--);        [arr[j], arr[i]] = [arr[i], arr[j]];    &#125;    return arr&#125;var arr = [1,2,3,4,5,6,7]shuffle(arr)</code></pre><h2 id="用链表实现队列"><a href="#用链表实现队列" class="headerlink" title="用链表实现队列"></a>用链表实现队列</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">head</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">tail</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入队，在tail位置</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">newNode</span>: <span class="title class_">ILinkListNode</span> = &#123;</span><br><span class="line">      <span class="attr">value</span>: n,</span><br><span class="line">      <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tail</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">len</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出队，在head位置</span></span><br><span class="line">  <span class="title function_">delete</span>(): <span class="built_in">number</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span> || <span class="variable language_">this</span>.<span class="property">len</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">len</span>--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">len</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">200</span>);</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">300</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;length&#x27;</span>, queue.<span class="property">length</span>); <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">delete</span>()); <span class="comment">//100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;length2&#x27;</span>, queue.<span class="property">length</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="链表和数组，哪个实现队列更快？"><a href="#链表和数组，哪个实现队列更快？" class="headerlink" title="链表和数组，哪个实现队列更快？"></a>链表和数组，哪个实现队列更快？</h2><ul><li>空间复杂度都是 O(n)</li><li>add 时间复杂度：链表 O(1)，数组 O(1);</li><li>delete 时间复杂度：链表 O(1)，数组 O(n);</li></ul><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//满二叉树：每层节点数都达到最大值，第n层节点数为2^(n - 1),总节点数为2^n -1(2的n次方减一)</span></span><br><span class="line"><span class="comment">//完全二叉树：除最后一层外，其他各层节点数都达到最大个数，最后一层所有节点集中在最左边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入前比较</span></span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// 右侧插入</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">value</span> &gt; node.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newNode.<span class="property">value</span> &lt; node.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 左侧插入</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序遍历</span></span><br><span class="line">  <span class="title function_">preOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">inOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">postOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最大值</span></span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最小值</span></span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找指定值是否存在</span></span><br><span class="line">  <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &lt; node.<span class="property">value</span>) &#123;</span><br><span class="line">        node = node.<span class="property">left</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; node.<span class="property">value</span>) &#123;</span><br><span class="line">        node = node.<span class="property">right</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bst = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line"></span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.preOrderTraversal((nodeValue) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.inOrderTraversal((nodeValue) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.postOrderTraversal((nodeValue) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(bst.max())</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">search</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst);</span><br></pre></td></tr></table></figure><h2 id="求一个二叉搜索树（BST）的第-k-小值"><a href="#求一个二叉搜索树（BST）的第-k-小值" class="headerlink" title="求一个二叉搜索树（BST）的第 k 小值"></a>求一个二叉搜索树（BST）的第 k 小值</h2><ul><li>前序(根左右)，中序(左根右)，后序(左右根)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ItreeNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">left</span>: <span class="title class_">ItreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">right</span>: <span class="title class_">ItreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bstTree</span>: <span class="title class_">ItreeNode</span> = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">left</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">right</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树中序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树后序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求二叉搜索树第k值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node bst tree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 第k个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getKthValue</span>(<span class="params">node: ItreeNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(node.<span class="property">value</span>);</span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[k - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列（递归）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度O(2^n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列（循环）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n1 = <span class="number">1</span>; <span class="comment">// 记录n-1的结果</span></span><br><span class="line">  <span class="keyword">let</span> n2 = <span class="number">0</span>; <span class="comment">// 记录n-2的结果</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    res = n1 + n2;</span><br><span class="line">    n2 = n1;</span><br><span class="line">    n1 = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="青蛙跳台阶（动态规划思想解决问题）"><a href="#青蛙跳台阶（动态规划思想解决问题）" class="headerlink" title="青蛙跳台阶（动态规划思想解决问题）"></a>青蛙跳台阶（动态规划思想解决问题）</h2><ul><li>一只青蛙，一次可以跳 1 级，也可以跳 2 级</li><li>问：青蛙跳到 n 级台阶，总共有多少种方式？</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 答案同上一题</span></span><br></pre></td></tr></table></figure><h2 id="将数组中的-0-移动到末尾"><a href="#将数组中的-0-移动到末尾" class="headerlink" title="将数组中的 0 移动到末尾"></a>将数组中的 0 移动到末尾</h2><ul><li>如输入[1, 0, 3, 0, 11, 0],输出[1, 3, 11, 0, 0, 0]</li><li>只移动 0 ，其他顺序不变</li><li>必须在原数组进行操作</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (嵌套循环)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr number arr</span></span><br><span class="line"><span class="comment"> * 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZero1</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> zeroCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - zeroCount; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">      arr.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// O(n)</span></span><br><span class="line">      i--;</span><br><span class="line">      zeroCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (双指针)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr number arr</span></span><br><span class="line"><span class="comment"> * 时间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZero2</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line">  <span class="keyword">let</span> j = -<span class="number">1</span>; <span class="comment">// 指向第一个 0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        j = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = arr[i];</span><br><span class="line">      arr[i] = arr[j];</span><br><span class="line">      arr[j] = n;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// moveZero1(arr);</span></span><br><span class="line"><span class="title function_">moveZero2</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">tempMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">index</span>: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, length = nums.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">    index = tempMap.<span class="title function_">get</span>(target - nums[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      result = [index, i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tempMap.<span class="title function_">set</span>(nums[i], i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算字符串中连续最多的字符以及次数"><a href="#计算字符串中连续最多的字符以及次数" class="headerlink" title="计算字符串中连续最多的字符以及次数"></a>计算字符串中连续最多的字符以及次数</h2><ul><li>输入’abbbcccccccddeee1234412’</li><li>计算得到连续最多的字符是’c’,7 次</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度： O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="attr">char</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findContinuousChar1</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">IRes</span> = &#123;</span><br><span class="line">    <span class="attr">char</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempLength = <span class="number">0</span>; <span class="comment">// 临时记录当前连续字符的长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    tempLength = <span class="number">0</span>; <span class="comment">// 重置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (str[i] === str[j]) &#123;</span><br><span class="line">        tempLength++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (str[i] !== str[j] || j === length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempLength &gt; res.<span class="property">length</span>) &#123;</span><br><span class="line">          res.<span class="property">char</span> = str[i];</span><br><span class="line">          res.<span class="property">length</span> = tempLength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">          i = j - <span class="number">1</span>; <span class="comment">// 跳步</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双指针</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度： O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="attr">char</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findContinuousChar2</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">IRes</span> = &#123;</span><br><span class="line">    <span class="attr">char</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempLength = <span class="number">0</span>; <span class="comment">// 临时记录当前连续字符的长度</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] === str[j]) &#123;</span><br><span class="line">      tempLength++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[i] !== str[j] || i === length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果不相等或者 i 循环到了末尾</span></span><br><span class="line">      <span class="keyword">if</span> (tempLength &gt; res.<span class="property">length</span>) &#123;</span><br><span class="line">        res.<span class="property">char</span> = str[j];</span><br><span class="line">        res.<span class="property">length</span> = tempLength;</span><br><span class="line">      &#125;</span><br><span class="line">      tempLength = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">        j = i; <span class="comment">// 让 j 追上 i</span></span><br><span class="line">        i--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abbbcccccccddeee1234412&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findContinuousChar1</span>(str));</span><br></pre></td></tr></table></figure><h2 id="对称数（回文）"><a href="#对称数（回文）" class="headerlink" title="对称数（回文）"></a>对称数（回文）</h2><ul><li>求 1 - 10000 之间的所有对称数（回文）</li><li>例如：0， 1， 2， 11， 22， 101， 232，1221</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findPalindromeNumbers1</span>(<span class="params">max: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">if</span> (max &lt; <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= max; i++) &#123;</span><br><span class="line">    <span class="comment">// 转换为字符转 -&gt; 转换为数组 -&gt; 再反转 -&gt; 比较</span></span><br><span class="line">    <span class="keyword">const</span> s = i.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (s === s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPalindromeNumbers1</span>(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findPalindromeNumbers2</span>(<span class="params">max: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">if</span> (max &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= max; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = i;</span><br><span class="line">    <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// n: 123</span></span><br><span class="line">    <span class="comment">// rev: 321</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      rev = rev * <span class="number">10</span> + (n % <span class="number">10</span>);</span><br><span class="line">      n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i === rev) res.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPalindromeNumbers2</span>(<span class="number">200</span>));</span><br></pre></td></tr></table></figure><h2 id="最长回文串"><a href="#最长回文串" class="headerlink" title="最长回文串"></a>最长回文串</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestPalindrome</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 寻找长度为奇数的回文子串(以当前元素向两边扩散)</span></span><br><span class="line">    <span class="keyword">const</span> s1 = <span class="title function_">palindrome</span>(s, i, i);</span><br><span class="line">    <span class="comment">// 寻找长度为偶数的回文子串(以s[i],s[i + 1])向两边扩散</span></span><br><span class="line">    <span class="keyword">const</span> s2 = <span class="title function_">palindrome</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">    res = res.<span class="property">length</span> &gt; s1.<span class="property">length</span> ? res : s1;</span><br><span class="line">    res = res.<span class="property">length</span> &gt; s2.<span class="property">length</span> ? res : s2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">palindrome</span>(<span class="params">s, l, r</span>) &#123;</span><br><span class="line">  <span class="comment">// 左右指针，从s[l]和s[r]向两边扩散，找到最长回文串</span></span><br><span class="line">  <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="property">length</span> &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">    l--;</span><br><span class="line">    r++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">substr</span>(l + <span class="number">1</span>, r - l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断字符串是否括号匹配"><a href="#判断字符串是否括号匹配" class="headerlink" title="判断字符串是否括号匹配"></a>判断字符串是否括号匹配</h2><ul><li>一个字符串 s 可能包含{}()[]三种括号</li><li>判断 s 是否是括号匹配的</li><li>如（a{b}c）匹配，而{a(b 或者{a(b}c)就是不匹配的</li></ul><p>栈 vs 数组<br>栈：逻辑结构，理论模型，不管如何实现，不受任何语言的限制。<br>数组：物理结构，真实的功能实现，受限于编程语言。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMatch</span>(<span class="params">left: <span class="built_in">string</span>, right: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; right === <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&#x27;(&#x27;</span> &amp;&amp; right === <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&#x27;[&#x27;</span> &amp;&amp; right === <span class="string">&#x27;]&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">matchBracket</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> leftSymbols = <span class="string">&#x27;&#123;[(&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> rightSymbols = <span class="string">&#x27;)]&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 时间复杂度O(n),空间复杂度O(n)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> s = str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftSymbols.<span class="title function_">includes</span>(s)) &#123;</span><br><span class="line">      <span class="comment">// 左括号，压栈</span></span><br><span class="line">      stack.<span class="title function_">push</span>(s);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSymbols.<span class="title function_">includes</span>(s)) &#123;</span><br><span class="line">      <span class="keyword">const</span> top = stack[stack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断右括号是否匹配</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isMatch</span>(top, s)) &#123;</span><br><span class="line">        stack.<span class="title function_">pop</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高效的字符串前缀匹配"><a href="#高效的字符串前缀匹配" class="headerlink" title="高效的字符串前缀匹配"></a>高效的字符串前缀匹配</h2><ul><li>有一个英文单词库（数组），里面有几十万个英文单词</li><li>输入一个字符串，快速判断是不是某一个单词的前缀</li><li>（说明思路，不用写代码）</li></ul><p>思路一：</p><ol><li><p>遍历单词库数组</p></li><li><p>indexOf 判断前缀</p></li><li><p>实际时间复杂度超过 O(n),因为 indexOf 的计算量</p></li></ol><p>思路二（对象取 key 时间复杂度为 O(1)）：</p><ol><li><p>英文字母一共就 26 个，可以提前把单词库数组拆分为 26 个</p></li><li><p>第一层 26 个，第二层、第三层，继续拆分…</p></li><li><p>最后把单词库拆分为一颗树</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 树结构</span><br><span class="line">const wordsTree = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">    b: &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  c: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字千分位格式化"><a href="#数字千分位格式化" class="headerlink" title="数字千分位格式化"></a>数字千分位格式化</h2><ul><li>将数字千分位格式化，输出字符串</li><li>如输入数字 12050100，输出字符串 12,050,100</li><li>(注意：逆序判断)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 使用数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format1</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n); <span class="comment">// 只考虑整数</span></span><br><span class="line">  <span class="keyword">const</span> reverseArr = n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> reverseArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">        <span class="keyword">return</span> curr + <span class="string">&#x27;,&#x27;</span> + prev;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> curr + prev;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 使用字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format2</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> str = n.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = length - i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">        res = str[i] + res;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = <span class="string">&#x27;,&#x27;</span> + str[i] + res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res = str[i] + res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">把<span class="string">&quot;1000000000&quot;</span>变成<span class="string">&quot;100.000.000&quot;</span>这种写法，把后面往前面查，三位加个点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;100000000&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg, <span class="string">&#x27;.&#x27;</span>)) || <span class="comment">//&quot;100.000.000&quot;</span></span><br><span class="line"><span class="built_in">string</span>.<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;.&#x27;</span>) || <span class="comment">//先行断言?=,后行断言(?!\d)</span></span><br><span class="line">(<span class="number">25435345.22</span>).<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en-US&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="切换字母大小写"><a href="#切换字母大小写" class="headerlink" title="切换字母大小写"></a>切换字母大小写</h2><ul><li>输入一个字符串，切换其中字母的大小写</li><li>如：输入字符串 12aBc34，输出字符串 12AbC34</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchLetterCase1</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> length = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/[a-z]/</span>;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg1.<span class="title function_">test</span>(c)) &#123;</span><br><span class="line">      res += c.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg2.<span class="title function_">test</span>(c)) &#123;</span><br><span class="line">      res += c.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ASCII 编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchLetterCase2</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> length = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/[a-z]/</span>;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line">    <span class="keyword">const</span> code = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65</span> &amp;&amp; code &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">      res += c.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code &gt;= <span class="number">97</span> &amp;&amp; code &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">      res += c.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「扁平数组」转「树形结构」"><a href="#「扁平数组」转「树形结构」" class="headerlink" title="「扁平数组」转「树形结构」"></a>「扁平数组」转「树形结构」</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">treeing</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tree = [];</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">const</span> newItem = (map[item.<span class="property">id</span>] = &#123;</span><br><span class="line">      ...item,</span><br><span class="line">      <span class="attr">children</span>: [],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (map[item.<span class="property">pid</span>]) &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.<span class="property">pid</span>];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(newItem);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree.<span class="title function_">push</span>(newItem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="「树形结构」转「扁平结构」"><a href="#「树形结构」转「扁平结构」" class="headerlink" title="「树形结构」转「扁平结构」"></a>「树形结构」转「扁平结构」</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">tree, arr = []</span>) &#123;</span><br><span class="line">  tree.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, ...rest &#125; = item;</span><br><span class="line">    arr.<span class="title function_">push</span>(rest);</span><br><span class="line">    <span class="keyword">if</span> (children.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="title function_">flatten</span>(children, arr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将树状结构转换为属性平铺的结构"><a href="#将树状结构转换为属性平铺的结构" class="headerlink" title="将树状结构转换为属性平铺的结构"></a>将树状结构转换为属性平铺的结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">dd</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">ee</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">f</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  <span class="string">&#x27;a.b.c.dd&#x27;</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.d.ee&#x27;</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.f&#x27;</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解答</span></span><br><span class="line"><span class="comment">// 方法1: 递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatObj</span>(<span class="params">obj, preKey = <span class="string">&#x27;&#x27;</span>, result = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = <span class="string">`<span class="subst">$&#123;preKey&#125;</span><span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">flatObj</span>(obj[key], <span class="string">`<span class="subst">$&#123;newKey&#125;</span>.`</span>, result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[newKey] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: while循环-队列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatObj2</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj);</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = queue.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> v === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([<span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span>, v]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[<span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span>] = v;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="title function_">flatObj</span>(entry);</span><br><span class="line"><span class="title function_">flatObj2</span>(entry);</span><br></pre></td></tr></table></figure><h2 id="将平铺属性的数据结构转换为树状数据结构"><a href="#将平铺属性的数据结构转换为树状数据结构" class="headerlink" title="将平铺属性的数据结构转换为树状数据结构"></a>将平铺属性的数据结构转换为树状数据结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="string">&#x27;a.b.c.dd&#x27;</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.d.ee&#x27;</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.f&#x27;</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">dd</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">ee</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">f</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// 方法1: 双重循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = entry[key];</span><br><span class="line">    <span class="keyword">const</span> keyMap = key.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!result[keyMap[<span class="number">0</span>]]) &#123;</span><br><span class="line">      result[keyMap[<span class="number">0</span>]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp = result[keyMap[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> length = keyMap.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!tmp[keyMap[i]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === length - <span class="number">1</span>) &#123;</span><br><span class="line">          tmp[keyMap[i]] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tmp[keyMap[i]] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      tmp = tmp[keyMap[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: 递归</span></span><br><span class="line"><span class="comment">// &#123;&quot;a.b.c.dd&quot;: &quot;abcdd&quot;&#125;</span></span><br><span class="line"><span class="comment">// =&gt; &#123;&quot;a.b.c&quot;: &#123;&quot;dd&quot;:&quot;abcdd&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">// =&gt;...</span></span><br><span class="line"><span class="comment">// =&gt; &#123;&quot;a&quot;: &#123;&quot;b&quot;: &#123;&quot;c&quot;: &#123;&quot;dd&quot;: &quot;abcdd&quot;&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map2</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getNest</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lastIndex = key.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> value = entry[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> entry[key];</span><br><span class="line">      <span class="keyword">const</span> preKey = key.<span class="title function_">substring</span>(<span class="number">0</span>, lastIndex);</span><br><span class="line">      <span class="keyword">const</span> restKey = key.<span class="title function_">substring</span>(lastIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!entry[preKey]) &#123;</span><br><span class="line">        entry[preKey] = &#123; [restKey]: value &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry[preKey][restKey] = value;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/./</span>.<span class="title function_">test</span>(preKey)) &#123;</span><br><span class="line">        <span class="title function_">getNest</span>(preKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry) &#123;</span><br><span class="line">    <span class="title function_">getNest</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">map</span>(entry);</span><br><span class="line"><span class="title function_">map2</span>(entry);</span><br></pre></td></tr></table></figure><h2 id="实现-jsonp，传入-url、callback-和-callbackName-三个参数"><a href="#实现-jsonp，传入-url、callback-和-callbackName-三个参数" class="headerlink" title="实现 jsonp，传入 url、callback 和 callbackName 三个参数"></a>实现 jsonp，传入 url、callback 和 callbackName 三个参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url, callback, callbackName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?type=jsonp&amp;callbackName=<span class="subst">$&#123;callbackName&#125;</span>&#125;`</span>;</span><br><span class="line">  script.<span class="property">onload</span> = callback;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  <span class="variable language_">window</span>[callbackName] = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonp</span>(</span><br><span class="line">  <span class="string">&#x27;http://www.xxx.com/xxx&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;fn&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="实现计时器-timer，仅暴露-start、stop、reset-方法"><a href="#实现计时器-timer，仅暴露-start、stop、reset-方法" class="headerlink" title="实现计时器 timer，仅暴露 start、stop、reset 方法"></a>实现计时器 timer，仅暴露 start、stop、reset 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> second = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> refId = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> clear = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (refId !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(refId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> start = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    refId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(second);</span><br><span class="line">      second += <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stop = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">clear</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reset = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    second = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">clear</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; start, stop, reset &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击页面链接时，验证连接是否在-taobao-com-下，如果不是弹框提示"><a href="#点击页面链接时，验证连接是否在-taobao-com-下，如果不是弹框提示" class="headerlink" title="点击页面链接时，验证连接是否在*.taobao.com 下，如果不是弹框提示"></a>点击页面链接时，验证连接是否在*.taobao.com 下，如果不是弹框提示</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;a <span class="keyword">class</span>=<span class="string">&quot;link&quot;</span> href=<span class="string">&quot;http://www.taobao.com&quot;</span>&gt;淘宝&lt;/a&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.jd.com&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> links = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;link&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> listener = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> href = e.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">if</span> (href.<span class="title function_">indexOf</span>(<span class="string">&#x27;.taobao.com&#x27;</span>) === -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> result = <span class="title function_">confirm</span>(<span class="string">&#x27;确定离开吗&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="title function_">preventDefault</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="title function_">stopPropagation</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">// 绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = links.<span class="property">length</span>; i &lt; len; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  link[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, listener, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="实现-destructuringArray-方法"><a href="#实现-destructuringArray-方法" class="headerlink" title="实现 destructuringArray 方法"></a>实现 destructuringArray 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">destructuringArray</span>(<span class="params">arr, str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> variables = str.<span class="title function_">replace</span>(<span class="regexp">/[\[\]]/g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//正则去除[]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">`str=<span class="subst">$&#123;arr&#125;</span>;return &#123;<span class="subst">$&#123;variables&#125;</span>&#125;`</span>)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">destructuringArray</span>([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">4</span>], <span class="number">3</span>], <span class="string">&#x27;[a,[b],c]&#x27;</span>); <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="请你设计并实现一个满足-LRU-最近最少使用-缓存-约束的数据结构。"><a href="#请你设计并实现一个满足-LRU-最近最少使用-缓存-约束的数据结构。" class="headerlink" title="请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。"></a>请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="attr">cache</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> capacity: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">capacity</span> = capacity;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">key</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="attr">key</span>: <span class="built_in">number</span>, <span class="attr">value</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[key]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">capacity</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lRUCache = <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">1</span>); <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">2</span>); <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">1</span>); <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">3</span>); <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">4</span>); <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure><h2 id="比较版本号"><a href="#比较版本号" class="headerlink" title="比较版本号"></a>比较版本号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Compare</span>(<span class="params">verson1, verson2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> v1Arr = verson1.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> v2Arr = verson2.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; v1Arr.<span class="property">length</span> || j &lt; v2Arr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str1 = v1Arr[i] || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> str2 = v2Arr[j] || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (str1 - str2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str1 - str2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compare(&quot;2.0.1&quot;,&quot;2&quot;) 1</span></span><br></pre></td></tr></table></figure><h2 id="找出字符串中重复次数最多的字符"><a href="#找出字符串中重复次数最多的字符" class="headerlink" title="找出字符串中重复次数最多的字符"></a>找出字符串中重复次数最多的字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findMaxStr</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res[str.<span class="title function_">charAt</span>(i)]) &#123;</span><br><span class="line">      res[str.<span class="title function_">charAt</span>(i)] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[str.<span class="title function_">charAt</span>(i)] = res[str.<span class="title function_">charAt</span>(i)] + <span class="number">1</span>; <span class="comment">// 如果有，增加一次</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iMax = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> res) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[key] &gt; iMax) &#123;</span><br><span class="line">      iMax = res[key]; <span class="comment">// iMax要被重写</span></span><br><span class="line">      target = key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现次数最多的是:&#x27;</span> + target + <span class="string">&#x27;, 出现&#x27;</span> + iMax + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">findMaxStr</span>(<span class="string">&#x27;sabcdEs&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="实现-url-的-parse-解析？"><a href="#实现-url-的-parse-解析？" class="headerlink" title="实现 url 的 parse 解析？"></a>实现 url 的 parse 解析？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseUrl</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parser = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  parser.<span class="property">href</span> = url;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">protocol</span>: parser.<span class="property">protocol</span>,</span><br><span class="line">    <span class="attr">host</span>: parser.<span class="property">host</span>,</span><br><span class="line">    <span class="attr">hostname</span>: parser.<span class="property">hostname</span>,</span><br><span class="line">    <span class="attr">port</span>: parser.<span class="property">port</span>,</span><br><span class="line">    <span class="attr">pathname</span>: parser.<span class="property">pathname</span>,</span><br><span class="line">    <span class="attr">search</span>: parser.<span class="property">search</span>,</span><br><span class="line">    <span class="attr">hash</span>: parser.<span class="property">hash</span>,</span><br><span class="line">    <span class="attr">params</span>: (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> ret = &#123;&#125;,</span><br><span class="line"><span class="keyword">let</span> seg = a.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="regexp">/^\?/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>),</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;seg.<span class="property">length</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!seg[i]) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="keyword">let</span> s = seg[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;)(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example usage:</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://www.example.com:8080/path/to/page?query=string#hash&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> parsedUrl = <span class="title function_">parseUrl</span>(url);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsedUrl);</span><br></pre></td></tr></table></figure><h2 id="实现对象数组-group"><a href="#实现对象数组-group" class="headerlink" title="实现对象数组 group"></a>实现对象数组 group</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">group</span>(<span class="params">arr, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[index];</span><br><span class="line">    <span class="keyword">const</span> category = <span class="title function_">fn</span>(element, index, arr);</span><br><span class="line">    <span class="keyword">if</span> (result[category]) &#123;</span><br><span class="line">      result[category].<span class="title function_">push</span>(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[category] = [element];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orderList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;steven&#x27;</span>,</span><br><span class="line">    <span class="attr">productName</span>: <span class="string">&#x27;西瓜&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="attr">province</span>: <span class="string">&#x27;henan&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;对方的&#x27;</span>,</span><br><span class="line">    <span class="attr">productName</span>: <span class="string">&#x27;杨梅&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">province</span>: <span class="string">&#x27;shanxi&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">group</span>(orderList, <span class="function">(<span class="params">&#123; province &#125;</span>) =&gt;</span> province);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h2 id="怎么可以使用-for-of-来遍历对象"><a href="#怎么可以使用-for-of-来遍历对象" class="headerlink" title="怎么可以使用 for-of 来遍历对象"></a>怎么可以使用 for-of 来遍历对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动实现Symbol.iterator迭代器函数</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="variable language_">this</span>[keys[index]];</span><br><span class="line">      <span class="keyword">const</span> done = index &gt; keys.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        done,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-lodash-get"><a href="#实现-lodash-get" class="headerlink" title="实现 lodash.get"></a>实现 lodash.get</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">obj, path, dftValue = <span class="string">&#x27;undefined&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newPath = [];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(path)) &#123;</span><br><span class="line">    newPath = path;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newPath = path.<span class="title function_">replace</span>(<span class="regexp">/\[/g</span>, <span class="string">&#x27;.&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\]/</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newPath.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj = &#123;&#125;, key</span>) =&gt;</span> obj[key], obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> object = &#123; <span class="attr">a</span>: [&#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">get</span>(object, <span class="string">&#x27;a[0].b.c&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="数组随机排序-shuffle"><a href="#数组随机排序-shuffle" class="headerlink" title="数组随机排序 shuffle"></a>数组随机排序 shuffle</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单有缺陷</span></span><br><span class="line"><span class="comment">// ECMAScript标准提到对于同一组a、b的值，compareFn(a, b)需要总是返回相同的值,sort采用原地算法</span></span><br><span class="line"><span class="comment">// 且vs引擎中丨阿宇数组部分的sort源码，考虑性能原因，对于短数组（小于等于22）使用插入排序，长数组（大于22）使用快速排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6洗牌算法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (--i) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * i);</span><br><span class="line">    [arr[j], arr[i]] = [arr[i], arr[j]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找-O-log2n"><a href="#二分查找-O-log2n" class="headerlink" title="二分查找 O(log2n)"></a>二分查找 O(log2n)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// elements有序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">elements, value, _start, _end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> end = _end || elements.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> start = _start || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> povitIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (elements[povitIndex] === value) &#123;</span><br><span class="line">    <span class="keyword">return</span> povitIndex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value &lt; elements[povitIndex]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(elements, value, <span class="number">0</span>, povitIndex - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(elements, value, povitIndex + <span class="number">1</span>, end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序-O-n-2"><a href="#冒泡排序-O-n-2" class="headerlink" title="冒泡排序 O(n^2)"></a>冒泡排序 O(n^2)</h2><blockquote><p>重复地遍历要排序的数组，比较相邻的元素并交换位置，直到整个数组都已经排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> elementLength = elements.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementLength - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; elementLength - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (elements[j] &gt; elements[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = elements[j];</span><br><span class="line">        elements[j] = elements[j + <span class="number">1</span>];</span><br><span class="line">        elements[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(elements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> elements = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">bubbleSort</span>(elements);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(elements)</span></span><br></pre></td></tr></table></figure><h2 id="快速排序-O-最好-nlogn-最慢-n-2-平均-nlog2n"><a href="#快速排序-O-最好-nlogn-最慢-n-2-平均-nlog2n" class="headerlink" title="快速排序 O(最好 nlogn,最慢 n^2,平均 nlog2n)"></a>快速排序 O(最好 nlogn,最慢 n^2,平均 nlog2n)</h2><blockquote><p>基本思想是选择一个基准元素，然后将数组中的元素分为小于基准元素和大于基准元素的两部分，再对这两部分分别进行排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">arr</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort1</span>(<span class="params">arr: number[]</span>): number[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> midIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> midValue = arr.<span class="title function_">splice</span>(midIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">left</span>: number[] = [];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">right</span>: number[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意： splice会改变原数组，不能直接使用length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (n &lt; midValue) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort1</span>(left).<span class="title function_">concat</span>(midValue, <span class="title function_">quickSort1</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort1</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="插入排序-n-2"><a href="#插入排序-n-2" class="headerlink" title="插入排序(n^2)"></a>插入排序(n^2)</h2><blockquote><p>将数组分为已排序和未排序两部分，然后将未排序部分的第一个元素插入到已排序部分的正确位置上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handle = [arr[<span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> newItem = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = handle.<span class="property">length</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newItem &gt; handle[j]) &#123;</span><br><span class="line">        handle.<span class="title function_">splice</span>(j + <span class="number">1</span>, <span class="number">0</span>, newItem);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (j === <span class="number">0</span>) &#123;</span><br><span class="line">        handle.<span class="title function_">unshift</span>(newItem);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="选择排序（n-2）"><a href="#选择排序（n-2）" class="headerlink" title="选择排序（n^2）"></a>选择排序（n^2）</h2><blockquote><p>将数组分为已排序和未排序两部分，然后从未排序部分选择最小的元素并放到已排序部分的末尾</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    index = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[index] &gt; arr[j]) &#123;</span><br><span class="line">        index = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index !== i) &#123;</span><br><span class="line">      [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="归并排序（nlogn）"><a href="#归并排序（nlogn）" class="headerlink" title="归并排序（nlogn）"></a>归并排序（nlogn）</h2><blockquote><p>将数组分成两个子数组，分别对这两个子数组进行排序，然后将排序后的子数组合并成一个有序的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并两个有序的数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = [];</span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; right.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">      temp.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> temp.<span class="title function_">concat</span>(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治思想，归并排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">let</span> right = arr.<span class="title function_">slice</span>(mid);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并两个有序数组？"><a href="#合并两个有序数组？" class="headerlink" title="合并两个有序数组？"></a>合并两个有序数组？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeArr</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> mergedArr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pointer1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> pointer2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pointer1 &lt; arr1.<span class="property">length</span> &amp;&amp; pointer2 &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[pointer1] &lt; arr2[pointer2]) &#123;</span><br><span class="line">      mergedArr.<span class="title function_">push</span>(arr1[pointer1]);</span><br><span class="line">      pointer1++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mergedArr.<span class="title function_">push</span>(arr2[pointer2]);</span><br><span class="line">      pointer2++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pointer1 &lt; arr1.<span class="property">length</span>) &#123;</span><br><span class="line">    mergedArr.<span class="title function_">push</span>(arr1[pointer1]);</span><br><span class="line">    pointer1++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pointer2 &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">    mergedArr.<span class="title function_">push</span>(arr2[pointer2]);</span><br><span class="line">    pointer2++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mergedArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组去重&quot;&gt;&lt;a href=&quot;#数组去重&quot; class=&quot;headerlink&quot; title=&quot;数组去重&quot;&gt;&lt;/a&gt;数组去重&lt;/h2&gt;</summary>
    
    
    
    <category term="面经" scheme="https://github.com/foolishmax/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://github.com/foolishmax/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>单页面应用前端路由原理</title>
    <link href="https://github.com/foolishmax/2022/03/14/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/"/>
    <id>https://github.com/foolishmax/2022/03/14/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/</id>
    <published>2022-03-14T07:09:06.000Z</published>
    <updated>2023-04-03T08:40:44.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是单页面应用？"><a href="#什么是单页面应用？" class="headerlink" title="什么是单页面应用？"></a>什么是单页面应用？</h2><span id="more"></span><p>单页面应用是指第一次进入页面的时候会请求一个 html 文件，切换到其他组件的时候，虽然路径会发生相应的变化，但是没有新的 html 文件请求，原理是 js 会感知到 url 的变化，js 会动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这时候的路由不是后端做的而是由前端来做，来判断页面到底显示哪个组件，这个过程就是单页面的应用。</p><h2 id="单页面应用的优缺点"><a href="#单页面应用的优缺点" class="headerlink" title="单页面应用的优缺点"></a>单页面应用的优缺点</h2><p>优点：页面切换快，因为页面每次切换的时候，并不需要做 html 文件的请求，这样就减少的很多 http 发送的时延。</p><p>缺点：单页面应用的首屏加载时间比较慢，首屏加载需要一次 html 请求和一次 js 请求，时间相对较慢，而且 SEO 效果差，因为搜索引擎只认识 html 中的内容，但是单页面应用中内容很多需要靠 js 渲染出来，搜索引擎不识别这部分内容，就会导致 SEO 效果不好。</p><h2 id="什么是多页面应用？"><a href="#什么是多页面应用？" class="headerlink" title="什么是多页面应用？"></a>什么是多页面应用？</h2><p>多页面应用是指每一次页面跳转的时候，服务器都会返回一个新的 html 文档，这种类型的应用叫做多页应用。</p><h2 id="多页面应用的优缺点"><a href="#多页面应用的优缺点" class="headerlink" title="多页面应用的优缺点"></a>多页面应用的优缺点</h2><p>优点：首屏加载快，SEO 效果好，因为客户端向服务端发起请求的时候，服务器之返回了一个 html 页面，所以加载比较快。</p><p>缺钱：页面切换比较慢</p><h2 id="单页面应用和多页面应用的区别"><a href="#单页面应用和多页面应用的区别" class="headerlink" title="单页面应用和多页面应用的区别"></a>单页面应用和多页面应用的区别</h2><p>1.应用构成不同<br>多页面应用是由多个不同的页面构成，单页面应用是一个外壳页面和多个页面片段构成。</p><p>2.页面跳转方式不同<br>多页面应用的页面跳转是从一个页面跳转到另一个页面，而单页面则是把一个页面判断删除或隐藏，加载另一个页面片段。</p><p>3.跳转后公共资源是否重新加载<br>跳转后多页面应用需要重新进行加载，但是单页面不需要重新加载</p><p>4.用户体验不同<br>多页面应用首屏加载快但是切换慢，单页面应用首屏加载慢但是切换快</p><p>5.页面传递数据方式不同<br>多页面应用依靠 url、cookie、localstorage 来传递数据，单页面应用则是靠组件进行通信，相对更加简单。</p><h2 id="前端路由的原理"><a href="#前端路由的原理" class="headerlink" title="前端路由的原理"></a>前端路由的原理</h2><p>前端路由的原理本质上就是通过不刷新浏览器的请求下修改 url、检测 url 的变化，截获 url 的地址，通过解析、匹配路由规则从而实现 UI 的更新，路由的实现通常有两种实现：hash 模式、history 模式</p><h3 id="hash-路由的原理"><a href="#hash-路由的原理" class="headerlink" title="hash 路由的原理"></a>hash 路由的原理</h3><p>在 hash 模式下，在 url 中#后面的部分表示的是一个客户端状态，当这部分发生变化的时候，浏览器本身就不会刷新，这样就满足了第一个条件，即在不刷新浏览器的情况下修改浏览器链接，同时通过监听 hashChange 事件来监听 url 中 hash 值的变化，触发相关函数，改变相关组件。</p><h3 id="history-路由的原理"><a href="#history-路由的原理" class="headerlink" title="history 路由的原理"></a>history 路由的原理</h3><p>history 模式利用 html5 中 history API，history.pushState 和 history.replaceState 这两个方法可以在不刷新页面的情况下，操作浏览器的历史记录，然后通过 popState 事件来监听 url 的变化，从而触发相关函数，改变相关组件。</p><p>history.back()、history.forward()、history.go()会触发 popstate 事件<br>history.pushState()、history.replaceState 不会出发 popstate 事件，需要对 replaceState 和 pushState 创建全局 Event 事件，然后 window.addEventListener 监听我们加的 event 事件<br>手动触发 popstate：<br>history.pushState({}, ‘’, ‘/new-path’);<br>window.dispatchEvent(new PopStateEvent(‘popstate’));</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是单页面应用？&quot;&gt;&lt;a href=&quot;#什么是单页面应用？&quot; class=&quot;headerlink&quot; title=&quot;什么是单页面应用？&quot;&gt;&lt;/a&gt;什么是单页面应用？&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>koa-generator快速搭建koa服务</title>
    <link href="https://github.com/foolishmax/2022/03/08/koa-generator%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAkoa%E6%9C%8D%E5%8A%A1/"/>
    <id>https://github.com/foolishmax/2022/03/08/koa-generator%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAkoa%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-03-08T02:46:25.000Z</published>
    <updated>2022-07-30T04:11:13.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-全局安装koa-generator脚手架"><a href="#1-全局安装koa-generator脚手架" class="headerlink" title="1.全局安装koa-generator脚手架"></a>1.全局安装<em>koa-generator</em>脚手架</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g koa-generator</span><br><span class="line"># or</span><br><span class="line">yarn global add koa-generator</span><br></pre></td></tr></table></figure><h2 id="创建koa项目"><a href="#创建koa项目" class="headerlink" title="创建koa项目"></a>创建<em>koa</em>项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">koa2 project-name</span><br><span class="line"></span><br><span class="line">// 使用ejs引擎</span><br><span class="line">koa2 -e project-name</span><br></pre></td></tr></table></figure><h2 id="进入项目安装依赖"><a href="#进入项目安装依赖" class="headerlink" title="进入项目安装依赖"></a>进入项目安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd project-name</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"># or</span><br><span class="line">npm run dev</span><br><span class="line"># or...</span><br></pre></td></tr></table></figure><h3 id="使用-pm2-启动-koa-项目"><a href="#使用-pm2-启动-koa-项目" class="headerlink" title="使用 pm2 启动 koa 项目"></a>使用 pm2 启动 koa 项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install -g pm2</span><br><span class="line">// 启动项目</span><br><span class="line">pm2 start ./bin/www</span><br><span class="line">// pm2自动重启</span><br><span class="line">pm2 start ./bin/www/ --watch</span><br></pre></td></tr></table></figure><h3 id="pm2-相关命令（www-是项目名）"><a href="#pm2-相关命令（www-是项目名）" class="headerlink" title="pm2 相关命令（www 是项目名）"></a>pm2 相关命令（www 是项目名）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm2 list          #查看所有已启动项目</span><br><span class="line">pm2 start         #启动</span><br><span class="line">pm2 restart www   #重启</span><br><span class="line">pm2 stop www      #停止</span><br><span class="line">pm2 delete www    #删除</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-全局安装koa-generator脚手架&quot;&gt;&lt;a href=&quot;#1-全局安装koa-generator脚手架&quot; class=&quot;headerlink&quot; title=&quot;1.全局安装koa-generator脚手架&quot;&gt;&lt;/a&gt;1.全局安装&lt;em&gt;koa-generator&lt;/em&gt;脚手架&lt;/h2&gt;</summary>
    
    
    
    <category term="node" scheme="https://github.com/foolishmax/categories/node/"/>
    
    
    <category term="node" scheme="https://github.com/foolishmax/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>TS进阶题目</title>
    <link href="https://github.com/foolishmax/2022/01/17/typescript%E8%BF%9B%E9%98%B6%E9%A2%98%E7%9B%AE/"/>
    <id>https://github.com/foolishmax/2022/01/17/typescript%E8%BF%9B%E9%98%B6%E9%A2%98%E7%9B%AE/</id>
    <published>2022-01-17T07:50:20.000Z</published>
    <updated>2023-01-03T06:19:13.211Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在线 TS 地址 <a href="https://www.typescriptlang.org/">typescript</a></li></ul><span id="more"></span><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul><li>以下代码为什么会提示错误，应该如何解决上述问题？</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一种解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;t <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...u,</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul><li>以下函数我们希望参数<em>a</em>和<em>b</em>的类型都是一致的，即<em>a</em>和<em>b</em>同时为<em>number</em>或<em>string</em>类型，当它们的类型不一致时，ts 类型检查器能自动提示对应的错误信息。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>,b: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p><strong>第一种解决方案</strong></p><ul><li>函数重载</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>, b: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a <span class="keyword">as</span> <span class="built_in">number</span>) + (b <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong>第二种解决方案</strong></p><ul><li>自定义路由守卫</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isStringArray = (<span class="attr">params</span>: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]): params is <span class="built_in">string</span>[] =&gt; <span class="keyword">typeof</span> params[<span class="number">0</span>] === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">...args: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isStringArray</span>(args)) &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + <span class="string">&#x27;:&#x27;</span> + args[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + args[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong>第三种解决方案</strong></p><ul><li>范型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> f&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a <span class="keyword">as</span> <span class="built_in">number</span>) + (b <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul><li>实现 SetOptional 工具类型，支持把给定的 keys 对应的属性变为可选，参考<em>Partial<T></em></li><li>实现 SetRequired 工具类型，支持把给定的 keys 对应的属性变成必填，参考 <em>Require<T></em></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetOptional 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>; <span class="comment">//该属性变为可选的</span></span><br><span class="line">  b?: <span class="built_in">string</span>; <span class="comment">//保持不变</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetRequired 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>; <span class="comment">//保持不变</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>; <span class="comment">//该属性变为必选的</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><ul><li>SetOptional</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对交叉类型进行扁平化处理</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>SetRequired</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt; &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplely</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplely</span>&lt;&#123; [X <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[X]; &#125; &amp; &#123; [P <span class="keyword">in</span> K]?: T[P] &#125;&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplely</span>&lt;&#123; [X <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[X]; &#125; &amp; &#123; [P <span class="keyword">in</span> K]-?: T[P] &#125;&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Omit</span>&lt;T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Omit</span>&lt;T, K&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><ul><li><em>Pick&lt;T, K extends keyof T&gt;</em> 的作用是将某个类型中的字属性挑出来，得到包含这个类型部分属性的字类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>问题：如何定义一个<em>ConditionalPick</em>工具类型，支持根据指定的<em>Condition</em>条件来生成新的类型，对应的使用示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">d</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeyOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// =&gt; &#123;a: string&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#key-remapping-in-mapped-types">神奇的 as</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">d</span>: &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConditionalPick</span>&lt;T, K&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> (T[P] <span class="keyword">extends</span> K ? P : <span class="built_in">never</span>)]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeysOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// =&gt; &#123;a: string&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><ul><li>定义一个工具类型<em>AppendArgument</em>,为已有函数累心增加指定类型的参数，新增的参数名是<em>x</em>，将作为新函数类型的第一个参数，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F, A&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><ul><li>延伸阅读 <a href="https://mp.weixin.qq.com/s/mkvnJh3fBmL86Vnrv9xAyQ">掌握 TS 这些工具类型，让你开发事半功倍</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>, A&gt; = <span class="function">(<span class="params">x: A, ...args: Parameters&lt;F&gt;</span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><ul><li>延伸阅读 <a href="https://mp.weixin.qq.com/s/JT2N2K5hvQAXN45B2DEbQw">用上这几招，轻松实现 TS 类型提取</a></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F, T&gt; = F <span class="keyword">extends</span> (...<span class="attr">args</span>: infer <span class="title class_">Args</span>) =&gt; infer <span class="title class_">Return</span> ? <span class="function">(<span class="params">x: T, ...args: Args</span>) =&gt;</span> <span class="title class_">Return</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number</span></span><br></pre></td></tr></table></figure><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul><li>定义一个 NativeFlat 工具类型，支持把数组类型拍平(扁平化),示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NativeFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NativeResult</span> = <span class="title class_">NativeFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>],[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],[<span class="string">&#x27;d&#x27;</span>]]&gt;;</span><br><span class="line"><span class="comment">// =&gt; &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在完成<em>NativeFlat</em>工具类型之后，继续实现<em>DeepFlat</em>工具类型，以支持多维数组类型：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="built_in">unknown</span> <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Deep</span> = [[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepTestResult</span> = <span class="title class_">DeepFlat</span>&lt;<span class="title class_">Deep</span>&gt;</span><br><span class="line"><span class="comment">// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>NativeFlat</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NaiveFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? T[P][<span class="built_in">number</span>] : T[P]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NaiveResult</span> = <span class="title class_">NaiveFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>]]&gt;</span><br><span class="line"><span class="comment">// NaiveResult的结果： &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span></span><br></pre></td></tr></table></figure><ul><li>DeepFlat</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Deep</span> = [[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? <span class="title class_">DeepFlat</span>&lt;T[K]&gt; : T[K]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepTestResult</span> = <span class="title class_">DeepFlat</span>&lt;<span class="title class_">Deep</span>&gt;</span><br><span class="line"><span class="comment">// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><ul><li>使用类型别名定义一个<em>EmptyObject</em>类型，是的该类型只允许空对象赋值：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// Error</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更改以下<em>takeSomeTypeOnly</em>函数类型定义，让参数只允许严格 SomeType 类型的值，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">takeSomeTypeOnly</span>(<span class="params">x: SomeType</span>) &#123;<span class="keyword">return</span> x&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(x); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">additionalProp</span>: <span class="string">&#x27;x&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(y); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>EmptyObject</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type PropertyKey = string | number | symbol;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// Error</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>takeSomeTypeOnly</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Exclusive</span>&lt;<span class="variable constant_">T1</span>, <span class="variable constant_">T2</span> <span class="keyword">extends</span> <span class="variable constant_">T1</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="variable constant_">T2</span>]: K <span class="keyword">extends</span> keyof <span class="variable constant_">T1</span> ? <span class="variable constant_">T2</span>[K] : <span class="built_in">never</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> takeSomeTypeOnly&lt;T <span class="keyword">extends</span> <span class="title class_">SomeType</span>&gt;(<span class="attr">x</span>: <span class="title class_">Exclusive</span>&lt;<span class="title class_">SomeType</span>, T&gt;) &#123;<span class="keyword">return</span> x&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(x); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">additionalProp</span>: <span class="string">&#x27;x&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(y); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><ul><li>定义一个<em>NonEmptyArray</em>工具类型，用于确保数据为非空数组</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = [T, ...T[]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = T[] &amp; &#123;<span class="number">0</span>: T&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="built_in">number</span>]: T;</span><br><span class="line">&#125; &amp; &#123;</span><br><span class="line">  <span class="number">0</span>: T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><ul><li>定义一个<em>JoinStrArray</em>工具类型，用于根据指定的<code>Separator</code>分隔符，对字符串数据类型进行拼接，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[], <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;</span><br><span class="line">  <span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[],</span><br><span class="line">  <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">&gt; =</span><br><span class="line"><span class="title class_">Arr</span> <span class="keyword">extends</span> [infer <span class="title class_">El</span>,...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Rest</span> <span class="keyword">extends</span> <span class="built_in">string</span>[]</span><br><span class="line">? <span class="title class_">El</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">? <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="string">&quot;&quot;</span></span><br><span class="line">? <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>,<span class="string">`<span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">: <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>,<span class="string">`<span class="subst">$&#123;Result&#125;</span><span class="subst">$&#123;Separator&#125;</span><span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><ul><li>实现一个<em>Trim</em>工具类型，用于对字符串字面量类型进行去空格处理，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Trim</span>&lt;<span class="string">&#x27;  foolishmax  &#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TrimLeft</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">` <span class="subst">$&#123;infer R&#125;</span>`</span> ? <span class="title class_">TrimLeft</span>&lt;R&gt; : V;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TrimRight</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer R&#125;</span> `</span>? <span class="title class_">TrimRight</span>&lt;R&gt; : V;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="title class_">TrimLeft</span>&lt;<span class="title class_">TrimRight</span>&lt;V&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Trim</span>&lt;<span class="string">&#x27;  foolishmax  &#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h2><ul><li>实现一个*IsEqual&lt;A, B&gt;*工具类型，用于比较两个类型是否相等，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>解决方案（原始方案） 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = A <span class="keyword">extends</span> B ? (B <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E3</span> = <span class="title class_">IsEqual</span>&lt;<span class="literal">true</span>, <span class="built_in">boolean</span>&gt; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E4</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span> | <span class="number">2</span>, <span class="number">1</span>&gt; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">这是因为泛型和*<span class="keyword">extends</span>*两者结合所产生的*distributive conditionial types*效应导致的</span><br></pre></td></tr></table></figure><p><strong>解决方案（稍微优化）2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = [A] <span class="keyword">extends</span> [B] ? [B] <span class="keyword">extends</span> [A] ? <span class="literal">true</span> : <span class="literal">false</span> : <span class="literal">false</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = [A, B] <span class="keyword">extends</span> [B, A] ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E3</span> = <span class="title class_">IsEqual</span>&lt;<span class="built_in">any</span>, <span class="built_in">string</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E4</span> = <span class="title class_">IsEqual</span>&lt; &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;, &#123; <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">这是因为<span class="title class_">Ts</span>中<span class="built_in">any</span>可以赋值为任何类型，任何类型也可以赋值给<span class="built_in">any</span>，这就意味着<span class="built_in">any</span>和任意类型之间都是assignable的，对于<span class="keyword">extends</span>而言就是都可以相互<span class="keyword">extends</span>的，所以<span class="variable constant_">E3</span>是<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">readonly</span>不会改变assignable。</span><br></pre></td></tr></table></figure><p><strong>解决方案 4</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; =</span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> A ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> B ? <span class="number">1</span> : <span class="number">2</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h2><ul><li>实现一个<em>Head</em>工具类型，用于获取数组类型的第一个类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [] ? <span class="built_in">never</span> : T[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [<span class="attr">head</span>: infer H, ...<span class="attr">rest</span>: <span class="built_in">any</span>[]] ? H : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h2><ul><li>实现一个<em>Tail</em>工具类型，用于获取数组类型除了第一个类型外，剩余的类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tail</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Tail</span>&lt;[]&gt; <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>]&gt; <span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&gt; <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tail</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? B : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Tail</span>&lt;[]&gt; <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>]&gt; <span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&gt; <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h2><ul><li>实现一个<em>Unshift</em>工具类型，用于把指定类型 E 作为第一个元素添加到<em>T</em>数组类型中，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">Unshift</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">Unshift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>&gt;; <span class="comment">//[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = [E, ...T];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">Unshift</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">Unshift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>&gt;; <span class="comment">//[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h2><ul><li>实现一个<em>Shift</em>工具类型，用于移除<em>T</em>数组类型中的第一个类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">Shift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? B : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">Shift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt;; <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]&gt;; <span class="comment">// [number, boolean]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">Shift</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S3</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>]&gt;; <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h2 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h2><ul><li>实现一个<em>Push</em>工具类型，用于把指定类型<em>E</em>作为最后一个元素添加到<em>T</em>数组类型中，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = T <span class="keyword">extends</span> [...infer U] ? [...U, E] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = [...T, E];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="第十七题"><a href="#第十七题" class="headerlink" title="第十七题"></a>第十七题</h2><ul><li>实现一个<em>Includes</em>工具类型，用于判断指定的类型<em>E</em>，是否包含在<em>T</em>数组类型中，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = E <span class="keyword">extends</span> T[<span class="built_in">number</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = T <span class="keyword">extends</span> [infer A, ...infer R] ? E <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;R, E&gt; : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h2><ul><li>实现一个<em>UnionToIntersection</em>工具类型，用于把联合类型转换为交叉类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; | &#123;<span class="attr">age</span>: <span class="built_in">number</span>&#125;&gt;; <span class="comment">// &#123;name: string&#125; &amp; &#123;age: number&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li><p><a href="https://www.jianshu.com/p/071b948209f3">逆变协变</a></p></li><li><p>注释</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fun</span>&lt;X&gt; = <span class="function">(<span class="params">...args: X[]</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: <span class="title class_">Fun</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Fun</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line">g = f <span class="comment">// this cannot be assigned</span></span><br><span class="line"></span><br><span class="line">当f赋值给g时，新的g不能使用<span class="built_in">number</span>类型的参数，我们丢失了g的一部分类型，这就属于 逆变(contra-variance),这个和交集的工作机制类似。</span><br><span class="line"></span><br><span class="line">当我们把逆变位置放在条件类型时：<span class="title class_">Typescript</span>会创建一个交集，我们从函数参数中infer了一个类型，<span class="title class_">TypeScript</span>知道我们必须符合逆变的条件，然后<span class="title class_">TypeScript</span>会自动创建并集中所有的成分的交集。</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = (U <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="function">(<span class="params">k: U</span>) =&gt;</span> <span class="built_in">void</span> : <span class="built_in">never</span>) <span class="keyword">extends</span> (<span class="attr">k</span>: infer I) =&gt; <span class="built_in">void</span> ? I : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; | &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;&gt; <span class="comment">// &#123; name: string; &#125; &amp; &#123; age: number; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h2><ul><li>实现一个 <em>OptionalKeys</em> 工具类型，用来获取对象类型中声明的可选属性，示例如下:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="title class_">NonNullable</span>&lt;&#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: <span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span></span><br><span class="line">&#125;[keyof T]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = keyof &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span>]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="title class_">Exclude</span>&lt;&#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T <span class="keyword">extends</span> T[P] ? <span class="built_in">never</span> : T[P]</span><br><span class="line">&#125;[keyof T], <span class="literal">undefined</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt;; <span class="comment">// &quot;from&quot; | &quot;speak</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 4</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: (<span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span>)</span><br><span class="line">&#125;[keyof T] &amp; keyof T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt;; <span class="comment">// &quot;from&quot; | &quot;speak</span></span><br></pre></td></tr></table></figure><h2 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h2><ul><li>实现一个<em>Curry</em>工具类型，用来实现函数类型的柯里化处理，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Curry</span>&lt;</span><br><span class="line">  F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>,</span><br><span class="line">  P <span class="keyword">extends</span> <span class="built_in">any</span>[] = <span class="title class_">Parameters</span>&lt;F&gt;,</span><br><span class="line">  R = <span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">Curry</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// () =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a:<span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number) =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number)=&gt;(arg: string) =&gt; Date</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Curry</span>&lt;</span><br><span class="line">  F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>,</span><br><span class="line">  P <span class="keyword">extends</span> <span class="built_in">any</span>[] = <span class="title class_">Parameters</span>&lt;F&gt;,</span><br><span class="line">  R = <span class="title class_">ReturnType</span>&lt;F&gt;,</span><br><span class="line">&gt; = P <span class="keyword">extends</span> [infer A, ...infer B]</span><br><span class="line">  ? B <span class="keyword">extends</span> []</span><br><span class="line">  ? <span class="function">(<span class="params">arg: A</span>) =&gt;</span> R</span><br><span class="line">  : <span class="function">(<span class="params">arg: A</span>) =&gt;</span> <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">...arg: B</span>) =&gt;</span> R&gt;</span><br><span class="line">  : F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">Curry</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// () =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a:<span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number) =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number)=&gt;(arg: string) =&gt; Date</span></span><br></pre></td></tr></table></figure><h2 id="第二十一题"><a href="#第二十一题" class="headerlink" title="第二十一题"></a>第二十一题</h2><ul><li>实现一个<em>Merge</em>工具类型，用于把两个类型合成一个新的类型，第二类型（SecondType）的<em>Keys</em>将会覆盖第一种类型（FirstType）的<em>Keys</em>，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;<span class="title class_">FirstType</span>, <span class="title class_">SecondType</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><ul><li>将 FirstType 和 SecondType 做交叉类型，并遍历每一个属性；</li><li>如果当前属性名在 SecondType 类型中，则使用 SecondType 类型中的当前属性值；</li><li>如果当前属性名在 FirstType 类型中，则使用 FirstType 类型中的当前属性值；</li><li>否则为 never；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;<span class="title class_">FirstType</span>, <span class="title class_">SecondType</span>&gt; =&#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof (<span class="title class_">FirstType</span> &amp; <span class="title class_">SecondType</span>)]</span><br><span class="line">  : K <span class="keyword">extends</span> keyof <span class="title class_">SecondType</span></span><br><span class="line">  ? <span class="title class_">SecondType</span>[K]</span><br><span class="line">  : K <span class="keyword">extends</span> keyof <span class="title class_">FirstType</span></span><br><span class="line">  ? <span class="title class_">FirstType</span>[K]</span><br><span class="line">  : <span class="built_in">never</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><ul><li>先将 FirstType 类型中已经有的，和 SecondType 类型中相同的属性删除；</li><li>将前面结果和 SecondType 做交叉类型，获得合并后结果。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;F, S&gt; = <span class="title class_">Omit</span>&lt;F, keyof S&gt; &amp; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第二十二题"><a href="#第二十二题" class="headerlink" title="第二十二题"></a>第二十二题</h2><ul><li>实现一个<em>RequireAtLeastOne</em>工具类型，它将创建一个至少含有一个给定<em>keys</em>的类型，其余<em>keys</em>类型保持原样，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;</span><br><span class="line">  <span class="title class_">ObjectType</span>,</span><br><span class="line">  <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>,</span><br><span class="line">&gt; = 代码实现</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span>|<span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;</span><br><span class="line">  <span class="title class_">ObjectType</span>,</span><br><span class="line">  <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>,</span><br><span class="line">&gt; = <span class="title class_">KeysType</span> <span class="keyword">extends</span> <span class="built_in">unknown</span> ? <span class="title class_">ObjectType</span> &amp; &#123;</span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">KeysType</span>]-?: <span class="title class_">ObjectType</span>[K]</span><br><span class="line">&#125; : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span> | <span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-expect-error 因为没有&#x27;text&#x27;和&#x27;json&#x27;中的任何一个，报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder2</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span> | <span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">ObjectType</span>]: K <span class="keyword">extends</span> <span class="title class_">KeysType</span> ? <span class="title class_">ObjectType</span> &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;<span class="title class_">ObjectType</span>, K&gt;&gt; : <span class="built_in">never</span>;</span><br><span class="line">&#125;[keyof <span class="title class_">ObjectType</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&quot;text&quot;</span> | <span class="string">&quot;json&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决方案 3</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = <span class="title class_">KeysType</span> <span class="keyword">extends</span> <span class="built_in">unknown</span></span><br><span class="line">? <span class="title class_">Omit</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span>&gt; &amp; <span class="title class_">Require</span>&lt;<span class="title class_">Pick</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span>&gt;&gt;</span><br><span class="line">: <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&quot;text&quot;</span> | <span class="string">&quot;json&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二十三题"><a href="#第二十三题" class="headerlink" title="第二十三题"></a>第二十三题</h2><ul><li>实现一个<em>RemoveIndexSignature</em>工具类型，用于移除已有类型中的索引签名，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">symbol</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">bar</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveIndexSignature</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">RemoveIndexSignature</span>&lt;<span class="title class_">Foo</span>&gt;; <span class="comment">// &#123;bar: ()=&gt;void;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">symbol</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">bar</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveIndexSignature</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="built_in">string</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="built_in">number</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="built_in">symbol</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : K]: T[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">RemoveIndexSignature</span>&lt;<span class="title class_">Foo</span>&gt;; <span class="comment">// &#123;bar: () =&gt; void;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第二十四题"><a href="#第二十四题" class="headerlink" title="第二十四题"></a>第二十四题</h2><ul><li>实现一个 <code>Mutable</code> 工具类型，用于移除对象类型上所有属性或者部分属性的 <code>readonly</code> 修饰符，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; =</span><br><span class="line">&#123;-<span class="keyword">readonly</span> [K <span class="keyword">in</span> <span class="title class_">Keys</span>]: T[K] &#125; &amp; <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, <span class="title class_">Keys</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; =</span><br><span class="line">&#123;-<span class="keyword">readonly</span> [K <span class="keyword">in</span> <span class="title class_">Keys</span>]: T[K] : T[K]&#125; &amp; <span class="title class_">Omit</span>&lt;T, <span class="title class_">Keys</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><h2 id="第二十五题"><a href="#第二十五题" class="headerlink" title="第二十五题"></a>第二十五题</h2><ul><li>实现一个 <code>IsUnion</code> 工具类型，判断指定的类型是否为联合类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsUnion</span>&lt;T, U = T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">unknown</span>&gt; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsUnion</span>&lt;T, U = T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span> ? [U] <span class="keyword">extends</span> [T] ? <span class="literal">false</span> : <span class="literal">true</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">unknown</span>&gt; <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>知识点： 1.联合类型作为泛型的时候 extends 会触发分发执行 2.联合类型 T 写成[T]就变成了普通类型，extends 的时候不会分发执行</p><p>这里第一步<code>T extends any</code>肯定为真，一个其实就是利用其分发的特性，后面的[T]就是一个联合类型拆开后的某一个，因此如果是联合类型的话<code>[U] extends [T]</code>一定为否</p><h2 id="第二十六题"><a href="#第二十六题" class="headerlink" title="第二十六题"></a>第二十六题</h2><ul><li>实现一个<code>IsNever</code>工具类型，判断指定的类型是否为<code>never</code>类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsNever</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span> | <span class="built_in">string</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsNever</span>&lt;<span class="literal">null</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>用<code>[]</code>包裹 T，否则泛型参数会被当作一个裸类型处理，走<code>条件式分布类型</code>的判断逻辑，当泛型参数是 any 这种特殊值时，会得到分布后的类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsNever</span>&lt;T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span> | <span class="built_in">string</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsNever</span>&lt;<span class="literal">null</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="第二十七题"><a href="#第二十七题" class="headerlink" title="第二十七题"></a>第二十七题</h2><ul><li>实现一个<code>Reverse</code>工具类型，用于对元祖类型中元素的位置颠倒，并返回该数组，元祖的第一个元素就会变成最后一个，最后一个元素变成第一个。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? <span class="title class_">Reverse</span>&lt;B, [A, ...R]&gt; : R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? [...<span class="title class_">Reverse</span>&lt;B&gt;, A] : [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="第二十八题"><a href="#第二十八题" class="headerlink" title="第二十八题"></a>第二十八题</h2><ul><li>实现一个<code>Split</code>工具类型，根据给定的分割符(Delimiter)对包含分割符的字符串进行切割，可用于定义<code>String.prototype.split</code>方法的返回值类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Item</span> = <span class="string">`zs, ls, ww`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Split</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Delimiter</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="title class_">Split</span>&lt;<span class="title class_">Item</span>, <span class="string">&#x27;,&#x27;</span>&gt;; <span class="comment">// [&quot;zs&quot;, &quot;ls&quot;,&quot;ww&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Item</span> = <span class="string">`zs, ls, ww`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Split</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Delimiter</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Key&#125;</span><span class="subst">$&#123;Delimiter&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">? [<span class="title class_">Key</span>, ...<span class="title class_">Split</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Delimiter</span>&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span> <span class="comment">/* 处理空字符串 */</span></span><br><span class="line">? []</span><br><span class="line">: [S]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="title class_">Split</span>&lt;<span class="title class_">Item</span>, <span class="string">&#x27;,&#x27;</span>&gt;; <span class="comment">// [&quot;zs&quot;, &quot;ls&quot;,&quot;ww&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType2</span> = <span class="title class_">Split</span>&lt;<span class="string">&#x27;a|b|c||d&#x27;</span>, <span class="string">&#x27;|&#x27;</span>&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType3</span> = <span class="title class_">Split</span>&lt;<span class="string">&#x27;abcdef&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第二十九题"><a href="#第二十九题" class="headerlink" title="第二十九题"></a>第二十九题</h2><ul><li>实现一个<code>ToPath</code>工具类型，用于把属性访问<code>(.或[])</code>路径转换为元祖的形式，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToPath</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo.bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo[0].bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;0&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToPath</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer F&#125;</span><span class="subst">$&#123;<span class="string">`[<span class="subst">$&#123;infer D&#125;</span>]`</span>&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? [...<span class="title class_">ToPath</span>&lt;F&gt;, ...([D] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? [] : [D]), ...<span class="title class_">ToPath</span>&lt;R&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer F&#125;</span>.<span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? [...<span class="title class_">ToPath</span>&lt;F&gt;, ...<span class="title class_">ToPath</span>&lt;R&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">? []</span><br><span class="line">: [S]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo.bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo[0].bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;0&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="第三十题"><a href="#第三十题" class="headerlink" title="第三十题"></a>第三十题</h2><ul><li>完善<code>Chainable</code>类型的定义，是的 TS 能成功推断出<code>result</code>变量的类型，调用<code>option</code>方法之后会不断扩展当前对象的类型，使得调用<code>get</code>方法后能获取正确的类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span> = &#123;</span><br><span class="line">  <span class="title function_">option</span>(<span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">any</span>): <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">get</span>(): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lolo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;address&#x27;</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;XiaMen&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">get</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ResultType</span> = <span class="keyword">typeof</span> result</span><br><span class="line"><span class="comment">// 期望 ResultType 的类型是：</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   age: number</span></span><br><span class="line"><span class="comment">//   name: string</span></span><br><span class="line"><span class="comment">//   address: &#123;</span></span><br><span class="line"><span class="comment">//     value: string</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span>&lt;T = &#123;&#125;&gt; = &#123;</span><br><span class="line">  option&lt;K <span class="keyword">extends</span> <span class="built_in">string</span>, V <span class="keyword">extends</span> <span class="built_in">any</span>&gt;(<span class="attr">key</span>: K, <span class="attr">value</span>: V): <span class="title class_">Chainable</span>&lt;&#123; [P <span class="keyword">in</span> K]: V &#125; &amp; T&gt;;</span><br><span class="line">  <span class="title function_">get</span>(): T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config.<span class="title function_">option</span>(<span class="string">&quot;age&quot;</span>, <span class="number">7</span>).<span class="title function_">option</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lolo&quot;</span>).<span class="title function_">option</span>(<span class="string">&quot;address&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;XiaMen&quot;</span> &#125;).<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ResultType</span> = <span class="keyword">typeof</span> result;</span><br></pre></td></tr></table></figure><h2 id="第三十一题"><a href="#第三十一题" class="headerlink" title="第三十一题"></a>第三十一题</h2><ul><li>实现一个<code>Repeat</code>工具类型，用于根据类型变量<code>C</code>的值，重复<code>T</code>类型并以元祖的形式返回新的类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Repeat</span>&lt;T, C <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Repeat</span>&lt;<span class="number">0</span>, <span class="number">0</span>&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Repeat</span>&lt;<span class="number">1</span>, <span class="number">3</span>&gt;; <span class="comment">// [1, 1, 1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Repeat</span>&lt;<span class="built_in">number</span>, <span class="number">2</span>&gt;; <span class="comment">// [number, number]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Repeat</span>&lt;T, C <span class="keyword">extends</span> <span class="built_in">number</span>, A <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> C ? A : <span class="title class_">Repeat</span>&lt;T, C, [...A, T]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Repeat</span>&lt;<span class="number">0</span>, <span class="number">0</span>&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Repeat</span>&lt;<span class="number">1</span>, <span class="number">3</span>&gt;; <span class="comment">// [1, 1, 1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Repeat</span>&lt;<span class="built_in">number</span>, <span class="number">2</span>&gt;; <span class="comment">// [number, number]</span></span><br></pre></td></tr></table></figure><h2 id="第三十二题"><a href="#第三十二题" class="headerlink" title="第三十二题"></a>第三十二题</h2><ul><li>实现一个<code>RepeatString</code>工具类型，用于根据类型变量<code>C</code>的值，重复 T 类型并以<code>字符串</code>的形式返回新的类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RepeatString</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  C <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>&gt;; <span class="comment">// &#x27;abab&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RepeatString</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  C <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> C</span><br><span class="line">? S</span><br><span class="line">: <span class="title class_">RepeatString</span>&lt;T, C, <span class="string">`<span class="subst">$&#123;S&#125;</span><span class="subst">$&#123;T&#125;</span>`</span>, [...A, T]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>&gt;; <span class="comment">// &#x27;abab&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第三十三题"><a href="#第三十三题" class="headerlink" title="第三十三题"></a>第三十三题</h2><ul><li>实现一个<code>ToNumber</code>工具类型，用于实现把数值字符串转换为数值类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToNumber</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;0&quot;</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;10&quot;</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;20&quot;</span>&gt;; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToNumber</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, S <span class="keyword">extends</span> <span class="built_in">any</span>[] = [], L <span class="keyword">extends</span> <span class="built_in">number</span> = S[<span class="string">&quot;length&quot;</span>]&gt; =</span><br><span class="line"><span class="string">`<span class="subst">$&#123;L&#125;</span>`</span> <span class="keyword">extends</span> T ? L : <span class="title class_">ToNumber</span>&lt;T, [...S, <span class="number">1</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;0&quot;</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;10&quot;</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;20&quot;</span>&gt;; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="第三十四题"><a href="#第三十四题" class="headerlink" title="第三十四题"></a>第三十四题</h2><ul><li>实现一个<code>SmallerThan</code>工具类型，用于比较数值类型的大小，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SmallerThan</span>&lt;</span><br><span class="line">  N <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  M <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">&gt; = <span class="comment">//代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">0</span>, <span class="number">1</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">2</span>, <span class="number">0</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">8</span>, <span class="number">10</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SmallerThan</span>&lt;</span><br><span class="line">  N <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  M <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">any</span>[] = [],</span><br><span class="line">  L <span class="keyword">extends</span> <span class="built_in">number</span> = S[<span class="string">&quot;length&quot;</span>]</span><br><span class="line">&gt; = L <span class="keyword">extends</span> N</span><br><span class="line">? L <span class="keyword">extends</span> M ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">: L <span class="keyword">extends</span> M ? <span class="literal">false</span> : <span class="title class_">SmallerThan</span>&lt;N, M, [...S, <span class="number">1</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">0</span>, <span class="number">1</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">2</span>, <span class="number">0</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">8</span>, <span class="number">10</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第三十五题"><a href="#第三十五题" class="headerlink" title="第三十五题"></a>第三十五题</h2><ul><li>实现一个<code>Add</code>工具类型，用于实现对数组对应的数值进行加法运算，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T, R&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">Add</span>&lt;<span class="number">5</span>, <span class="number">5</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Add</span>&lt;<span class="number">8</span>, <span class="number">20</span>&gt;; <span class="comment">// 28</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Add</span>&lt;<span class="number">10</span>, <span class="number">20</span>&gt;; <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>[], V&gt; = [...T, V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateTuple</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">number</span>[] = []</span><br><span class="line">&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> T ? A : <span class="title class_">CreateTuple</span>&lt;T, <span class="title class_">Push</span>&lt;A, <span class="number">1</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>, R <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = [...<span class="title class_">CreateTuple</span>&lt;T&gt;, ...<span class="title class_">CreateTuple</span>&lt;R&gt;][<span class="string">&quot;length&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">Add</span>&lt;<span class="number">5</span>, <span class="number">5</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Add</span>&lt;<span class="number">8</span>, <span class="number">20</span>&gt;; <span class="comment">// 28</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Add</span>&lt;<span class="number">10</span>, <span class="number">20</span>&gt;; <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h2 id="第三十六题"><a href="#第三十六题" class="headerlink" title="第三十六题"></a>第三十六题</h2><ul><li>实现一个<code>Filter</code>工具类型，用于根据类型变量<code>F</code>的值进行类型过滤，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], F&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Filter</span>&lt;[<span class="number">6</span>, <span class="string">&quot;lolo&quot;</span>, <span class="number">7</span>, <span class="string">&quot;semlinker&quot;</span>, <span class="literal">false</span>], <span class="built_in">number</span>&gt;; <span class="comment">// [6, 7]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Filter</span>&lt;[<span class="string">&quot;kakuqo&quot;</span>, <span class="number">2</span>, [<span class="string">&quot;ts&quot;</span>], <span class="string">&quot;lolo&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [&quot;kakuqo&quot;, &quot;lolo&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Filter</span>&lt;[<span class="number">0</span>, <span class="literal">true</span>, <span class="built_in">any</span>, <span class="string">&quot;abao&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [any, &quot;abao&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本题关键点就是对`any`类型的处理：</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="built_in">any</span> &amp; <span class="number">1</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="built_in">any</span> &amp; <span class="built_in">boolean</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="built_in">any</span> &amp; <span class="built_in">never</span>; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="number">0</span> <span class="keyword">extends</span> (<span class="number">1</span> &amp; T) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], F&gt; = T <span class="keyword">extends</span> [infer <span class="variable constant_">R1</span>, ...infer <span class="variable constant_">R2</span>]</span><br><span class="line">? <span class="title class_">IsAny</span>&lt;<span class="variable constant_">R1</span>&gt; <span class="keyword">extends</span> <span class="literal">true</span></span><br><span class="line">? [<span class="variable constant_">R1</span>, ...<span class="title class_">Filter</span>&lt;<span class="variable constant_">R2</span>, F&gt;]</span><br><span class="line">: [...<span class="variable constant_">R1</span> <span class="keyword">extends</span> F ? [<span class="variable constant_">R1</span>] : [], ...<span class="title class_">Filter</span>&lt;<span class="variable constant_">R2</span>, F&gt;]</span><br><span class="line">:[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Filter</span>&lt;[<span class="number">6</span>, <span class="string">&quot;lolo&quot;</span>, <span class="number">7</span>, <span class="string">&quot;semlinker&quot;</span>, <span class="literal">false</span>], <span class="built_in">number</span>&gt;; <span class="comment">// [6, 7]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Filter</span>&lt;[<span class="string">&quot;kakuqo&quot;</span>, <span class="number">2</span>, [<span class="string">&quot;ts&quot;</span>], <span class="string">&quot;lolo&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [&quot;kakuqo&quot;, &quot;lolo&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Filter</span>&lt;[<span class="number">0</span>, <span class="literal">true</span>, <span class="built_in">any</span>, <span class="string">&quot;abao&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [any, &quot;abao&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第三十七题"><a href="#第三十七题" class="headerlink" title="第三十七题"></a>第三十七题</h2><ul><li>实现一个<code>Flat</code>工具类型，支持把数组类型拍平（扁平化）,示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer <span class="title class_">First</span>, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">First</span> <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">? [...<span class="title class_">Flat</span>&lt;<span class="title class_">First</span>&gt;, ...<span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">: [<span class="title class_">First</span>, ...<span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">: [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], S <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = T <span class="keyword">extends</span> [infer R, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? R <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">? <span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Flat</span>&lt;R, S&gt;&gt;</span><br><span class="line">: <span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>, [...S, R]&gt;</span><br><span class="line">: S</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第三十八题"><a href="#第三十八题" class="headerlink" title="第三十八题"></a>第三十八题</h2><ul><li>实现<code>StartsWith</code>工具类型，判断字符串字面量类型<code>T</code>是否以给定的字符串字面量类型<code>U</code>开头，并根据判断结果返回布尔值，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StartsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>之后，继续实现<code>EndsWith</code>工具类型，判断字符串字面量类型<code>T</code>是否以给定的字符串字面量类型<code>U</code>结尾，并根据判断结果返回布尔值，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EndsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;23&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>&gt;; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StartWith</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StartsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;U&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EndsWith</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EndsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Head&#125;</span><span class="subst">$&#123;U&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;23&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>&gt;; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="第三十九题"><a href="#第三十九题" class="headerlink" title="第三十九题"></a>第三十九题</h2><ul><li>实现<code>IsAny</code>工具类型，用于判断类型<code>T</code>是否为<code>any</code>类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路： 利用任何类型和any交叉都等于any来实现</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="number">0</span> <span class="keyword">extends</span> <span class="number">1</span> &amp; T ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unknown 只能赋给 unknown 或者 any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = [<span class="built_in">unknown</span>] <span class="keyword">extends</span> [T] ? ([T] <span class="keyword">extends</span> [<span class="built_in">string</span>] ? <span class="literal">true</span> : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure><h2 id="第四十题"><a href="#第四十题" class="headerlink" title="第四十题"></a>第四十题</h2><ul><li>实现<code>AnyOf</code>工具类型，只要数组中任意元素的类型非<code>Falsy</code>类型、<code>&#123;&#125;</code>类型或<code>[]</code>类型，则返回<code>true</code>，否则返回<code>false</code>,如果数组为空的话，则返回<code>false</code>，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AnyOf</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">AnyOf</span>&lt;[]&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">AnyOf</span>&lt;[<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">false</span>,[],&#123;&#125;]&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">AnyOf</span>&lt;[<span class="number">1</span>, <span class="string">&quot;&quot;</span>,<span class="literal">false</span>,[],&#123;&#125;]&gt;; <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Falsy</span> = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span></span><br><span class="line">&#125; | [] | <span class="string">&#x27;&#x27;</span> | <span class="string">&quot;&quot;</span> | <span class="literal">false</span> | <span class="number">0</span> | <span class="literal">undefined</span> | <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyOf</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? (A <span class="keyword">extends</span> <span class="title class_">Falsy</span> ? <span class="title class_">AnyOf</span>&lt;<span class="title class_">Rest</span>&gt; : <span class="literal">true</span>)</span><br><span class="line">: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="第四十一题"><a href="#第四十一题" class="headerlink" title="第四十一题"></a>第四十一题</h2><ul><li>实现<code>Replace</code>工具类型，用于实现字符串类型的替换操作，具体的使用示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoobar&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>此外，继续实现<code>ReplaceAll</code>工具类型，用于实现替换所有满足条件的字串，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;barfoo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R3</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarfoobar&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;fobarfobar&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer H&#125;</span><span class="subst">$&#123;From&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="string">`<span class="subst">$&#123;H&#125;</span><span class="subst">$&#123;To&#125;</span><span class="subst">$&#123;R&#125;</span>`</span></span><br><span class="line">: S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoobar&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer H&#125;</span><span class="subst">$&#123;From&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="string">`<span class="subst">$&#123;H&#125;</span><span class="subst">$&#123;To&#125;</span><span class="subst">$&#123;ReplaceAll&lt;R, From, To&gt;&#125;</span>`</span></span><br><span class="line">: S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;barfoo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R3</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarfoobar&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;fobarfobar&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第四十二题"><a href="#第四十二题" class="headerlink" title="第四十二题"></a>第四十二题</h2><ul><li>实现<code>IndexOf</code>工具类型，用于获取数组类型中指定项的索引值，若不存在的话，则返回<code>-1</code>字面量类型，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IndexOf</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">0</span>&gt;; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">1</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">3</span>&gt;; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IndexOf</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>, R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = A <span class="keyword">extends</span> [infer H, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Item</span> <span class="keyword">extends</span> H</span><br><span class="line">? R[<span class="string">&quot;length&quot;</span>]</span><br><span class="line">: <span class="title class_">IndexOf</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Item</span>, [...R, H]&gt;</span><br><span class="line">: -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">0</span>&gt;; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">1</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">3</span>&gt;; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="第四十三题"><a href="#第四十三题" class="headerlink" title="第四十三题"></a>第四十三题</h2><ul><li>实现一个<code>Permutation</code>工具类型，当输入一个联合类型时，返回一个包含该联合类型的全排列类型数组。示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, K = T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] | [&#x27;b&#x27; , &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;; <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;] | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, K = T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>]</span><br><span class="line">? []</span><br><span class="line">: K <span class="keyword">extends</span> K</span><br><span class="line">? [K, ...<span class="title class_">Permutation</span>&lt;<span class="title class_">Exclude</span>&lt;T, K&gt;&gt;]</span><br><span class="line">: <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] | [&#x27;b&#x27; , &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;; <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;] | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="第四十四题"><a href="#第四十四题" class="headerlink" title="第四十四题"></a>第四十四题</h2><ul><li>实现<code>Unpacked</code>工具类型，用于对类型执行“拆箱”操作，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unpacked</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T00</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T01</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>[]&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T02</span> = <span class="title class_">Unpacked</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T03</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T04</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;[]&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T05</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T06</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">never</span>&gt;;  <span class="comment">// never</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unpacked</span>&lt;T&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer A</span><br><span class="line">? A</span><br><span class="line">: T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer B&gt;</span><br><span class="line">? B</span><br><span class="line">: T <span class="keyword">extends</span> (infer A)[]</span><br><span class="line">? A</span><br><span class="line">: T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T00</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T01</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>[]&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T02</span> = <span class="title class_">Unpacked</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T03</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T04</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;[]&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T05</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T06</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">never</span>&gt;;  <span class="comment">// never</span></span><br></pre></td></tr></table></figure><h2 id="第四十五题"><a href="#第四十五题" class="headerlink" title="第四十五题"></a>第四十五题</h2><ul><li>实现<code>JsonifiedObject</code>工具类型，用于对<code>Object</code>对象类型进行序列话操作，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">toJSON</span>(): <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Jsonified</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObject</span> = &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;literalstring&quot;</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">date</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">customClass</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    <span class="attr">clz</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">attr</span>: <span class="title class_">Date</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JsonifiedMyObject</span> = <span class="title class_">Jsonified</span>&lt;<span class="title class_">MyObject</span>&gt;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ex</span>: <span class="title class_">JsonifiedMyObject</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: <span class="string">&quot;MyClass&quot;</span> = ex.<span class="property">customClass</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: <span class="built_in">string</span> = ex.<span class="property">obj</span>.<span class="property">nested</span>.<span class="property">attr</span>;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">toJSON</span>(): <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Jsonified</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> &#123; <span class="title function_">toJSON</span>(): infer <span class="title class_">Return</span> &#125;</span><br><span class="line">    ? <span class="title class_">ReturnType</span>&lt;T[K][<span class="string">&quot;toJSON&quot;</span>]&gt;</span><br><span class="line">    : T[K] <span class="keyword">extends</span> (...<span class="attr">arg</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span></span><br><span class="line">    ? <span class="built_in">never</span></span><br><span class="line">    : T[K] <span class="keyword">extends</span> <span class="built_in">object</span></span><br><span class="line">    ? <span class="title class_">Jsonified</span>&lt;T[K]&gt;</span><br><span class="line">    : T[K];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObject</span> = &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;literalstring&quot;</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">date</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">customClass</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    <span class="attr">clz</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">attr</span>: <span class="title class_">Date</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JsonifiedMyObject</span> = <span class="title class_">Jsonified</span>&lt;<span class="title class_">MyObject</span>&gt;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ex</span>: <span class="title class_">JsonifiedMyObject</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: <span class="string">&quot;MyClass&quot;</span> = ex.<span class="property">customClass</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: <span class="built_in">string</span> = ex.<span class="property">obj</span>.<span class="property">nested</span>.<span class="property">attr</span>;</span><br></pre></td></tr></table></figure><h2 id="第四十六题"><a href="#第四十六题" class="headerlink" title="第四十六题"></a>第四十六题</h2><ul><li>实现<code>RequireAllOrNone</code>工具类型，用于满足以下功能，当设置<code>age</code>属性时，<code>gender</code>属性也会变成必填，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAllOrNone</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAllOrNone</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Omit</span>&lt;T, K&gt; &amp; (</span><br><span class="line">  &#123;[P <span class="keyword">in</span> K]-?: T[P]&#125; | &#123;[P <span class="keyword">in</span> K]?: <span class="built_in">never</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123; <span class="comment">// error</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第四十七题"><a href="#第四十七题" class="headerlink" title="第四十七题"></a>第四十七题</h2><ul><li>实现<code>RequireExactlyOne</code>工具类型，用于满足以下功能，即只能包含<code>age</code>或<code>gender</code>属性，不能包含着两个属性，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能包含Keys中唯一的一个Key</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireExactlyOne</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能包含Keys中唯一的一个Key</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireExactlyOne</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T, K <span class="keyword">extends</span> keyof T = <span class="title class_">Keys</span>&gt; =</span><br><span class="line"><span class="title class_">Keys</span> <span class="keyword">extends</span> <span class="built_in">any</span></span><br><span class="line">? <span class="title class_">Omit</span>&lt;T, K&gt; &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, <span class="title class_">Keys</span>&gt;&gt; &amp; <span class="title class_">Partial</span>&lt;<span class="title class_">Record</span>&lt;<span class="title class_">Exclude</span>&lt;K, <span class="title class_">Keys</span>&gt;, <span class="built_in">never</span>&gt;&gt;</span><br><span class="line">: <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第四十八题"><a href="#第四十八题" class="headerlink" title="第四十八题"></a>第四十八题</h2><ul><li>实现<code>ConsistsOnlyOf</code>工具类型，用于判断<code>LongString</code>字符串类型是否由 0 个或多个<code>Substring</code>字符串类型组成，示例如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">SubString</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;ababab&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aBa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C3</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">SubString</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line"><span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">? <span class="literal">true</span></span><br><span class="line">: <span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;SubString&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="title class_">ConsistsOnlyOf</span>&lt;R, <span class="title class_">SubString</span>&gt;</span><br><span class="line">: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;ababab&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aBa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C3</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="第四十九题"><a href="#第四十九题" class="headerlink" title="第四十九题"></a>第四十九题</h2><ul><li>项目中定义了接口返回的数据的类型，每层都能灵活扩展一些属性，怎么做呢？</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口返回数据结构</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Data</span> = &#123;</span><br><span class="line">  aaa?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">bbb</span>: &#123;</span><br><span class="line">    <span class="attr">ccc</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepRecord</span>&lt;<span class="title class_">Obj</span> <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> keyof <span class="title class_">Obj</span>]: <span class="title class_">Obj</span>[key] <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;</span><br><span class="line">    ? <span class="title class_">DeepRecord</span>&lt;<span class="title class_">Obj</span>[key]&gt; &amp; <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;</span><br><span class="line">    : <span class="title class_">Obj</span>[key];</span><br><span class="line">&#125; &amp; <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IData</span> = <span class="title class_">DeepRecord</span>&lt;<span class="title class_">Data</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="第五十题"><a href="#第五十题" class="headerlink" title="第五十题"></a>第五十题</h2><ul><li>当一个索引为 ‘desc’ | ‘asc’ 的时候，其他索引都是 false</li></ul><p><strong>解决方案</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GenerateType</span>&lt;keys <span class="keyword">extends</span> keyof <span class="built_in">any</span>, <span class="variable constant_">V1</span>, <span class="variable constant_">V2</span>&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> keys]: &#123;</span><br><span class="line">    [key1 <span class="keyword">in</span> key]: <span class="variable constant_">V1</span>;</span><br><span class="line">  &#125; &amp; &#123;</span><br><span class="line">    [key2 <span class="keyword">in</span> <span class="title class_">Exclude</span>&lt;keys, key&gt;]: <span class="variable constant_">V2</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;[keys];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">GenerateType</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span>, <span class="string">&quot;desc&quot;</span> | <span class="string">&quot;asc&quot;</span>, <span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="第五十一题"><a href="#第五十一题" class="headerlink" title="第五十一题"></a>第五十一题</h2><ul><li>取出<strong>interface</strong>中<strong>userInfo</strong>的类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">  data?: &#123;</span><br><span class="line">    userInfo?: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案 1</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单版 Required</span></span><br><span class="line"><span class="comment">// 缺点 层级深了需要写多个Required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = <span class="title class_">Required</span>&lt;<span class="title class_">Required</span>&lt;<span class="title class_">Result</span>&gt;[<span class="string">&quot;data&quot;</span>]&gt;[<span class="string">&quot;userInfo&quot;</span>];</span><br></pre></td></tr></table></figure><p><strong>解决方案 2</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归Required</span></span><br><span class="line"><span class="comment">// 缺点数据类型都会变成Required</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsOptional</span>&lt;<span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Obj</span>, <span class="title class_">Obj</span>&gt; = &#123;&#125; <span class="keyword">extends</span> <span class="title class_">Pick</span>&lt;<span class="title class_">Obj</span>, <span class="title class_">Key</span>&gt;</span><br><span class="line">  ? <span class="title class_">Key</span></span><br><span class="line">  : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepRequired</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]-?: <span class="title class_">IsOptional</span>&lt;K, T&gt; <span class="keyword">extends</span> <span class="built_in">never</span> ? T[K] : <span class="title class_">DeepRequired</span>&lt;T[K]&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = <span class="title class_">DeepRequired</span>&lt;<span class="title class_">Result</span>&gt;[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;userInfo&quot;</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;在线 TS 地址 &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;typescript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/categories/typescript/"/>
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/tags/typescript/"/>
    
  </entry>
  
</feed>
