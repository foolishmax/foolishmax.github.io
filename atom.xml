<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>foolishmax</title>
  <icon>https://www.gravatar.com/avatar/3dd40b488a7a6e8c5c6c1fee3a49eaf9</icon>
  <subtitle>仅作为个人学习记录</subtitle>
  <link href="https://github.com/foolishmax/atom.xml" rel="self"/>
  
  <link href="https://github.com/foolishmax/"/>
  <updated>2024-04-08T03:47:51.238Z</updated>
  <id>https://github.com/foolishmax/</id>
  
  <author>
    <name>foolishmax</name>
    <email>827864735@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端工程化</title>
    <link href="https://github.com/foolishmax/2024/04/07/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://github.com/foolishmax/2024/04/07/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2024-04-07T03:04:32.000Z</published>
    <updated>2024-04-08T03:47:51.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、打包资源处理"><a href="#一、打包资源处理" class="headerlink" title="一、打包资源处理"></a>一、打包资源处理</h1><h2 id="AST及其应用"><a href="#AST及其应用" class="headerlink" title="AST及其应用"></a>AST及其应用</h2><p>源代码经过此法分析转化为<strong>Token</strong>流，维护一个Token的数组，可以利用Token流做一些代码检查、语法高亮、模版语法相关的操作，然后经过语法分析转化为有结构化ATS抽象语法树，方便操作。</p><p><a href="https://github.com/jamiebuilds/the-super-tiny-compiler">参考一个最简编译器的实现</a></p><h2 id="webpack的runtime做了什么事情？"><a href="#webpack的runtime做了什么事情？" class="headerlink" title="webpack的runtime做了什么事情？"></a>webpack的runtime做了什么事情？</h2><ol><li><p><code>__webpack_modules__</code>一个维护所有模块的数组，通过入口模块解析AST，根据AST深度优先搜索所有模块构建这个模块数组，每个模块通过一个函数 <strong>(module, module.exports, <strong>webpack_require</strong>)</strong> 进行包裹构成。</p></li><li><p><code>__webpack_require__(moduleId)</code>一个加载模块，通过模块id执行<code>__webpack_modules__</code>对应的模块包裹函数，之后会对已加载模块进行缓存。</p></li><li><p><code>__webpack_require__(0)</code>运行第一个模块，即运行入口模块。</p></li></ol><p>当涉及到多个chunk的大包方式中,比如import、code spliting中，webpack会通过jsonp方式创建script标签动态加载模块</p><p>精简代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> __webpack_modules__ = [<span class="function">() =&gt;</span> &#123;&#125;];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">__webpack_require__</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line">  <span class="keyword">const</span> m = __webpack_modules__[id](<span class="variable language_">module</span>, __webpack_require__);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">__webpack_require__</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>补充：rollup不存在modules模块数组，而是将所有模块铺平展开，如果两个模块变量重名冲突的话，会直接重新命名如：name-&gt;name$1</p><h2 id="webpack-rollup如何加载style样式资源"><a href="#webpack-rollup如何加载style样式资源" class="headerlink" title="webpack/rollup如何加载style样式资源"></a>webpack/rollup如何加载style样式资源</h2><p>在webpack中，需要借助loader将非JS资源转化为可识别为javascript的module。</p><p>处理css需要两个loader：css-loader、style-loader</p><ol><li><p>css-loader的原理就是postcss，借助postcss-value-parse解析css为ast，处理css中的url()和@import语法</p></li><li><p>style-loader原理是使用dom api手动创建style标签，将css内容注入到style中</p></li></ol><p>因为dom api加载css资源的性能原因，生产环境一般通过mini-css-extract-plugin将css单独抽离出来。</p><h1 id="二、打包体积优化"><a href="#二、打包体积优化" class="headerlink" title="二、打包体积优化"></a>二、打包体积优化</h1><h2 id="如何提升webpack构建资源的速度？"><a href="#如何提升webpack构建资源的速度？" class="headerlink" title="如何提升webpack构建资源的速度？"></a>如何提升webpack构建资源的速度？</h2><ol><li><p>更换AST转换工具SWC：webpack中耗时最久的就是负责AST转换的loader，javascript性能低下，可以将babel替换为由高性能语言rust编写的swc。</p></li><li><p>持久化缓存cache，webpack5内置了插件，通过<a href="https://webpack.js.org/configuration/cache/">cache字段</a>开启.</p></li><li><p>开启多进程<a href="https://github.com/webpack-contrib/thread-loader">thread-loader</a>,提升编译速度。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、打包资源处理&quot;&gt;&lt;a href=&quot;#一、打包资源处理&quot; class=&quot;headerlink&quot; title=&quot;一、打包资源处理&quot;&gt;&lt;/a&gt;一、打包资源处理&lt;/h1&gt;&lt;h2 id=&quot;AST及其应用&quot;&gt;&lt;a href=&quot;#AST及其应用&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>杂记</title>
    <link href="https://github.com/foolishmax/2024/03/26/%E6%9D%82%E8%AE%B0/"/>
    <id>https://github.com/foolishmax/2024/03/26/%E6%9D%82%E8%AE%B0/</id>
    <published>2024-03-26T07:57:32.000Z</published>
    <updated>2024-03-26T09:30:13.805Z</updated>
    
    <content type="html"><![CDATA[<p>前端事件循环机制是前端开发中一个重要的概念，也是面试中经常会涉及的话题。以下是一些与前端事件循环机制相关的常见面试题：</p><ol><li>请解释什么是Event Loop（事件循环）？它在JavaScript中的作用是什么？</li></ol><p> Event Loop（事件循环）是JavaScript中用来处理异步操作的机制。它负责监听调用栈和任务队列，将任务队列中的任务按照一定规则推入调用栈中执行，从而实现异步编程。</p><ol start="2"><li>请描述JavaScript中的任务队列（Task Queue）和微任务队列（Microtask Queue）之间的区别，并举例说明它们的执行顺序。</li></ol><p> 任务队列（Task Queue）是存放宏任务（Macro Task）的队列，而微任务队列（Microtask Queue）是存放微任务（Micro Task）的队列。它们之间的区别在于微任务队列的优先级高于任务队列，微任务会在当前宏任务执行完毕后立即执行。</p><ol start="3"><li>什么是宏任务（Macro Task）和微任务（Micro Task）？它们在事件循环中是如何被处理的？</li></ol><p> 宏任务（Macro Task）是指由浏览器发起的任务，如setTimeout、setInterval等；而微任务（Micro Task）是指由JavaScript引擎发起的任务，如Promise、process.nextTick等。在事件循环中，每个宏任务执行完毕后会先清空微任务队列，然后再执行下一个宏任务。</p><ol start="4"><li>请解释setTimeout和setImmediate之间的区别，它们在事件循环中的执行顺序是怎样的？</li></ol><p> setTimeout和setImmediate都用于在事件循环中添加宏任务，它们之间的主要区别在于执行时机。setTimeout会将回调函数推入任务队列，在下一个宏任务执行时被执行；而setImmediate会将回调函数推入检查阶段，在当前宏任务执行完毕后立即执行。</p><ol start="5"><li>在一个包含Promise、setTimeout和DOM事件的代码片段中，这些任务的执行顺序是怎样的？请说明原因。</li></ol><p> 在一个包含Promise、setTimeout和DOM事件的代码片段中，Promise的回调函数会被放入微任务队列，DOM事件会被放入任务队列，而setTimeout中的回调函数会被放入任务队列。执行顺序为：首先执行微任务队列中的Promise回调函数，然后执行DOM事件，最后执行setTimeout中的回调函数。</p><h2 id="webpack热更新原理"><a href="#webpack热更新原理" class="headerlink" title="webpack热更新原理"></a>webpack热更新原理</h2><p> 通过webpack-dev-server创建两个服务器：提供静态资源的服务（express）负责提供打包后的资源给浏览器请求和解析和Socket服务提供websocket长连接，socket server监听到对应的模块发生变化生成manifest.json和chunk.js，通过长连接主动发送给客户端浏览器，浏览器拿到文件通过HMR runtime机制加载这两个文件并针对修改的模块进行更新。</p><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ol><li><p>进程和线程都是操作系统进行任务管理和调度的基本单位</p></li><li><p>一个进程可包含多个线程，多个线程可以共享同一个进程的资源，如内存空间、文件等</p></li><li><p>线程间的切换比进程间的切换开销更小，因为线程共享相同的地址空间</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端事件循环机制是前端开发中一个重要的概念，也是面试中经常会涉及的话题。以下是一些与前端事件循环机制相关的常见面试题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请解释什么是Event Loop（事件循环）？它在JavaScript中的作用是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; Event</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>人月神话书摘</title>
    <link href="https://github.com/foolishmax/2023/12/19/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E4%B9%A6%E6%91%98/"/>
    <id>https://github.com/foolishmax/2023/12/19/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E4%B9%A6%E6%91%98/</id>
    <published>2023-12-19T07:48:58.000Z</published>
    <updated>2023-12-19T07:49:09.112Z</updated>
    
    <content type="html"><![CDATA[<p>什么叫“人月神话”？</p><p>人是程序员，月是时间，，如果1人干10个月如果等同10人干1个月，那就成神话。</p><p>001</p><p>焦油坑</p><p>过去几十年的大型系统开发就犹如一个焦油坑，很多大型动物在其中剧烈挣扎，他们中大多数开发出了可运行的系统–不过，其中只有非常少数的项目满足了目标、时间进度和预算的要求。</p><p>各种团队，大型的和小型的，庞杂的和精干的，一个接一个淹没在了焦油坑中。表面上看起来好像没有任何一个单独的问题会导致困难，每个都能被解决，但是当它们相互纠缠和累积在一起的时候，团队的行动就会变得越来越慢且很难看清问题的本质。</p><p>002</p><p>人月神话</p><p>缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来影响还大。</p><p>我们围绕成本核算的估计技术，混淆了工作量和项目进展。人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。</p><p>向软件项目中增派人手从三个方面增加了项目必要的总体工作量：</p><p>任务重新分配本身和所造成的工作中断；</p><p>培训新人员；</p><p>额外的相互沟通。</p><p>关于进度安排，我的经验是为1/3计划、1/6编码、1/4构件测试以及1/4系统测试。</p><p>Brook法则：向进度落后的项目中增加人手，只会使进度更加落后。</p><p>特别需要指出的是，不为系统测试安排足够的时间简直就是一场灾难。</p><p>在现实情况中，一旦开发团队观察到进度的偏差，总是倾向于对任务进行削减。当项目延期所导致的后续成本非常高时，这常常是唯一可行的方法。</p><p>003</p><p>外科手术队伍</p><p>小型、精干队伍是最好的–尽可能的少。</p><p>需要协作沟通的人员的数量影响着开发成本，因为成本的主要组成部分是相互的沟通和交流，以及更正沟通不当所引起的不良结果（系统调试）。</p><p>Mills建议大型项目的每一个部分由一个团队解决，但是该队伍以类似外科手术的方式组建，而并非一拥而上。</p><p>一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法–既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。</p><p>004</p><p>贵族专制、民主政治和系统设计</p><p>为了反映一系列连贯的设计思路，宁可省略一些不规则的特性和改进，也不提倡独立和无法整合的系统，哪怕它们其实包含着许多很好的设计。</p><p>同工作的水平分割相比，垂直划分从根本上大大减少了劳动量，结果是使交流彻底地简化，概念完整性得到大幅提高。</p><p>005</p><p>蛇添足</p><p>一种普遍倾向是过分地设计第二个系统，向系统添加很多修饰功能和想法，它们曾在第一个系统中被小心谨慎地推迟了。</p><p>实际情况中，尽早交流和持续沟通能使结构师有较好的成本意识，以及使开发人员获得对设计的信心，并且不会混淆各自的责任分工。</p><p>面对估算过高的难题，结构师有两个选择：削减设计或者建议成本更低的实现方法–挑战估算的结果</p><p>006</p><p>贯彻执行</p><p>即使是大型的设计团队，设计结果也必须由一个或两个人来完成，以确保这些决定是一致的。</p><p>允许体系结构师对实现人员的询问做出电话应答解释是非常重要的，并且必须进行日志记录和整理发布。</p><p>对于存有疑问的实现人员，应鼓励他们打电话询问相应的结构师，而不是一边自行猜测一边工作，这是一项很基本的措施。</p><p>007</p><p>为什么巴比伦塔会失败？</p><p>巴比伦塔项目的失败是因为缺乏交流，以及交流的结果–组织。</p><p>“因为左手不知道右手在做什么，从而进度灾难、功能的不合理和系统缺陷纷纷出现。</p><p>随着工作的进行，许多小组慢慢地修改自己程序的功能、规模和速度，他们明确或者隐含地更改了一些有效输入和输出结果用法上的约定，而因此给其他部分引发了BUG。</p><p>解决方案：</p><p>团队应该以尽可能多的方式进行相互之间的交流：非正式、常规项目会议，会上进行简要的技术陈述、共享的正式项目工作手册。举行常规项目会议，会议中，团队一个接一个地进行简要的技术陈述。这种方式非常有用，能澄清成百上千的细小误解。</p><p>制定项目工作手册，并实时记录变更：首先，必须在页面上标记发生改变的文本，例如，使用页边上的竖线标记每行变化的文字。第二，分发的变更页附带独立的总结性文字，对变更的重要性以及批注进行记录。</p><p>008</p><p>胸有成竹</p><p>编码大约只占了问题的六分之一左右，编码估计或者比率的错误可能会导致不合理的荒谬结果。</p><p>对常用编程语句而言。生产率似乎是固定的。这个固定的生产率包括了编程中需要注释，并可能存在错误的情况.</p><p>使用适当的高级语言，编程的生产率可以提高5倍。</p><p>009</p><p>削足适履</p><p>在大型的团队中，各个小组倾向于不断地局部优化，以满足自己的目标，而较少考虑队用户的整体影响。这种方向性的问题是大型项目的主要危险。</p><p>为了满足目标，每个人都在局部优化自己的程序，很少会有人停下来，考虑一下对客户的整体影响。</p><p>培养开发人员从系统整体出发、面向用户的态度是软件编程管理人员最重要的职能。</p><p>10</p><p>提纲挈领</p><p>如果要制造一台机器，哪些是关键的文档呢？</p><p>目标：定义待满足的目标和需要，定义迫切需要的资源、约束和优先级。</p><p>首先，书面记录决策是必要的。只有记录下来，分歧才会明朗，矛盾才会突出。项目经理常常会不断发现，许多理应被普遍认同的策略，完全不为团队的一些成员所知。每个文档本身就可以作为检查列表或者数据库。</p><p>项目经理的基本职责是使每个人都向着相同的方向前进。项目经理的主要日常工作是沟通，而不是做出决定；文档使各项计划和决策在整个团队范围内得到交流。</p><p>通过周期性的回顾，他能清楚项目所处的状态，以及哪些需要重点进行更改和调整。</p><p>11</p><p>未雨绸缪</p><p>变更的客观需要</p><p>对于大多数项目，第一个开发的系统并不合用。它可能太慢、太大，而且难以使用，或者三者兼而有之。</p><p>用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。</p><p>软件产品易于掌握的特性和不可见性，导致了它的构建人员（特别容易）面临着永恒的需求变更。</p><p>目标上（和开发策略上）的一些正常变化无可避免，事先为它们做准备总比假设它们不会出现要好得多。</p><p>为变更计划组织结构</p><p>当系统发生变化时，管理结构也需要进行调整。只要管理人员和技术人才的天赋允许，老板必须对他们的能力培养给予极大的关注，使管理人员和技术人才具有互换性。</p><p>为什么缺陷不能更彻底地被修复？</p><p>首先，看上去很轻微的错误，似乎仅仅是局部操作上的失败，实际上却是系统级别的问题，通常这不是很明显。</p><p>设计实现的人员越少、接口越少，产生的错误也就越少。</p><p>所有修改都倾向于破坏系统的架构，增加了系统的混乱程度。用在修复原有设计上瑕疵的工作量越来越少，而早期维护活动本身的漏洞所引起修复工作越来越多。</p><p>随着时间的推移，系统变得越来越无序，修复工作迟早会失去根基 ，尽管理论上系统一直可用，但实际上，整个系统已经面目全非，无法再成为下一步进展的基础。</p><p>机器在变化，配置在变化，用户的需求在变化，所以现实系统不可能永远可用。崭新的、对于原有系统的重新设计是完全必要的。</p><p>12</p><p>干将莫邪</p><p>每个编程人员也保留着编辑器、排序、内存信息转储、磁盘实用程序等工具。 这种方法对软件项目来说是愚蠢的。首先，项目的关键问题是沟通，个性化的工具妨碍–而不是促进沟通。</p><p>交互式编程</p><p>MIT的Multics项目的成果之一，是它对软件编程系统开发的贡献。在那些系统编程所关注的方面，Multics（以及后续系统，IBM的TSS）和其他交互式计算机系统在概念上有很大的不同：多个级别上数据和程序的共享和保护，可延伸的库管理，以及协助终端用户共同开发的设施。我确信在某些应用上，批处理系统决不会被交互式系统所取代。</p><p>13</p><p>整体部分</p><p>许许多多的失败完全源于那些产品未精确定义的地方。</p><p>“细致的功能定义、详细的规格说明、规范化的功能描述说明以及这些方法的实施，大大减少了系统中必须查找的bug数量。 注: 需求文档越详细，bug越少</p><p>在编写任何代码之前，规格说明必须提交给测试小组，以详细地检查说明的完整性和明确性 注: 需求文档给测试过一遍</p><p>他将程序开发划分成体系结构设计、设计实现和物理编码实现，每个步骤可以使用自顶向下的方法很好地实现。</p><p>好的自顶向下设计从几个方面避免了bug。</p><p>首先，清晰的结构和表达方式更容易对需求和模块功能进行精确的描述。</p><p>其次，模块分割和模块独立性避免了系统级的bug。</p><p>另外，细节的隐藏使结构上的缺陷更加容易识别。</p><p>最后，设计在每个精化步骤的层次上是可以测试的，所以测试可以尽早开始，并且每个步骤的重点可以放在合适的级别上。</p><p>一些糟糕的系统往往就是试图挽救一个基础很差的设计，而对它添加了很多表面装饰般的补丁。自顶向下的方法减少了这样的企图。</p><p>14</p><p>祸起萧墙</p><p>当人们听到某个项目的进度发生了灾难性偏离时，可能会认为项目一定是遭受了一系列重大灾难。然而，通常灾祸来自白蚁的肆虐，而不是龙卷风的侵袭。</p><p>里程碑</p><p>里程碑的选择只有一个原则，那就是，里程碑必须是具体的、特定的、可度量的事件，能够进行清晰定义。</p><p>例如：”结构师和实现人员签字认可的规格说明”，”100%源代码编制完成，纸带打孔完成并输入到磁盘库”，”测试通过了所有的测试用例”。</p><p>如果里程碑很模糊，老板就常常会得到一份与实际情况不符的报告。</p><p>慢性进度偏离是士气杀手。[Microsoft的Jim McCarthy说：”如果你错过了一个最终期限（deadline），确保制订下一条deadline</p><p>如果在某项活动开始之前就着手估计，并且每两周进行一次仔细的修订，根据实际情况动态调整时间。当里程碑没有正确反映损失的时间，并对人们形成误导，以致事态无法挽回的时候，它会彻底碾碎小组的士气。</p><p>保持进度透明可见</p><p>一线经理的利益和老板的利益是内在冲突的。一线经理担心如果汇报了问题，老板会采取行动,这些行动会取代经理的作用，降低自己的威信，搞乱了其他计划。所以，只要项目经理认为自己可以独立解决问题，他就不会告诉老板。</p><p>有两种掀开毯子把污垢展现在老板面前的方法，它们必须都被采用。</p><p>一种是减少角色冲突和鼓励状态共享</p><p>减少角色的冲突。老板必须规范自己，不对项目经理可以解决的问题做出反应。当项目经理了解到老板收到项目报告之后不会惊慌，或者不会越俎代庖时，他就逐渐会提交真实的评估结果。</p><p>另一种是猛地拉开地毯。</p><p>猛地拉开地毯。不论协作与否，拥有能了解状态真相的评审机制是必要的。PERT图以及频繁的里程碑是这种评审的基础。大型项目中，可能需要每周对某些部分进行评审，大约一个月左右进行整体评审。</p><p>没有银弹软件工程中的根本和次要问题</p><p>没有任何技术或管理上的进展，能够独立地许诺十年内使生产率、可靠性或简洁性获得数量级上的进步。因为软件有无法规避的特性：复杂度、一致性、可变性、不可见性。</p><p>产品复杂度：</p><p>由于复杂度，团队成员之间的沟通非常困难，导致了产品瑕疵、成本超支和进度延迟；</p><p>由于复杂度，列举和理解所有可能的状态十分困难，影响了产品的可靠性；</p><p>由于函数的复杂度，函数调用变得困难，导致程序难以使用；</p><p>由于结构性复杂度，程序难以在不产生副作用的情况下用新函数扩充；由于结构性复杂度，造成很多安全机制状态上的不可见性。</p><p>复杂度不仅仅导致技术上的困难，还引发了很多管理上的问题。它使全面理解问题变得困难，从而妨碍了概念上的完整性；它使所有离散出口难以寻找和控制；它引起了大量学习和理解上的负担，使开发慢慢演变成了一场灾难。</p><p>软件可变性：</p><p>软件实体经常会遭受到持续的变更压力</p><p>现实工作中，经常发生两种情况。</p><p>当人们发现软件很有用时，会在原有应用范围的边界，或者在超越边界的情况下使用软件。功能扩展的压力主要来自那些喜欢基本功能，又对软件提出了很多新用法的用户们。</p><p>其次，软件一定是在某种计算机硬件平台上开发，成功软件的生命期通常比当初的计算机硬件平台要长。即使不是更换计算机，则有可能是换新型号的磁盘、显示器或者打印机。软件必须与各种新生事物保持一致。</p><p>软件不可见性</p><p>软件是不可见的和无法可视化的。 其中的秘密就是逐步发育成长，而不是一次性搭建。</p><p>软件开发是一件棘手的事情，并不会有魔术般的解决方案，现在是从业者研究和分析革命性进展的时刻，而不是等待或希望它的出现。</p><p>现在有可能可以在软件生产率上取得逐步的进展，而不是等待不可能到来的大突破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么叫“人月神话”？&lt;/p&gt;
&lt;p&gt;人是程序员，月是时间，，如果1人干10个月如果等同10人干1个月，那就成神话。&lt;/p&gt;
&lt;p&gt;001&lt;/p&gt;
&lt;p&gt;焦油坑&lt;/p&gt;
&lt;p&gt;过去几十年的大型系统开发就犹如一个焦油坑，很多大型动物在其中剧烈挣扎，他们中大多数开发出了可运行的系</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何管理前端团队</title>
    <link href="https://github.com/foolishmax/2023/11/09/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F/"/>
    <id>https://github.com/foolishmax/2023/11/09/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F/</id>
    <published>2023-11-09T03:24:16.000Z</published>
    <updated>2023-11-13T03:24:17.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人角度"><a href="#个人角度" class="headerlink" title="个人角度"></a>个人角度</h2><p>开发人员：业务需求 -&gt; 自己动手 -&gt; 解决问题</p><p>管理者：业务需求 -&gt; 分析需求、分解需求 -&gt; 分配任务 -&gt; 跟踪进度 -&gt; 解决问题</p><p><strong>如何胜任技术管理者需要提高自己各个方面的能力，主要有以下方面：</strong></p><ol><li><p>技术能力：这是技术管理者的立身之本，肯定需要不断学习、不断精进，如果技不如人肯定无法服众。</p></li><li><p>业务能力：需要对业务有正确的理解，能理解业务的本质需求，才能让技术实现业务价值。</p></li><li><p>规划能力： 技术管理者需要明确团队目标、并以结果为导向，做出合理的规划：</p></li><li><p>1 技术体系规划：项目技术选型（可控性、稳定性、适用性、易用性）、技术文档沉淀等</p></li><li><p>2 任务规划：根据任务难易程度分配不同开发人员、任务时间安排等</p></li><li><p>3 人员安排规划：根据组员的实际情况和特点，安排合适的事情给合适的人，使团队利益最大化</p></li><li><p>沟通协作能力：技术管理者不仅在项目团队内，可能需要跨组或者跨部门进行沟通协作，需要向上级转达战略、任务，和团队内成员沟通清楚需要做什么，为什么这么做</p></li><li><p>判断能力： 需要全局把控项目，有底气在项目中对事项进行判断和决策：</p></li><li><p>1 风险判断：业务实现方向有没有问题、任务排期超时等</p></li><li><p>2 决策判断：某个时间段，应该做哪些内容，哪些做不了</p></li><li><p>3 诗句判断：针对业务评审的具体实现成本、实现方向等</p></li><li><p>领导力：技术管理者需要有责任，有担当，团队有问题必然反映到团队负责人身上有问题</p></li><li><p>架构能力：治理好系统复杂度才是最务实的</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;个人角度&quot;&gt;&lt;a href=&quot;#个人角度&quot; class=&quot;headerlink&quot; title=&quot;个人角度&quot;&gt;&lt;/a&gt;个人角度&lt;/h2&gt;&lt;p&gt;开发人员：业务需求 -&amp;gt; 自己动手 -&amp;gt; 解决问题&lt;/p&gt;
&lt;p&gt;管理者：业务需求 -&amp;gt; 分析需求、分解需</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx指南</title>
    <link href="https://github.com/foolishmax/2023/07/20/nginx%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/foolishmax/2023/07/20/nginx%E6%8C%87%E5%8D%97/</id>
    <published>2023-07-20T02:56:39.000Z</published>
    <updated>2023-08-14T01:50:37.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="负载均衡4种策略"><a href="#负载均衡4种策略" class="headerlink" title="负载均衡4种策略"></a>负载均衡4种策略</h2><ul><li>轮询：默认方式</li><li>weight：在轮询基础上增加权重，也就是轮询到的几率不同</li><li>ip_hash：按照ip的hash分配，保证每个访客的请求固定访问一个服务器，解决session问题</li><li>fair：按照相应时间来分配，需要安装nginx-upstream-fair插件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认轮询</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weight</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ip_hash</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;负载均衡4种策略&quot;&gt;&lt;a href=&quot;#负载均衡4种策略&quot; class=&quot;headerlink&quot; title=&quot;负载均衡4种策略&quot;&gt;&lt;/a&gt;负载均衡4种策略&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;轮询：默认方式&lt;/li&gt;
&lt;li&gt;weight：在轮询基础上增加权重，也就是轮询</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://github.com/foolishmax/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>实现一个多人协作在线文档有哪些技术难点？</title>
    <link href="https://github.com/foolishmax/2023/06/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%9A%BE%E7%82%B9%EF%BC%9F/"/>
    <id>https://github.com/foolishmax/2023/06/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%9A%BE%E7%82%B9%EF%BC%9F/</id>
    <published>2023-06-29T03:24:18.000Z</published>
    <updated>2023-06-29T05:56:17.753Z</updated>
    
    <content type="html"><![CDATA[<p>多人协作提供了稳定、高效、安全的协作环境，这种类似的产品需要克服的技术难点还是很多的，如：</p><span id="more"></span><ol><li><p>实时同步</p><p> 实现实时同步的难点在于如何快速传输用户的操作。<br> 常见的做法是websocket等技术，建立持久化连接，实时推送数据。<br> 同时为了减少网络传输量，可以采用差量同步的方式，只传输变化的部分数据。</p></li><li><p>冲突解决</p><p> 多个用户同时编辑同一个文档时，可能会冲突。<br> 常见解决方案是采用OT（Operational Transformation）技术，将用户的操作换成操作序列，并在服务器上合并，最后同步给用户，还需要采用<strong>锁机制</strong>，保证同一时间只有一个用户能够编辑文档。</p></li><li><p>高并发</p><p> 在线文档需要支持多人同时访问和编辑，就需要处理高并发的情况。<br> 提高并发性能，可以采用分布式架构、负载均衡等技术</p></li><li><p>安全性</p><p> 在线文档需要保证用户数据安全，包括用户身份验证、数据传输加密等。<br> 解决：采用HTTPS协议、SSL证书等技术实现数据传输加密，密码、验证码进行用户身份验证等</p></li><li><p>数据存储</p><p> 可以采用分布式数据库、缓存等技术提高数据存储和管理的效率和性能</p></li><li><p>实时性能</p><p> 在线文档需要保证实时性能，即用户的操作能够实时生效，不能出现延迟等问题。<br> 解决：采用异步IO、事件驱动等技术，同时对系统进行优化和调整，提高系统性能和响应速度。</p></li></ol><p>两个主要的技术难点就是：实时通信、编辑冲突</p><ul><li>实时通信：long pull 或者 websocket</li><li>编辑冲突：编辑锁、GUN diff-patch（类似git版本控制diff）、OT（Operational Transformation）、Myer’s diff-patch</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;多人协作提供了稳定、高效、安全的协作环境，这种类似的产品需要克服的技术难点还是很多的，如：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何优化网站以符合谷歌的Core Web Vitals标准</title>
    <link href="https://github.com/foolishmax/2023/06/25/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E4%BB%A5%E7%AC%A6%E5%90%88%E8%B0%B7%E6%AD%8C%E7%9A%84Core-Web-Vitals%E6%A0%87%E5%87%86/"/>
    <id>https://github.com/foolishmax/2023/06/25/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E4%BB%A5%E7%AC%A6%E5%90%88%E8%B0%B7%E6%AD%8C%E7%9A%84Core-Web-Vitals%E6%A0%87%E5%87%86/</id>
    <published>2023-06-25T02:02:04.000Z</published>
    <updated>2023-06-27T07:51:23.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要做Core-Web-Vitals"><a href="#为什么要做Core-Web-Vitals" class="headerlink" title="为什么要做Core Web Vitals?"></a>为什么要做Core Web Vitals?</h2><p>网站响应速度越快，在谷歌中的排名越高的机会就越大</p><span id="more"></span><h2 id="谷歌排名的主要因素（优先级从高到低）"><a href="#谷歌排名的主要因素（优先级从高到低）" class="headerlink" title="谷歌排名的主要因素（优先级从高到低）"></a>谷歌排名的主要因素（优先级从高到低）</h2><ol><li><p>高质量的内容</p><p> 在Google排名因素里绝对以‘内容为王，外链为皇’，如果能创造对用户来说独特、新颖、且有帮助的内容，那么Google搜索引擎会将结果页面排到更高位置。</p><p> Google特别关注内容质量，无论如何优化网站，如果内容没有价值，就不要期望能获得更高的排名。</p><p> 那么，什么才算是高质量的内容呢？</p><p> <strong>原创、独特、有价值的内容</strong></p><p> 如果内容重复或者跟其他网站类似，那么就会对SEO产生负面影响，对于新网站来说Google可能就不会去索引你的页面，网站就不会获得排名。如果经常发布重复内容，Google会减少抓去你的网站内容的频率。</p><p> <strong>经常更新内容</strong></p><p> 通过定期更新网站，为其添加新东西，通过增加内容新鲜度给搜索引擎发出一个积极的信号。如果内容主题涉及到新闻或者某件事的发展趋势，可以通过Google Trends工具找到最新的信息来保持内容的新鲜度。</p><p> <strong>内容长度</strong></p><p> 平均长度1890个词的文章会排在第一页，但对字数的限制没有一个硬性规定。更好的解决办法是撰写具有深度的内容，能够完全回答用户的问题并提供详细的解决方案。</p><p> <strong>内容结构和组织方式</strong></p><p> 组织合理、结构清晰的网页，可以让访客更轻松的、更方便的阅读并找到问题的解决方案。<br> 优化文章的结构和组织可以使用多个标题和副标题（H2、H3、H4等），还可以使用列表的形式组织内容，好处就是Google会为不同的关键词筛选带列表形式的高质量内容，将其展示为答案盒子。<br> 通过整理内容的结构和组织方式，内容的可读性将大大提高，正反馈就是提高了用户体验，增加了<code>停留时间（Dwell Time）</code>间接的增加了提高排名的机会。</p></li><li><p>反向链接</p><p> Google排名算法中第二优先级排名因素就是反向链接。<br> 如果你的网站能从权重高的网站获得反向链接，通过这些链接相当于给Google传递了一个信号，即你的内容是值得信赖的，因为有这么多不同的网站都可以为你做担保。<br> 通过这些反向链接（入站链接）可以为你的网站带来更多流量，就有极大的可能获取更高的排名。</p></li><li><p>搜索意图</p><p> 你的网站内容是否匹配用户的搜索意图对Google排名的影响非常重要。<br> 这就意味着如果你想写关于某个主题的内容，一定要匹配搜索意图，如果想为某个搜索关键字排名，则应该制作视频或者信息图表等。<br> 通过匹配搜索意图，可以回答这些问题并创建人们正在寻找的内容。</p></li><li><p>网站加载速度</p><p> 提高网站加载速度不仅可以提高Google搜索引擎的排名，还可以降低网站的跳出率，提高其转换率，提供更高的用户体验。<br> 可以使用Google免费的工具<a href="https://pagespeed.web.dev/">PageSpeed Insights</a>来检查你的网站加载速度，PageSpeed Insights会生成网页的实际性能报告，并能提供如何改进响应网页的建议。<br> 如何提高网站的加载速度？</p></li><li><p>移动友好</p><p> 在GSMA智库近日发布了《2023年全球移动经济报告发展》报告，报告显示截至2022年底，全球独立移动用户数为54亿，其中移动互联网用户数为44亿，且自从Google在2019年提出移动优先的口号，所以网站自适应移动端就称为了关键。<br> 这就意味着Google会优先使用你的网站移动版去索引和排名，如果想快速提升你的网站排名，那么就需要让你的网站变成移动端友好型网站。</p></li><li><p>域名权威</p><p> “域名权威”是 SEO 相关的术语，指网站的域名在某领域相关内容具有权威性，一般域名建站时间越久、反链越多、流量越大、搜索引擎点击数越高、跳出率越低，域名就越权威。<br> 通过专注在自己的领域，创造出更优秀的内容，可以通过关键词分析工具，找到访客感兴趣的主题，围绕这些主题打造高质量内容增加话题的权威性。<br> 如此，Google变为逐渐把你的网站当作该主题领域的权威专家，提高你的网站的域名权威，从而提高网站在搜索引擎的排名</p></li><li><p>关键词优化</p><p> 关键词即用户搜索框输入的内容，它如实的反馈了用户的需求，所以找准关键词，也就意味着锁定了目标用户。<br> 所以你的网站中包含了你的受众群体正在搜索的关键词是非常关键的。</p><p> 如何做网站关键词优化？<br> ·标题：在SEO标题的开始就包含目标关键词<br> ·元描述：写吸引人的描述，然后添加关键词，告诉用户这个页面是做什么的，提高用户的自然搜索点击率<br> ·图片alt文字：可以将关键词添加到alt文本中告诉Google这是什么<br> ·锚文本：Google使用锚文本来查找页面内容，给关键词加上锚文本链接帮助Google识别页面内容<br> ·使用LSI关键词：用户会搜索除主要关键词之外的其他相关词条，这些词条被称LSI（潜在语义索引）关键词，通过在页面上包含这些内容，可以帮助Google找出有关内容。<br> ·避免关键词堆砌：不可不断重复主要关键词，这是一种不好的SEO做法。<br> ·在H2和H3中添加关键词：通过关键词变体来进一步优化内容组织结构<br> ·URL中添加关键词</p></li><li><p>网站结构</p><p> 站内结构决定了网站是否容易被收录，是否方便用户浏览，是否符合蜘蛛的爬取等等。<br> 网站结构是指网站中页面之间的层次关系。从用户角度来讲，能够使用户方便快捷的在网站中浏览内容，不至于迷失。对搜索引擎来说，优化网站结构，可以帮助蜘蛛快速抓取网站内容</p></li><li><p>网站安全</p><p> HTTPS会影响网站的排名，HTTPS保证了您的站点是否在用户的浏览器和Web服务器之间建立了安全连接，它可以加密网站和用户浏览器之间的数据</p></li><li><p>用户体验</p><p>网站的整体的用户体验也是影响Google排名的一个重要因素，但是Google是如何衡量的呢？<br>Google使用了一个名为RankBrain的人工智能程序，该程序结合了其他的排名要素，例如：<br>·自然搜索点击率（CTR）：通过提高网站链接的点击率，可以提高排名<br>·停留时间（Dwell Time）：从搜索结果到你的网站后的停留时间<br>·跳出率：进入网站到离开网站没有任何交互，Google会任务该页面不相关，不会对其进行排名</p></li></ol><p>总结：<br>    以上就是本文的所有内容，希望你能够习惯这篇关于影响Google排名10大因素的文章。</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/110720993">SEO站内优化：网站结构优化</a><br><a href="https://www.zhihu.com/question/351325115">怎么做网站关键词优化？</a><br><a href="https://developers.google.cn/speed/docs/insights/about?hl=zh-CN">PageSpeed Insights</a><br><a href="https://blog.csdn.net/coslay/article/details/43539913">优化网站加载速度的14个技巧</a><br><a href="https://www.wbolt.com/organic-ctr.html">什么是自然搜索点击率（Organic CTR）？</a><br><a href="https://www.wbolt.com/organic-ctr.html">什么是跳出率及如何保持网站较低跳出率</a></p><h2 id="谷歌如何评估网站性能？"><a href="#谷歌如何评估网站性能？" class="headerlink" title="谷歌如何评估网站性能？"></a>谷歌如何评估网站性能？</h2><p>性能度量应用程序（如浏览器开发工具）报告技术度量，例如</p><ul><li>阻塞时间：等待下载开始所花费的时间。</li><li>DNS解析：将主机名解析为IP地址以索引资产的时间。</li><li>连接时间：初始化TCP连接的时间。</li><li>首字节时间（TTFB）：请求和响应第一个字节之间的总时间。</li><li>接受时间：检索整个资产的时间</li><li>DOM加载时间：下载和呈现HTML文档对象模型的时间，分析和修改DOM的脚本可以可靠运行的第一个点。</li><li>页面加载时间：下载页面和所有资产（图像、样式表、脚本等）的时间</li><li>总页面重量：所有资产总大小，通常报告为压缩（下载）和未压缩大小</li><li>DOM元素数：页面上HTML元素的总数，元素越多，页面处理时间越长</li><li>首次内容绘制（FCP）：浏览器第一个元素像素之前所有的时间</li><li>首个有意义慧智（FMP）：主页内容对用户可见之间所花费的时间。</li><li>交互时间（TTI）：页面完全交互并能够可靠响应用户输入所花费的时间。</li><li>首次CPU空间（FCI）：CPU呈现页面并运行所有初始化脚本，等待进一步输入的时间</li><li>CPU使用率：呈现页面和响应用户输入时所需的处理活动</li><li>每秒布局数：浏览器必须重新计算样式和页面布局的速率</li></ul><p>以上这些可以用于确定特定的瓶颈，如服务器负载、CMS缓存、浏览器缓存、下载速度和javascript效率。但无法确定页面提供的用户体验是否良好。<br>如：应用程序可以快速下载并显示，但第一次交互后会变得无响应，因为它正在执行大量未优化javascript代码。</p><h2 id="什么是Core-Web-Vitals"><a href="#什么是Core-Web-Vitals" class="headerlink" title="什么是Core Web Vitals?"></a>什么是Core Web Vitals?</h2><ul><li>最大内容绘制（LCP）：加载性能</li><li>首次输入延迟（FID）：交互性能</li><li>累计布局偏移（CLS）：视觉稳定性</li></ul><h2 id="最大内容绘制-LCP"><a href="#最大内容绘制-LCP" class="headerlink" title="最大内容绘制 LCP"></a>最大内容绘制 LCP</h2><p>本质上代表的是可用内容在页面上呈现的速度有多快？</p><p>LCP分数低的常见原因：</p><ol><li>在客户端上生成的页面内容，而不是在服务器上生成的内容需要更长的时间，LCP客户端渲染（CSR） &gt; 服务端渲染（SSR），顺便提一下SSR更有利于首屏渲染，CSR更利于页面交互</li><li>服务端限制，服务端响应慢</li><li>HTML中国呢引用了阻塞CSS和javascript，导致延迟页面加载</li><li>大型图像或视频占用网络带宽，导致需要更长的渲染时间</li></ol><p>如何提高LCP分数：</p><ol><li>升级服务器和/或主机服务。确保下载速度即使在高使用率时也保持快速。</li><li>激活服务器压缩和HTTP/2+。没有理由不这样做！</li><li>减少服务器工作。删除未使用的代码和CMS插件，然后启用有效缓存。</li><li>确保浏览器可以有效缓存文件。在HTTP头中设置适当的Expires、Last Modified和/或ETag哈希，以便不再请求文件。</li><li>使用内容交付网络（CDN）在地理位置更靠近用户的服务器上拆分负载和托管资源。</li><li>优化你的图像。将它们减少到最小尺寸，并使用适当的格式来最小化文件大小。确保尽早请求最大内容块中的任何图像；预加载可能会有所帮助。</li><li>通过添加loading=”lazy”属性延迟加载图像。添加宽度和高度属性，以确保在图像完成加载之前在页面上保留适当的空间。</li><li>最小化第三方请求，并将移动资产考虑到主域以避免无关DNS查找。</li><li>最小化请求文件的数量和大小，尤其是在HTML的顶部。</li><li>确保仅加载所需的web字体。切换到web安全字体以获得最佳性能。</li><li>删除未使用的JavaScript和CSS文件。</li><li>连接并缩小JavaScript和CSS文件。</li><li>避免CSS@import语句-它们是串联的渲染块和加载样式。</li><li>避免Base64编码-它会增加文件大小并需要额外的处理。</li><li>考虑关键的联机CSS。在页面顶部的&lt;link&gt;块中嵌入基本的“折叠上方”CSS，然后异步加载更多样式表。</li><li>稍后使用异步、延迟或ES模块JavaScript运行脚本。在服务工作者中执行长时间运行的JavaScript进程。</li></ol><h2 id="首次输入延迟-FID"><a href="#首次输入延迟-FID" class="headerlink" title="首次输入延迟 FID"></a>首次输入延迟 FID</h2><p>本质上代表网页对用户的输入、点击和滚动等操作的响应速度有多快？</p><p>FID分数低的常见原因：</p><p>FID和TBT分数低通常是由占用处理器的客户端代码引起的，例如：</p><ol><li>大量的呈现阻塞CSS和JavaScript，这会在下载和解析代码时停止页面加载</li><li>加载页面时立即运行的大型流程密集型脚本</li><li>长时间运行或优化较差的JavaScript任务</li></ol><p>默认情况下，浏览器运行在单个线程上，一次只能处理一个任务。如果一个JavaScript函数需要一秒钟的时间来执行，那么所有其他渲染过程都会在这一秒钟内被阻塞。页面无法响应用户输入、更新DOM、显示动画等。甚至GIF动画也可以在旧浏览器中被阻塞。</p><p>如何提高FID分数：</p><ol><li>在服务器上生成并缓存尽可能多的静态HTML内容。尽量不要依赖客户端JavaScript框架为每个人呈现相同的HTML。</li><li>确保浏览器可以有效缓存文件。在HTTP头中设置适当的Expires、Last Modified和/或ETag哈希，以便不再请求文件。</li><li>采用渐进式增强技术，因此在JavaScript运行之前，该界面可以在HTML和CSS中使用。</li><li>删除未使用的JavaScript和CSS文件。</li><li>连接并缩小JavaScript和CSS文件。</li><li>避免过度使用昂贵的CSS属性，如框阴影和过滤器。</li><li>稍后使用异步、延迟或ES模块JavaScript运行脚本。</li><li>最小化对分析、社交媒体小部件、论坛等的第三方JavaScript请求。这些请求可以快速加载到数兆字节的JavaScript。</li><li>根据需要延迟加载JavaScript组件，例如聊天窗口小部件、视频播放器等。</li><li>延迟加载不太重要的脚本，如分析、广告和社交媒体工具。</li><li>将长时间运行的JavaScript任务分解为一系列较小的作业，这些作业在短时间的requestIdleCallback、setTimeout或requestAnimationFrame延迟后执行。</li><li>考虑在Web工作者中使用一个后台线程来执行长时间运行的JavaScript进程。</li></ol><h2 id="累计布局偏移-CLS"><a href="#累计布局偏移-CLS" class="headerlink" title="累计布局偏移 CLS"></a>累计布局偏移 CLS</h2><p>本质上代表页面内容是否会意外移动或者跳转尤其是在初始加载期间</p><p>通过以下指标相乘计算累计布局偏移CLS：</p><ul><li>影响分数：视口中国呢所有不稳定元素的总面积（%）</li><li>距离分数：不稳定元素移动的最大距离（px），移动像素/视口大小</li></ul><p>手动测测CLS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cls = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onLayoutShiftEntry</span>(<span class="params">entry: any</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry.<span class="property">hadRecentInput</span>) &#123;</span><br><span class="line">    cls += entry.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entries.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="title function_">onLayoutShiftEntry</span>(entry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">observe</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;layout-shift&quot;</span>, <span class="attr">buffered</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主动触发</span></span><br><span class="line">observer.<span class="title function_">takeRecords</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> <span class="title function_">onLayoutShiftEntry</span>(entry));</span><br></pre></td></tr></table></figure><p>累积布局偏移分数低的常见原因：</p><p>CLS分数低通常是由于加载页面资产和动态或未调整大小的DOM元素速度慢造成的：</p><ol><li>页面上的空间不用于图像、iFrame、广告等。</li><li>内容被动态地注入DOM，通常是在网络请求广告、社交媒体小部件等之后。</li><li>Web字体加载会导致不可见文本（FOIT）或未设置样式文本（FOUT）的明显闪烁。</li></ol><p>如何提高累积布局偏移分数：<br>客户端审计可以发现问题，但通常是确保在内容下载之前为内容预留空间。为最大内容绘制建议的服务器优化提示将有一些好处，但可能会有进一步的改进：</p><ol><li>在HTML的&lt;img&gt;和&lt;iframe&gt;标记中添加宽度和高度属性，或者使用新的CSS纵横比属性确保在下载资产之前在页面上保留适当的空间。</li><li>为封装第三方内容（如广告和小部件）的容器元素设置适当的尺寸。</li><li>确保尽早请求显示在页面顶部的图像和其他资产-预加载可能会有所帮助。</li><li>尽量减少Web字体的使用，并考虑在可能的时候使用常用的OS字体。</li><li>加载web字体并将CSS字体显示设置为可选或交换。确保使用大小相似的回退字体，以最小化布局偏移。</li><li>避免向页面顶部插入元素，除非页面响应用户操作（如单击）。</li><li>确保在输入触发器的500毫秒内完成用户交互。</li><li>使用CSS变换和不透明度可以获得更高效的动画，而不会导致重新布局。</li><li>考虑关键的联机CSS。在页面顶部的&lt;link&gt;块中嵌入基本的“折叠上方”CSS，然后异步加载其他样式表。</li><li>必要时，考虑包容，一种新的CSS特性，允许您识别页面的孤立子树。浏览器可以通过渲染或不渲染特定的DOM内容块来优化处理。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么要做Core-Web-Vitals&quot;&gt;&lt;a href=&quot;#为什么要做Core-Web-Vitals&quot; class=&quot;headerlink&quot; title=&quot;为什么要做Core Web Vitals?&quot;&gt;&lt;/a&gt;为什么要做Core Web Vitals?&lt;/h2&gt;&lt;p&gt;网站响应速度越快，在谷歌中的排名越高的机会就越大&lt;/p&gt;</summary>
    
    
    
    
    <category term="网站" scheme="https://github.com/foolishmax/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>代码的艺术</title>
    <link href="https://github.com/foolishmax/2023/06/16/%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>https://github.com/foolishmax/2023/06/16/%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2023-06-16T03:14:28.000Z</published>
    <updated>2023-06-20T03:11:12.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一流代码的特性"><a href="#一流代码的特性" class="headerlink" title="一流代码的特性"></a>一流代码的特性</h2><ul><li><p>正确和性能</p><ul><li>鲁棒性</li><li>高效</li></ul></li><li><p>可读性和可维护</p><ul><li>简洁</li><li>简短</li><li>可测试</li></ul></li><li><p>共享和重用</p><ul><li>共享</li><li>可移植</li></ul></li><li><p>运维和运营</p><ul><li>可监控/可观测</li><li>可运维</li><li>可扩展</li></ul></li></ul><h2 id="好的代码从哪里来？"><a href="#好的代码从哪里来？" class="headerlink" title="好的代码从哪里来？"></a>好的代码从哪里来？</h2><p>编码前：需求分析，系统设计<br>编码中：编写代码，单元测试<br>编码后：集成测试、上线、持续运营/迭代改进</p><p>一个好的系统/产品是以上过程持续迭代的结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一流代码的特性&quot;&gt;&lt;a href=&quot;#一流代码的特性&quot; class=&quot;headerlink&quot; title=&quot;一流代码的特性&quot;&gt;&lt;/a&gt;一流代码的特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正确和性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鲁棒性&lt;/li&gt;
&lt;li&gt;高效&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="代码" scheme="https://github.com/foolishmax/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>mongo数据库</title>
    <link href="https://github.com/foolishmax/2023/05/31/mongo%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://github.com/foolishmax/2023/05/31/mongo%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2023-05-31T10:21:27.000Z</published>
    <updated>2023-06-09T08:57:03.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启-MongoDB-服务器"><a href="#开启-MongoDB-服务器" class="headerlink" title="开启 MongoDB 服务器"></a>开启 MongoDB 服务器</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  mongod --dbpath /usr/local/var/mongodb</span><br></pre></td></tr></table></figure><h2 id="连接-MongoDB-服务器"><a href="#连接-MongoDB-服务器" class="headerlink" title="连接 MongoDB 服务器"></a>连接 MongoDB 服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><h2 id="退出-MongoDB-服务器"><a href="#退出-MongoDB-服务器" class="headerlink" title="退出 MongoDB 服务器"></a>退出 MongoDB 服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>show dbs</p><ul><li>查看显示所有数据库</li></ul></li><li><p>db</p><ul><li>产看当前操作的数据库</li></ul></li><li><p>use 数据库名称</p><ul><li>切换到指定的数据库（没有会新建）</li></ul></li><li><p>show collections</p><ul><li>显示集合</li></ul></li><li><p>db.cats.find()</p><ul><li>查看并显示内容</li></ul></li><li><p><a href="https://github.com/mongodb/node-mongodb-native">node 中使用 mongodb</a></p></li></ul><h2 id="使用第三方-mongoose-来操作-MongoDB-数据库"><a href="#使用第三方-mongoose-来操作-MongoDB-数据库" class="headerlink" title="使用第三方 mongoose 来操作 MongoDB 数据库"></a>使用第三方 mongoose 来操作 MongoDB 数据库</h2><ul><li><p><a href="https://mongoosejs.com/">mongoose</a></p></li><li><p>安装<br><code>npm install mongoose</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//引入包</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">//连接数据库（数据库不需要存在，在插入第一条语句，就会自动创建）</span><br><span class="line"></span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost:27017/test&#x27;, &#123;useNewUrlParser: true&#125;);</span><br><span class="line"></span><br><span class="line">//设计数据库集合结构</span><br><span class="line">//创建一个Cat表</span><br><span class="line">const Cat = mongoose.model(&#x27;Cat&#x27;, &#123; name: String &#125;);</span><br><span class="line"></span><br><span class="line">//实例化一个Cat，实例对象为kitty</span><br><span class="line">const kitty = new Cat(&#123; name: &#x27;Zildjian&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">//持久化保存kitty实例</span><br><span class="line">kitty.save().then(() =&gt; console.log(&#x27;meow&#x27;));</span><br></pre></td></tr></table></figure><ul><li>mongoose 的基本使用</li></ul><ul><li>生成模型构造函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">var Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">//设计集合结构（表结构）schema---&gt;提要，纲要</span><br><span class="line">//字段名称就是表结构中的属性名称</span><br><span class="line">//值类型</span><br><span class="line">//约束的目的：为了保证数的完整性</span><br><span class="line">var blogSchema = new Schema(&#123;</span><br><span class="line">  title:  String,</span><br><span class="line">  author: String,</span><br><span class="line">  body:   String,</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    typte: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">  comments: [&#123; body: String, date: Date &#125;],</span><br><span class="line">  date: &#123; type: Date, default: Date.now &#125;,</span><br><span class="line">  hidden: Boolean,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    votes: Number,</span><br><span class="line">    favs:  Number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//将文档结构发布为模型</span><br><span class="line">// 参数一：大写单数表示数据库名称</span><br><span class="line">//         mongoose会自动将大写单数改为小写复数</span><br><span class="line">// 参数二： 架构 Schema</span><br><span class="line">// 返回值： 模型构造函数</span><br><span class="line">var User = mongoose.model(&#x27;User&#x27;, blogSchema)</span><br><span class="line">// module.exports = mongoose.model(&#x27;Student&#x27;, blogSchema)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 生成添加一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var admin = new User(&#123;</span><br><span class="line">    username: &#x27;admin&#x27;,</span><br><span class="line">    password: &#x27;1245435&#x27;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line">admin.save(function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;保存失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;保存成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 查询数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//查询所有数据</span><br><span class="line">User.find(function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">         console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//promise 查询所有</span><br><span class="line">User.find()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//按条件查询</span><br><span class="line"> User.find(&#123;</span><br><span class="line">    username: &#x27;xx&#x27;</span><br><span class="line"> &#125;, function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//查找符合条件的第一个（可以写多个条件）,没有条件的话，为第一条数据</span><br><span class="line"> User.findOne(&#123;</span><br><span class="line">    username: &#x27;xx&#x27;</span><br><span class="line"> &#125;, function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 按条件更新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//Model.update(conditions, doc, [options], [callback])</span><br><span class="line">//Model.findOneAndUpdate([conditions], [update], [options], [callback])</span><br><span class="line">User.findByIdAndUpdate(&#x27;5a7d8f2sd78ag6g&#x27;,&#123;</span><br><span class="line">    username: &#x27;zs&#x27;</span><br><span class="line">&#125;, function(err, ret)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">       console.log(&#x27;更新失败&#x27;)</span><br><span class="line">    else &#123;</span><br><span class="line">       console.log(&#x27;更新成功&#x27;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于模型构造函数 删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.remove(&#123;</span><br><span class="line">    username: &#x27;zs&#x27;</span><br><span class="line">&#125;, function(err, ret)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">       console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    else &#123;</span><br><span class="line">       console.log(ret)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="补充（node-使用-mysql）"><a href="#补充（node-使用-mysql）" class="headerlink" title="补充（node 使用 mysql）"></a>补充（node 使用 mysql）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//引包</span><br><span class="line">var mysql      = require(&#x27;mysql&#x27;);</span><br><span class="line">//创建连接</span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : &#x27;localhost&#x27;,</span><br><span class="line">  user     : &#x27;me&#x27;,</span><br><span class="line">  password : &#x27;secret&#x27;,</span><br><span class="line">  database : &#x27;my_db&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> //连接数据库</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"> //执行数据操作,可以直接使用 SQL 语句</span><br><span class="line"> //查找</span><br><span class="line">connection.query(&#x27;SELECT * FROM `users`&#x27;, function (error, results, fields) &#123;</span><br><span class="line">  if (error) throw error;</span><br><span class="line">  console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加</span><br><span class="line"> connection.query(&#x27;INSERT INTO users VALUES(NULL, &quot;admin&quot;:&quot;123&quot;)&#x27;, function (error, results, fields) &#123;</span><br><span class="line">   if (error) throw error;</span><br><span class="line">   console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line"> &#125;);</span><br><span class="line"> //关闭数据库</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h2><ol><li>安装 nodejs</li><li>安装 mongod</li><li>安装 redis<br>3.1 redis-server 启动 redis<br>3.2 ps axu | grep redis 查看 redis 服务进程</li><li>安装 nginx<br>4.1 nginx -s reopen // 重新指定日志打印的文件<br>4.2 nginx - t //检测配置文件是否有语法错误<br>4.3 nginx -s reload // 重新加载配置文件</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;开启-MongoDB-服务器&quot;&gt;&lt;a href=&quot;#开启-MongoDB-服务器&quot; class=&quot;headerlink&quot; title=&quot;开启 MongoDB 服务器&quot;&gt;&lt;/a&gt;开启 MongoDB 服务器&lt;/h2&gt;</summary>
    
    
    
    <category term="node" scheme="https://github.com/foolishmax/categories/node/"/>
    
    
    <category term="node" scheme="https://github.com/foolishmax/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>标准项目流程</title>
    <link href="https://github.com/foolishmax/2023/05/29/%E6%A0%87%E5%87%86%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/"/>
    <id>https://github.com/foolishmax/2023/05/29/%E6%A0%87%E5%87%86%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/</id>
    <published>2023-05-29T06:30:18.000Z</published>
    <updated>2023-05-31T09:47:39.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目开发三大要素"><a href="#项目开发三大要素" class="headerlink" title="项目开发三大要素"></a>项目开发三大要素</h2><span id="more"></span><ul><li><p>工作流程（15 个流程）</p><ul><li>需求分析： PD、PM、用户</li><li>PRD 评审： 产品、交互、前端、后端、测试</li><li>交互/UI（稿）评审： 产品、交互、UI、前端、后端、测试</li><li>技术方案评审： 前端、后端、测试</li><li>接口设计评审： 前端、后端</li><li>代码开发： 前端、后端</li><li>前后端联调： 前端、后端、测试</li><li>冒烟用例： 前端、后端</li><li>提测：前端、后端</li><li>测试：测试</li><li>预发验收：用户、PD</li><li>发布上线/验证：用户、PD</li><li>观察用户数据：PM、后端、测试</li><li>复盘：ALL</li><li>敏捷迭代：下一轮循环</li></ul></li><li><p>人员</p><ul><li>用户（C 端用户、B 端用户）</li><li>产品(PD)/项目经理(PM)</li><li>UI 设计师</li><li>交互设计师（UE）</li><li>前端开发</li><li>后端开发</li><li>测试</li></ul></li><li><p>文档</p><ul><li>产品需求文档（PRD-product requirement document）</li><li>交互稿</li><li>UI 稿</li><li>技术方案</li><li>接口文档</li><li>冒烟测试用例</li><li>测试用例</li><li>发布日志</li><li>上线报告</li><li>复盘文档</li></ul></li></ul><h2 id="PRD-包含哪些部分（五部分）？"><a href="#PRD-包含哪些部分（五部分）？" class="headerlink" title="PRD 包含哪些部分（五部分）？"></a>PRD 包含哪些部分（五部分）？</h2><ul><li>需求背景（业务价值）</li><li>需求简介（列表）</li><li>业务架构（产品结构、业务逻辑）</li><li>产品原型（全局说明）</li><li>非功能性需求</li></ul><p>考虑点：</p><ol><li>投入产出比 ROI（return on inverstment）</li><li>产品效果 PV、UV</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>可控性</li><li>稳定性</li><li>适用性</li><li>易用性</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;项目开发三大要素&quot;&gt;&lt;a href=&quot;#项目开发三大要素&quot; class=&quot;headerlink&quot; title=&quot;项目开发三大要素&quot;&gt;&lt;/a&gt;项目开发三大要素&lt;/h2&gt;</summary>
    
    
    
    <category term="项目" scheme="https://github.com/foolishmax/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://github.com/foolishmax/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>脚手架开发</title>
    <link href="https://github.com/foolishmax/2023/04/04/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/foolishmax/2023/04/04/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/</id>
    <published>2023-04-04T07:15:25.000Z</published>
    <updated>2023-05-31T09:48:09.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h2><span id="more"></span><p>开发脚手架的核心目标：提升前端研发效能</p><p>内容：</p><ul><li>创建项目+通用代码<ul><li>埋点</li><li>http 请求</li><li>工具方法</li><li>组件库</li></ul></li><li>git 操作<ul><li>创建仓库</li><li>代码冲突</li><li>远程代码同步</li><li>创建版本</li><li>发布打 tag</li></ul></li><li>构建和发布上线<ul><li>依赖安装和构建</li><li>资源上传 cdn</li><li>域名绑定</li><li>测试/正式服务器</li></ul></li></ul><p>脚手架核心价值将研发过程：</p><ul><li>自动化：项目重复代码拷贝/git 操作/发布上线操作</li><li>标准化：项目创建/git flow/发布流程/回滚流程</li><li>数据化：研发过程系统化、数据化，使得研发过程可量化</li></ul><p>自动化构建工具：jenkins、trvis 通常需要 git hooks 触发，在服务端运行需要定制化操作，整个过程比较复杂</p><p>脚手架执行原理：<br>以 vue-cli 为例子</p><ol><li>在终端输入 vue create xxx</li><li>终端解析出 vue 命令</li><li>终端在环境变量中找到(相当于 which vue，找不到提示 commond not found) vue 命令</li><li>根据 node/bin/目录下 vue 命令（软连接）连接到 node 全局依赖 lib/node_modules 包下的 vue.js</li><li>终端利用 node(/usr/bin/env node) 执行 vue.js</li><li>vue.js 解析 command/options</li><li>vue.js 执行 command</li><li>执行完毕，退出</li></ol><p>疑问：</p><ol><li>为什么全局安装@vue/cli 会添加 vue 命令？<br>答： 在 package.json 中的 {bin: {‘vue’: ‘bin/vue.js’}}配置</li><li>全局安装 npm install -g @vue/cli 时发生了什么？<br>答：首先会把@vue/cli 这个项目安装在 node 的 lib/node_modules 目录下，然后检查项目中 package 中是否存在 bin 属性，如果存在的话会在 node 的 bin 目录下创建一个对应的软连接</li><li>执行 vue 命令发生了什么？<br>答：操作系统会找到 which vue 的目录路径并执行这个路径的文件（先去环境变量中找对应命令，拿到目录执行）</li><li>怎么直接执行一个 js 文件，不通过 node？<br>答：在文件顶部写 #！/usr/bin/env node,相当于告诉操作系统去环境变量中找 node 命令去执行这个文件；/usr/bin/env node xxx.js = xxx.js(顶部添加指令) = node test.js</li></ol><p>创建软连接命令：</p><ul><li>ln -s /Users/foo/xxx.js vue</li></ul><p>脚手架开发难点：</p><ol><li>分包：将复杂的系统拆分成若干个模块</li><li>命令注册：vue create、vue add 等</li><li>参数解析 vue command options(全称、简称) params,帮助信息：Usage： vue &lt;’xxx’&gt; [‘options’]; Options: xxx</li><li>命令行交互（让用户选择或者输入）</li><li>日志打印</li><li>命令行文字变色</li><li>网络通信：http/websocket</li><li>文件处理</li></ol><p>从应用角度看如何开发一个脚手架：</p><ol><li>开发 npm 项目，项目中包含一个 bin/vue.js 文件，并将项目发布到 npm</li><li>将 npm 项目安装到 node 的 lib/node_modules 中</li><li>在 node 的 bin 目录下配置 vue 软连接到 lib/node_modules/@vue/cli/bin/vue.js</li><li>执行 vue 的命令时就可以找到 vue.js 执行</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;脚手架开发&quot;&gt;&lt;a href=&quot;#脚手架开发&quot; class=&quot;headerlink&quot; title=&quot;脚手架开发&quot;&gt;&lt;/a&gt;脚手架开发&lt;/h2&gt;</summary>
    
    
    
    <category term="脚手架" scheme="https://github.com/foolishmax/categories/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
    
    <category term="脚手架" scheme="https://github.com/foolishmax/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="https://github.com/foolishmax/2023/03/31/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>https://github.com/foolishmax/2023/03/31/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2023-03-31T08:45:36.000Z</published>
    <updated>2023-05-31T09:48:19.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><span id="more"></span><blockquote><p>把复杂的代码按照功能的不同划分成不同的模块单独维护，提高开发效率，方便后期维护。<br>服务端规范主要是 CommonJS，例如 nodejs。<br>客户端主要有 AMD（异步模块定义，推崇依赖前置 requirejs）、CMD（通用模块定义，推崇依赖就近，seajs），但是随着 ES6 的普及，前端的这些第三方的模块化实现已经在渐渐的淘汰</p></blockquote><p>模块化的演进：</p><ol><li>基于文件划分模块的方式</li><li>每个模块暴露一个全局对象，所有模块成员都挂载在这个对象中，例如 jQuery 库把它的 api 都放在了 window.$下面，但zepto也是在window.$下容易命名冲突</li><li>使用 IIFE 为模块提供私有空间</li><li>利用 IIFE 的参数作为依赖声明使用</li><li>模块化规范（AMD、CMD、CommonJS、ESM 等）</li></ol><h2 id="CommonJS-解析"><a href="#CommonJS-解析" class="headerlink" title="CommonJS 解析"></a>CommonJS 解析</h2><blockquote><p>CommonJS 的核心思想是通过 require 方法来同步加载依赖的其他模块，通过 module.export 来导出需要暴露的接口</p></blockquote><p>require 内部逻辑：<br>例如：require(X)</p><ol><li>如果 X 是内置模块（比如 require(‘http’)）<br>a. 返回该模块<br>b. 不再继续执行</li><li>如果 X 以 ‘./‘或者 ‘../‘开头<br>a. 根据 X 所在父模块，确定 X 的绝对路径<br>b. 将 X 当作文件，依次查找以下文件（.x ｜.x.js | .x.json | .x.node），只要一个存在就返回该文件，不再继续执行<br>c. 把 X 当作目录，依次查找以下文件（.x/package.json | .x/index.js | .x/index.json | .x/index.node），只要一个存在就返回并不再执行</li><li>如果 X 不带路径<br>a. 根据 X 所在父模块，确定 X 可能的安装目录，依次往上级目录查找，把 X 当成文件名或目录名加载</li><li>找不到抛错’not found’</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前端模块化&quot;&gt;&lt;a href=&quot;#前端模块化&quot; class=&quot;headerlink&quot; title=&quot;前端模块化&quot;&gt;&lt;/a&gt;前端模块化&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://github.com/foolishmax/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>git分布式版本控制系统</title>
    <link href="https://github.com/foolishmax/2023/03/28/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://github.com/foolishmax/2023/03/28/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-03-28T04:36:25.000Z</published>
    <updated>2023-03-29T06:46:48.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-git-commit-后，如何修改-commit-的信息？"><a href="#使用-git-commit-后，如何修改-commit-的信息？" class="headerlink" title="使用 git commit 后，如何修改 commit 的信息？"></a>使用 git commit 后，如何修改 commit 的信息？</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="gitlab-CI-CD-流程"><a href="#gitlab-CI-CD-流程" class="headerlink" title="gitlab CI/CD 流程"></a>gitlab CI/CD 流程</h2><p>生产环境<br>1、推送代码-&gt;编译-&gt;生成的 jar 包发布到私服-&gt;打包为 docker 镜像-&gt;推送到 Harbor 镜像仓库（成功，微信通知，c 结束返回成功|失败，微信通知，ci 结束返回失败）<br>2、运维人员 触发部署到 k8s 集群-&gt;健康检查（成功，微信通知，c 结束返回成功|失败，微信通知，ci 结束返回失败）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用-git-commit-后，如何修改-commit-的信息？&quot;&gt;&lt;a href=&quot;#使用-git-commit-后，如何修改-commit-的信息？&quot; class=&quot;headerlink&quot; title=&quot;使用 git commit 后，如何修改 commit 的信息？&quot;&gt;&lt;/a&gt;使用 git commit 后，如何修改 commit 的信息？&lt;/h2&gt;</summary>
    
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/categories/typescript/"/>
    
    
    <category term="typescript" scheme="https://github.com/foolishmax/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>vue3核心技术揭秘</title>
    <link href="https://github.com/foolishmax/2023/03/24/vue3%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98/"/>
    <id>https://github.com/foolishmax/2023/03/24/vue3%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98/</id>
    <published>2023-03-24T06:52:21.000Z</published>
    <updated>2023-04-24T06:53:44.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-的特点（优点）"><a href="#vue-的特点（优点）" class="headerlink" title="vue 的特点（优点）"></a>vue 的特点（优点）</h2><span id="more"></span><ul><li>vue 关注视图层，用数据操作的方式代替了 dom 操作</li><li>vue 通过响应式的数据绑定实现了数据和视图之间的更新交互</li><li>vue 通过组件化开发让工程结构更加明确，更易于维护</li><li>vue 通过虚拟 DOM，优化了 DOM 操作，实现了性能提高</li><li>vue 拥有自己的 vue-cli/vite 脚手架工具，对良好的工程化性能</li></ul><h2 id="vue3-生命周期"><a href="#vue3-生命周期" class="headerlink" title="vue3 生命周期"></a>vue3 生命周期</h2><ul><li>onBeforMount -&gt; vue 实例挂载之前执行</li><li>onMounted -&gt; vue 实例挂载完成执行</li><li>onBeforeUpdate -&gt; 组件内数据发生变化之前执行</li><li>onUpdated -&gt; 组件内数据发生变化之后执行</li><li>onBeforeUnmount -&gt; 组件销毁之前</li><li>onUnmounted -&gt; 组件销毁之后</li><li>onActivated -&gt; keep-alive 组件激活时执行</li><li>onDeactivated -&gt; keep-alive 组件销毁时执行</li><li>onErrorCaptured -&gt; 捕获错误</li><li>onRenderTracked -&gt; dev 组件更新时跟踪所有变量和方法</li><li>onRenderTriggered -&gt; dev 触发渲染时调用，返回变化新旧值</li></ul><h2 id="vue3-相比于-vue2-有哪些不同？"><a href="#vue3-相比于-vue2-有哪些不同？" class="headerlink" title="vue3 相比于 vue2 有哪些不同？"></a>vue3 相比于 vue2 有哪些不同？</h2><ul><li>组合式（composition）api<ul><li>vue2 是选项式（option）api</li></ul></li><li>响应式原理<ul><li>vue2 响应式原理基础是 Object.defineProperty<ul><li>深层嵌套递归数据响应式</li><li>缺点：无法监听对象或数据新增、删除的元素</li><li>解决方案：针对数组原型方法 push、pop、shift、unshift、splice、sort 等进行 hack 处理，提供 Vue.set 监听对象/数组新增属性</li><li>tips：Object.defineProperty 可以监听数组已有元素，vue2 没有提供是因为性能问题</li></ul></li><li>vue3 是 Proxy（配合 Reflect）<ul><li>兼容性：放弃了 IE11 以下</li><li>动态属性增删都可以拦截</li><li>使用 Reflect 可以修正 Proxy 的 this 指向问题</li><li>vue3 使用 Proxy 并不能监听对象内部深层次的属性变化，处理方式是在 getter 中递归响应式，只有真正访问内部属性时才会变成响应式，节约性能</li></ul></li></ul></li><li>生命周期的变化<ul><li>vue3 需要添加 on ，使用上需要先引入，vue 可以直接调用</li><li>移除了 beforeCrete、created</li></ul></li><li>多根节点<ul><li>vue3 支持多根节点</li></ul></li><li>异步组件<ul><li>vue3 提供 Suspense 组件，通过 fallback 插槽提供异步组件渲染兜底的内容，如 loading 等</li></ul></li><li>Teleport<ul><li>vue3 提供 Teleport 组件可将部分组件移动到指定 dom 节点位置，如 Dialog 组件</li></ul></li><li>css 变量<ul><li>支持在 style 标签中使用 v-bind,给 css 绑定 js 变量</li></ul></li><li>代码打包体积<ul><li>vue3 的 api 可以被 tree-shaking，使用了 es6module，tree-shaking 依赖于 es6 模块的静态结构特性</li></ul></li><li>虚拟 dom<ul><li>vue3 静态提升：保存静态节点（pathchflag 为 -1）直接复用，添加更新类型标记 pathchflag（为 1 是动态绑定的元素）</li><li>事件缓存，可以在第一次渲染后缓存事件，vue2 每次渲染都会传递一个新函数</li></ul></li><li>diff 算法<ul><li>vue2 双端比较</li><li>vue3 最长递归子序列</li></ul></li></ul><h2 id="defineProperty-和-Proxy-的区别？"><a href="#defineProperty-和-Proxy-的区别？" class="headerlink" title="defineProperty 和 Proxy 的区别？"></a>defineProperty 和 Proxy 的区别？</h2><ul><li><p>Object.defineProperty 是 Es5 的方法，Proxy 是 Es6 的方法</p></li><li><p>defineProperty 是劫持对象属性，Proxy 是代理整个对象；</p></li><li><p>defineProperty 不能监听(重置可以)到对象<strong>新增</strong>属性和<strong>修改</strong>新增属性的变化，Proxy 可以</p></li><li><p>defineProperty 不能监听根据自身数组下标<strong>修改</strong>数组元素的变化（所以 vue2 提供了 Vue.$set和Vue.$delete）</p></li><li><p>defineProperty 不兼容 IE8，Proxy 不兼容 IE11</p></li><li><p>defineProperty 不支持 Map、Set 等数据结构</p></li><li><p>defineProperty 只能监听 get、set，而 Proxy 可以拦截多达 13 种方法；</p></li><li><p>Reflect 是为了在执行对应的拦截操作的方法时能传递正确的 this 上下文</p><ul><li>Proxy handler 中的 receiver 指向<ul><li>正常情况下，<code>receiver</code>指向的是<code>当前的代理对象</code></li><li>特殊情况下，<code>receiver</code>指向引发<code>当前操作的对象</code>（obj）<ul><li>Object.setPrototypeOf(obj, proxy)，访问 obj.name 时如果没有 name 就会根据原型链查找</li></ul></li></ul></li></ul></li><li><p>Proxy 兼容性相对较差，且无法通过 pollyfill 解决；所以 Vue3 不支持 IE11 以下；</p></li><li><p>Proxy 返回的是一个新对象</p></li><li><p>Proxy 也是不能对对象进行深层次响应的，实现动态递归响应式，只有在使用（get）的时候才会做响应式处理</p></li></ul><h2 id="vue3-响应式原理"><a href="#vue3-响应式原理" class="headerlink" title="vue3 响应式原理"></a>vue3 响应式原理</h2><ul><li>activeEffect 解决匿名函数问题</li><li>WeakMap、Map、Set 存储对象属性的相关副作用函数</li><li>track()实现依赖收集、层级依赖追踪、依赖清理（解决嵌套副作用）</li><li>trigger()当某个依赖值发生变化时，通过执行副作用函数获得与依赖变化后对应的最新值</li></ul><h2 id="v-if-和-v-for-的优先级？"><a href="#v-if-和-v-for-的优先级？" class="headerlink" title="v-if 和 v-for 的优先级？"></a>v-if 和 v-for 的优先级？</h2><p>v-if 的优先级高于 v-for</p><h2 id="ref-和-reactive-定义响应式数据"><a href="#ref-和-reactive-定义响应式数据" class="headerlink" title="ref 和 reactive 定义响应式数据"></a>ref 和 reactive 定义响应式数据</h2><p>ref 原理</p><ol><li>ref 内部封装一个 RefImpl 类，并设置 get/set，当通过.value 调用就会触发劫持，从而实现响应式</li><li>当接受的对象或数组时，内部仍然是 reactive 去实现的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码路径：packages/reactivity/src/ref.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  private <span class="attr">_value</span>: T</span><br><span class="line">  private <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  public dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  public readonly __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, public readonly __v_isShallow: boolean</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = __v_isShallow ? value : <span class="title function_">toRaw</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    newVal = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>reactive 原理</p><ol><li>使用 Proxy 代理传入对象实现响应式</li><li>Proxy 拦截数据的更新和获取操作，使用 Reflect 完成原本的操作（get/set）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target,</span></span><br><span class="line"><span class="params">  isReadonly,</span></span><br><span class="line"><span class="params">  baseHandlers,</span></span><br><span class="line"><span class="params">  collectionHandlers,</span></span><br><span class="line"><span class="params">  proxyMap</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!shared.<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;<span class="built_in">String</span>(target)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target is already a Proxy, return it.</span></span><br><span class="line">  <span class="comment">// exception: calling readonly() on a reactive object</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[<span class="string">&#x27;__v_raw&#x27;</span> <span class="comment">/* RAW */</span>] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[<span class="string">&#x27;__v_isReactive&#x27;</span> <span class="comment">/* IS_REACTIVE */</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target already has corresponding Proxy</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// only specific value types can be observed.</span></span><br><span class="line">  <span class="keyword">const</span> targetType = <span class="title function_">getTargetType</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="number">0</span> <span class="comment">/* INVALID */</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="number">2</span> <span class="comment">/* COLLECTION */</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  );</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy);</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue3-中-watch-和-watchEffect-有什么区别？"><a href="#vue3-中-watch-和-watchEffect-有什么区别？" class="headerlink" title="vue3 中 watch 和 watchEffect 有什么区别？"></a>vue3 中 watch 和 watchEffect 有什么区别？</h2><ul><li><p>watch 显式指定依赖源，依赖源变化时执行回调函数</p><ul><li>第一个参数为不同形式的数据源<ul><li>单个 ref</li><li>计算属性</li><li>getter 函数（要有返回值）</li><li>响应式对象(默认时深层遍历)，不能直接侦听响应式对象的属性，应该用一个返回该属性的 getter 函数</li><li>以上类型的值组成的数组</li></ul></li><li>第二个参数是数据发生变化时执行的回调函数<ul><li>接收三个参数：新值、旧值、清理副作用的回调函数（例如清除无效的副作用，等待中的异步请求）</li></ul></li><li>第三个参数是一个可选对象<ul><li>immediate：在侦听器创建时立即触发回调</li><li>deep：深度遍历</li><li>flush：回调的触发时机<ul><li>pre：默认，dom 更新前调用</li><li>post：dom 更新后调用</li><li>sync：sync 同步调用</li></ul></li><li>onTrack/onTrigger: 用于调试的钩子，在依赖收集和回调函数触发时被调用</li></ul></li><li>其他：<ul><li>watch 的返回值是一个用来停止该副作用的函数</li><li>使用同步语句创建的侦听器，会自动绑定到宿主组件实例实例上，并在宿主组件卸载时自动停止</li><li>异步回调（setTimeout 等）创建的侦听器，则不会绑定到当前组件上，必须手动停止，以防止内存泄漏</li></ul></li></ul></li><li><p>watchEffect 自动收集依赖源，依赖源变化时重新执行自身</p><ul><li>接收两个参数<ul><li>第一个参数是一个回调函数<ul><li>回调函数的参数为一个 onCleanup 函数，用来清除副作用</li></ul></li><li>第二个参数是一个可选对象<ul><li>flush：回调的触发时机<ul><li>pre：默认，dom 更新前调用</li><li>post：dom 更新后调用</li><li>sync：sync 同步调用</li></ul></li></ul></li></ul></li><li>watchEffect 的回调函数会立即执行，即{immediate: true}</li><li>computed 其实类似一个带输出的同步版本 watchEffect</li><li>watchEffect 仅会在同步执行期间才会追踪依赖，使用异步回调时，只有在第一个 await 之前访问到的依赖才会被追踪</li><li>watchEffect 无法访问侦听数据的新值和旧值</li><li>动态新增的依赖也会被收集</li></ul></li><li><p>使用场景：</p><ul><li>大部分时候使用 watch 显示指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖</li><li>watchEffect 使用于逻辑相对简单，依赖源和逻辑强相关的场景</li></ul></li></ul><h2 id="vue-中动态引入的图片为什么要是-require？"><a href="#vue-中动态引入的图片为什么要是-require？" class="headerlink" title="vue 中动态引入的图片为什么要是 require？"></a>vue 中动态引入的图片为什么要是 require？</h2><p>因为动态添加 src 被当作<u><strong>静态资源</strong></u>处理了，而动态 src 编译过后的地址与图片编译后的资源地址不一致导致无法正确引入资源，而使用 require 返回的资源文件就是编译后的文件地址，所以可以正确的引入资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue文件中使用require动态的引入一张图片</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 使用require动态引入图片 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;require(&#x27;../assets/logo.png&#x27;)&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终编译的结果</span></span><br><span class="line"><span class="comment">//这张图片是可以被正确打开的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/logo.6c137b82.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>什么是静态资源？</p><p>静态资源就是直接放在项目中的资源，不需要发送请求获取<br>动态资源就是需要发送请求获取资源（数据库连接数据处理）</p></li><li><p>为什么静态引入图片，没有使用 require 返回的依然是编译后的文件地址？</p><p>因为 webpack 编译 vue 文件时，遇见 src 等属性会默认使用 require 引入资源路径</p><ul><li>如 <code>url(./image.png)</code> 会转为 <code>require(&#39;./image.png&#39;)</code></li><li><code>&lt;img src=&#39;./image.png&#39; /&gt;</code> 会被编译为 <code>h(&#39;img&#39;,&#123;attrs: &#123;src: require(&#39;./image.png&#39;)&#125;&#125;)</code></li></ul></li><li><p>动态引入图片，src 后面的属性值 webpack 会认为是一个变量，根据 v-bind 指令去解析 src 的属性值，并不会通过 require 引入资源路径</p></li><li><p>引入 public 下面静态资源的时候，也会默认使用 require 引入吗？</p><p>官方：<br><code>任何放置在public文件夹下的静态资源会被简单的复制，而不经过webpack，你需要通过绝对路径来引用它们</code></p><p>答：不会，使用 require 引入资源的前提是该资源是 webpack 解析的模块，而 public 下的文件压根不会走编译，所以不会使用 require</p></li><li><p>为什么使用 public 下的资源一定要用绝对路径？</p><p>答：public 文件不会被编译返回的是代码中定义的文件地址，src 下的文件被编译，编译后生成的文件目录（dist）下会找不到对应目录</p></li></ul><h2 id="Vue2、Vue3、React-三者-diff-算法有什么区别？"><a href="#Vue2、Vue3、React-三者-diff-算法有什么区别？" class="headerlink" title="Vue2、Vue3、React 三者 diff 算法有什么区别？"></a>Vue2、Vue3、React 三者 diff 算法有什么区别？</h2><ul><li>严格的 Tree diff 算法的时间复杂度是 O(n*3)</li><li>vue、react 框架对 tree diff 进行了优化 O(n)<ul><li>只比较同一层级，不跨级比较</li><li>tag 不同则删除重建</li><li>子节点通过 key 区分<ul><li>vdom diff 算法会根据 key 判断元素是否需要删除</li><li>匹配了 key，则只移动元素 - 性能较好</li><li>未匹配 key，则删除重建 - 性能较差</li></ul></li></ul></li><li>区别<ul><li>react 仅右移</li><li>vue2 双端比较</li><li>vue3 最长递增子序列</li></ul></li></ul><h2 id="KeepAlive-组件实现原理"><a href="#KeepAlive-组件实现原理" class="headerlink" title="KeepAlive 组件实现原理"></a>KeepAlive 组件实现原理</h2><blockquote><p>KeepAlive 是一个内置组件，主要用于组件缓存，它包裹的组件在切换后不会被销毁，而是保留在内存中，避免重复渲染 DOM，include/exclude 用于包含/排除组件，max 用于限制最大缓存实例个数，使用 LRU 缓存算法(最大最小使用缓存)：超过最大数量时移除最久没被访问的实例</p></blockquote><h2 id="Vue-router-三种模式（React-router-也一样）"><a href="#Vue-router-三种模式（React-router-也一样）" class="headerlink" title="Vue-router 三种模式（React-router 也一样）"></a>Vue-router 三种模式（React-router 也一样）</h2><ul><li>Hash</li><li>WebHistory</li><li>MemoryHistory（v4 之前叫做 abstract history）</li></ul><h2 id="如何统一监听-Vue-组件报错？"><a href="#如何统一监听-Vue-组件报错？" class="headerlink" title="如何统一监听 Vue 组件报错？"></a>如何统一监听 Vue 组件报错？</h2><ul><li><p>window.onerror</p><ul><li>全局监听所有 js 错误</li><li>try…catch 中的错误无法被监听到</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">msg, source, line, column, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, source, line, column, error);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>errorCaptured 生命周期</p><ul><li>监听所有下级组件的错误</li><li>返回 false 会阻止向上传播</li></ul></li><li><p>errorHandler 配置</p><ul><li>Vue 全局错误监听，所有组件错误都会汇总到这里</li><li>但 errorCaptured 返回 false，不会传播到这里</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error, vm, info);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>异步错误</p><ul><li>异步回调里面的错误，errorHandler 监听不到</li><li>需要使用 window.onerror</li></ul></li></ul><h2 id="vue-router-路由钩子"><a href="#vue-router-路由钩子" class="headerlink" title="vue-router 路由钩子"></a>vue-router 路由钩子</h2><p>const router = createRouter({});</p><ul><li>全局前置守卫<ul><li>router.beforeEach((to, from)=&gt;{})</li></ul></li><li>全局解析守卫<ul><li>router.beforeResolve：和 router.beforeEach 类似，因为它在 每次导航时都会触发，但是确保在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被正确调用</li></ul></li><li>全局后置钩子<ul><li>router.afterEach((to, from)=&gt;{})</li></ul></li><li>路由独享守卫<ul><li>beforeEnter:(to, from)=&gt;{}</li></ul></li><li>组件内守卫<ul><li>onBeforeRouteLeave</li><li>onBeforeRouteUpdate</li></ul></li></ul><h2 id="pinia-原理浅析"><a href="#pinia-原理浅析" class="headerlink" title="pinia 原理浅析"></a>pinia 原理浅析</h2><ul><li>通过 createPinia 创建 pinia 实例，在 app.use 的时候执行 pinia 内部的 install 方法<ul><li>install 方法通过 vue 的 provide 将当前 pinia 实例注入到每个 vue 组件实例中</li></ul></li><li>在业务中使用 useXxx 的时候调用 defineStore 方法，该方法在正真调用的时候才会初始化对应模块的数据参数<ul><li>defineStore 首先创建一个 store 对象，将 options 上面的 state、getters 利用 vue 的响应式 composition API 进行处理和转换，使之成为响应式数据并挂载在 store 对象上</li><li>通过 Object.assign 对这个 store 进行一些扩展 api（reset、$patch 等）</li><li>返回 store 对象作为 defineStore 方法的返回值</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vue-的特点（优点）&quot;&gt;&lt;a href=&quot;#vue-的特点（优点）&quot; class=&quot;headerlink&quot; title=&quot;vue 的特点（优点）&quot;&gt;&lt;/a&gt;vue 的特点（优点）&lt;/h2&gt;</summary>
    
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://github.com/foolishmax/2023/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://github.com/foolishmax/2023/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2023-03-22T09:41:21.000Z</published>
    <updated>2024-03-28T07:07:02.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><span id="more"></span><p>http 是超文本传输协议，信息是明文传输，https 是更加安全的 ssl 加密传输协议<br>http 默认是 80 端口，https 默认是 443 端口<br>https 需要申请 CA 证书<br>https 是 http + ssl/tls（数字证书）进行组合的更加安全的传输协议</p><p>https 工作原理（非对称加密） 1.服务端向客户端传递证书作为公钥 2.客户端对证书进行解析，判断证书的办法机构和过期时间等，如果都没有问题，生成一个随机值作为私钥，然后使用证书进行加密发送给服务端 3.服务端解密得到客户端私钥 4.之后双方利用私钥进行加密解密，完成信息的通信</p><h2 id="HTTP-协议-1-0、1-1、2-0-有什么区别？"><a href="#HTTP-协议-1-0、1-1、2-0-有什么区别？" class="headerlink" title="HTTP 协议 1.0、1.1、2.0 有什么区别？"></a>HTTP 协议 1.0、1.1、2.0 有什么区别？</h2><ul><li><p>HTTP 1.0</p><ul><li>最基础的 HTTP 协议</li><li>支持基本的 GET、POST 方法</li></ul></li><li><p>HTTP 1.1</p><ul><li>缓存策略 cache-control、E-tag 等</li><li>支持长连接 Connection: keep-alive,一次 TCP 连接多次请求</li><li>支持断点续传，状态码 206</li><li>支持新的方法 PUT、DELETE 等，可用于 Restful API</li></ul></li><li><p>HTTP 2.0</p><ul><li>头部数据压缩：http2.0 使用 HPACK 算法对 header 对头部数据进行压缩，体积变小后，网络传输速度会更快<ul><li>http/1.1 版本的头部信息是本文，而 http/2.0 头部数据就是二进制</li></ul></li><li>多路复用，一次 TCP 连接中可以多个 HTTP 并行请求</li><li>服务端推送</li></ul></li></ul><h2 id="301-和-302-的区别"><a href="#301-和-302-的区别" class="headerlink" title="301 和 302 的区别"></a>301 和 302 的区别</h2><p>301 表示资源被永久移除，浏览器在拿到状态码后跳转到一个新的 URL 地址，可从相应头的 location 首部中获取，搜索引擎在抓取新内容的同时也将就地址交换为重定向之后的网址。</p><p>302 表示地址资源还在，仍可以访问，搜索引擎会抓取新的内容而保存旧的地址，seo 302 优于 301.</p><p>重定向的原因：<br>网站调整（改变网页目录结构）<br>页面被移到一个新地址<br>页面扩展名改变 .php -&gt;.html<br>如果不做重定向会返回 404 页面，会白白流失用户访问量。</p><p>1XX 信息性状态码，表示接受的请求正在处理<br>2XX 成功状态码，表示请求被正常处理完毕<br>3XX 重定向状态码，表示需要进行附加操作以完成请求<br>4XX 客户端错误状态码，表示服务器无法处理请求<br>400 Bad Request 请求出现语法错误<br>401 被请求的页面需要用户名和密码<br>403 forbidden 请求页面的访问被禁止<br>404 资源未找到<br>5XX 服务器错误状态码，表示服务器处理请求出错<br>502 网关错误<br>503 服务器超负载或者停机维护，无法处理请求<br>504 网关超时</p><h2 id="HTTP-协议和-UDP-协议有什么区别？"><a href="#HTTP-协议和-UDP-协议有什么区别？" class="headerlink" title="HTTP 协议和 UDP 协议有什么区别？"></a>HTTP 协议和 UDP 协议有什么区别？</h2><ul><li>网络协议<ul><li>HTTP 协议在应用层</li><li>TCP、UDP 协议在传输层<ul><li>TCP 协议<ul><li>有连接，有断开</li><li>稳定传输</li></ul></li><li>UDP 协议<ul><li>无连接，无断开</li><li>不稳定传输，但效率高</li><li>如视频会议、语音通话</li></ul></li></ul></li></ul></li></ul><h2 id="UDP-amp-TCP-的区别"><a href="#UDP-amp-TCP-的区别" class="headerlink" title="UDP &amp; TCP 的区别"></a>UDP &amp; TCP 的区别</h2><ul><li><p>相同点：</p><ul><li>UDP 协议 和 TCP 协议 都是运输层协议</li></ul></li><li><p>不同点：</p><ul><li><p>UDP 特点：</p><ul><li>无连接 —— 知道对端的 IP 和端口号就直接进行传输，不需要建立连接</li><li>不可靠 —— 没有确认机制，没有重传机制，即使因为网络故障无法发送到<br>对方，UDP 协议也不会给应用层返回任何错误信息</li><li>面向数据报</li><li>传输速 度块</li></ul></li><li><p>TCP 特点：</p><ul><li>面向连接，在客户端和服务器进行交换数据前，必须先在双方之间建立一个<br>TCP 连接</li><li>可靠传输，具有确认应答机制、超时重传机制、拥塞控制、流量控制、<br>滑动窗口机制、延迟应答等。</li><li>面向字节流</li></ul></li></ul></li><li><p>UDP 的响应速度优于 TCP，安全性和数据可靠性不如 TCP</p></li><li><p>UDP 一般用在网络负担非常重，但对响应速度要求高，数据类型都是短消息的情况下</p></li></ul><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>OSI(open system interconnect)参考模型</p><ul><li>应用层（为应用程序提供网络服务）</li><li>表示层（数据格式化，加密等）</li><li>会话层（建立、维护管理会话连接）</li><li>传输层（建立、维护管理到端连接）</li><li>网络层（IP 寻址和路由选择）<ul><li>寻址就是根据 IP 地址找到具体的设备</li><li>路由就是选择数据传输的线路</li></ul></li><li>数据链路层（控制网络层和物理层之间通信）</li><li>物理层（通过光缆、无线电波等方式连接组网）</li></ul><p>TCP/IP 模型</p><ul><li>应用层（应用层就是向用户提供通信服务的活动，提供用户程序接口 HTTP、FTP、DNS）</li><li>传输层（传输层为两台主机上的应用程序提供端到端的通信 TCP，UDP）</li><li>网络层（网络层实现数据包的选路和转发）</li><li>数据链路层（ARP 地址解析协议、RARP 逆地址解析协议，使用物理地址寻找一台机器）</li></ul><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><pre><code>WebSocket是html5定义的新协议，特点是即时通信、替代轮训与传统http协议不同，实现了浏览器和服务器的全双工通信</code></pre><p>HTTP 和 WebSocket</p><p>相同点：</p><ul><li>都是基于 TCP 可靠传输协议</li></ul><p>不同点：</p><ul><li>WebSocket 是全双工通信协议，通信双方可以同时发送和接收消息，http 是单向的</li><li>WebSocket 没有 Request 和 Response 概念</li><li>WebSocket 需要依赖 http 协议进行一次握手，握手成功后直接从 TCP 通道传输，与 http 无关</li><li>WebSocket 数据格式较轻量，数据包头部较小，http 协议每次通信需要携带完成头部信息</li><li>WebSocket 无跨域问题</li><li>WebSocket 多了两个属性 Upgrade: webSocket、Connection: Upgrade，服务端返回 101 成功状态码</li></ul><p>单工、半双工和全双工通信</p><ul><li>单工通信：指消息只能单向传输的工作方式，数据信息从一端到另一端是单向的。例如：广播</li><li>半双工通信：可以双向通信，但必须交替进行。例如：对讲机</li><li>全双工通信：指在通信的任意时刻，都允许数据同时在两个方向上传输，通讯双方都设置了发送器和接收器。</li></ul><h2 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h2><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个域名配置多个 IP 地址,在应答 DNS 查询时,DNS 服务器对每个查询将以 DNS 文件中主机记录的 IP 地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p><h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><p>强缓存：（expires、Cache-Control）在过期时间内，浏览器再次加载资源时，不会向服务器发起请求，直接从缓存中读取资源</p><p>协商缓存：向服务器发送请求，服务器会根据请求头（request header）的一些参数（Etag、last-modified）来判断是否命中协商缓存，首先根据 Etag 的值判断请求的文件有没有被修改，如果 Etag 一致则没有被修改，命中协商缓存返回 304，如果不一致则返回新的资源并带上新的 Etag 返回 200 状态码。如果没有 Etag 值，则对比 If-Modified-Since 和请求文件的最后修改时间，一致则命中协商缓存返回 304，不一致则返回新的 last-modified 和 200 状态码</p><h2 id="http-协议的特点"><a href="#http-协议的特点" class="headerlink" title="http 协议的特点"></a>http 协议的特点</h2><p>1.支持客户/服务器模式 2.简单快速：客户向服务器发送请求时，只需传送请求方法和路径。 3.灵活：http 允许传输任意类型的数据对象（Content-Type 内容编码类型）</p><p>application/x-www-form-urlencoded 常见 post 提交数据格式（key-value 格式）<br>application/json</p><p>4.无连接：限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。（原因是早期服务器需要同时面对全世界数十万、上百万的客户端的网页访问，但是每次客户端与服务端传输的数据关联性很低，就会导致大部分通过会很空闲，无端占用资源）</p><p>（解决无连接）Keep-Alive：使客户端到服务端之间的 Http 连接保持，不会断开，当再次对服务器发送请求时，keep-Alive 功能避免了重新建立连接</p><p>5.无状态：Http 是一个无状态协议，就是每个请求都是独立的，数据传输完毕不会记录任何信息。缺点就是如果后续处理需要前面的信息，就必须重传，就会导致每次连接传送的数据量增加，如果服务器不需要前面信息的时候应答就会很快。</p><p>（解决无状态）怎样保持 http 连接状态呢<br>Cookie（每次 http 请求的时候，客户端都需要发送响应的 cookie 信息到服务端，服务端根据 cookie 判断来自哪个客户端）<br>服务端生成 cookie，客户端保存</p><p>Session<br>服务端生成一个 sessionid，在客户端下次请求的时候在 cookie 里面记录这个 sessionid，然后发送给服务端，服务端再根据 cookie 中的 sessionid 来识别客户端返回资源数据。</p><p>禁用 cookie 怎么办？<br>url 重写，每次 http 请求的时候，在 url 后面拼接 sid=**参数</p><p>withCredentials:指定在涉及到跨域请求时，是否携带 cookie 信息，默认为 false<br>Access-Control-Allow-Credentials: true</p><h2 id="cookie-和-session-的区别"><a href="#cookie-和-session-的区别" class="headerlink" title="cookie 和 session 的区别"></a>cookie 和 session 的区别</h2><ol><li>存取方式不同： cookie 只能保存 ASCII 字符串，session 能够存储任意类型的数据</li><li>隐私策略不同</li><li>cookie 是存在客户端，session 是存在服务器的</li><li>浏览器的支持不同，浏览器可以禁用 cookie</li></ol><h2 id="权限身份验证"><a href="#权限身份验证" class="headerlink" title="权限身份验证"></a>权限身份验证</h2><p>一般都是通过 sessionid 来进行用户身份验证，sessionid 一般会存放在 redis 中。</p><ol><li>用户向服务端发送用户名和密码进行登陆</li><li>服务器验证通过后，服务器为用户创建一个 session，并将 session 信息存储起来</li><li>服务器向用户返回一个 sessionid，写入用户的 cookie</li><li>当用户保持登陆状态时，每次后续请求都会一起发送给后端</li><li>服务器将存储在 cookie 中的 sessionid 和存储在内存或者数据库中的 sessin 信息进行一个比较，验证用户身份，然后返回响应信息</li></ol><p>注意： 1.依赖 session 的关键业务一定要确保客户端开启了 cookie 2.注意 session 的过期时间</p><p>一般在 http header 的 Authorization 字段中添加 token</p><h2 id="禁用-cookie-之后-session-还能用吗？"><a href="#禁用-cookie-之后-session-还能用吗？" class="headerlink" title="禁用 cookie 之后 session 还能用吗？"></a>禁用 cookie 之后 session 还能用吗？</h2><p>url 重写，例如 <a href="https://javascript.cn/?session_id=xxx">https://javascript.cn/?session_id=xxx</a><br>缺点是安全性降低，可以对 sessionid 进行一次加密后传输</p><h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h2><ol><li>url 可见性：get 参数 url 可见，post 参数 url 不可见</li><li>数据传输：get 通过拼接 url 进行传递参数，post 通过 body 体传输参数</li><li>缓存性：get 请求可以缓存，post 请求不可以缓存</li><li>get 请求网页回退时，不产生影响，post 请求网页回退会重新发请求</li><li>传输数据：get 一般传输数据大小不超过 4k，post 可以传输大量数据</li><li>post 较 get 安全性较高，get 是不安全的因为 url 可见，可能会泄漏私密信息</li></ol><h2 id="http-常见的请求头字段"><a href="#http-常见的请求头字段" class="headerlink" title="http 常见的请求头字段"></a>http 常见的请求头字段</h2><p>Accept: 浏览器可接受的数据类型<br>Accept-Charset: 浏览器可接受的字符集<br>Accept-Encoding：浏览器能够进行解码的数据编码方式<br>Accept-Language： 浏览器所希望的语言种类<br>Connection：是否需要持久连接，值“Keep-Alive”，HTTP1.1 默认进行持久连接<br>Cookie：cookie 信息<br>content-type<br>If-Modified-Since：内容被修改才会返回<br>User-Agent：浏览器类型</p><p>响应头：<br>content-Length: 表示内容长度<br>content-type：文档类型<br>Date：当前时间<br>Expires：指定缓存过期时间<br>Last-Modified：文档过期时间</p><h2 id="xss（跨域脚本攻击）csrf（跨站请求伪造）"><a href="#xss（跨域脚本攻击）csrf（跨站请求伪造）" class="headerlink" title="xss（跨域脚本攻击）csrf（跨站请求伪造）"></a>xss（跨域脚本攻击）csrf（跨站请求伪造）</h2><p>csrf: 需要用户先登陆网站 A，获取 cookie，利用的是网站 A 本身的漏洞，去请求网站 A 的 api，—进行 token 验证，referer 验证，只接收本站的请求</p><p>xss：向网站 A 注入 js 代码，然后执行 js 代码，篡改网站 A 的内容，破坏页面正常结构，插入恶意广告。—编码转换</p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">正向代理是客户端代理，服务端不知道是哪个客户端发起的请求</span><br><span class="line">反向代理是服务端代理，客户端不知道是哪个服务端提供的资源</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>为什么需要三次握手？<br>两次握手第二次结束后，服务端并不能保证客户端已经接收到了第二次的应答信息，如此一来服务器会一直保持通信过程，因为 TCP 通信会占用端口，造成资源浪费。</p><p>防止已失效的连接请求报文段突然又传送到服务端，产生错误。<br>如上述情况，如果 client 没有再次向 server 发出确认，server 收不到确认就不会建立连接，可以避免 server 端一直等待浪费资源。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li><a href="https://blog.csdn.net/rememberyf/article/details/80309148">https://blog.csdn.net/rememberyf/article/details/80309148</a></li></ul><h2 id="什么是-HTTPS-中间人攻击？如何预防？"><a href="#什么是-HTTPS-中间人攻击？如何预防？" class="headerlink" title="什么是 HTTPS 中间人攻击？如何预防？"></a>什么是 HTTPS 中间人攻击？如何预防？</h2><ul><li><p>HTTPS 加密传输</p><ul><li>HTTP 明文传输</li><li>HTTPS 加密传输 HTTP + TLS/SSL</li><li><img src="/images/md_img/https.jpg" alt="https加密"></li></ul></li><li><p>答案</p><ul><li>使用正规厂商的加密证书可以防止中间人攻击</li></ul></li></ul><h2 id="WebSocket-和-HTTP-有什么区别？"><a href="#WebSocket-和-HTTP-有什么区别？" class="headerlink" title="WebSocket 和 HTTP 有什么区别？"></a>WebSocket 和 HTTP 有什么区别？</h2><ul><li><p>WebSocket</p><ul><li><p>支持端对端通讯</p></li><li><p>可以由 client 发起，也可以由 server 发起</p></li><li><p>用于：消息通知，直播间讨论区，聊天室，协同编辑</p></li><li><p>client</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">WebSocketServer</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wsServer = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connection&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了信息&#x27;</span>, msg.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ws.<span class="title function_">send</span>(<span class="string">&#x27;服务端已经收到了信息&#x27;</span> + msg.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>server</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;opened&#x27;</span>);</span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;client opened&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了信息&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;当前时间&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>WebSocket 连接过程</p><ul><li>先发起一个 http 请求</li><li>成功之后再升级到 WebSocket 协议，再通讯</li></ul></li><li><p>WebSocket 和 HTTP 区别？</p><ul><li>WebSocket 协议名是 ws://,可双端发起请求</li><li>WebSocket 没有跨域限制</li><li>通过 send 和 onmessage 通讯（HTTP 通过 req 和 res）</li></ul></li><li><p>ws 可升级为 wss（like https）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createServer &#125; <span class="keyword">from</span> <span class="string">&#x27;https&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ws&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">createServer</span>(&#123;</span><br><span class="line">  <span class="attr">cert</span>: <span class="title function_">readFileSync</span>(<span class="string">&#x27;/path/to/cert.pem&#x27;</span>),</span><br><span class="line">  <span class="attr">key</span>: <span class="title function_">readFileSync</span>(<span class="string">&#x27;/path/to/key.pem&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; server &#125;);</span><br></pre></td></tr></table></figure></li><li><p>实际项目推荐 socket.io,API 更简洁</p></li></ul><h2 id="WebSocket-和-HTTP-长轮询的区别？"><a href="#WebSocket-和-HTTP-长轮询的区别？" class="headerlink" title="WebSocket 和 HTTP 长轮询的区别？"></a>WebSocket 和 HTTP 长轮询的区别？</h2><ul><li><p>区别</p><ul><li>HTTP 长轮询：客户端发起请求，服务端阻塞，不会立即返回</li><li>WebSocket：客户端可发起请求，服务端也可发起请求</li></ul></li><li><p>注意</p><ul><li>HTTP 长轮询，需处理 timeout，即 timeout 之后重新发请求</li></ul></li></ul><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><ul><li><p>xhr.readyState</p><ul><li>0 (未初始化)还没有调用 send()方法</li><li>1 (载入)已调用 send()方法，正在发送请求</li><li>2 (载入完成) send()方法执行完成，已经接收到全部响应内容</li><li>3 (交互) 正在解析响应内容</li><li>4 (完成) 响应内容解析完成，可以在客户端调用</li></ul></li><li><p>xhr.status</p><ul><li>2xx 表示成功处理请求，如 200</li><li>3xx 需要重定向，浏览器直接跳转，如 301、302、304</li><li>4xx 客户端请求错误，如 404、403</li><li>5xx 服务端错误</li></ul></li></ul><h2 id="常见状态码？"><a href="#常见状态码？" class="headerlink" title="常见状态码？"></a>常见状态码？</h2><p>信息响应</p><ul><li>101 协议切换</li></ul><p>成功响应</p><ul><li>200 成功</li><li>204 请求成功，不返回任何内容</li><li>206 分块请求成功</li></ul><p>重定向</p><ul><li>301 永久重定向（配合 location，浏览器自动处理）</li><li>302 临时重定向（配合 location，浏览器自动处理）</li><li>304 资源未被修改（协商缓存 ）</li></ul><p>客户端响应</p><ul><li>400 无法被服务器理解</li><li>401 未授权</li><li>403 禁止访问</li><li>404 资源未找到</li><li>405 没有权限,请求方法(get/post 等)错误</li></ul><p>服务端响应</p><ul><li><p>500 服务器错误</p></li><li><p>503 服务不可达</p></li><li><p>504 网关超时</p></li><li><p>本身状态码就是一种约定，一种协议和规范，不要尝试违反规范，例如 IE 浏览器</p></li></ul><h2 id="http-常见-methods？"><a href="#http-常见-methods？" class="headerlink" title="http 常见 methods？"></a>http 常见 methods？</h2><ul><li><p>传统 methods</p><ul><li>get 获取服务器的数据</li><li>post 向服务器提交数据</li></ul></li><li><p>新的 methods</p><ul><li>get 获取数据</li><li>post 新建数据</li><li>patch/put 更新数据</li><li>delete 删除数据</li></ul></li></ul><h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><ul><li><p>一种新的 API 设计方法</p></li><li><p>传统 API 设计：把每个 url 当作一个功能</p></li><li><p>Restful API 设计：把每个 url 当作一个唯一的资源</p></li><li><p>原则</p><ul><li>不使用 url 参数<ul><li>传统 API 设计：/api/list?pageIndex=2</li><li>Restful API 设计：/api/list/2</li></ul></li><li>用 method 表示操作类型<ul><li>传统 API 设计<ul><li>post 请求 /api/create-blog</li><li>post 请求 /api/update-blog?id=100</li><li>get 请求 /api/get-blog?id=100</li></ul></li><li>Restful API 请求<ul><li>post 请求 /api/blog</li><li>patch 请求 /api/blog/100</li><li>get 请求 /api/blog/100</li></ul></li></ul></li></ul></li></ul><h2 id="常见-http-headers？"><a href="#常见-http-headers？" class="headerlink" title="常见 http headers？"></a>常见 http headers？</h2><ul><li><p>Request Headers</p><ul><li>Accept 浏览器可接收的数据格式</li><li>Accept-Encoding 浏览器可接收的压缩算法，如 gzip</li><li>Accept-Languange 浏览器可接收的语言，如 zh-CN</li><li>Connection: keep-alive 一次 TCP 连接重复使用</li><li>cookie</li><li>Host 如：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>Cache-Control</li><li>User-Agent （简称 UA）浏览器信息</li><li>Content-type 发送数据的格式，如 application/json</li></ul></li><li><p>Response Headers</p><ul><li>Content-type 返回数据的格式，如 application/json</li><li>Content-length 返回数据的大小，多少字节</li><li>Content-Encoding 返回数据的压缩算法，如 gzip</li><li>Set-Cookie</li><li>Expires</li><li>Etag</li><li>date</li></ul></li><li><p>自定义 header</p></li><li><p>缓存相关的 headers</p><ul><li>Cache-Control Expires</li><li>Last-Modified If-Modified-Since</li><li>Etag If-None-Match</li></ul></li></ul><h2 id="TCP-协议如何保证传输的可靠性"><a href="#TCP-协议如何保证传输的可靠性" class="headerlink" title="TCP 协议如何保证传输的可靠性"></a>TCP 协议如何保证传输的可靠性</h2><ul><li>校验和</li><li>确认应答 + 序列号</li><li>超时重传</li><li>流浪控制</li><li>拥塞控制</li><li>TCP 的连接管理</li><li>滑动窗口</li></ul><h2 id="http-和-https-的区别-1"><a href="#http-和-https-的区别-1" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><ul><li>http 是一种一种广泛使用的网络协议，是一个客户端和服务器请求和应答的标准。</li><li>http 工作在 TCP 协议的 80 端口，https 工作在 TCP 协议的 443 端口</li><li>http 协议运行在 TCP 协议之上，所有的传输内容都是明文，https 运行在 SSL/TLS 之上，<br>SSL/TLS 运行在 TCP 之上，所有的传输内容都是经过加密的。</li><li>https 是以安全为目标的 http 通道，是 http 的安全版。是 http 加上 SSL 层对传输的信息和 url 做了一些加密处理，更加安全</li></ul><h2 id="为什么-https-不会被截取信息"><a href="#为什么-https-不会被截取信息" class="headerlink" title="为什么 https 不会被截取信息"></a>为什么 https 不会被截取信息</h2><ul><li>完成 TCP 三次同步握手</li><li>客户端验证服务器数字证书，通过，进入步骤 3</li><li>DH 算法协商对称加密算法的密钥、hash 算法的密钥</li><li>SSL 安全加密隧道协商完成</li><li>网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；<br>用协商的 hash 算法进行数据完整性保护，保证数据不被篡改</li></ul><h2 id="如何处理-TCP-的粘包"><a href="#如何处理-TCP-的粘包" class="headerlink" title="如何处理 TCP 的粘包?"></a>如何处理 TCP 的粘包?</h2><p>发生 TCP 粘包或拆包有很多原因，现列出常见的几点：</p><p>要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包。<br>待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。<br>要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包。<br>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p>关键点：如何给每个数据包添加边界信息</p><p>发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</p><p>发送端将每个数据包封装为固定长度（不够的可以通过补 0 填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</p><p>可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p><h2 id="请说说-HTTPS-的握手过程？"><a href="#请说说-HTTPS-的握手过程？" class="headerlink" title="请说说 HTTPS 的握手过程？"></a>请说说 HTTPS 的握手过程？</h2><p>HTTPS 的握手过程主要包括以下步骤：</p><p>客户端向服务端发送一个加密过的客户端随机数和客户端支持的加密算法列表，同时请求建立 SSL/TLS 连接。</p><p>服务端在接收到请求后，向客户端发送一个包含服务端随机数、服务器支持的加密算法列表以及服务器的数字证书的报文。</p><p>客户端在接收到服务器的响应后，会对证书进行校验。如果证书被认为是合法的，那么客户端将使用证书中包含的公钥对一个随机数进行加密，并将加密后的随机数发送给服务端。</p><p>服务端在接收到客户端的响应后，使用私钥对加密的随机数进行解密，得到客户端生成的随机数。同时，服务端也会生成一个加密的会话密钥，并使用客户端和服务端的随机数以及协商出的加密算法对该密钥进行加密，最后将加密后的密钥发送给客户端。</p><p>客户端接收到服务端发送的加密的会话密钥后，使用服务端公布的公钥进行解密，得到原始的会话密钥。</p><p>客户端和服务端都会使用会话密钥进行加密和解密，从而实现安全的通信。</p><p>这个过程中，客户端和服务端会进行多次来回的通信，以建立安全的 SSL/TLS 连接。其中数字证书的校验和会话密钥的生成都是关键步骤，它们保证了通信的安全性。</p><h2 id="请说说什么是数字证书？它有什么作用"><a href="#请说说什么是数字证书？它有什么作用" class="headerlink" title="请说说什么是数字证书？它有什么作用?"></a>请说说什么是数字证书？它有什么作用?</h2><ul><li><p>数字证书是一种加密技术，用于验证在线交互中的身份和信息安全性。它是由可信任的第三方机构（例如数字证书颁发机构）颁发的一份电子文档，其中包含了一些加密信息，如公钥、数字签名等。数字证书的作用是确保通信双方的身份和数据的完整性和保密性。</p></li><li><p>在使用数字证书进行加密通信时，服务端会向证书颁发机构申请一份数字证书。数字证书包含了服务端的公钥，以及一些描述服务端身份的信息，例如域名、组织名称等。客户端在与服务端建立连接时，会向服务端请求数字证书，并验证证书的真实性和合法性。如果验证成功，客户端就可以使用服务端的公钥加密数据并发送给服务端了。同时，服务端也可以使用客户端的公钥进行数据的加密和验证。这样就可以确保通信过程中的数据不被窃听或篡改。</p></li><li><p>数字证书的使用广泛，特别是在网站安全和电子商务领域。它可以用来验证网站的真实性和合法性，确保网站访问过程中的信息安全。此外，数字证书还可以用于文件签名、电子邮件加密等其他领域。<br>````</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;http-和-https-的区别&quot;&gt;&lt;a href=&quot;#http-和-https-的区别&quot; class=&quot;headerlink&quot; title=&quot;http 和 https 的区别&quot;&gt;&lt;/a&gt;http 和 https 的区别&lt;/h2&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://github.com/foolishmax/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://github.com/foolishmax/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>微前端源码剖析</title>
    <link href="https://github.com/foolishmax/2023/03/22/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%89%96%E6%9E%90/"/>
    <id>https://github.com/foolishmax/2023/03/22/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%89%96%E6%9E%90/</id>
    <published>2023-03-22T03:07:28.000Z</published>
    <updated>2023-04-24T01:41:03.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要微前端？"><a href="#为什么需要微前端？" class="headerlink" title="为什么需要微前端？"></a>为什么需要微前端？</h2><span id="more"></span><ul><li><p>将不同的功能按照不同维度拆分成多个子应用（将子应用打包成一个个 lib），当路径切换时通过主应用来加载这些子应用当路径切换时通过主应用来加载这些子应用当路径切换时通过主应用来加载这些子应用</p></li><li><p>核心：先拆-&gt;后合</p></li></ul><h2 id="微前端解决的问题？"><a href="#微前端解决的问题？" class="headerlink" title="微前端解决的问题？"></a>微前端解决的问题？</h2><ul><li>不同团队（技术栈不同），开发同一个应用</li><li>每个团队开发的模块独立开发，独立部署</li><li>增量迁移</li></ul><h2 id="实现微前端技术方案？"><a href="#实现微前端技术方案？" class="headerlink" title="实现微前端技术方案？"></a>实现微前端技术方案？</h2><ul><li><p>实现微前端考虑要点</p><ul><li>如何进行应用拆分</li><li>如何进行应用通信</li><li>如何进行应用隔离</li></ul></li><li><p>技术方案</p><ul><li><p>iframe</p><ul><li>通过 postMessage 通信</li><li>自带的沙箱机制可以进行应用隔离</li><li>缺点：用户体验差，弹框只能在 iframe 中、内部刷新切换状态丢失等</li></ul></li><li><p>Web Components</p><ul><li>将前端应用程序分解为自定义 html 元素</li><li>通过 CustomEvent 通信</li><li>Shadow DOM 天生的作用域隔离</li><li>缺点：兼容问题、学习成本、调试困难</li></ul></li><li><p>single-spa</p><ul><li>通过路由劫持，采用 SystemJS，子应用暴露固定钩子 bootstrap、mount、unmount 接入协议</li><li>基于 props 进行通信</li><li>无沙箱机制，需要自己实现 JS 沙箱和 CSS 沙箱</li><li>缺点：学习成本、无沙箱机制、应用改造、资源重复加载问题</li></ul></li><li><p>Module federation</p><ul><li>通过模块联邦将组件打包导出</li><li>共享模块通信</li><li>无 CSS 沙箱和 JS 沙箱</li><li>缺点：需要 webpack5</li><li>百度 EMP</li></ul></li></ul></li></ul><h2 id="微前端框架"><a href="#微前端框架" class="headerlink" title="微前端框架"></a>微前端框架</h2><ul><li><p>qiankun(基于 single-spa)</p><ul><li>沙箱（sandbox、快照、window.proxy）</li><li>样式隔离（shadowDom、scopedCss）</li></ul></li><li><p>micro-app（基于 webComponent）</p><ul><li>webComponent<ul><li>允许用户自定义一个元素，名字随便起</li><li>shadowDom 样式隔离是 webComponent 的一部分</li><li>支持组件的模版、插槽、生命周期、属性等</li></ul></li></ul></li></ul><h2 id="简易版-single-spa-源码实现"><a href="#简易版-single-spa-源码实现" class="headerlink" title="简易版 single-spa 源码实现"></a>简易版 single-spa 源码实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;go(&#x27;#/a&#x27;)&quot;</span>&gt;</span>a应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;go(&#x27;#/b&#x27;)&quot;</span>&gt;</span>b应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- navigation-event.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对用户的路径切换 进行劫持，劫持后，重新调用reroute方法，进行计算应用的加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">urlRoute</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>(<span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, urlRoute);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, urlRoute); <span class="comment">// 浏览器历史切换的时候会执行此方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 但是当路由切换的时候 我们触发single-spa的addEventLister, 应用中可能也包含addEventLister</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需要劫持原生的路由系统，保证当我们加载完后再切换路由</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> capturedEventListeners = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hashchange</span>: [],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">popstate</span>: [],</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> listentingTo = [<span class="string">&#x27;hashchange&#x27;</span>, <span class="string">&#x27;popstate&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> originalAddEventListener = <span class="variable language_">window</span>.<span class="property">addEventListener</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> originalRemoveEventListener = <span class="variable language_">window</span>.<span class="property">removeEventListener</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">addEventListener</span> = <span class="keyword">function</span> (<span class="params">eventName, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 有要监听的事件， 函数不能重复</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">          listentingTo.<span class="title function_">includes</span>(eventName) &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          !capturedEventListeners[eventName].<span class="title function_">some</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">(<span class="params">listener</span>) =&gt;</span> listener === callback</span></span><br><span class="line"><span class="language-javascript">          )</span></span><br><span class="line"><span class="language-javascript">        ) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> capturedEventListeners[eventName].<span class="title function_">push</span>(callback);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> originalAddEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">removeEventListener</span> = <span class="keyword">function</span> (<span class="params">eventName, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 有要监听的事件， 函数不能重复</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (listentingTo.<span class="title function_">includes</span>(eventName)) &#123;</span></span><br><span class="line"><span class="language-javascript">          capturedEventListeners[eventName] = capturedEventListeners[</span></span><br><span class="line"><span class="language-javascript">            eventName</span></span><br><span class="line"><span class="language-javascript">          ].<span class="title function_">filter</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn !== callback);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> originalRemoveEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">callCaptureEventListeners</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> eventType = e[<span class="number">0</span>].<span class="property">type</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (listentingTo.<span class="title function_">includes</span>(eventType)) &#123;</span></span><br><span class="line"><span class="language-javascript">            capturedEventListeners[eventType].<span class="title function_">forEach</span>(<span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              listener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, e);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">patchFn</span>(<span class="params">updateState, methodName</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> urlBefore = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> r = updateState.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 调用此方法 确实发生了路径的变化</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> urlAfter = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (urlBefore !== urlAfter) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 手动派发popstate事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">PopStateEvent</span>(<span class="string">&#x27;popstate&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> r;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span> = <span class="title function_">patchFn</span>(<span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span>, <span class="string">&#x27;pushState&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span> = <span class="title function_">patchFn</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;replaceState&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- app.helpers.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// app status</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_LOADED</span> = <span class="string">&#x27;NOT_LOADED&#x27;</span>; <span class="comment">// 没有被加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">LOADING_SOURCE_CODE</span> = <span class="string">&#x27;LOADING_SOURCE_CODE&#x27;</span>; <span class="comment">// 路径匹配了 要去加载这个资源</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">LOAD_ERROR</span> = <span class="string">&#x27;LOAD_ERROR&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 启动的过程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_BOOTSTRAPED</span> = <span class="string">&#x27;NOT_BOOTSTRAPED&#x27;</span>; <span class="comment">// 资源加载完毕了 需要启动，此时还没有启动</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">BOOTSTRAPING</span> = <span class="string">&#x27;BOOTSTRAPING&#x27;</span>; <span class="comment">// 启动中</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_MOUNTED</span> = <span class="string">&#x27;NOT_MOUNTED&#x27;</span>; <span class="comment">// 没有被挂载</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 挂载流程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">MOUNTING</span> = <span class="string">&#x27;MOUNTING&#x27;</span>; <span class="comment">// 正在挂载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">MOUNTED</span> = <span class="string">&#x27;MOUNTED&#x27;</span>; <span class="comment">// 挂载完成</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载流程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">UNMOUNTING</span> = <span class="string">&#x27;UNMOUNTING&#x27;</span>; <span class="comment">// 卸载中</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 加载正在下载应用 LOADING_SOURCE_CODE，激活已经运行了</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 看一下这个应用是否正在被激活</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">isActive</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> app.<span class="property">status</span> === <span class="variable constant_">MOUNTED</span>; <span class="comment">// 此应用正在被激活</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 看一下此应用是否被激活</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">shouldBeActive</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> app.<span class="title function_">activeWhen</span>(<span class="variable language_">window</span>.<span class="property">location</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">getAppChanges</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToLoad = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToMount = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToUnmount = [];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        apps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> appShouldBeActive = <span class="title function_">shouldBeActive</span>(app);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">switch</span> (app.<span class="property">status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_LOADED</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">LOADING_SOURCE_CODE</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 1） 标记当前路径下 哪些应用要被加载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToLoad.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_BOOTSTRAPED</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">BOOTSTRAPING</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_MOUNTED</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 2) 当前路径下 哪些应用要被挂在</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToMount.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">MOUNTED</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 3） 当前路径下 哪些应用要被卸载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (!appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToUnmount.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123; appsToLoad, appsToMount, appsToUnmount &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lifecycles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// load</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">flattenArrayToPromise</span>(<span class="params">fns</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        fns = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(fns) ? fns : [fns];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// redux</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> fns.<span class="title function_">reduce</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">(<span class="params">rPromise, fn</span>) =&gt;</span> rPromise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">fn</span>(props)),</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toLoadPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_LOADED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此应用加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">LOADING_SOURCE_CODE</span>; <span class="comment">// 正在加载应用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// loadApp 对于之前的内容 System.import()</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">loadApp</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123; bootstrap, mount, unmount &#125; = v;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_BOOTSTRAPED</span>;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">bootstrap</span> = <span class="title function_">flattenArrayToPromise</span>(bootstrap);</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">mount</span> = <span class="title function_">flattenArrayToPromise</span>(mount);</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">unmount</span> = <span class="title function_">flattenArrayToPromise</span>(unmount);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// mount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toMountPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_MOUNTED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">mount</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// unmount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toUnmountPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">MOUNTED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">UNMOUNTING</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// app.unmount 方法用户可能写的是一个数组。。。。。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">unmount</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// bootstrap</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toBootstrapPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_BOOTSTRAPED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此应用加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">BOOTSTRAPING</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">bootstrap</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- reroute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 后续路径变化 也需要走这里， 重新计算哪些应用被加载或者写在</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> appChangeUnderWay = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> peopleWaitingOnAppChange = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">reroute</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果多次触发reroute 方法我们可以创造一个队列来屏蔽这个问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (appChangeUnderWay) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            peopleWaitingOnAppChange.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              resolve,</span></span><br><span class="line"><span class="language-javascript">              reject,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取app对应的状态 进行分类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; appsToLoad, appsToMount, appsToUnmount &#125; = <span class="title function_">getAppChanges</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 加载完毕后 需要去挂载的应用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (started) &#123;</span></span><br><span class="line"><span class="language-javascript">          appChangeUnderWay = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 用户调用了start方法 我们需要处理当前应用要挂载或者卸载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title function_">performAppChange</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 先拿到应用去加载  -》</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">loadApps</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">loadApps</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 应用的加载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(appsToLoad.<span class="title function_">map</span>(toLoadPromise)).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            callEventListener</span></span><br><span class="line"><span class="language-javascript">          ); <span class="comment">// 目前我们没有调用start</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">performAppChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 将不需要的应用卸载掉, 返回一个卸载的promise</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1) 稍后测试销毁逻辑</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> unmountAllPromises = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToUnmount.<span class="title function_">map</span>(toUnmountPromise)</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 流程加载需要的应用  -》 启动对应的应用 -》 卸载之前的 -》 挂载对应的应用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 2) 加载需要的应用（可能这个应用在注册的时候已经被加载了）</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 默认情况注册的时候 路径是 /a , 但是当我们start的时候应用是/b</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> loadMountPromises = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToLoad.<span class="title function_">map</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">toLoadPromise</span>(app).<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当应用加载完毕后 需要启动和挂载，但是要保证挂载前 先卸载掉来的应用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">tryBootstrapAndMount</span>(app, unmountAllPromises);</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果应用 没有加载   加载 -》启动挂载   如果应用已经加载过了  挂载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> <span class="title class_">MountPromises</span> = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToMount.<span class="title function_">map</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">tryBootstrapAndMount</span>(app, unmountAllPromises)</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">function</span> <span class="title function_">tryBootstrapAndMount</span>(<span class="params">app, unmountAllPromises</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title function_">shouldBeActive</span>(app)) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 保证卸载完毕在挂载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="title function_">toBootstrapPromise</span>(app).<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">                unmountAllPromises.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">toMountPromise</span>(app))</span></span><br><span class="line"><span class="language-javascript">              );</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([loadMountPromises, <span class="title class_">MountPromises</span>]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 卸载完毕后</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">callEventListener</span>();</span></span><br><span class="line"><span class="language-javascript">            appChangeUnderWay = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (peopleWaitingOnAppChange.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              peopleWaitingOnAppChange = []; <span class="comment">// 多次操作 我缓存起来，。。。。</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">callEventListener</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">callCaptureEventListeners</span>(event);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- registerApplication --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> apps = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">registerApplication</span>(<span class="params">appName, loadApp, activeWhen, customProps</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> registeration = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: appName,</span></span><br><span class="line"><span class="language-javascript">          loadApp,</span></span><br><span class="line"><span class="language-javascript">          activeWhen,</span></span><br><span class="line"><span class="language-javascript">          customProps,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">status</span>: <span class="variable constant_">NOT_LOADED</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        apps.<span class="title function_">push</span>(registeration);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>(); <span class="comment">// 重写路由</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> started = <span class="literal">false</span>; <span class="comment">// 默认没有调用start方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        started = <span class="literal">true</span>; <span class="comment">// 用户启动了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 入口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app1 = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bootstrap</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 bootstrap1&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 bootstrap2&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mount</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> (props) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 mount1&#x27;</span>, props);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 mount2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unmount</span>: <span class="keyword">async</span> (props) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 unmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app2 = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bootstrap</span>: <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 bootstrap1&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mount</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reejct</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 mount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unmount</span>: <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 unmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">registerApplication</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> () =&gt; app1,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;#/a&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">registerApplication</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> () =&gt; app2,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;#/b&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 开启路径的监控，路径切换的时候 可以调用对应的mount unmount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">start</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个监控操作 应该被延迟到 当应用挂挂载完毕后再行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>, <span class="string">&#x27;p----&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用户调用pushState replaceState 此方法不会触发逻辑reroute</span></span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="literal">null</span>, url);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么需要微前端？&quot;&gt;&lt;a href=&quot;#为什么需要微前端？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要微前端？&quot;&gt;&lt;/a&gt;为什么需要微前端？&lt;/h2&gt;</summary>
    
    
    
    <category term="微前端" scheme="https://github.com/foolishmax/categories/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="微前端" scheme="https://github.com/foolishmax/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue响应式系统实现</title>
    <link href="https://github.com/foolishmax/2022/08/07/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/foolishmax/2022/08/07/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-08-07T03:52:47.000Z</published>
    <updated>2022-08-24T10:36:11.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bucket = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="comment">// 用一个全局变量存储当前激活的effect函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">// effect栈</span></span><br><span class="line"><span class="keyword">const</span> effectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn, options = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">effectFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用cleanup函数完成清除工作</span></span><br><span class="line">    <span class="title function_">cleanup</span>(effectFn);</span><br><span class="line">    <span class="comment">// 当调用effect注册副作用函数时，将副作用函数赋值给activeEffect</span></span><br><span class="line">    activeEffect = effectFn;</span><br><span class="line">    <span class="comment">// 调用副作用函数之前将当前副作用函数压入栈顶</span></span><br><span class="line">    effectStack.<span class="title function_">push</span>(effectFn);</span><br><span class="line">    <span class="comment">// 把fn的执行结果存储在res中</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">fn</span>();</span><br><span class="line">    <span class="comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并将activeEffect还原为之前的值</span></span><br><span class="line">    effectStack.<span class="title function_">pop</span>();</span><br><span class="line">    activeEffect = effectStack[effectStack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 将options挂载到effectFn上</span></span><br><span class="line">  effectFn.<span class="property">options</span> = options;</span><br><span class="line">  <span class="comment">// 用来存储所有与该副作用函数相关的依赖集合</span></span><br><span class="line">  effectFn.<span class="property">deps</span> = [];</span><br><span class="line">  <span class="comment">// 只有非lazy的时候，才执行</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="title function_">effectFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">getter</span>) &#123;</span><br><span class="line">  <span class="comment">// 用来缓存上一次计算的值</span></span><br><span class="line">  <span class="keyword">let</span> value;</span><br><span class="line">  <span class="comment">// dirty标志，用来识别是否需要重新计算值，为true时则意味着“脏”，需要计算</span></span><br><span class="line">  <span class="keyword">let</span> dirty = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> effectFn = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">scheduler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dirty) &#123;</span><br><span class="line">        dirty = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应</span></span><br><span class="line">        <span class="title function_">trigger</span>(obj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (dirty) &#123;</span><br><span class="line">        value = <span class="title function_">effectFn</span>();</span><br><span class="line">        dirty = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 当读取value时，手动调用track函数进行追踪</span></span><br><span class="line">      <span class="title function_">track</span>(obj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">source, cb, options = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">// 如果是函数，说明用户传递的不再是一个响应式数据，而是一个getter函数，直接把source赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则调用traverse递归读取响应式数据属性</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(source);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">// cleanup用来存储用户注册的国旗回调</span></span><br><span class="line">  <span class="keyword">let</span> cleanup;</span><br><span class="line">  <span class="comment">// 定义onInvalidate函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onInvalidate</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 将过期回调存储到cleanup中</span></span><br><span class="line">    cleanup = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提取调度器scheduler为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">job</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在scheduler中重新执行副作用函数，得到的是新值</span></span><br><span class="line">    newValue = <span class="title function_">effectFn</span>();</span><br><span class="line">    <span class="comment">// 在调用糊掉函数cb之前，先调用过期回调</span></span><br><span class="line">    <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">      <span class="title function_">cleanup</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将旧值和新值作为回调函数的参数</span></span><br><span class="line">    <span class="title function_">cb</span>(newValue, oldValue);</span><br><span class="line">    <span class="comment">// 更新旧值，不然下次会得到错误的旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 使用effect注册副作用函数时，开启lazy选项，并把返回值存储到effectFn中一边后续手动调用</span></span><br><span class="line">  <span class="keyword">const</span> effectFn = <span class="title function_">effect</span>(<span class="function">() =&gt;</span> <span class="title function_">getter</span>(), &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">scheduler</span>: job,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">immediate</span>) &#123;</span><br><span class="line">    <span class="comment">// 当immediate为true时立即执行job，从而触发回调执行</span></span><br><span class="line">    <span class="title function_">job</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 手动调用副作用函数，拿到的值就是旧值</span></span><br><span class="line">    oldValue = <span class="title function_">effectFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">value, seen = <span class="keyword">new</span> <span class="built_in">Set</span>()</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果要读取的数据是原始值，或者已经被读取过了，那么什么都不做</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&quot;object&quot;</span> || value === <span class="literal">null</span> || seen.<span class="title function_">has</span>(value)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 将数据添加到seen中，代表便利地读取过了，避免循环引用引起的死循环</span></span><br><span class="line">  seen.<span class="title function_">add</span>(value);</span><br><span class="line">  <span class="comment">// 暂时不考虑数组等其他结构</span></span><br><span class="line">  <span class="comment">// 假设value是一个对象，使用for...in读取对新啊个的每一个值，并递归调用traverse进行处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">    <span class="title function_">traverse</span>(value[k], seen);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params">effectFn</span>) &#123;</span><br><span class="line">  <span class="comment">// 遍历effectFn.deps数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; effectFn.<span class="property">deps</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// deps是依赖集合</span></span><br><span class="line">    <span class="keyword">const</span> deps = effectFn.<span class="property">deps</span>[i];</span><br><span class="line">    <span class="comment">// 将effectFn从依赖集合中移除</span></span><br><span class="line">    deps.<span class="title function_">delete</span>(effectFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后需要重置effectFn.deps数组</span></span><br><span class="line">  effectFn.<span class="property">deps</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在get拦截函数内调用track函数追踪变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 没有activeEffect，直接return</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span> target[key];</span><br><span class="line">  <span class="comment">// 根据target从“桶”中取得depsMap，也是一个Map类型：key --&gt; effects</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = bucket.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="comment">// 如果不存在depsMap，新建一个Map并与target关联</span></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    bucket.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据key从depsMap中取得deps，它是一个Set类型，</span></span><br><span class="line">  <span class="comment">// 里面存储着所有与当前key相关联的副作用函数：effects</span></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, (deps = <span class="keyword">new</span> <span class="title class_">Set</span>()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后将当前激活的副作用函数添加到“桶”中</span></span><br><span class="line">  deps.<span class="title function_">add</span>(activeEffect);</span><br><span class="line">  <span class="comment">// deps就是一个与当前副作用函数存在联系的依赖集合</span></span><br><span class="line">  <span class="comment">// 将其添加到activeEffect.deps数组中</span></span><br><span class="line">  activeEffect.<span class="property">deps</span>.<span class="title function_">push</span>(deps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在set函数拦截内调用trigger函数出发变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 根据target从桶中取出depsMap，它是 key --&gt; effects</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = bucket.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 根据key取得所有副作用函数effects</span></span><br><span class="line">  <span class="keyword">const</span> effects = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line">  <span class="comment">// 在调用forEach遍历Set集合时，如果一个值已经被访问过了，</span></span><br><span class="line">  <span class="comment">// 但该值被删除并重新添加集合，如果此时forEach遍历还没结束</span></span><br><span class="line">  <span class="comment">// 该值会重新被访问，就会导致无限循环执行。</span></span><br><span class="line">  <span class="comment">// 解决方法：构造另一个Set集合遍历它</span></span><br><span class="line">  <span class="keyword">const</span> effectsToRun = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="comment">// 执行副作用函数</span></span><br><span class="line">  effects &amp;&amp;</span><br><span class="line">    effects.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果trigger触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行</span></span><br><span class="line">      <span class="keyword">if</span> (effectFn !== activeEffect) &#123;</span><br><span class="line">        effectsToRun.<span class="title function_">add</span>(effectFn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  effectsToRun.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果一个副作用函数存在调度器，则调用该调度器，并将副作用函数作为参数传递</span></span><br><span class="line">    <span class="keyword">if</span> (effectFn.<span class="property">options</span>.<span class="property">scheduler</span>) &#123;</span><br><span class="line">      effectFn.<span class="property">options</span>.<span class="title function_">scheduler</span>(effectFn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则直接执行副作用函数</span></span><br><span class="line">      <span class="title function_">effectFn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>, <span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="comment">// 拦截读取操作</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="comment">// 将副作用函数activeEffect添加到存储副作用函数的桶中</span></span><br><span class="line">    <span class="title function_">track</span>(target, key);</span><br><span class="line">    <span class="comment">// 返回属性值</span></span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截设置操作</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置属性值</span></span><br><span class="line">    target[key] = newVal;</span><br><span class="line">    <span class="comment">// 把副作用函数从桶中取出并执行</span></span><br><span class="line">    <span class="title function_">trigger</span>(target, key);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp1, temp2;</span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">foo</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">obj.<span class="property">foo</span>++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="comment">// const sum = computed(() =&gt; obj.foo + obj.bar);</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(sum.value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.foo++;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lazy</span></span><br><span class="line"><span class="comment">// const effectFn = effect(</span></span><br><span class="line"><span class="comment">//   () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(obj.text);</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     lazy: true,</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="comment">// effectFn();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的effect与effect栈</span></span><br><span class="line"><span class="comment">// effect(function effectFn1() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;effectFn1 执行&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   effect(function effectFn2() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;effectFn2 执行&quot;);</span></span><br><span class="line"><span class="comment">//     temp2 = obj.ok;</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   temp1 = obj.text;</span></span><br><span class="line"><span class="comment">//   obj.text += &quot;1&quot;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分支切换与cleanup</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;effect run&#x27;);</span></span><br><span class="line"><span class="comment">//   document.body.innerText =  obj.ok ? obj.text : &quot;not&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   obj.text = &#x27;foolishmax&#x27;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不存在的属性不添加响应式</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   obj.text = &quot;hello vue3&quot;;</span></span><br><span class="line"><span class="comment">//   // obj.notExist = &#x27;hello vue3&#x27;</span></span><br><span class="line"><span class="comment">// &#125;, 3000);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;源码实现&quot;&gt;&lt;a href=&quot;#源码实现&quot; class=&quot;headerlink&quot; title=&quot;源码实现&quot;&gt;&lt;/a&gt;源码实现&lt;/h2&gt;</summary>
    
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://github.com/foolishmax/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>实现精简版useSize</title>
    <link href="https://github.com/foolishmax/2022/08/04/%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%AE%80%E7%89%88useSize/"/>
    <id>https://github.com/foolishmax/2022/08/04/%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%AE%80%E7%89%88useSize/</id>
    <published>2022-08-04T03:22:47.000Z</published>
    <updated>2022-08-04T03:30:24.654Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ahooks.gitee.io/">ahooks</a>是阿里开源的一套 React Hooks 库，里面封装了大量好用的 Hooks，最近也在项目中频繁使用到了库中<a href="https://ahooks.gitee.io/hooks/use-size">useSize</a>这个钩子函数，于是就学习了一下它的源码实现，并且实现了一个精简版<strong>useSize</strong>。</p><span id="more"></span><p>要点一：<strong>ResizeObserver</strong>监听 Element 内容区域的边界框改变</p><p>要点二：<strong>requestAnimationFrame</strong>优化高频刷新情况下的数据更新</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">MutableRefObject</span>,</span><br><span class="line">  useCallback,</span><br><span class="line">  useEffect,</span><br><span class="line">  useLayoutEffect,</span><br><span class="line">  useRef,</span><br><span class="line">  useState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TargetValue</span>&lt;T&gt; = T | <span class="literal">undefined</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TargetType</span> = <span class="title class_">HTMLElement</span> | <span class="title class_">Element</span> | <span class="title class_">Window</span> | <span class="title class_">Document</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">BasicTarget</span>&lt;T <span class="keyword">extends</span> <span class="title class_">TargetType</span> = <span class="title class_">Element</span>&gt; =</span><br><span class="line">  | (<span class="function">() =&gt;</span> <span class="title class_">TargetValue</span>&lt;T&gt;)</span><br><span class="line">  | <span class="title class_">TargetValue</span>&lt;T&gt;</span><br><span class="line">  | <span class="title class_">MutableRefObject</span>&lt;<span class="title class_">TargetValue</span>&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Size</span> = &#123; <span class="attr">width</span>: <span class="built_in">number</span>; <span class="attr">height</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useSize</span>(<span class="params">target: BasicTarget</span>): <span class="title class_">Size</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState&lt;<span class="title class_">Size</span> | <span class="literal">undefined</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [resizeObserver, setResizeObserver] = useState&lt;<span class="title class_">ResizeObserver</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> setRafState = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">value: Size | ((prevState?: Size) =&gt; Size)</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(ref.<span class="property">current</span>);</span><br><span class="line"></span><br><span class="line">      ref.<span class="property">current</span> = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setState</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resizeObserver?.<span class="title function_">disconnect</span>();</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(ref.<span class="property">current</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">targetEl</span>: <span class="title class_">TargetValue</span>&lt;<span class="title class_">TargetType</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;current&quot;</span> <span class="keyword">in</span> target) &#123;</span><br><span class="line">      targetEl = target.<span class="property">current</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      targetEl = <span class="title function_">target</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      targetEl = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!targetEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resizeObserver = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; clientWidth, clientHeight &#125; = entry.<span class="property">target</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">setRafState</span>(&#123;</span><br><span class="line">          <span class="attr">width</span>: clientWidth,</span><br><span class="line">          <span class="attr">height</span>: clientHeight,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setResizeObserver</span>(resizeObserver);</span><br><span class="line"></span><br><span class="line">    resizeObserver?.<span class="title function_">observe</span>(targetEl);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> size = <span class="title function_">useSize</span>(ref);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">red</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to resize the preview window <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        width: &#123;size?.width&#125;px, height: &#123;size?.height&#125;px</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅作为自己的学习积累，有什么需要改进的地方请大家多多批评指点 😅！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ahooks.gitee.io/&quot;&gt;ahooks&lt;/a&gt;是阿里开源的一套 React Hooks 库，里面封装了大量好用的 Hooks，最近也在项目中频繁使用到了库中&lt;a href=&quot;https://ahooks.gitee.io/hooks/use-size&quot;&gt;useSize&lt;/a&gt;这个钩子函数，于是就学习了一下它的源码实现，并且实现了一个精简版&lt;strong&gt;useSize&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="react-hooks" scheme="https://github.com/foolishmax/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>aliyun服务器实践</title>
    <link href="https://github.com/foolishmax/2022/08/02/aliyun%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>https://github.com/foolishmax/2022/08/02/aliyun%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-08-02T08:11:31.000Z</published>
    <updated>2022-08-05T02:20:27.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建新的账号"><a href="#创建新的账号" class="headerlink" title="创建新的账号"></a>创建新的账号</h2><p>默认使用 root 登录，由于 root 权限太高，出于安全考虑，创建 foolishmax（自定义）账号</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增账号foolishmax</span></span><br><span class="line">adduser foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改foolishmax的密码</span></span><br><span class="line">passwd foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为foolishmax账号添加sudo权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到文件位置 /etc/sudoers</span></span><br><span class="line">whereis sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u 标识所有者、w 表示写权限 + 表示添加</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 /etc/sudoers</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到 `root ALL=(ALL) ALL`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再加一行 `work ALL=(ALL) ALL`</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原权限</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换foolishmax用户</span></span><br><span class="line">su foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换回root</span></span><br><span class="line">su</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换成功</span></span><br></pre></td></tr></table></figure><h2 id="下载常用工具"><a href="#下载常用工具" class="headerlink" title="下载常用工具"></a>下载常用工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// git</span><br><span class="line">yum -y install git</span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line">// 安装docker</span><br><span class="line">yum -y install docker</span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">// 安装docker-compose</span><br><span class="line">// 1. 下载二进制文件</span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64</span><br><span class="line">// 2.移动文件</span><br><span class="line">mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">// 3.赋予可执行权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">// 4.创建软链</span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">// 5.测试是否安装成功</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p><a href="https://ecs.console.aliyun.com/securityGroupDetail/region/cn-shanghai/groupId/sg-uf6ecwnj4s2zj738k4a8/detail/intranetIngress">aliyun 控制台服务</a></p><h2 id="发布测试机"><a href="#发布测试机" class="headerlink" title="发布测试机"></a>发布测试机</h2><p>思路：</p><ol><li>使用 github actions 监听 dev 分支 push</li><li>登录测试机，获取最新 dev 分支代码</li><li>重建构建镜像 <strong>docker-compose build project-name</strong></li><li>重启所有容器 <strong>docker-compose up -d</strong></li></ol><p>github actions<br>代码在项目 <strong>.github/workflows</strong> 目录下面的 <strong>.yml</strong> 格式文件<br><strong>deplop-dev.yml</strong>示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This workflow will <span class="keyword">do</span> a clean install of node dependencies, build the <span class="built_in">source</span> code and run tests across different versions of node</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github actions 中文文档 https://docs.github.com/cn/actions/getting-started-with-github-actions</span></span><br><span class="line"></span><br><span class="line">name: deploy for dev</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">    push:</span><br><span class="line">        branches:</span><br><span class="line">            - &#x27;dev&#x27; # 只针对 dev 分支</span><br><span class="line">        paths:</span><br><span class="line">            - &#x27;.github/workflows/*&#x27;</span><br><span class="line">            # - &#x27;__test__/**&#x27; # dev 不需要立即测试</span><br><span class="line">            - &#x27;src/**&#x27;</span><br><span class="line">            - &#x27;Dockerfile&#x27;</span><br><span class="line">            - &#x27;docker-compose.yml&#x27;</span><br><span class="line">            - &#x27;bin/*&#x27;</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">    deploy-dev:</span><br><span class="line">        runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">        steps:</span><br><span class="line">            - uses: actions/checkout@v2</span><br><span class="line">            - name: set ssh key # 临时设置 ssh key</span><br><span class="line">              run: |</span><br><span class="line">                  mkdir -p ~/.ssh/</span><br><span class="line">                  echo &quot;$&#123;&#123;secrets.WFP_ID_RSA&#125;&#125;&quot; &gt; ~/.ssh/id_rsa # secret 在这里配置 https://github.com/imooc-lego/biz-editor-server/settings/secrets</span><br><span class="line">                  chmod 600 ~/.ssh/id_rsa</span><br><span class="line">                  ssh-keyscan &quot;182.92.xxx.xxx&quot; &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">            - name: deploy # 部署</span><br><span class="line">              run: |</span><br><span class="line">                  ssh work@182.92.xxx.xxx &quot;</span><br><span class="line">                    # 【注意】用 work 账号登录，手动创建 /home/work/imooc-lego 目录</span><br><span class="line">                    # 然后 git clone https://username:password@github.com/imooc-lego/biz-editor-server.git -b dev （私有仓库，使用 github 用户名和密码）</span><br><span class="line">                    # 记得删除 origin ，否则会暴露 github 密码</span><br><span class="line"></span><br><span class="line">                    cd /home/work/imooc-lego/biz-editor-server;</span><br><span class="line">                    git remote add origin https://wangfupeng1988:$&#123;&#123;secrets.WFP_PASSWORD&#125;&#125;@github.com/imooc-lego/biz-editor-server.git;</span><br><span class="line">                    git checkout dev;</span><br><span class="line">                    git pull origin dev; # 重新下载最新代码</span><br><span class="line">                    git remote remove origin; # 删除 origin ，否则会暴露 github 密码</span><br><span class="line">                    # 启动 docker</span><br><span class="line">                    docker-compose build editor-server; # 和 docker-compose.yml service 名字一致</span><br><span class="line">                    docker-compose up -d;</span><br><span class="line">                  &quot;</span><br><span class="line">            - name: delete ssh key # 删除 ssh key</span><br><span class="line">              run: rm -rf ~/.ssh/id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;创建新的账号&quot;&gt;&lt;a href=&quot;#创建新的账号&quot; class=&quot;headerlink&quot; title=&quot;创建新的账号&quot;&gt;&lt;/a&gt;创建新的账号&lt;/h2&gt;&lt;p&gt;默认使用 root 登录，由于 root 权限太高，出于安全考虑，创建 foolishmax（自定义）账号&lt;/p&gt;</summary>
    
    
    
    
    <category term="aliyun" scheme="https://github.com/foolishmax/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>docker实践指南</title>
    <link href="https://github.com/foolishmax/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/foolishmax/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</id>
    <published>2022-07-31T02:09:12.000Z</published>
    <updated>2023-08-14T08:24:55.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><span id="more"></span><h3 id="获取镜像-docker-pull"><a href="#获取镜像-docker-pull" class="headerlink" title="获取镜像 docker pull"></a>获取镜像 docker pull</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull 从镜像仓库中拉取或者更新指定镜像</span></span><br><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure><h3 id="列出已经下载的镜像-docker-images"><a href="#列出已经下载的镜像-docker-images" class="headerlink" title="列出已经下载的镜像 docker images"></a>列出已经下载的镜像 docker images</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出某一个镜像</span></span><br><span class="line">docker images ubuntu</span><br></pre></td></tr></table></figure><h3 id="删除镜像-docker-rmi"><a href="#删除镜像-docker-rmi" class="headerlink" title="删除镜像 docker rmi"></a>删除镜像 docker rmi</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 501</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">docker rmi centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker prune命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被tag标记或者未被容器使用的镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被容器使用的镜像</span></span><br><span class="line">docker image prune -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有停止运行的容器</span></span><br><span class="line">docker container prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被挂载的卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有网络</span></span><br><span class="line">docker network prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker所有资源</span></span><br><span class="line">docker system prune</span><br></pre></td></tr></table></figure><h3 id="上传镜像-docker-push"><a href="#上传镜像-docker-push" class="headerlink" title="上传镜像 docker push"></a>上传镜像 docker push</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker push:将本地的镜像上传到镜像仓库，先登录镜像仓库</span></span><br><span class="line">docker image push mynode:v1</span><br></pre></td></tr></table></figure><h3 id="save镜像"><a href="#save镜像" class="headerlink" title="save镜像"></a>save镜像</h3><p>docker image save nginx:1.20.0 -o nginx.name</p><h3 id="load镜像"><a href="#load镜像" class="headerlink" title="load镜像"></a>load镜像</h3><p>docker image load -i ./nginx.name</p><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="列出容器-docker-ps"><a href="#列出容器-docker-ps" class="headerlink" title="列出容器 docker ps"></a>列出容器 docker ps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a :显示所有的容器，包括未运行的</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="停止容器-docker-stop"><a href="#停止容器-docker-stop" class="headerlink" title="停止容器 docker stop"></a>停止容器 docker stop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止运行中的容器myrunoob</span></span><br><span class="line">docker stop myrunoob</span><br></pre></td></tr></table></figure><h3 id="启动容器-docker-start"><a href="#启动容器-docker-start" class="headerlink" title="启动容器 docker start"></a>启动容器 docker start</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已被停止的容器myrunoob</span></span><br><span class="line">docker start myrunoob</span><br></pre></td></tr></table></figure><h3 id="重启容器-docker-restart"><a href="#重启容器-docker-restart" class="headerlink" title="重启容器 docker restart"></a>重启容器 docker restart</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器myrunoob</span></span><br><span class="line">docker restart myrunoob</span><br></pre></td></tr></table></figure><h3 id="删除容器-docker-rm"><a href="#删除容器-docker-rm" class="headerlink" title="删除容器 docker rm"></a>删除容器 docker rm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除容器 db01、db02</span></span><br><span class="line">docker rm -f db01 db02</span><br></pre></td></tr></table></figure><h3 id="查看容器信息-docker-inspect"><a href="#查看容器信息-docker-inspect" class="headerlink" title="查看容器信息 docker inspect"></a>查看容器信息 docker inspect</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取容器/镜像的元数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像mysql:5.6的元信息</span></span><br><span class="line">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure><h3 id="查看容器中运行的进程信息"><a href="#查看容器中运行的进程信息" class="headerlink" title="查看容器中运行的进程信息"></a>查看容器中运行的进程信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker contaienr top [id]</span><br></pre></td></tr></table></figure><h3 id="查看容器日志-docker-logs"><a href="#查看容器日志-docker-logs" class="headerlink" title="查看容器日志 docker logs"></a>查看容器日志 docker logs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪查看容器mynginx的日志输出</span></span><br><span class="line">docker logs -f mynginx</span><br></pre></td></tr></table></figure><h3 id="进入容器控制台-docker-exec"><a href="#进入容器控制台-docker-exec" class="headerlink" title="进入容器控制台 docker exec"></a>进入容器控制台 docker exec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在运行的容器中执行命令</span><br><span class="line">// -d:分离模式，在后台运行</span><br><span class="line">// -i: 即使没有附加也保持STDIN打开</span><br><span class="line">// -t: 分配一个伪终端</span><br><span class="line">// docker exec -it &lt;container-id&gt; /bin/sh</span><br><span class="line"></span><br><span class="line">// 执行 exit 退出</span><br></pre></td></tr></table></figure><h2 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h2><!--more--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Docker.app</span><br></pre></td></tr></table></figure><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p>eg1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/echo &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure><p>各个参数解析：</p><ul><li><p>docker：Docker 的二进制执行文件</p></li><li><p>run：与 docker 组合来运行一个容器</p></li><li><p>ubuntu:15.10 指定要运行的景象，docker 先从本地主机查找景象是否存在，如不存在，docker 就会从 <a href="https://hub.docker.com/">Docker hub</a>镜像仓库下载公共镜像</p></li><li><p>/bin/echo ‘hello world’：在启动的容器中执行的命令</p></li></ul><p>注意：</p><ul><li><p>不存在时会出现错误信息： <em>Unable to find image ‘ubuntu:15.10’ locally</em></p></li><li><p>之后便会从镜像仓库下载公共镜像</p></li><li><p>打印 hello world</p></li><li><p>M1-Mac 可能会出现如下警告：<em>WARNING: The requested image’s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested</em></p><ul><li>解决方法：<strong>docker run –platform linux/amd64 ubuntu:15.10 /bin/echo ‘hello world’</strong></li></ul></li></ul><p>eg2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 启动容器 docker run -p xxx:xxx -v=hostPath:containerPath -d --name &lt;container-name&gt; &lt;image-name&gt;</span><br><span class="line">// -p 端口映射</span><br><span class="line">// -v 数据卷，文件映射</span><br><span class="line">// -d 后台运行</span><br><span class="line">// --name 定义容器名称</span><br><span class="line">docker run -p 81:80 -d --name nginx1 nginx</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文件内容包含一条条构建镜像所需的指令和说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Dockerfile</span></span><br><span class="line">FROM node:latest</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line">RUN npm set registry https://registry.npm.taobao.org</span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm install pm2 -g</span><br><span class="line"></span><br><span class="line">CMD echo $SERVER_NAME &amp;&amp; echo $AUTHOR_NAME &amp;&amp; npm run start &amp;&amp; npx npm2 log</span><br><span class="line"></span><br><span class="line">ENV SERVER_NAME = &#x27;react-demo&#x27;</span><br><span class="line">ENV AUTHOR_NAME = &#x27;foolishmax&#x27;</span><br></pre></td></tr></table></figure><h2 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><h2 id="始构建镜像"><a href="#始构建镜像" class="headerlink" title="始构建镜像"></a>始构建镜像</h2><p>在 Dockerfile 文件的存放目录下，执行构建动作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t aaa:ccc .</span><br></pre></td></tr></table></figure><p>-t: 指定要创建的目标镜像名<br>.:Dockerfile文件所在目录，可以指定Dockerfile的绝对路径<br>aaa:镜像名<br>ccc:镜像的标签</p><h2 id="查看镜像分层情况"><a href="#查看镜像分层情况" class="headerlink" title="查看镜像分层情况"></a>查看镜像分层情况</h2><p>docker image history e34293</p><h2 id="docker-images-查看"><a href="#docker-images-查看" class="headerlink" title="docker images 查看"></a>docker images 查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">react-demo-image   latest    35c499bddac6   3 minutes ago   1.22GB</span><br><span class="line">node-test          latest    028a51c6e54d   8 months ago    945MB</span><br><span class="line">nginx              latest    f1325989da19   8 months ago    134MB</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8081:3000 -d --name react-demo-server react-demo-image</span><br></pre></td></tr></table></figure><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE              COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class="line">f71ef1480035   react-demo-image   &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 3 seconds   0.0.0.0:8081-&gt;3000/tcp   react-demo-server</span><br></pre></td></tr></table></figure><h2 id="contaier保存为镜像"><a href="#contaier保存为镜像" class="headerlink" title="contaier保存为镜像"></a>contaier保存为镜像</h2><p>docker container commit 884 hello/nginx</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>docker logs f71ef1480035</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 这两行对应Dockerfile中的CMD变量打印</span><br><span class="line">= react-demo</span><br><span class="line">= foolishmax</span><br><span class="line"></span><br><span class="line">&gt; react-demo@0.1.0 start</span><br><span class="line">&gt; react-scripts start</span><br><span class="line"></span><br><span class="line">(node:27) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: &#x27;onAfterSetupMiddleware&#x27; option is deprecated. Please use the &#x27;setupMiddlewares&#x27; option.</span><br><span class="line">(Use `node --trace-deprecation ...` to show where the warning was created)</span><br><span class="line">(node:27) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: &#x27;onBeforeSetupMiddleware&#x27; option is deprecated. Please use the &#x27;setupMiddlewares&#x27; option.</span><br><span class="line">Starting the development server...</span><br><span class="line"></span><br><span class="line">Compiled successfully!</span><br><span class="line"></span><br><span class="line">You can now view react-demo in the browser.</span><br><span class="line"></span><br><span class="line">  Local:            http://localhost:3000</span><br><span class="line">  On Your Network:  http://172.17.0.2:3000</span><br><span class="line"></span><br><span class="line">Note that the development build is not optimized.</span><br><span class="line">To create a production build, use npm run build.</span><br><span class="line"></span><br><span class="line">webpack compiled successfully</span><br><span class="line">Compiling...</span><br><span class="line">Compiled successfully!</span><br><span class="line">webpack compiled successfully</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>// 列出所有container<br>docker container ps -a<br>// 列出所有container的id<br>docker container ps -aq<br>// 停止所有的container<br>docker container stop $(docker container ps -aq)<br>// 指定某个id停止容器<br>docker stop f71ef1480035</p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>// 删除所有的container<br>docker container rm $(docker container ps -aq)<br>// 指定某个id删除容器<br>docker rm f71ef1480035</p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>docker rmi 35c499bddac6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Untagged: react-demo-image:latest</span><br><span class="line">Deleted: sha256:35c499bddac6675ff20a7d951fc1c1f6770a10430278fec6f2b8d1c866037624</span><br></pre></td></tr></table></figure><h2 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">editor-server:</span> <span class="comment"># service name</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span> <span class="comment">#当前目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment">#  基于Dockerfile构建</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">editor-server</span> <span class="comment">#依赖当前dockerfile创建出来的镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:3000</span> <span class="comment">#宿主机通过8081访问</span></span><br><span class="line">  <span class="attr">editor-redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span> <span class="comment">#引用官方redis镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6378</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">  <span class="attr">editor-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span> <span class="comment"># 引用官网 mysql 镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 出错则重启</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span> <span class="comment"># 高权限，执行下面的 mysql/init</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="comment"># 远程访问</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3305</span><span class="string">:3306</span> <span class="comment"># 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库，和 redis 一样</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.docker-volumes/mysql/log:/var/log/mysql</span> <span class="comment"># 记录日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.docker-volumes/mysql/data:/var/lib/mysql</span> <span class="comment"># 数据持久化</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/init:/docker-entrypoint-initdb.d/</span> <span class="comment"># 初始化 sql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=imooc_lego_course</span> <span class="comment"># 初始化容器时创建数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=Mysql_2019</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">  <span class="attr">editor-mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span> <span class="comment"># 引用官网 mongo 镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.docker-volumes/mongo/data:/data/db&#x27;</span> <span class="comment"># 数据持久化,映射本地文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_DATABASE=imooc_lego_course</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;27016:27017&#x27;</span> <span class="comment"># 宿主机可以用 127.0.0.1:27016 即可连接容器中的数据库</span></span><br></pre></td></tr></table></figure><ul><li>构建容器 docker-compose build <service-name></li><li>启动所有服务器 docker-compose up -d,后台启动</li><li>查看服务 docker-compose ps (相比较 docker ps 等于多了层作用域)</li><li>停止所有服务 docker-compose down</li></ul><p>注意：<br>经过以上操作之后需修改.gitignore 文件，增加一行 <em>.docker-volumes/</em></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;镜像操作&quot;&gt;&lt;a href=&quot;#镜像操作&quot; class=&quot;headerlink&quot; title=&quot;镜像操作&quot;&gt;&lt;/a&gt;镜像操作&lt;/h2&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://github.com/foolishmax/tags/docker/"/>
    
  </entry>
  
</feed>
