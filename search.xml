<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>aliyun服务器实践</title>
    <url>/2022/08/02/aliyun%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="创建新的账号"><a href="#创建新的账号" class="headerlink" title="创建新的账号"></a>创建新的账号</h2><p>默认使用 root 登录，由于 root 权限太高，出于安全考虑，创建 foolishmax（自定义）账号</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增账号foolishmax</span></span><br><span class="line">adduser foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改foolishmax的密码</span></span><br><span class="line">passwd foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为foolishmax账号添加sudo权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到文件位置 /etc/sudoers</span></span><br><span class="line">whereis sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u 标识所有者、w 表示写权限 + 表示添加</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 /etc/sudoers</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到 `root ALL=(ALL) ALL`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再加一行 `work ALL=(ALL) ALL`</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还原权限</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换foolishmax用户</span></span><br><span class="line">su foolishmax</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换回root</span></span><br><span class="line">su</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换成功</span></span><br></pre></td></tr></table></figure>

<h2 id="下载常用工具"><a href="#下载常用工具" class="headerlink" title="下载常用工具"></a>下载常用工具</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// git</span><br><span class="line">yum -y install git</span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line">// 安装docker</span><br><span class="line">yum -y install docker</span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">// 安装docker-compose</span><br><span class="line">// 1. 下载二进制文件</span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64</span><br><span class="line">// 2.移动文件</span><br><span class="line">mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">// 3.赋予可执行权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">// 4.创建软链</span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">// 5.测试是否安装成功</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p><a href="https://ecs.console.aliyun.com/securityGroupDetail/region/cn-shanghai/groupId/sg-uf6ecwnj4s2zj738k4a8/detail/intranetIngress">aliyun 控制台服务</a></p>
<h2 id="发布测试机"><a href="#发布测试机" class="headerlink" title="发布测试机"></a>发布测试机</h2><p>思路：</p>
<ol>
<li>使用 github actions 监听 dev 分支 push</li>
<li>登录测试机，获取最新 dev 分支代码</li>
<li>重建构建镜像 <strong>docker-compose build project-name</strong></li>
<li>重启所有容器 <strong>docker-compose up -d</strong></li>
</ol>
<p>github actions<br>代码在项目 <strong>.github/workflows</strong> 目录下面的 <strong>.yml</strong> 格式文件<br><strong>deplop-dev.yml</strong>示例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This workflow will <span class="keyword">do</span> a clean install of node dependencies, build the <span class="built_in">source</span> code and run tests across different versions of node</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github actions 中文文档 https://docs.github.com/cn/actions/getting-started-with-github-actions</span></span><br><span class="line"></span><br><span class="line">name: deploy for dev</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">    push:</span><br><span class="line">        branches:</span><br><span class="line">            - &#x27;dev&#x27; # 只针对 dev 分支</span><br><span class="line">        paths:</span><br><span class="line">            - &#x27;.github/workflows/*&#x27;</span><br><span class="line">            # - &#x27;__test__/**&#x27; # dev 不需要立即测试</span><br><span class="line">            - &#x27;src/**&#x27;</span><br><span class="line">            - &#x27;Dockerfile&#x27;</span><br><span class="line">            - &#x27;docker-compose.yml&#x27;</span><br><span class="line">            - &#x27;bin/*&#x27;</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">    deploy-dev:</span><br><span class="line">        runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">        steps:</span><br><span class="line">            - uses: actions/checkout@v2</span><br><span class="line">            - name: set ssh key # 临时设置 ssh key</span><br><span class="line">              run: |</span><br><span class="line">                  mkdir -p ~/.ssh/</span><br><span class="line">                  echo &quot;$&#123;&#123;secrets.WFP_ID_RSA&#125;&#125;&quot; &gt; ~/.ssh/id_rsa # secret 在这里配置 https://github.com/imooc-lego/biz-editor-server/settings/secrets</span><br><span class="line">                  chmod 600 ~/.ssh/id_rsa</span><br><span class="line">                  ssh-keyscan &quot;182.92.xxx.xxx&quot; &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">            - name: deploy # 部署</span><br><span class="line">              run: |</span><br><span class="line">                  ssh work@182.92.xxx.xxx &quot;</span><br><span class="line">                    # 【注意】用 work 账号登录，手动创建 /home/work/imooc-lego 目录</span><br><span class="line">                    # 然后 git clone https://username:password@github.com/imooc-lego/biz-editor-server.git -b dev （私有仓库，使用 github 用户名和密码）</span><br><span class="line">                    # 记得删除 origin ，否则会暴露 github 密码</span><br><span class="line"></span><br><span class="line">                    cd /home/work/imooc-lego/biz-editor-server;</span><br><span class="line">                    git remote add origin https://wangfupeng1988:$&#123;&#123;secrets.WFP_PASSWORD&#125;&#125;@github.com/imooc-lego/biz-editor-server.git;</span><br><span class="line">                    git checkout dev;</span><br><span class="line">                    git pull origin dev; # 重新下载最新代码</span><br><span class="line">                    git remote remove origin; # 删除 origin ，否则会暴露 github 密码</span><br><span class="line">                    # 启动 docker</span><br><span class="line">                    docker-compose build editor-server; # 和 docker-compose.yml service 名字一致</span><br><span class="line">                    docker-compose up -d;</span><br><span class="line">                  &quot;</span><br><span class="line">            - name: delete ssh key # 删除 ssh key</span><br><span class="line">              run: rm -rf ~/.ssh/id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>docker实践指南</title>
    <url>/2022/07/31/docker%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><span id="more"></span>

<h3 id="获取镜像-docker-pull"><a href="#获取镜像-docker-pull" class="headerlink" title="获取镜像 docker pull"></a>获取镜像 docker pull</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker pull 从镜像仓库中拉取或者更新指定镜像</span></span><br><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>

<h3 id="列出已经下载的镜像-docker-images"><a href="#列出已经下载的镜像-docker-images" class="headerlink" title="列出已经下载的镜像 docker images"></a>列出已经下载的镜像 docker images</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出某一个镜像</span></span><br><span class="line">docker images ubuntu</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像-docker-rmi"><a href="#删除镜像-docker-rmi" class="headerlink" title="删除镜像 docker rmi"></a>删除镜像 docker rmi</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi 501</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">docker rmi centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker prune命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被tag标记或者未被容器使用的镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被容器使用的镜像</span></span><br><span class="line">docker image prune -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有停止运行的容器</span></span><br><span class="line">docker container prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有未被挂载的卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有网络</span></span><br><span class="line">docker network prune</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker所有资源</span></span><br><span class="line">docker system prune</span><br></pre></td></tr></table></figure>

<h3 id="上传镜像-docker-push"><a href="#上传镜像-docker-push" class="headerlink" title="上传镜像 docker push"></a>上传镜像 docker push</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker push:将本地的镜像上传到镜像仓库，先登录镜像仓库</span></span><br><span class="line">docker image push mynode:v1</span><br></pre></td></tr></table></figure>

<h3 id="save镜像"><a href="#save镜像" class="headerlink" title="save镜像"></a>save镜像</h3><p>docker image save nginx:1.20.0 -o nginx.name</p>
<h3 id="load镜像"><a href="#load镜像" class="headerlink" title="load镜像"></a>load镜像</h3><p>docker image load -i ./nginx.name</p>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="列出容器-docker-ps"><a href="#列出容器-docker-ps" class="headerlink" title="列出容器 docker ps"></a>列出容器 docker ps</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a :显示所有的容器，包括未运行的</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h3 id="停止容器-docker-stop"><a href="#停止容器-docker-stop" class="headerlink" title="停止容器 docker stop"></a>停止容器 docker stop</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止运行中的容器myrunoob</span></span><br><span class="line">docker stop myrunoob</span><br></pre></td></tr></table></figure>

<h3 id="启动容器-docker-start"><a href="#启动容器-docker-start" class="headerlink" title="启动容器 docker start"></a>启动容器 docker start</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已被停止的容器myrunoob</span></span><br><span class="line">docker start myrunoob</span><br></pre></td></tr></table></figure>

<h3 id="重启容器-docker-restart"><a href="#重启容器-docker-restart" class="headerlink" title="重启容器 docker restart"></a>重启容器 docker restart</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器myrunoob</span></span><br><span class="line">docker restart myrunoob</span><br></pre></td></tr></table></figure>

<h3 id="删除容器-docker-rm"><a href="#删除容器-docker-rm" class="headerlink" title="删除容器 docker rm"></a>删除容器 docker rm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除容器 db01、db02</span></span><br><span class="line">docker rm -f db01 db02</span><br></pre></td></tr></table></figure>

<h3 id="查看容器信息-docker-inspect"><a href="#查看容器信息-docker-inspect" class="headerlink" title="查看容器信息 docker inspect"></a>查看容器信息 docker inspect</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取容器/镜像的元数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像mysql:5.6的元信息</span></span><br><span class="line">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure>


<h3 id="查看容器中运行的进程信息"><a href="#查看容器中运行的进程信息" class="headerlink" title="查看容器中运行的进程信息"></a>查看容器中运行的进程信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker contaienr top [id]</span><br></pre></td></tr></table></figure>

<h3 id="查看容器日志-docker-logs"><a href="#查看容器日志-docker-logs" class="headerlink" title="查看容器日志 docker logs"></a>查看容器日志 docker logs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪查看容器mynginx的日志输出</span></span><br><span class="line">docker logs -f mynginx</span><br></pre></td></tr></table></figure>

<h3 id="进入容器控制台-docker-exec"><a href="#进入容器控制台-docker-exec" class="headerlink" title="进入容器控制台 docker exec"></a>进入容器控制台 docker exec</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 在运行的容器中执行命令</span><br><span class="line">// -d:分离模式，在后台运行</span><br><span class="line">// -i: 即使没有附加也保持STDIN打开</span><br><span class="line">// -t: 分配一个伪终端</span><br><span class="line">// docker exec -it &lt;container-id&gt; /bin/sh</span><br><span class="line"></span><br><span class="line">// 执行 exit 退出</span><br></pre></td></tr></table></figure>

<h2 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h2><!--more-->

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open /Applications/Docker.app</span><br></pre></td></tr></table></figure>

<h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p>eg1:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run ubuntu:15.10 /bin/echo &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure>

<p>各个参数解析：</p>
<ul>
<li><p>docker：Docker 的二进制执行文件</p>
</li>
<li><p>run：与 docker 组合来运行一个容器</p>
</li>
<li><p>ubuntu:15.10 指定要运行的景象，docker 先从本地主机查找景象是否存在，如不存在，docker 就会从 <a href="https://hub.docker.com/">Docker hub</a>镜像仓库下载公共镜像</p>
</li>
<li><p>/bin/echo ‘hello world’：在启动的容器中执行的命令</p>
</li>
</ul>
<p>注意：</p>
<ul>
<li><p>不存在时会出现错误信息： <em>Unable to find image ‘ubuntu:15.10’ locally</em></p>
</li>
<li><p>之后便会从镜像仓库下载公共镜像</p>
</li>
<li><p>打印 hello world</p>
</li>
<li><p>M1-Mac 可能会出现如下警告：<em>WARNING: The requested image’s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested</em></p>
<ul>
<li>解决方法：<strong>docker run –platform linux/amd64 ubuntu:15.10 /bin/echo ‘hello world’</strong></li>
</ul>
</li>
</ul>
<p>eg2:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 启动容器 docker run -p xxx:xxx -v=hostPath:containerPath -d --name &lt;container-name&gt; &lt;image-name&gt;</span><br><span class="line">// -p 端口映射</span><br><span class="line">// -v 数据卷，文件映射</span><br><span class="line">// -d 后台运行</span><br><span class="line">// --name 定义容器名称</span><br><span class="line">docker run -p 81:80 -d --name nginx1 nginx</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文件内容包含一条条构建镜像所需的指令和说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Dockerfile</span></span><br><span class="line">FROM node:latest</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line">RUN npm set registry https://registry.npm.taobao.org</span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm install pm2 -g</span><br><span class="line"></span><br><span class="line">CMD echo $SERVER_NAME &amp;&amp; echo $AUTHOR_NAME &amp;&amp; npm run start &amp;&amp; npx npm2 log</span><br><span class="line"></span><br><span class="line">ENV SERVER_NAME = &#x27;react-demo&#x27;</span><br><span class="line">ENV AUTHOR_NAME = &#x27;foolishmax&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure>

<h2 id="始构建镜像"><a href="#始构建镜像" class="headerlink" title="始构建镜像"></a>始构建镜像</h2><p>在 Dockerfile 文件的存放目录下，执行构建动作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t aaa:ccc .</span><br></pre></td></tr></table></figure>

<p>-t: 指定要创建的目标镜像名<br>.:Dockerfile文件所在目录，可以指定Dockerfile的绝对路径<br>aaa:镜像名<br>ccc:镜像的标签</p>
<h2 id="查看镜像分层情况"><a href="#查看镜像分层情况" class="headerlink" title="查看镜像分层情况"></a>查看镜像分层情况</h2><p>docker image history e34293</p>
<h2 id="docker-images-查看"><a href="#docker-images-查看" class="headerlink" title="docker images 查看"></a>docker images 查看</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">react-demo-image   latest    35c499bddac6   3 minutes ago   1.22GB</span><br><span class="line">node-test          latest    028a51c6e54d   8 months ago    945MB</span><br><span class="line">nginx              latest    f1325989da19   8 months ago    134MB</span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8081:3000 -d --name react-demo-server react-demo-image</span><br></pre></td></tr></table></figure>

<h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE              COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class="line">f71ef1480035   react-demo-image   &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 3 seconds   0.0.0.0:8081-&gt;3000/tcp   react-demo-server</span><br></pre></td></tr></table></figure>

<h2 id="contaier保存为镜像"><a href="#contaier保存为镜像" class="headerlink" title="contaier保存为镜像"></a>contaier保存为镜像</h2><p>docker container commit 884 hello/nginx</p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>docker logs f71ef1480035</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这两行对应Dockerfile中的CMD变量打印</span><br><span class="line">= react-demo</span><br><span class="line">= foolishmax</span><br><span class="line"></span><br><span class="line">&gt; react-demo@0.1.0 start</span><br><span class="line">&gt; react-scripts start</span><br><span class="line"></span><br><span class="line">(node:27) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: &#x27;onAfterSetupMiddleware&#x27; option is deprecated. Please use the &#x27;setupMiddlewares&#x27; option.</span><br><span class="line">(Use `node --trace-deprecation ...` to show where the warning was created)</span><br><span class="line">(node:27) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: &#x27;onBeforeSetupMiddleware&#x27; option is deprecated. Please use the &#x27;setupMiddlewares&#x27; option.</span><br><span class="line">Starting the development server...</span><br><span class="line"></span><br><span class="line">Compiled successfully!</span><br><span class="line"></span><br><span class="line">You can now view react-demo in the browser.</span><br><span class="line"></span><br><span class="line">  Local:            http://localhost:3000</span><br><span class="line">  On Your Network:  http://172.17.0.2:3000</span><br><span class="line"></span><br><span class="line">Note that the development build is not optimized.</span><br><span class="line">To create a production build, use npm run build.</span><br><span class="line"></span><br><span class="line">webpack compiled successfully</span><br><span class="line">Compiling...</span><br><span class="line">Compiled successfully!</span><br><span class="line">webpack compiled successfully</span><br></pre></td></tr></table></figure>

<h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>// 列出所有container<br>docker container ps -a<br>// 列出所有container的id<br>docker container ps -aq<br>// 停止所有的container<br>docker container stop $(docker container ps -aq)<br>// 指定某个id停止容器<br>docker stop f71ef1480035</p>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>// 删除所有的container<br>docker container rm $(docker container ps -aq)<br>// 指定某个id删除容器<br>docker rm f71ef1480035</p>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>docker rmi 35c499bddac6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Untagged: react-demo-image:latest</span><br><span class="line">Deleted: sha256:35c499bddac6675ff20a7d951fc1c1f6770a10430278fec6f2b8d1c866037624</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">editor-server:</span> <span class="comment"># service name</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span> <span class="comment">#当前目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment">#  基于Dockerfile构建</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">editor-server</span> <span class="comment">#依赖当前dockerfile创建出来的镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:3000</span> <span class="comment">#宿主机通过8081访问</span></span><br><span class="line">  <span class="attr">editor-redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span> <span class="comment">#引用官方redis镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6378</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">  <span class="attr">editor-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span> <span class="comment"># 引用官网 mysql 镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 出错则重启</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span> <span class="comment"># 高权限，执行下面的 mysql/init</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="comment"># 远程访问</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3305</span><span class="string">:3306</span> <span class="comment"># 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库，和 redis 一样</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.docker-volumes/mysql/log:/var/log/mysql</span> <span class="comment"># 记录日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.docker-volumes/mysql/data:/var/lib/mysql</span> <span class="comment"># 数据持久化</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/init:/docker-entrypoint-initdb.d/</span> <span class="comment"># 初始化 sql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=imooc_lego_course</span> <span class="comment"># 初始化容器时创建数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=Mysql_2019</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">  <span class="attr">editor-mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span> <span class="comment"># 引用官网 mongo 镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">editor-mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.docker-volumes/mongo/data:/data/db&#x27;</span> <span class="comment"># 数据持久化,映射本地文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_DATABASE=imooc_lego_course</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;27016:27017&#x27;</span> <span class="comment"># 宿主机可以用 127.0.0.1:27016 即可连接容器中的数据库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>构建容器 docker-compose build <service-name></li>
<li>启动所有服务器 docker-compose up -d,后台启动</li>
<li>查看服务 docker-compose ps (相比较 docker ps 等于多了层作用域)</li>
<li>停止所有服务 docker-compose down</li>
</ul>
<p>注意：<br>经过以上操作之后需修改.gitignore 文件，增加一行 <em>.docker-volumes/</em></p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dom基本操作</title>
    <url>/2019/08/11/dom%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="一、节点"><a href="#一、节点" class="headerlink" title="一、节点"></a>一、节点</h2><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Node.nodeName //返回节点名称，只读</span><br><span class="line">Node.nodeType //返回节点类型的常数值，只读</span><br><span class="line">Node.nodeValue //返回Text或Comment节点的文本值，只读</span><br><span class="line">Node.textContent //返回当前节点和它的所有后代节点的文本内容，可读写</span><br><span class="line">Node.baseURI //返回当前网页的绝对路径</span><br><span class="line"></span><br><span class="line">Node.ownerDocument //返回当前节点所在的顶层文档对象，即document</span><br><span class="line">Node.nextSibling //返回紧跟在当前节点后面的第一个兄弟节点</span><br><span class="line">Node.previousSibling //返回当前节点前面的、距离最近的一个兄弟节点</span><br><span class="line">Node.parentNode //返回当前节点的父节点</span><br><span class="line">Node.parentElement //返回当前节点的父Element节点</span><br><span class="line">Node.childNodes //返回当前节点的所有子节点</span><br><span class="line">Node.firstChild //返回当前节点的第一个子节点</span><br><span class="line">Node.lastChild //返回当前节点的最后一个子节点</span><br><span class="line"></span><br><span class="line">Node.children //返回当前节点的所有Element子节点</span><br><span class="line">Node.firstElementChild //返回当前节点的第一个Element子节点</span><br><span class="line">Node.lastElementChild //返回当前节点的最后一个Element子节点</span><br><span class="line">Node.childElementCount //返回当前节点所有Element子节点的数目</span><br></pre></td></tr></table></figure>

<!--more-->

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Node.appendChild(node) //向节点添加最后的子节点</span><br><span class="line">Node.hasChildNodes() //返回布尔值，表示当前节点是否有子节点</span><br><span class="line">Node.cloneNode(true) //默认为false(克隆节点),true(克隆节点及其属性，以及后代)</span><br><span class="line">Node.insertBefore(newNode,oldNode) //在指定子节点前插入新的子节点</span><br><span class="line">Node.removeChild(node) //删除节点，在要删除节点的父节点上操作</span><br><span class="line">Node.replaceChild(newChild,oldChild) //替换节点</span><br><span class="line">Node.contains(node) //返回一个布尔值，表示参数节点是否为当前节点的后代节点</span><br><span class="line">Node.compareDocumentPosition(node) //返回一个7个比特位的二进制值，表示参数节点和当前节点的关系</span><br><span class="line">Node.isEqualNode(node) //返回布尔值，用于检查两个节点是否想等，所谓的相等节点，指的的两个节点的类型、属性、子节点都相同</span><br><span class="line">Node.normalize() //用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个</span><br><span class="line"></span><br><span class="line">ChildNode.remove()  //用于删除当前节点</span><br><span class="line">ChildNode.before()  //在ChildNode前插入元素节点或者文本节点</span><br><span class="line">ChildNode.after()  //在ChildNode后插入元素或文本节点</span><br><span class="line">ChildNode.replaceWith()  //替换该节点的父节点下的子节点，可以为文本或元素对象</span><br></pre></td></tr></table></figure>

<h3 id="Document-节点"><a href="#Document-节点" class="headerlink" title="Document 节点"></a>Document 节点</h3><h4 id="Document-节点的属性"><a href="#Document-节点的属性" class="headerlink" title="Document 节点的属性"></a>Document 节点的属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.doctype //返回当前文档关联的文档类型定义(DTD)</span><br><span class="line">document.documentElement //返回当前文档的根节点(html)</span><br><span class="line">document.defaultView //返回document对象所在的window对象</span><br><span class="line">document.body //返回当前文档的&lt;body&gt;节点</span><br><span class="line">document.head //返回当前文档的&lt;head&gt;节点</span><br><span class="line">document.activeElement //返回当前文档中获得焦点的那个元素</span><br><span class="line"></span><br><span class="line">document.links //返回当前文档的所有a元素</span><br><span class="line">document.forms //返回页面中所有表单元素</span><br><span class="line">document.images //返回页面中所有图片元素</span><br><span class="line">document.embeds //返回网页中所有嵌入对象</span><br><span class="line">document.scripts //返回当前文档的所有脚本</span><br><span class="line">document.styleSheets //返回当前网页的所有样式表</span><br><span class="line"></span><br><span class="line">document.documentURI //表示当前文档的网址</span><br><span class="line">document.URI //返回当前文档的网址</span><br><span class="line">document.domain //返回当前文档的域名</span><br><span class="line">document.lastModified //返回当前文档最后修改的时间戳</span><br><span class="line">document.location //返回location对象，提供当前文档的URL信息</span><br><span class="line">document.referrer //返回当前文档的访问来源</span><br><span class="line">document.title //返回当前文档的标题</span><br><span class="line">document.characterSet //属性返回渲染当前文档的字符集，比如UTF-8</span><br><span class="line">document.readyState //返回当前文档的状态</span><br><span class="line">document.designMode //控制当前文档是否可编辑，可读写</span><br><span class="line">document.compatMode //返回浏览器处理文档的模式</span><br><span class="line">document.cookie //用来操作Cookie</span><br></pre></td></tr></table></figure>

<h3 id="Document-节点的方法"><a href="#Document-节点的方法" class="headerlink" title="Document 节点的方法"></a>Document 节点的方法</h3><h4 id="读写方法"><a href="#读写方法" class="headerlink" title="读写方法"></a>读写方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.open() //用于新建并打开一个文档</span><br><span class="line">document.close() //关闭open方法所新建的文档</span><br><span class="line">document.write() //用于向当前文档写入内容</span><br><span class="line">document.writeIn() //用于向当前文档写入内容，尾部添加换行符</span><br></pre></td></tr></table></figure>

<h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.querySelector(selectors) //接收一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点</span><br><span class="line">document.querySelectorAll(selectors) //接收一个CSS选择器作为参数，返回所有匹配该选择器的元素节点</span><br><span class="line">document.getElementsByTagName(tagName) //返回所有指定HTML标签的元素</span><br><span class="line">document.getElementsByClassName(className) //返回包括了所有class名字符合指定条件的元素</span><br><span class="line">document.getElementsByName(name) //用于选择拥有name属性的HTML元素(比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;object&gt;等)</span><br><span class="line">document.getElementById(id) //返回匹配指定id属性的元素节点</span><br><span class="line">document.elementFromPoint(x,y) //返回位于页面指定位置最上层的Element子节点</span><br></pre></td></tr></table></figure>

<h4 id="生成节点"><a href="#生成节点" class="headerlink" title="生成节点"></a>生成节点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.createElement(tagName) //用来生成HTML元素节点</span><br><span class="line">document.createTextNode(text) //用来生成文本节点</span><br><span class="line">document.createAttribute(name) //生成一个新的属性对象节点，并返回</span><br><span class="line">document.createDocumentFragment() //生成一个DocumentFragment对象</span><br></pre></td></tr></table></figure>

<h4 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.createEvent(type) //生成一个事件对象，该对象能被element.dispatchEvent()方法使用</span><br><span class="line">document.addEventListener(type,listener,capture) //注册事件</span><br><span class="line">document.removeEventListener(type,listener,capture) //注销事件</span><br><span class="line">document.dispatchEvent(event) //触发事件</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.hasFocus() //返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点</span><br><span class="line">document.adoptNode(externalNode) //将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点</span><br><span class="line">document.importNode(externalNode,deep) //从外部文档拷贝指定节点，插入当前文档</span><br></pre></td></tr></table></figure>

<h3 id="Element-节点"><a href="#Element-节点" class="headerlink" title="Element 节点"></a>Element 节点</h3><h4 id="Element-节点的属性"><a href="#Element-节点的属性" class="headerlink" title="Element 节点的属性"></a>Element 节点的属性</h4><h5 id="特性属性"><a href="#特性属性" class="headerlink" title="特性属性"></a>特性属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.attributes //返回当前元素节点的所有属性节点</span><br><span class="line">Element.id //返回指定元素的id属性，可读写</span><br><span class="line">Element.tagName //返回指定元素的大写标签名</span><br><span class="line">Element.innerHTML //返回该元素包含的HTML代码，可读写</span><br><span class="line">Element.outerHTML //返回该元素节点的所有HTML代码，包括自身和所有子元素，可读写</span><br><span class="line">Element.className //返回当前元素的class属性，可读写</span><br><span class="line">Element.classList //返回当前元素节点的所有class集合</span><br><span class="line">Element.dataset //返回元素节点中所有data-*属性</span><br></pre></td></tr></table></figure>

<h5 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.clientHeight //返回元素节点可见部分的高度</span><br><span class="line">Element.clientWidth //返回元素节点可见部分的宽度</span><br><span class="line">Element.clientLeft //返回元素节点左边框的宽度</span><br><span class="line">Element.clientTop //返回元素节点顶部边框的宽度</span><br><span class="line"></span><br><span class="line">Element.scrollHeight //返回元素节点的总高度</span><br><span class="line">Element.scrollWidth //返回元素节点的总宽度</span><br><span class="line">Element.scrollLeft //返回元素节点的水平滚动条向右滚动的像素数值，通过设置这个属性可以改变元素滚动的位置</span><br><span class="line">Element.scrollTop //返回元素节点的垂直滚动向下滚动的像素数值</span><br><span class="line"></span><br><span class="line">Element.offsetHeight //返回元素的垂直高度(包含border，padding)</span><br><span class="line">Element.offsetWidth //返回元素的水平宽度(包含border，padding)</span><br><span class="line">Element.offsetLeft //返回当前元素左上角相对于Element.offsetParent节点的垂直偏移</span><br><span class="line">Element.offsetTop //返回水平位移</span><br><span class="line"></span><br><span class="line">Element.style //返回元素节点的行内样式</span><br></pre></td></tr></table></figure>

<h5 id="节点相关属性"><a href="#节点相关属性" class="headerlink" title="节点相关属性"></a>节点相关属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.children //包括当前元素节点的所有子元素</span><br><span class="line">Element.childElementCount //返回当前元素节点包含的子HTML元素节点的个数</span><br><span class="line">Element.firstElementChild //返回当前节点的第一个Element子节点</span><br><span class="line">Element.lastElementChild //返回当前节点的最后一个Element子节点</span><br><span class="line">Element.nextElementSibling //返回当前元素节点的下一个兄弟HTML元素节点</span><br><span class="line">Element.previousElementSibling //返回当前元素节点的前一个兄弟HTML元素节点</span><br><span class="line">Element.offsetParent //返回当前元素节点的最靠近、并且CSS的position属性不等于static的父元素</span><br></pre></td></tr></table></figure>

<h4 id="Element-节点的方法"><a href="#Element-节点的方法" class="headerlink" title="Element 节点的方法"></a>Element 节点的方法</h4><h5 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getBoundingClientRect() //获取元素位置</span><br><span class="line">getClientRects() //返回当前元素在页面上的矩形区域</span><br></pre></td></tr></table></figure>

<h5 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.getAttribute() //读取指定属性</span><br><span class="line">Element.setAttribute() //设置指定属性</span><br><span class="line">Element.hasAttribute() //返回一个布尔值，表示当前元素节点是否有指定属性</span><br><span class="line">Element.removeAttribute() //移除指定属性</span><br></pre></td></tr></table></figure>

<h5 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.querySelector()</span><br><span class="line">Element.querySelectorAll()</span><br><span class="line">Element.getElementByTagName()</span><br><span class="line">Element.getElementByClassName()</span><br></pre></td></tr></table></figure>

<h5 id="事件方法-1"><a href="#事件方法-1" class="headerlink" title="事件方法"></a>事件方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.addEventListener() //添加事件的回调函数</span><br><span class="line">Element.removeEventListener() //移除事件监听函数</span><br><span class="line">Element.dispatchEvent() //触发事件</span><br><span class="line"></span><br><span class="line">//ie8</span><br><span class="line">Element.attachEvent(oneventName,listener)</span><br><span class="line">Element.detachEvent(oneventName,listener)</span><br><span class="line"></span><br><span class="line">//event对象</span><br><span class="line">var event = window.event||event</span><br><span class="line"></span><br><span class="line">//事件的目标节点</span><br><span class="line">var target = event.target || event.srcElement</span><br><span class="line"></span><br><span class="line">//事件代理</span><br><span class="line">ul.addEventListener(&#x27;click&#x27;,function(event)&#123;</span><br><span class="line">    if(event.target.tagName.toLowerCase() === &#x27;li&#x27;)&#123;</span><br><span class="line">        console.log(event.target.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id=""><a href="#" class="headerlink" title=""></a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.scrollIntoView()   //滚动当前元素，进入浏览器的可见区域</span><br><span class="line"></span><br><span class="line">//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。</span><br><span class="line">Element.insertAdjacentHTML(where, htmlString);</span><br><span class="line">Element.insertAdjacentHTML(&#x27;beforeBegin&#x27;, htmlString); // 在该元素前插入</span><br><span class="line">Element.insertAdjacentHTML(&#x27;afterBegin&#x27;, htmlString); // 在该元素第一个子元素前插入</span><br><span class="line">Element.insertAdjacentHTML(&#x27;beforeEnd&#x27;, htmlString); // 在该元素最后一个子元素后面插入</span><br><span class="line">Element.insertAdjacentHTML(&#x27;afterEnd&#x27;, htmlString); // 在该元素后插入</span><br><span class="line"></span><br><span class="line">Element.remove()  //用于将当前元素节点从DOM中移除</span><br><span class="line">Element.focus()   //用于将当前页面的焦点，转移到指定元素上</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二、CSS-操作"><a href="#二、CSS-操作" class="headerlink" title="二、CSS 操作"></a>二、CSS 操作</h2><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//ie8以下</span><br><span class="line">Element.className  //获取元素节点的类名</span><br><span class="line">Element.className += &#x27; &#x27; + newClassName  //新增一个类名</span><br><span class="line"></span><br><span class="line">//判断是否有某个类名</span><br><span class="line">function hasClass(element,className)&#123;</span><br><span class="line">  return new RegExp(className,&#x27;gi&#x27;).test(element.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//移除class</span><br><span class="line">function removeClass(element,className)&#123;</span><br><span class="line">  element.className = element.className.replace(new RegExp(&#x27;(^|\\b)&#x27; + className.split(&#x27; &#x27;).join(&#x27;|&#x27;) + &#x27;(\\b|$)&#x27;, &#x27;gi&#x27;),&#x27;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//ie10</span><br><span class="line">element.classList.add(className)  //新增</span><br><span class="line">element.classList.remove(className)  //删除</span><br><span class="line">element.classList.contains(className)  //是否包含</span><br><span class="line">element.classList.toggle(className)  //toggle class</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="style-操作"><a href="#style-操作" class="headerlink" title="style 操作"></a>style 操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">element.setAttribute(&#x27;style&#x27;,&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">element.style.backgroundColor = &#x27;red&#x27;</span><br><span class="line"></span><br><span class="line">element.style.cssText //用来读写或删除整个style属性</span><br><span class="line"></span><br><span class="line">element.style.setProperty(propertyName,value)  //设置css属性</span><br><span class="line">element.style.getPropertyValue(property)  //获取css属性</span><br><span class="line">element.style.removeProperty(property)  //删除css属性</span><br><span class="line">操作非内联样式</span><br><span class="line">//ie8</span><br><span class="line">element.currentStyle[attrName]</span><br><span class="line">//ie9+</span><br><span class="line">window.getComputedStyle(el,null)[attrName]</span><br><span class="line">window.getComputedStyle(el,null).getPropertyValue(attrName)</span><br><span class="line">//伪类</span><br><span class="line">window.getComputedStyle(el,&#x27;:after&#x27;)[attrName]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h3><h4 id="生成实例对象"><a href="#生成实例对象" class="headerlink" title="生成实例对象"></a>生成实例对象</h4><pre><code>var o = new Object()
</code></pre>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><pre><code>Object.prototype //返回原型对象
</code></pre>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre><code>Object.keys(o) //遍历对象的可枚举属性
Object.getOwnPropertyName(o) //遍历对象不可枚举的属性
</code></pre>
<h4 id="对象实例的方法"><a href="#对象实例的方法" class="headerlink" title="对象实例的方法"></a>对象实例的方法</h4><pre><code>valueOf() //返回当前对象对应的值
toString() //返回当前对象对应的字符串形式
toLocaleString() //返回当前对象对应的本地字符串形式
hasOwnProperty() //判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性
isPrototypeof() //判断当前对象是否为另一个对象的原型
propertyIsEnumerable() //判断某个属性是否可枚举
</code></pre>
<h3 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h3><h4 id="生成实例对象-1"><a href="#生成实例对象-1" class="headerlink" title="生成实例对象"></a>生成实例对象</h4><pre><code>var a = new Array()
</code></pre>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><pre><code>a.length //长度
</code></pre>
<h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h4><pre><code>Array.isArray(a) //用来判断一个值是否为数组
</code></pre>
<h4 id="Array-实例的方法"><a href="#Array-实例的方法" class="headerlink" title="Array 实例的方法"></a>Array 实例的方法</h4><pre><code>a.valueof()   //返回数组本身
a.toString()  //返回数组的字符串形式
a.push(value,vlaue....)   //用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。
pop()   //用于删除数组的最后一个元素，并返回该元素
join()  //以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。
concat()  //用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。
shift()  //用于删除数组的第一个元素，并返回该元素。
unshift(value)  //用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。
reverse()   //用于颠倒数组中元素的顺序，返回改变后的数组
slice(start_index, upto_index);   //用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。
splice(index, count_to_remove, addElement1, addElement2, ...);   //用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。
sort()   //对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。
map()   //对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。
map(elem,index,arr)   //map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。
forEach()   //遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。
filter()   //参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。
some()    //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。
every()   //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。所有数组成员的返回值都是true，才返回true，否则false。
reduce()   //依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员到最后一个成员）
reduceRight()  //依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）
indexOf(s)   //返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置
lastIndexOf()  //返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。
</code></pre>
<h3 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h3><h4 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h4><pre><code>var n = new Number()
</code></pre>
<h4 id="Number-对象的属性"><a href="#Number-对象的属性" class="headerlink" title="Number 对象的属性"></a>Number 对象的属性</h4><pre><code>Number.POSITIVE_INFINITY：正的无限，指向Infinity。
Number.NEGATIVE_INFINITY：负的无限，指向-Infinity。
Number.NaN：表示非数值，指向NaN。
Number.MAX_VALUE：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。
Number.MIN_VALUE：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。
Number.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即9007199254740991。
Number.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即-9007199254740991。
</code></pre>
<h4 id="Number-对象实例的方法"><a href="#Number-对象实例的方法" class="headerlink" title="Number 对象实例的方法"></a>Number 对象实例的方法</h4><pre><code>toString()   //用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。
toFixed()   //用于将一个数转为指定位数的小数，返回这个小数对应的字符串。
toExponential()  //用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。
toPrecision()  //用于将一个数转为指定位数的有效数字。
</code></pre>
<h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><h4 id="生成实例对象-2"><a href="#生成实例对象-2" class="headerlink" title="生成实例对象"></a>生成实例对象</h4><pre><code>var s = new String()
</code></pre>
<h4 id="String-对象的属性"><a href="#String-对象的属性" class="headerlink" title="String 对象的属性"></a>String 对象的属性</h4><pre><code>s.length //返回字符串的长度
</code></pre>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><pre><code>s.chatAt(index)   //返回指定位置的字符
s.fromCharCode()    //该方法的参数是一系列Unicode码点，返回对应的字符串。
s.charCodeAt(index)    //返回给定位置字符的Unicode码点（十进制表示）
s.concat(s2)  //用于连接两个字符串
s.slice(start,end)   //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。
s.substring(start,end)  //用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。
s.substr(start,length)   //用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。
s.indexOf(s)   //返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置
s.lastIndexOf()  //返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。
s.trim()  //用于去除字符串两端的空格，返回一个新字符串
s.toLowerCase()  //用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。
s.toUpperCase()  //全部转为大写
s.localeCompare(s2)  //用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。
s.match(regexp)   //用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。
s.search()  //返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。
s.replace(oldValue,newValue)  //用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。
s.split()  //按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。
</code></pre>
<h3 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><pre><code>Math.E：常数e。
Math.LN2：2的自然对数。
Math.LN10：10的自然对数。
Math.LOG2E：以2为底的e的对数。
Math.LOG10E：以10为底的e的对数。
Math.PI：常数Pi。
Math.SQRT1_2：0.5的平方根。
Math.SQRT2：2的平方根。
</code></pre>
<h4 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h4><pre><code>Math.abs()：返回参数的绝对值
Math.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。
Math.floor()：向下取整
Math.max(n,n1,...)：可接受多个参数，返回最大值
Math.min(n,n1,..)：可接受多个参数，返回最小值
Math.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。
Math.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回NaN。
Math.log()：返回以e为底的自然对数值。
Math.exp()：返回e的指数，也就是常数e的参数次方。
Math.round()：四舍五入
Math.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。
</code></pre>
<h4 id="三角函数方法"><a href="#三角函数方法" class="headerlink" title="三角函数方法"></a>三角函数方法</h4><pre><code>Math.sin()：返回参数的正弦
Math.cos()：返回参数的余弦
Math.tan()：返回参数的正切
Math.asin()：返回参数的反正弦（弧度值）
Math.acos()：返回参数的反余弦（弧度值）
Math.atan()：返回参数的反正切（弧度值）
</code></pre>
<h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><pre><code>JSON.stringify()
//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。
//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。
//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。

JSON.parse()   //用于将JSON字符串转化成对象。
</code></pre>
<h3 id="console-对象"><a href="#console-对象" class="headerlink" title="console 对象"></a>console 对象</h3><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><pre><code>console.log(text,text2,...)   //用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。
console.info()   //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。
console.debug()  //在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。
console.warn()  //输出信息时，在最前面加一个黄色三角，表示警告；
console.error()  //输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈
console.table()  //可以将复合类型的数据转为表格显示。
console.count()  //用于计数，输出它被调用了多少次。
console.dir()    //用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。
console.dirxml()  //用于以目录树的形式，显示DOM节点。
console.assert()  //接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。

//这两个方法用于计时，可以算出一个操作所花费的准确时间。
console.time()
console.timeEnd()
//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。

console.profile()  //用来新建一个性能测试器（profile），它的参数是性能测试器的名字。
console.profileEnd()  //用来结束正在运行的性能测试器。

console.group()
console.groupend()
//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。
console.groupCollapsed()  //用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。

console.trace()  //显示当前执行的代码在堆栈中的调用路径。
console.clear()  //用于清除当前控制台的所有输出，将光标回置到第一行。
</code></pre>
<h2 id="DOM-基本操作"><a href="#DOM-基本操作" class="headerlink" title="DOM 基本操作"></a>DOM 基本操作</h2><!--more-->

<ul>
<li><p>获取 Dom 节点</p>
<ul>
<li><p>document 代表整个文档</p>
</li>
<li><p>document.getElementById()</p>
</li>
<li><p>document.getElementByTagName()</p>
</li>
<li><p>document.getElementByName() //只有部分标签 name 可生效，表单之类的</p>
</li>
<li><p>document.getElementByClassName()</p>
</li>
<li><p>querySelector() //静态的，不是实时的，保存的是当时的状态，是一个副本</p>
</li>
<li><p>querySelectorAll() //即使以后元素发生了改变，该值也不会改变</p>
</li>
</ul>
</li>
<li><p>遍历节点树</p>
<ul>
<li><p>parentNode -&gt; 父节点（最顶端 parentNode 为#document）</p>
</li>
<li><p>childNodes -&gt; 子节点们</p>
</li>
<li><p>firstChild -&gt; 第一个子节点</p>
</li>
<li><p>lastChild -&gt; 最后一个子节点</p>
</li>
<li><p>nextSibling -&gt; 后一个兄弟节点</p>
</li>
<li><p>previousSibling -&gt;前一个兄弟节点</p>
</li>
</ul>
</li>
<li><p>遍历元素节点树</p>
<ul>
<li><p>parentElement -&gt; 返回当前元素的父元素节点（IE9 以下不兼容）</p>
</li>
<li><p>children -&gt; 返回当前元素的元素子节点</p>
</li>
<li><p>node.childElementCount === node.children.length 返回当前元素的子元素节点个数（IE9 以下不兼容）</p>
</li>
<li><p>firstElementChild -&gt; 返回第一个元素节点（IE9 以下不兼容）</p>
</li>
<li><p>lastElementChild -&gt; 返回最后一个元素节点（IE9 以下不兼容）</p>
</li>
<li><p>nextElementSibling -&gt; 返回后一个元素节点（IE9 以下不兼容）</p>
</li>
<li><p>previousElementSibling -&gt; 返回前一个元素节点（IE9 以下不兼容）</p>
</li>
</ul>
</li>
<li><p>节点的类型</p>
<ul>
<li><p>元素节点 —— 1</p>
</li>
<li><p>属性节点 —— 2</p>
</li>
<li><p>文本节点 —— 3</p>
</li>
<li><p>注释节点（Comment）—— 8</p>
</li>
<li><p>document —— 9</p>
</li>
<li><p>DocumentFragment —— 11</p>
</li>
<li><p>获取节点类型 nodeType</p>
</li>
</ul>
</li>
<li><p>节点的四个属性</p>
<ul>
<li><p>nodeName</p>
<ul>
<li>元素的标签名，以大写形式表示，只读</li>
</ul>
</li>
<li><p>nodeValue</p>
<ul>
<li>Text 节点或 Comment 节点的文本内容，可读写</li>
</ul>
</li>
<li><p>nodeType</p>
<ul>
<li>该节点的类型，只读</li>
</ul>
</li>
<li><p>attributes</p>
<ul>
<li>Element 节点的属性集合</li>
</ul>
</li>
</ul>
</li>
<li><p>节点的一个方法</p>
<ul>
<li>Node.hasChildNodes()<ul>
<li>所有节点都有 hasChildNodes()方法，判断有无子节点，有一个或多个返回 true</li>
</ul>
</li>
</ul>
</li>
<li><p>Dom 基本操作——增</p>
<ul>
<li>document.createElement()</li>
<li>document.createTextNode()</li>
<li>document.createComment()</li>
<li>document.createDocumentFragment()</li>
</ul>
</li>
<li><p>Dom 基本操作——插</p>
<ul>
<li>parentNode.appendChild()</li>
<li>parentNode.insertBefore(a, b)</li>
</ul>
</li>
<li><p>Dom 基本操作——删</p>
<ul>
<li>parent.removeChild()</li>
<li>child.remove()</li>
</ul>
</li>
<li><p>Dom 基本操作-替换</p>
<ul>
<li>parent.replaceChild(new, origin)</li>
</ul>
</li>
<li><p>Element 节点的一些属性</p>
<ul>
<li>innerHTML</li>
<li>innerText(火狐不兼容)/textContent(老版本 IE 不兼容)</li>
</ul>
</li>
<li><p>Element 节点的一些方法</p>
<ul>
<li>ele.setAttribute()</li>
<li>ele.getAttribute()</li>
</ul>
</li>
<li><p>查看元素的几何尺寸</p>
<ul>
<li><p>domEle.getBoundingClientRect()</p>
</li>
<li><p>兼容性很好</p>
</li>
<li><p>返回一个对象，里面有 left、top、right、bottom、width、height。</p>
</li>
</ul>
<p>left 和 top 代表元素左上角的 X 和 Y 坐标，right 和 bottom 代表元素右下角的 X 和 Y 坐标</p>
<ul>
<li><p>height 和 width 属性老版本 IE 未实现</p>
</li>
<li><p>返回的结果不是“实时的”</p>
</li>
</ul>
</li>
<li><p>查看元素的宽高尺寸<br>dom.offsetWidth</p>
<p>dom.offsetHeight</p>
</li>
<li><p>查看元素的位置<br>dom.offsetLeft</p>
<p>dom.offsetTop</p>
<p>对于无定位父级的元素，返回相对文档的坐标。</p>
<p>对于有定位的父级元素，返回相对最近的有定位的父级的坐标，无论距离是怎么产生的</p>
</li>
<li><p>dom.offsetParent<br>返回最近的有定位的父级，若无，返回 body，body.offsetParent 返回 nul</p>
</li>
<li><p>让滚动条滚动</p>
<ul>
<li>window 上的三个方法：scroll()==scrollTo()、scrollBy()</li>
<li>scroll()和 scrollTo()将 x、y 坐标传入，让滚动条滚动到当前位置</li>
<li>scrollBy() 会在之前的数据基础上累加，可以利用 scrollBy()实现快速阅读的功能</li>
</ul>
</li>
<li><p>查询计算样式</p>
<ul>
<li><p>window.getComputedStyle(ele, null)[style]</p>
</li>
<li><p>第二个参数 null，放的是伪元素，可以获取伪元素的属性</p>
</li>
<li><p>计算样式只读</p>
</li>
<li><p>返回的计算样式都是绝对值，没有相对单位</p>
</li>
</ul>
<p>-IE8 及以下不兼容（ele.currentStyle[style]）</p>
</li>
<li><p>封装函数，返回元素的第 n 层祖先元素节点</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function retParent(elem, n) &#123;</span><br><span class="line">    while(elem &amp;&amp; n) &#123;</span><br><span class="line">        elem = elem.parentElement</span><br><span class="line">        n--</span><br><span class="line">    &#125;</span><br><span class="line">    return elem</span><br><span class="line">&#125;</span><br><span class="line">var i = document.getElementByTagName(&#x27;i&#x27;)[0]</span><br></pre></td></tr></table></figure>

<ul>
<li>原型上封装函数 myChildren 获取子元素，解决一千浏览器的兼容性问题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.prototype.myChildren = function () &#123;</span><br><span class="line">    var child = this.childNodes</span><br><span class="line">    var len = child.length</span><br><span class="line">    for (var i = 0;i &lt; len; i++) &#123;</span><br><span class="line">        if(child[i].nodeType == 1) &#123;</span><br><span class="line">            arr.push(child[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var div = document.getElementByTagName(&#x27;div&#x27;)[0]</span><br></pre></td></tr></table></figure>

<ul>
<li>自己封装 hasChildren()方法，不可用 children 属性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.prototype.hasChildren = function () &#123;</span><br><span class="line">    var child = this.childNodes</span><br><span class="line">    var len = child.length</span><br><span class="line">    for (var i = 0;i &lt; len; i++) &#123;</span><br><span class="line">        if(child[i].nodeType == 1) &#123;</span><br><span class="line">           return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var div = document.getElementByTagName(&#x27;div&#x27;)[0]</span><br></pre></td></tr></table></figure>

<ul>
<li>封装函数，返回元素 e 的第 n 个兄弟元素节点，n 为正，返回后面的兄弟元素节点，n 为负，返回前面的，n 为 0，返回自己</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function retSibling(e, n) &#123;</span><br><span class="line">    while(e &amp;&amp; n) &#123;</span><br><span class="line">        if(n &gt; 0) &#123;</span><br><span class="line">            if(e.nextElementSibling) &#123;</span><br><span class="line">                e.nextElementSibling</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                for(e = e.nextSibling; e &amp;&amp; e.nodeType != 1; e = e.nextSibling)</span><br><span class="line">            &#125;</span><br><span class="line">            n--</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            if(e.previousElementSibling) &#123;</span><br><span class="line">                e = e.previousElementSibling</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                for(e = e.previousSibling; e &amp;&amp; e.nodeType != 1; e = e.previousSibling)</span><br><span class="line">            &#125;</span><br><span class="line">            n++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>封装 insertAfter(),功能类似与 insertBefore(new, origin),直接在 Element.prototype 上编程</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element.prototype.insertAfter = function(new, origin) &#123;</span><br><span class="line">    var beforeNode = origin.nextElementSibling</span><br><span class="line">    if (beforeNode == null) &#123;</span><br><span class="line">        this.appendChild(new)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.insertBefore(new, beforeNode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>封装滚动条的 x 轴、y 轴的距离函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getScrollOffset() &#123;</span><br><span class="line">    if (window.pageXOffset) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            x: window.pageXOffset,</span><br><span class="line">            y: window.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            x: document.body.scrollLeft + document.documentElement.scrollLeft,</span><br><span class="line">            y: document.body.scrollTop + document.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>封装可视区窗口大小的函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getViewportOffset() &#123;</span><br><span class="line">    if (window.innerWidth) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            w: window.innerWidth,</span><br><span class="line">            h: window.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (document.compatMode === &#x27;BackCompat&#x27;) &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                w: document.body.clientWidth,</span><br><span class="line">                h: document.body.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                w: document.documentElement.clientWidth,</span><br><span class="line">                h: document.documentElement.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>封装样式获取的方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getStyle(elem, prop) &#123;</span><br><span class="line">    if(window.getComputedStyle) &#123;</span><br><span class="line">        return window.getComputedStyle(elem, null)[prop]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return elem.currentStyle[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>dom</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>git分布式版本控制系统</title>
    <url>/2023/03/28/git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="使用-git-commit-后，如何修改-commit-的信息？"><a href="#使用-git-commit-后，如何修改-commit-的信息？" class="headerlink" title="使用 git commit 后，如何修改 commit 的信息？"></a>使用 git commit 后，如何修改 commit 的信息？</h2><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="gitlab-CI-CD-流程"><a href="#gitlab-CI-CD-流程" class="headerlink" title="gitlab CI/CD 流程"></a>gitlab CI/CD 流程</h2><p>生产环境<br>1、推送代码-&gt;编译-&gt;生成的 jar 包发布到私服-&gt;打包为 docker 镜像-&gt;推送到 Harbor 镜像仓库（成功，微信通知，c 结束返回成功|失败，微信通知，ci 结束返回失败）<br>2、运维人员 触发部署到 k8s 集群-&gt;健康检查（成功，微信通知，c 结束返回成功|失败，微信通知，ci 结束返回失败）</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js之express</title>
    <url>/2019/09/08/express%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
    <content><![CDATA[<h2 id="Node-js-之-express"><a href="#Node-js-之-express" class="headerlink" title="Node.js 之 express"></a>Node.js 之 express</h2><span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于原来的http.createServer</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//公开指定目录</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/puclic/&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;./public/&#x27;</span>));</span><br><span class="line"><span class="comment">//当省略第一个参数的时候，可以通过省略/public的方式访问</span></span><br><span class="line"><span class="comment">//app.use(express.static(&#x27;./public/&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当服务器收到get请求 / 的时候，执行回调函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello exporess&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于server.listen</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app is running at port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Express-使用-art-template"><a href="#Express-使用-art-template" class="headerlink" title="Express 使用 art-template"></a>Express 使用 art-template</h2><ul>
<li><a href="http://aui.github.io/art-template/express/">Express&amp;art-template 官网</a></li>
<li>Install</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save art-templates</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure>

<ul>
<li>Example</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// view engine setup</span><br><span class="line">app.engine(&#x27;art&#x27;, require(&#x27;express-art-template&#x27;));</span><br><span class="line">app.set(&#x27;view&#x27;, &#123;</span><br><span class="line">    debug: process.env.NODE_ENV !== &#x27;production&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;art&#x27;);</span><br><span class="line"></span><br><span class="line">// routes</span><br><span class="line">app.get(&#x27;/&#x27;, function (req, res) &#123;</span><br><span class="line">    res.render(&#x27;index.art&#x27;, &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">            name: &#x27;aui&#x27;,</span><br><span class="line">            tags: [&#x27;art&#x27;, &#x27;template&#x27;, &#x27;nodejs&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><ul>
<li><p>在 Express 中没有内置获取表单 POST 请求体的 API，需要引入一个第三方包：body-parser</p>
</li>
<li><p>Install</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure>

<ul>
<li>config</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;)</span><br><span class="line">var bodyParser = require(&#x27;body-parser&#x27;)</span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">//配置 body-parser,req对象上就会多出来一个 body 属性</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended: false&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>

<ul>
<li>use</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.use(function(req, res)&#123;</span><br><span class="line">    res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;)</span><br><span class="line">    res.write(&#x27;hello&#x27;)</span><br><span class="line">    res.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery学习</title>
    <url>/2020/09/05/jquery%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="jQuery-学习"><a href="#jQuery-学习" class="headerlink" title="jQuery 学习"></a>jQuery 学习</h2><span id="more"></span>

<h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><ul>
<li>jQuery 入口函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    //执行代码</span><br><span class="line">&#125;)</span><br><span class="line">或者（简写）</span><br><span class="line">$(function()&#123;</span><br><span class="line">    //执行代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<!-- more -->

<ul>
<li>javascript 入口函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">    //执行代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 的入口函数是在 html 的所有标签 DOM 都加载之后，就会执行包裹的代码，可以执行多次，并且不会覆盖上次。</li>
<li>javascript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完成后，才会执行，只能执行一次，如果第二次会把第一次的执行覆盖。</li>
</ul>
<h3 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h3><ul>
<li>元素选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>id 选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#test&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>class 选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.test&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;[href]&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>:empty 选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;:empty&quot;)</span><br><span class="line">//选择空的元素，既不不含子元素也不包含文本的元素</span><br><span class="line">$(&quot;div:empty&quot;) //选择div中为空的div元素</span><br></pre></td></tr></table></figure>

<ul>
<li>:parent 选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;td:parent&quot;)</span><br><span class="line">//选取所有带有子元素或文本的&lt;td&gt;标签元素</span><br></pre></td></tr></table></figure>

<ul>
<li>:contains 选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div:contains(&#x27;hello&#x27;)&quot;)</span><br><span class="line">//找到div中包含文本hello的指定元素</span><br></pre></td></tr></table></figure>

<ul>
<li>:has 选择器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div:has(p)&quot;)</span><br><span class="line">//找到包含p标签元素的div</span><br></pre></td></tr></table></figure>

<ul>
<li>补充</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;:button&quot;) //获取所有type为button的&lt;input&gt;元素和&lt;button&gt;元素，去掉冒号，只能获取&lt;button&gt;元素。</span><br></pre></td></tr></table></figure>

<h3 id="常用-jQuery-事件方法"><a href="#常用-jQuery-事件方法" class="headerlink" title="常用 jQuery 事件方法"></a>常用 jQuery 事件方法</h3><ul>
<li>click() 点击事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).click(function()&#123;</span><br><span class="line">    $(this).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>dblclick() 双击事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).dblclick(function()&#123;</span><br><span class="line">    $(this).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>mouseenter() 鼠标指针穿过元素时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).mouseenter(function()&#123;</span><br><span class="line">    alert(&quot;您的鼠标移到了p标签元素上！&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>mouseleave() 鼠标指针离开元素时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).mouseleave(function()&#123;</span><br><span class="line">    alert(&quot;您的鼠标离开了该p标签元素！&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>mouseup() 当在元素上松开鼠标时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).mouseup(()=&gt;&#123;</span><br><span class="line">    alert(&quot;鼠标在p标签上松开！&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>hover() 模拟光标悬停事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).hover(</span><br><span class="line">    function()&#123;</span><br><span class="line">        alert(&quot;你进入了p标签！&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    function()&#123;</span><br><span class="line">        alert(&quot;你离开了p标签！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>focus() 当元素获得焦点时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">    $(this).css(&quot;background-color&quot;,&quot;#ccc&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>blur() 当元素失去焦点时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).blur(function()&#123;</span><br><span class="line">    $(this).css(&quot;background-color&quot;,&quot;#fff&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>keypress,keydown,keyup</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取按键代码或ASCII码</span><br><span class="line">$(window).keydown(function(event)&#123;</span><br><span class="line">    //通过event.which可以拿到按键代码，如果是keypress事件中则拿到ASCII码。</span><br><span class="line">    console.log(event);</span><br><span class="line">&#125;)</span><br><span class="line">//获取事件对象</span><br><span class="line">$(window).keypress(function(event)&#123;</span><br><span class="line">    //获取事件对象，里面包含各种有用的信息。</span><br><span class="line">    console.log(event);</span><br><span class="line">    //console.log(event.which);</span><br><span class="line">&#125;);</span><br><span class="line">//keypress事件获取键入的字符</span><br><span class="line">$(window).keypress(function(event)&#123;</span><br><span class="line">    //event.which是获取ASCII码，前面的函数是将ASCII码转换成字符，空格键和Enter键输出均为空白。</span><br><span class="line">    console.log(String.fromCharCode(event.which));</span><br><span class="line">    //从event对象中key属性获取字符，但是Enter键的key值为&quot;Enter&quot;，空白键还是空白&quot; &quot;。</span><br><span class="line">    console.log(event.key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>off() 事件移除</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).off() //移除所有button元素身上绑定的事件</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).off(&quot;click&quot;) //移除所有的click事件，移除指定类型</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).off(&quot;click&quot;, test) //移除click事件中的test回调方法，移除指定类型的事件</span><br></pre></td></tr></table></figure>

<ul>
<li>阻止事件冒泡</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.son&quot;).click(function(event)&#123;</span><br><span class="line">    alert(&quot;son&quot;)</span><br><span class="line">    //return false;</span><br><span class="line">    event.stopPropagation(); //阻止事件冒泡</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&quot;.father&quot;).click(function()&#123;</span><br><span class="line">    alert(&quot;father&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>阻止默认行为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//a标签跳转、submit提交按钮等</span><br><span class="line">$(&quot;a&quot;).click(function(event)&#123;</span><br><span class="line">    alert(&quot;弹出注册框！&quot;);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>trigger()、triggerHandler() 自动触发事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//触发绑定到被选元素的所有事件</span><br><span class="line">$(&quot;.father&quot;).click(function()&#123;</span><br><span class="line">    alert(&quot;father&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;.father&quot;).trigger(&quot;click&quot;);   //方法一:会触发事件冒泡</span><br><span class="line">$(&quot;.father&quot;).triggerHandler(&quot;click&quot;); //方法二:只触发事件，不会触发事件冒泡</span><br><span class="line">-------------------------------</span><br><span class="line">$(&quot;input[type=&#x27;submit&#x27;]&quot;).click(function()&#123;</span><br><span class="line">    alert(&quot;submit&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;input[type=&#x27;submit&#x27;]&quot;).trigger(&quot;click&quot;); //方法一：触发事件的同时，还会触发默认行为。</span><br><span class="line">$(&quot;input[type=&#x27;submit&#x27;]&quot;).triggerHandler(&quot;click&quot;) //方法二：只触发事件，不触发默认行为。</span><br><span class="line">//注意：这里&lt;a&gt;标签有点特殊，这两个方法都不会触发默认行为，如果想使用trigger()触发&lt;a&gt;标签的事件和默认行为的话，可以在&lt;a&gt;标签中添加一个&lt;span&gt;,例如&lt;a href =&quot;#&quot;&gt;&lt;span&gt;百度&lt;/span&gt;&lt;/a&gt; 这种写法。</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 想要自定义事件，必须满足两个条件</span><br><span class="line">* 1.事件必须是通过on绑定的</span><br><span class="line">* 2.事件必须通过trigger来触发</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).on(&quot;myClick&quot;,function()&#123;</span><br><span class="line">    alert(&quot;son&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).trigger(&quot;myClick&quot;);</span><br><span class="line">or</span><br><span class="line">$(&quot;.son&quot;).triggerHandler(&quot;myClick&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>事件命名空间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 想要事件的命名空间有效，必须满足两个条件</span><br><span class="line">* 1.事件通过on来绑定(自定义事件)</span><br><span class="line">* 2.通过trigger()或者triggerHandler()来触发</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).on(&quot;eventName.zs&quot;,function()&#123;</span><br><span class="line">    alert(&quot;click zhangsan&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;.son&quot;).on(&quot;eventName.ls&quot;,function()&#123;</span><br><span class="line">    alert(&quot;click lisi&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">$(&quot;.son&quot;).trigger(&quot;click.zs&quot;);</span><br><span class="line">or</span><br><span class="line">$(&quot;.son&quot;).triggerHandler(&quot;click.zs&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h3><ul>
<li>hide() 隐藏 html 元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#hide&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>show() 显示 html 元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#show&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).show();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(selector).hide(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).show(speed,callback);</span><br><span class="line"></span><br><span class="line">//可选的speed参数表示规定显示/隐藏的速度(slow、fast、毫秒)</span><br><span class="line">//可选的callback参数是隐藏或显示完成后所执行的函数名称</span><br><span class="line"></span><br><span class="line">$(&quot;.hidebtn&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;div&quot;).hide(1000,&quot;linear&quot;,function()&#123;</span><br><span class="line">        alert(&quot;Hide() 方法已完成!&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//第二个参数是一个字符串，表示过渡使用哪种缓动函数，jQuery自身提供(linear、swing)</span><br><span class="line">//补充：callback函数名后面加上括号，会立刻执行函数体，而不是等到显示/隐藏之后才执行,如add()作为callback参数会立即执行，而add作为参数则不会，callback函数可以是匿名函数，$(selector)选中的元素个数为n个，则callback函数会执行n次。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>toggle() 切换 hide()和 show()方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).toggle();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><ul>
<li>fadeIn() 用于淡入以隐藏的元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeIn(3000);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//语法： $(selector).fadeIn(speed, callback)</span><br><span class="line">// 可选的speed参数规定效果的时长(slow、fast、毫秒)</span><br><span class="line">// 可选的callback参数是fading完成后所执行的函数名称</span><br></pre></td></tr></table></figure>

<ul>
<li>fadeOut() 用于淡出可见元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeOut(&quot;slow&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//语法： $(selector).fadeOut(speed, callback)</span><br><span class="line">// 可选的speed参数规定效果的时长(slow、fast、毫秒)</span><br><span class="line">// 可选的callback参数是fading完成后所执行的函数名称</span><br></pre></td></tr></table></figure>

<ul>
<li>fadeToggle() 用于在 fadeIn()与 fadeOut()方法之间进行切换</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeToggle();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//语法： $(selector).fadeToggle(speed, callback)</span><br><span class="line">// 可选的speed参数规定效果的时长(slow、fast、毫秒)</span><br><span class="line">// 可选的callback参数是fading完成后所执行的函数名称</span><br></pre></td></tr></table></figure>

<ul>
<li>fadeTo() 允许渐变为给定的不透明度</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).fadeTo(&quot;slow&quot;, 0.3);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//语法：$(selector).fadeTo(speed, opacity, callback)</span><br><span class="line">//必须的speed参数规定效果时长(slow、fast、毫秒)</span><br><span class="line">//必须的opacity规定不透明度(介于0-1之间)</span><br></pre></td></tr></table></figure>

<h3 id="滑动方法"><a href="#滑动方法" class="headerlink" title="滑动方法"></a>滑动方法</h3><ul>
<li>slideDown() 用于元素向下滑动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).slideDown();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//语法：$(selector).slideDown(speed,callback)</span><br><span class="line">//可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span><br><span class="line">//可选的 callback 参数是滑动完成后所执行的函数名称。</span><br></pre></td></tr></table></figure>

<ul>
<li>slideUp() 用于元素向上滑动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).slideUp();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//语法：$(selector).slideUp(speed,callback)</span><br><span class="line">//可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span><br><span class="line">//可选的 callback 参数是滑动完成后所执行的函数名称。</span><br></pre></td></tr></table></figure>

<ul>
<li>slideToggle() 在 slideDown()与 slideUp()方法之间进行切换</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).slideToggle();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//语法：$(selector).slideToggle(speed,callback)</span><br><span class="line">//可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span><br><span class="line">//可选的 callback 参数是滑动完成后所执行的函数名称。</span><br></pre></td></tr></table></figure>

<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul>
<li>animate()方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//默认情况下，所有html元素都有一个静态位置，且无法移动。</span><br><span class="line">//先将p标签元素设置为position:relative/absolute/fixed</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;p&quot;).animate(&#123;</span><br><span class="line">      left:&#x27;250px&#x27;,</span><br><span class="line">      opacity:&#x27;0.5&#x27;,</span><br><span class="line">      height:&#x27;400px&#x27;,</span><br><span class="line">      width: &#x27;400px&#x27;,</span><br><span class="line">      paddingLeft:&#x27;10px&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//语法： $(selector).animate(&#123;params&#125;,speed,callback)</span><br><span class="line">// params参数可以操作几乎所有的css属性，但名字要采用camel标记法</span><br></pre></td></tr></table></figure>

<ul>
<li>stop() 停止动画</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $(&quot;#flip&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#panel&quot;).slideDown(5000);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;#stop&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#panel&quot;).stop();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">语法: $(selector).stop(stopAll,goToEnd)</span><br><span class="line">//可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停/止活动的动画，允许任何排入队列的动画向后执行。</span><br><span class="line">//可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 方法链接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;)</span><br><span class="line">  .slideUp(2000)</span><br><span class="line">  .slideDown(2000);</span><br></pre></td></tr></table></figure>

<h3 id="jQuery-获取内容和属性"><a href="#jQuery-获取内容和属性" class="headerlink" title="jQuery 获取内容和属性"></a>jQuery 获取内容和属性</h3><ul>
<li>获取内容 text()、html()、val()<ul>
<li>text() 设置或返回所选元素的文本内容</li>
<li>html() 设置或返回所选元素的内容(包括 html 标记)</li>
<li>val() 设置或返回表单字段的值</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).text());</span><br><span class="line">&#125;)</span><br><span class="line">//-----------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).html())</span><br><span class="line">&#125;)</span><br><span class="line">//------------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  alert($(&quot;input&quot;).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>获取属性 attr()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//项目QC刚用过</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    console.log($(&quot;p&quot;).attr(&quot;data-text&quot;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>补充：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prop()函数返回相应属性或空字符串。</span><br><span class="line">attr()函数返回相应属性或undefined</span><br><span class="line">1.对于HTML元素本身就带有的固有属性，在处理时使用prop方法</span><br><span class="line">2.对HTML元素我们自己定义的DOM属性，在处理时使用attr方法</span><br><span class="line">3.具有true和false两个属性的属性，如checked、selected或者disabled使用prop()</span><br></pre></td></tr></table></figure>

<h3 id="设置内容和属性"><a href="#设置内容和属性" class="headerlink" title="设置内容和属性"></a>设置内容和属性</h3><ul>
<li>设置内容 text()、html()、val()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).text(&quot;hello&quot;));</span><br><span class="line">&#125;)</span><br><span class="line">//-----------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    alert($(&quot;p&quot;).html(&quot;hello&quot;))</span><br><span class="line">&#125;)</span><br><span class="line">//------------------------------</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  alert($(&quot;input&quot;).val(&quot;hello&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>text()、html() 以及 val() 的回调函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).text(function(i,orignText)&#123;</span><br><span class="line">        //i 为被选元素列表中当前元素的下标</span><br><span class="line">        //orignText 为原来的值</span><br><span class="line">        //return 为返回的新值</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>设置属性 attr()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).attr(&quot;data-text&quot;,&quot;hello world&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">// 允许同时设置多个属性</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).attr(&#123;</span><br><span class="line">        &quot;data-text&quot;,&quot;hello world&quot;,</span><br><span class="line">        &quot;title&quot;,&quot;jQuery学习！&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>attr() 也存在回调函数(同上)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">  $(&quot;#runoob&quot;).attr(&quot;href&quot;, function(i,origValue)&#123;</span><br><span class="line">    return origValue + &quot;/jquery&quot;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><ul>
<li>removeAttr()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;span&quot;).removeAttr(&quot;class name&quot;);</span><br><span class="line">//表示同时删除span标签的class和name属性</span><br></pre></td></tr></table></figure>

<ul>
<li>removeProp()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;span&quot;).removeProp(&quot;class&quot;);</span><br><span class="line">//表示删除所有span标签的class属性</span><br></pre></td></tr></table></figure>

<h3 id="jQuery-添加元素"><a href="#jQuery-添加元素" class="headerlink" title="jQuery 添加元素"></a>jQuery 添加元素</h3><ul>
<li><p>append/prepend 是在选择元素内容嵌入(文本或标签)</p>
</li>
<li><p>after/before 实在元素外部追加(文本或标签)</p>
</li>
<li><p>参数可以是多个，可以是一个 list</p>
</li>
</ul>
<h3 id="jQuery-删除元素"><a href="#jQuery-删除元素" class="headerlink" title="jQuery 删除元素"></a>jQuery 删除元素</h3><ul>
<li>remove() 方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).remove()</span><br><span class="line"></span><br><span class="line">//remove() 方法删除被选元素及其子元素</span><br></pre></td></tr></table></figure>

<ul>
<li>empty() 方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).empty()</span><br><span class="line"></span><br><span class="line">//empty() 方法删除被选元素的子元素而不删除自身</span><br></pre></td></tr></table></figure>

<ul>
<li>过滤被删除的元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).remove(&quot;.italic&quot;)</span><br><span class="line"></span><br><span class="line">//表示删除所有&lt;p&gt;标签元素中class = &quot;italic&quot;的元素</span><br><span class="line">//过滤时，只能作用于同级元素之间</span><br></pre></td></tr></table></figure>

<h3 id="jQuery-获取并设置-CSS-类"><a href="#jQuery-获取并设置-CSS-类" class="headerlink" title="jQuery 获取并设置 CSS 类"></a>jQuery 获取并设置 CSS 类</h3><ul>
<li>addClass() 向不用的元素添加 class 属性，在添加类时可以选取多个元素,也可以设置多个类。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">	$(&quot;h1, h3, p&quot;).addClass(&quot;fontColor fontSize&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>removeClass() 在不同元素中删除指定的 class 属性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">	$(&quot;h1, h3, p&quot;).removeClass(&quot;fontSize&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>toggleClass() 对被选元素进行添加/删除类的切换操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.btn2&quot;).click(function()&#123;</span><br><span class="line">	$(&quot;h1, h3, p&quot;).toggleClass(&quot;fontColor2&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="css-方法"><a href="#css-方法" class="headerlink" title="css() 方法"></a>css() 方法</h3><ul>
<li>返回 css 属性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;background-color&quot;);</span><br></pre></td></tr></table></figure>

<ul>
<li>设置 css 属性,可以同时设置多个</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&#123;&quot;background-color&quot;:&quot;yellow&quot;,&quot;font-size&quot;:&quot;200%&quot;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><ul>
<li>width()、height()<ul>
<li>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）</li>
<li>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).width() //获取</span><br><span class="line">$(&quot;p&quot;).width(20) //设置</span><br></pre></td></tr></table></figure>

<ul>
<li><p>innerWidth()、innerHeight()</p>
<ul>
<li>innerWidth() 方法返回元素的宽度（包括内边距）。</li>
<li>innerHeight() 方法返回元素的高度（包括内边距）。</li>
</ul>
</li>
<li><p>outerWidth()、outerHeight()</p>
<ul>
<li>outerWidth() 方法返回元素的宽度（包括内边距和边框）。</li>
<li>outerHeight() 方法返回元素的高度（包括内边距和边框）。</li>
</ul>
</li>
<li><p>offset()</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.son&quot;).offset().left //元素距离窗口的偏移距离</span><br><span class="line"></span><br><span class="line">$(&quot;.son&quot;).offset(&#123;</span><br><span class="line">    left: 20,</span><br><span class="line">&#125;) //设置元素距离窗口的偏移距离</span><br></pre></td></tr></table></figure>

<ul>
<li>position()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.son&quot;).position().left //获取元素距离定位元素的偏移距离</span><br><span class="line"></span><br><span class="line">// 注意点：position() 方法只能获取不能设置</span><br></pre></td></tr></table></figure>

<ul>
<li>scrollTop()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;scroller&quot;).scrollTop() //获取元素相对滚动条顶部的偏移</span><br><span class="line"></span><br><span class="line">$(&quot;scroller&quot;).scrollTop(300) //设置元素相对滚动条顶部的偏移</span><br><span class="line"></span><br><span class="line">//获取网页滚动的偏移(考虑兼容)</span><br><span class="line">$(&quot;body&quot;).scrollTop() + $(&quot;html&quot;).scrollTop() //ie-&gt;body,chrome...-&gt;html</span><br><span class="line"></span><br><span class="line">//设置网页滚动的偏移(考虑兼容)</span><br><span class="line">$(&quot;html,body&quot;).scrollTop(300)</span><br></pre></td></tr></table></figure>

<ul>
<li>补充：设置了 box-sizing 后，width()=width - padding - border</li>
</ul>
<h3 id="jQuery-遍历"><a href="#jQuery-遍历" class="headerlink" title="jQuery 遍历"></a>jQuery 遍历</h3><h4 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h4><ul>
<li>parent() 返回元素的直接父元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parents();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>parents() 返回被选元素的所有祖先元素，直到文档根元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parents();</span><br><span class="line">&#125;)</span><br><span class="line">//过滤所有祖先，并且是&lt;ul&gt;元素</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parents(&quot;ul&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>parentsUntil() 返回给定的两个元素之间的所有祖先元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//返回&lt;span&gt;与&lt;div&gt;元素之间的所有祖先元素</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $(&quot;span&quot;).parentsUntil(&quot;div&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="后代"><a href="#后代" class="headerlink" title="后代"></a>后代</h4><ul>
<li>children() 返回被选元素的所有直接子元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).children();</span><br><span class="line"></span><br><span class="line">//可以使用可选参数来过滤子元素的搜索</span><br><span class="line">$(&quot;div&quot;).children(&quot;p.aaa&quot;); //返回类名为aaa的&lt;p&gt;元素，且是div的直接子元素。</span><br></pre></td></tr></table></figure>

<ul>
<li>find() 返回被选元素的后代元素，一路向下直到最后一个后代</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).find(&quot;span&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="同胞"><a href="#同胞" class="headerlink" title="同胞"></a>同胞</h4><ul>
<li><p>siblings() 返回被选元素的所有同胞元素，可以使用可选参数过滤搜索。</p>
</li>
<li><p>next() 返回被选元素的下一个同胞元素，只返回一个元素</p>
</li>
<li><p>nextAll() 返回被选元素的所有跟随的同胞元素</p>
</li>
<li><p>nextUntil() 返回介于两个给定参数之间的所有跟随的同胞元素</p>
</li>
<li><p>pre()、prevAll()、prevUntil() 同上，方向相反</p>
</li>
</ul>
<h4 id="过滤：缩小搜索元素的范围"><a href="#过滤：缩小搜索元素的范围" class="headerlink" title="过滤：缩小搜索元素的范围"></a>过滤：缩小搜索元素的范围</h4><ul>
<li>first() 返回被选元素的首个元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).first();</span><br></pre></td></tr></table></figure>

<ul>
<li>last() 返回被选元素的最后一个元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).last();</span><br></pre></td></tr></table></figure>

<ul>
<li>eq() 返回被选元素中带有指定索引号的元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).eq(1);</span><br><span class="line"></span><br><span class="line">//索引号从0开始，eq(1)选择的是第二个&lt;p&gt;元素</span><br></pre></td></tr></table></figure>

<ul>
<li>filter() 允许规定一个标准，返回匹配的元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).filter(&quot;.className&quot;);</span><br><span class="line"></span><br><span class="line">//返回带有类名className的所有&lt;p&gt;元素</span><br></pre></td></tr></table></figure>

<ul>
<li>not() 返回所有不匹配的元素，与 filter()相反</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).not(&quot;.className&quot;);</span><br><span class="line"></span><br><span class="line">//返回所有不带有类名className的&lt;p&gt;元素</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js引擎的预编译和执行</title>
    <url>/2019/08/13/js%E5%BC%95%E6%93%8E%E7%9A%84%E9%A2%84%E7%BC%96%E8%AF%91%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<h2 id="var-的变量提升底层原理"><a href="#var-的变量提升底层原理" class="headerlink" title="var 的变量提升底层原理"></a>var 的变量提升底层原理</h2><span id="more"></span>

<pre><code>JavaScript引擎，不是逐条解释执行javascript代码，而是按照代码块一段段解释执行，
所谓代码块就是script标签分割的代码块。
js引擎的工作方式分为：预编译和执行代码两个阶段。

1）常见的编译型语言编译阶段：词法分析（生成词法单元）——&gt;语法分析（抽象语法树）——&gt;(语义检查，代码优化)——&gt;代码生成

2）对于解释型语言来说，通过词法分析和语法分析得到抽象语法树之后就开始执行了，在JavaScript
解释器在构造语法树的时候，如果无法构造，就会报语法错误，并结束整个代码块的执行。
而在整个编译阶段，会把“一等公民”function和var创建的变量进行提升。（其中函数提升在变量
提成之前）

3）JavaScript语法采用的是词法作用域，也就是javascript的变量和函数作用域是在定义时
决定的，函数调用时决定的是执行期上下文和作用域链，所以js解释器只需要静态分析就能确定每个
变量、函数的作用域，这种作用域也称为静态作用域。
</code></pre>
<h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><ul>
<li><p>全局执行上下文：默认的上下文，任何不再函数内部的代码都在全局上下文中。它会执行两<br>件事：创建一个全局的 window 对象(浏览器的情况下)，并且设置 this 的值等于这个全局对象。<br>一个程序只会有一个全局执行上下文。</p>
</li>
<li><p>函数执行上下文：每当函数被调用时，都会为该函数创建一个新的上下文。</p>
</li>
<li><p>Eval 函数执行上下文：执行在 eval 函数内部的代码也会有属于它自己的执行上下文。</p>
<p>执行栈：JavaScript 引擎会以栈的方式来处理多个执行期上下文其他语言叫“调用栈”，<br>类似于数据结构的栈 LIFO(后进先出)，用来存储代码运行时创建的所有执行上下文。<br>栈底永远都是全局上下文，而栈顶就是当前正在执行的上下文。</p>
<p>当 JavaScript 引擎第一次遇见脚本时，它会创建一个全局的执行上下文并且压入当前<br>执行栈，每当引擎遇到一个函数调用，会为该函数创建一个新的执行上下文并压入栈的顶部。</p>
<p>引擎会执行那些执行上下文位于栈顶的函数，当函数执行结束时，执行上下文从栈顶<br>弹出，控制流程到达当前栈中的下一个上下文。</p>
<p>当函数执行时，会创建一个成为 执行期上下文的内部对象。</p>
<p>执行期上下文就是 js 代码被解析和执行时的运行环境，函数每次执行都会创建一个独一无二的执行上下文，所以多次调用会产生<br>多个执行上下文，当函数执行完毕，所产生的执行上下文被销毁。</p>
<p>执行上下文的生命周期包括三个阶段：<br>创建阶段-&gt;执行阶段-&gt;挥手阶段</p>
<p>创建阶段会创建变量对象(Variable Object)，建立作用域链，确定 this 指向 1. 创建 Scope chain 2. 创建 AO 3. 设置 this 的值<br>创建 AO 主要做了以下事情： 1. 创建 AO 对象 2. 形参和变量声明存储到 AO 对象 //赋值为 undefined 3. 将形参和实参相统一 4. 函数声明的函数名作为 AO 对象的 key，函数体作为 value</p>
<p>执行阶段会完成变量赋值，函数引用，以及执行其他代码。</p>
</li>
<li><p>AO(Active Object) &amp; VO(Variable Object)的区别？</p>
<ul>
<li>VO：未进入执行上下文执行阶段之前，变量对象中的属性都不能访问。</li>
<li>AO：进入执行阶段之后，变量对象转变为活动对象，里面的属性都能访问了。</li>
<li>它们都是同一个对象，只是处于执行上下文的不同生命周期，而且只有处于<br>函数调用栈栈顶的执行上下文中的变量对象，才会变成活动对象。</li>
</ul>
<p>如果函数引用了外部变量的值，则 JavaScript 引擎会为改函数创建一个闭包体（closure），<br>闭包体是一个完全封闭和独立的作用域，他不会在函数调用完毕后就被 js 引擎当作垃圾<br>进行回收，闭包体可以长期存在。</p>
</li>
</ul>
<ul>
<li>执行上下文总结：<ul>
<li>单线程</li>
<li>同步执行，只有栈顶的上下文处于执行中，而其他上下文需要等待</li>
<li>全局上下文只有唯一的一个，它在浏览器关闭时出栈，而且其他所有上下文环境<br>都可以直接访问全局上下文的属性</li>
<li>函数的执行上下文的个数没有限制</li>
<li>每次某个函数被调用，就会有新的执行上下文为其创建，即使是调用的自身函数，也是如此。</li>
</ul>
</li>
</ul>
<h2 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h2><pre><code>同步和异步任务分别进入不同的执行“场所”，同步的进入主线程，异步的进入Event Table
并注册函数。

当指定的事情完成时（例如定时器执行完毕，获取数据结束等），Event Table会将这个函数移入Event Queue

主线程内的任务执行完毕为空，会去Event Queue（事件队列）读取对应的函数，进入主线程执行。

上述过程不断重复，称为Event Loop（事件轮询）
</code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo数据库</title>
    <url>/2023/05/31/mongo%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="开启-MongoDB-服务器"><a href="#开启-MongoDB-服务器" class="headerlink" title="开启 MongoDB 服务器"></a>开启 MongoDB 服务器</h2><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo  mongod --dbpath /usr/local/var/mongodb</span><br></pre></td></tr></table></figure>

<h2 id="连接-MongoDB-服务器"><a href="#连接-MongoDB-服务器" class="headerlink" title="连接 MongoDB 服务器"></a>连接 MongoDB 服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<h2 id="退出-MongoDB-服务器"><a href="#退出-MongoDB-服务器" class="headerlink" title="退出 MongoDB 服务器"></a>退出 MongoDB 服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li><p>show dbs</p>
<ul>
<li>查看显示所有数据库</li>
</ul>
</li>
<li><p>db</p>
<ul>
<li>产看当前操作的数据库</li>
</ul>
</li>
<li><p>use 数据库名称</p>
<ul>
<li>切换到指定的数据库（没有会新建）</li>
</ul>
</li>
<li><p>show collections</p>
<ul>
<li>显示集合</li>
</ul>
</li>
<li><p>db.cats.find()</p>
<ul>
<li>查看并显示内容</li>
</ul>
</li>
<li><p><a href="https://github.com/mongodb/node-mongodb-native">node 中使用 mongodb</a></p>
</li>
</ul>
<h2 id="使用第三方-mongoose-来操作-MongoDB-数据库"><a href="#使用第三方-mongoose-来操作-MongoDB-数据库" class="headerlink" title="使用第三方 mongoose 来操作 MongoDB 数据库"></a>使用第三方 mongoose 来操作 MongoDB 数据库</h2><ul>
<li><p><a href="https://mongoosejs.com/">mongoose</a></p>
</li>
<li><p>安装<br><code>npm install mongoose</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引入包</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">//连接数据库（数据库不需要存在，在插入第一条语句，就会自动创建）</span><br><span class="line"></span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost:27017/test&#x27;, &#123;useNewUrlParser: true&#125;);</span><br><span class="line"></span><br><span class="line">//设计数据库集合结构</span><br><span class="line">//创建一个Cat表</span><br><span class="line">const Cat = mongoose.model(&#x27;Cat&#x27;, &#123; name: String &#125;);</span><br><span class="line"></span><br><span class="line">//实例化一个Cat，实例对象为kitty</span><br><span class="line">const kitty = new Cat(&#123; name: &#x27;Zildjian&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">//持久化保存kitty实例</span><br><span class="line">kitty.save().then(() =&gt; console.log(&#x27;meow&#x27;));</span><br></pre></td></tr></table></figure>

<ul>
<li>mongoose 的基本使用</li>
</ul>
<ul>
<li>生成模型构造函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">var Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">//设计集合结构（表结构）schema---&gt;提要，纲要</span><br><span class="line">//字段名称就是表结构中的属性名称</span><br><span class="line">//值类型</span><br><span class="line">//约束的目的：为了保证数的完整性</span><br><span class="line">var blogSchema = new Schema(&#123;</span><br><span class="line">  title:  String,</span><br><span class="line">  author: String,</span><br><span class="line">  body:   String,</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    typte: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">  comments: [&#123; body: String, date: Date &#125;],</span><br><span class="line">  date: &#123; type: Date, default: Date.now &#125;,</span><br><span class="line">  hidden: Boolean,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    votes: Number,</span><br><span class="line">    favs:  Number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//将文档结构发布为模型</span><br><span class="line">// 参数一：大写单数表示数据库名称</span><br><span class="line">//         mongoose会自动将大写单数改为小写复数</span><br><span class="line">// 参数二： 架构 Schema</span><br><span class="line">// 返回值： 模型构造函数</span><br><span class="line">var User = mongoose.model(&#x27;User&#x27;, blogSchema)</span><br><span class="line">// module.exports = mongoose.model(&#x27;Student&#x27;, blogSchema)</span><br></pre></td></tr></table></figure>

<p>基于模型构造函数 生成添加一条数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var admin = new User(&#123;</span><br><span class="line">    username: &#x27;admin&#x27;,</span><br><span class="line">    password: &#x27;1245435&#x27;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line">admin.save(function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;保存失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;保存成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>基于模型构造函数 查询数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询所有数据</span><br><span class="line">User.find(function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">         console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//promise 查询所有</span><br><span class="line">User.find()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//按条件查询</span><br><span class="line"> User.find(&#123;</span><br><span class="line">    username: &#x27;xx&#x27;</span><br><span class="line"> &#125;, function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//查找符合条件的第一个（可以写多个条件）,没有条件的话，为第一条数据</span><br><span class="line"> User.findOne(&#123;</span><br><span class="line">    username: &#x27;xx&#x27;</span><br><span class="line"> &#125;, function(err, ret)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>基于模型构造函数 按条件更新数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Model.update(conditions, doc, [options], [callback])</span><br><span class="line">//Model.findOneAndUpdate([conditions], [update], [options], [callback])</span><br><span class="line">User.findByIdAndUpdate(&#x27;5a7d8f2sd78ag6g&#x27;,&#123;</span><br><span class="line">    username: &#x27;zs&#x27;</span><br><span class="line">&#125;, function(err, ret)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">       console.log(&#x27;更新失败&#x27;)</span><br><span class="line">    else &#123;</span><br><span class="line">       console.log(&#x27;更新成功&#x27;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>基于模型构造函数 删除数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User.remove(&#123;</span><br><span class="line">    username: &#x27;zs&#x27;</span><br><span class="line">&#125;, function(err, ret)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">       console.log(&#x27;查询失败&#x27;)</span><br><span class="line">    else &#123;</span><br><span class="line">       console.log(ret)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="补充（node-使用-mysql）"><a href="#补充（node-使用-mysql）" class="headerlink" title="补充（node 使用 mysql）"></a>补充（node 使用 mysql）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引包</span><br><span class="line">var mysql      = require(&#x27;mysql&#x27;);</span><br><span class="line">//创建连接</span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : &#x27;localhost&#x27;,</span><br><span class="line">  user     : &#x27;me&#x27;,</span><br><span class="line">  password : &#x27;secret&#x27;,</span><br><span class="line">  database : &#x27;my_db&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> //连接数据库</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"> //执行数据操作,可以直接使用 SQL 语句</span><br><span class="line"> //查找</span><br><span class="line">connection.query(&#x27;SELECT * FROM `users`&#x27;, function (error, results, fields) &#123;</span><br><span class="line">  if (error) throw error;</span><br><span class="line">  console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加</span><br><span class="line"> connection.query(&#x27;INSERT INTO users VALUES(NULL, &quot;admin&quot;:&quot;123&quot;)&#x27;, function (error, results, fields) &#123;</span><br><span class="line">   if (error) throw error;</span><br><span class="line">   console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line"> &#125;);</span><br><span class="line"> //关闭数据库</span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<h2 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h2><ol>
<li>安装 nodejs</li>
<li>安装 mongod</li>
<li>安装 redis<br>3.1 redis-server 启动 redis<br>3.2 ps axu | grep redis 查看 redis 服务进程</li>
<li>安装 nginx<br>4.1 nginx -s reopen // 重新指定日志打印的文件<br>4.2 nginx - t //检测配置文件是否有语法错误<br>4.3 nginx -s reload // 重新加载配置文件</li>
</ol>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>lerna开发</title>
    <url>/2021/11/01/lerna%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="创建-npm-私服"><a href="#创建-npm-私服" class="headerlink" title="创建 npm 私服"></a>创建 npm 私服</h2><span id="more"></span>

<ul>
<li>verdaccio 是一个简单、零配置的本地私有化 npm 仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install verdaccio -g</span><br><span class="line"></span><br><span class="line">verdaccio</span><br><span class="line">http://localhost:4873</span><br><span class="line">npm adduser --registry http://localhost:4873/</span><br><span class="line">npm publish --registry http://localhost: 4873/</span><br></pre></td></tr></table></figure>

<h2 id="lerna-常用命令"><a href="#lerna-常用命令" class="headerlink" title="lerna 常用命令"></a>lerna 常用命令</h2><p>项目初始化<br>| 命令 | 说明 |<br>| — | — |<br>| lerna init –independent | 初始化项目 |</p>
<p>创建包<br>| 命令 | 说明 |<br>| — | — |<br>| lerna create module-1 | 创建 package |<br>| lerna add | 安装依赖 |<br>| lerna link | 链接依赖 |</p>
<p>开发和测试<br>| 命令 | 说明 |<br>| — | — |<br>| lerna exec | 执行 shell 脚本 |<br>| lerna run | 执行 npm 命令 |<br>| lerna clean | 清空依赖|<br>| lerna bootstrap | 重新安装依赖 |</p>
<p>package 依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.给指定package安装依赖</span><br><span class="line">$ lerna add lodash packages/module-1</span><br><span class="line">$ lerna add lodash --scope=module-1</span><br><span class="line">$ lerna add lodash **/module-1</span><br><span class="line">$yarn workspace module-1 add lodash</span><br><span class="line"></span><br><span class="line">2.给所有package安装依赖</span><br><span class="line">$ lerna add lodash</span><br><span class="line"></span><br><span class="line">3.workspace之间的依赖</span><br><span class="line">$ lerna add module-2 packages/module-1</span><br><span class="line">$ lerna add module-2 --scope module-1</span><br></pre></td></tr></table></figure>

<p>发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lerna publish</span><br></pre></td></tr></table></figure>

<h2 id="lerna-json"><a href="#lerna-json" class="headerlink" title="lerna.json"></a>lerna.json</h2><ul>
<li>version: 当前仓库的版本，independent mode 请设置为 <strong>independent</strong>.<ul>
<li>lerna 对于包的管理有两种模式：固定模式 fixed、独立模式 independent。</li>
<li>固定模式所有包是统一的版本号，每次升级所有包统一更新，无论这个包内容是否改变。 *具体体现在 lerna 的配置文件中 lerna.json 中永远会存在一个确定版本号：{“version”: “0.0.1”}</li>
<li>独立模式，每个包都是单独的版本号，每次 lerna 触发发布命令，每个包的版本都会单独变化，具体体现在 lerna 的配置文件 lerna.json 中没有一个确定的版本号，而是{“version”:”independent”}</li>
</ul>
</li>
<li>npmClient: 指定运行的客户端程序 默认为 npm</li>
<li>ignoreChanges: 一个不包含在<strong>lerna changed/publish</strong>的 glob 数组，使用这个阻止发布不必要的更新，比如修复<strong>README.md</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;useWorkspaces&quot;: true, // 使用 workspaces 配置。此项为 true 的话，将使用 package.json 的 &quot;workspaces&quot;，下面的 &quot;packages&quot; 字段将不生效</span><br><span class="line">    &quot;version&quot;: &quot;0.1.0&quot;, // 所有包版本号，独立模式-&quot;independent&quot;</span><br><span class="line">    &quot;npmClient&quot;: &quot;cnpm&quot;, // npm client，可设置为 cnpm、yarn 等</span><br><span class="line">    &quot;packages&quot;: [ // 包所在目录，可指定多个</span><br><span class="line">        &quot;packages/*&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;command&quot;: &#123; // lerna 命令相关配置</span><br><span class="line">        &quot;publish&quot;: &#123; // 发布相关</span><br><span class="line">            &quot;ignoreChanges&quot;: [ // 指定文件或目录的变更，不触发 publish</span><br><span class="line">                &quot;.gitignore&quot;,</span><br><span class="line">                &quot;*.log&quot;,</span><br><span class="line">                &quot;*.md&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;bootstrap&quot;: &#123; // bootstrap 相关</span><br><span class="line">            &quot;ignore&quot;: &quot;npm-*&quot;,  // 不受 bootstrap 影响的包</span><br><span class="line">            &quot;npmClientArgs&quot;: [ // bootstr 执行参数</span><br><span class="line">                &quot;--no-package-lock&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CRA-lerna-react-typescript-项目搭建"><a href="#CRA-lerna-react-typescript-项目搭建" class="headerlink" title="CRA + lerna + react + typescript 项目搭建"></a>CRA + lerna + react + typescript 项目搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.create-react-app demo --template typescript</span><br><span class="line"></span><br><span class="line">2.cd demo</span><br><span class="line"></span><br><span class="line">3.npm run eject</span><br><span class="line"></span><br><span class="line">4.lerna init</span><br><span class="line"></span><br><span class="line">5.lerna create builder-script</span><br><span class="line"></span><br><span class="line">6.自定义builder-scripts脚本命令</span><br><span class="line"></span><br><span class="line">7.自定义 eslintrc、tsconfig、webpack等配置项</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>lerna</category>
      </categories>
      <tags>
        <tag>lerna</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js相关知识</title>
    <url>/2019/08/29/node.js%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么?"></a>Node.js 是什么?</h3><span id="more"></span>

<ul>
<li>Node.js 是一个 JavaScript 运行时环境，可以解析和执行 js 代码。</li>
<li>构建于 Chrome 的 V8 引擎之上</li>
<li>没有 BOM、DOM，有 EcmaScript 语法。</li>
<li>node 中有很多具名的核心模块<ul>
<li>fs 文件操作模块</li>
<li>http 服务器构建模块</li>
<li>path 路径模块</li>
<li>os 操作系统信息模块</li>
</ul>
</li>
<li>在核心模块中提供了一些服务器级别的操作 API - 文件读写 - 网络服务的构建 - 网络通信 - http 服务器<!--more--></li>
</ul>
<h3 id="node-都有哪些特性？"><a href="#node-都有哪些特性？" class="headerlink" title="node 都有哪些特性？"></a>node 都有哪些特性？</h3><ul>
<li><p>单线程</p>
<ul>
<li>不会为每个用户连接创建一个新的线程，仅仅使用一个线程，减少了操作系统的线程创建<br>和销毁的时间开销。缺点就是一个用户造成线程的崩溃会导致整个服务的崩溃。</li>
<li>减少内存的开销</li>
</ul>
</li>
<li><p>事件驱动 event-driven</p>
<ul>
<li>node 中一个时刻只能执行一个事件回调函数，但是执行过程中，可以转而处理<br>其他事件，然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。</li>
</ul>
</li>
<li><p>非阻塞 I/O</p>
<ul>
<li>I/O 数据传输操作会阻塞代码的执行，极大降低了程序的执行效率,因为一个线程只能处理<br>一项任务，要想提高吞吐量必须通过多线程。非阻塞 I/O 机制，可以将异步操作的处理<br>代码放在回调函数中，从而提高了程序的执行效率。</li>
</ul>
</li>
</ul>
<h3 id="浏览器的进程和线程"><a href="#浏览器的进程和线程" class="headerlink" title="浏览器的进程和线程"></a>浏览器的进程和线程</h3><ul>
<li>一个程序可以有多个进程</li>
<li>一个进程可以有多个线程</li>
<li>进程在执行应用程序中拥有独立的内存单元，而多个线程共享内存。</li>
<li>多个线程之间可以相互通信</li>
<li>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口</li>
<li>线程不能独立执行，必须依存在应用程序中</li>
</ul>
<h3 id="Node-js-适合开发什么？"><a href="#Node-js-适合开发什么？" class="headerlink" title="Node.js 适合开发什么？"></a>Node.js 适合开发什么？</h3><ul>
<li>善于 I/O,不善于计算，因为 Node.js 最擅长的就是任务调度，不适合于利用 CPU 进行过多的运算的程序。</li>
<li>当应用程序需要处理大量并发的 I/O,而在向客户端发出响应之前，应用程序内部不需要<br>进行非常复杂处理的时候，Node.js 非常合适。</li>
<li>Node.js 也非常适合与 web socket 配合，开发长连接的实时交互应用程序。<ul>
<li>用户表单</li>
<li>考试系统</li>
<li>聊天室</li>
<li>图文直播</li>
</ul>
</li>
</ul>
<h3 id="nodejs-能做什么？"><a href="#nodejs-能做什么？" class="headerlink" title="nodejs 能做什么？"></a>nodejs 能做什么？</h3><ul>
<li>Node.js 可以生成动态页面内容</li>
<li>Node.js 可以创建，打开，读取，写入，删除和关闭服务器上的文件</li>
<li>Node.js 可以收集表单数据</li>
<li>Node.js 可以添加，删除，修改数据库中的数据</li>
</ul>
<h3 id="服务端渲染和客户端渲染的区别"><a href="#服务端渲染和客户端渲染的区别" class="headerlink" title="服务端渲染和客户端渲染的区别"></a>服务端渲染和客户端渲染的区别</h3><ul>
<li>客户端渲染不利于 SEO 搜索引擎优化</li>
<li>服务器渲染可以被爬虫抓取</li>
<li>例如：京东商品列表是服务端渲染，用户评论是客户端渲染（提高用户体验）</li>
</ul>
<h4 id="小补充：使用-cnpm"><a href="#小补充：使用-cnpm" class="headerlink" title="小补充：使用 cnpm"></a>小补充：使用 cnpm</h4><ul>
<li><p>方法一 安装 cnpm</p>
<ul>
<li><code>npm install --global cnpm</code></li>
</ul>
</li>
<li><p>方法二 改变 registry</p>
<ul>
<li><code>npm install jquery --registry=https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p>方法三 加入配置选项</p>
<ul>
<li><code>npm config set registry https://registry.npm.taobao.org</code></li>
<li><code>npm config list</code></li>
</ul>
</li>
</ul>
<h2 id="用-nodejs-实现读取文件操作"><a href="#用-nodejs-实现读取文件操作" class="headerlink" title="用 nodejs 实现读取文件操作"></a>用 nodejs 实现读取文件操作</h2><!--more-->

<pre><code> const fs = require(&quot;fs&quot;)

//fs 核心模块提供了一个fs.readFile方法，用来读取指定目录下的文件

//fs.readFile有三个参数
// 1. 读取文件的路径
// 2. 读取文件的编码格式
// 3. 当文件读取完成，调用这个callback回调函数来读取文件的结果

fs.readFile(&#39;./data/hello.txt&#39;,&#39;utf-8&#39;,function(err,data)&#123;
    if(err)&#123;
        console.log(err)    //第一个参数是err对象
        return
    &#125; else &#123;
        console.log(data)   //第二个参数才是data数据
    &#125;
&#125;)
</code></pre>
<h2 id="用-nodejs-实现写入文件操作"><a href="#用-nodejs-实现写入文件操作" class="headerlink" title="用 nodejs 实现写入文件操作"></a>用 nodejs 实现写入文件操作</h2><pre><code>const fs = require(&#39;fs&#39;)

let msg = &#39;hello world&#39;

//fs.writeFile有三个参数
// 1. 第一个参数为写入的文件路径
// 2. 第二个参数为写入的内容
// 3. 第三个参数为可选参数，表示写文件的编码格式
// 4. 第四个参数为回调函数，回调函数只有一个参数err，判断是否写入成功。

fs.writeFile(&#39;./data/hello.txt&#39;,msg,&#39;utf-8&#39;,function(err)&#123;
    if(err)&#123;
        console.log(&#39;写入错误&#39; + err)
    &#125; else &#123;
        console.log(&#39;ok&#39;)
    &#125;
&#125;)
</code></pre>
<h2 id="nodejs-如何开启进程，进程如何通讯？"><a href="#nodejs-如何开启进程，进程如何通讯？" class="headerlink" title="nodejs 如何开启进程，进程如何通讯？"></a>nodejs 如何开启进程，进程如何通讯？</h2><ul>
<li><p>进程 process VS 线程 thread</p>
<ol>
<li>进程： 进行资源分配和调度的最小单元，有独立内存空间</li>
<li>线程： 进行运算调度的最小单元，共享进程内存空间</li>
<li>js 是单线程的，但可以多进行执行，如 、WebWorker</li>
</ol>
</li>
<li><p>为何需要多进程？</p>
<ul>
<li>多核 CPU，更适合处理多进程</li>
<li>内存较大，多个进程才能更好的利用（单进程有内存上线）</li>
</ul>
</li>
<li><p>开启进程两种方法 child_process.fork， cluster.fork</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">fork</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/xxx&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 开启子进程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> computeProcess = <span class="title function_">fork</span>(<span class="string">&#x27;./compute.js&#x27;</span>);</span><br><span class="line">    computeProcess.<span class="title function_">send</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    computeProcess.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;sum is&#x27;</span> + data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    computeProcess.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子进程因报错而退出&#x27;</span>);</span><br><span class="line">      computeProcess.<span class="title function_">kill</span>();</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localhost: 3000 starting...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compute.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子进程id&#x27;</span>, process.<span class="property">pid</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子进程接收到的数据&#x27;</span>, data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sum = <span class="title function_">getSum</span>();</span><br><span class="line"></span><br><span class="line">  process.<span class="title function_">send</span>(sum);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cpuCoreLength = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpuCoreLength; i++) &#123;</span><br><span class="line">    cluster.<span class="title function_">fork</span>(); <span class="comment">// 开启子进程</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">worker</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子进程退出&#x27;</span>);</span><br><span class="line">    cluster.<span class="title function_">fork</span>(); <span class="comment">// 进程守护</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CommonJS-解析"><a href="#CommonJS-解析" class="headerlink" title="CommonJS 解析"></a>CommonJS 解析</h2><blockquote>
<p>CommonJS 的核心思想是通过 require 方法来同步加载依赖的其他模块，通过 module.export 来导出需要暴露的接口</p>
</blockquote>
<p>require 内部逻辑：<br>例如：require(X)</p>
<ol>
<li>如果 X 是内置模块（比如 require(‘http’)）<br>a. 返回该模块<br>b. 不再继续执行</li>
<li>如果 X 以 ‘./‘或者 ‘../‘开头<br>a. 根据 X 所在父模块，确定 X 的绝对路径<br>b. 将 X 当作文件，依次查找以下文件（.x ｜.x.js | .x.json | .x.node），只要一个存在就返回该文件，不再继续执行<br>c. 把 X 当作目录，依次查找以下文件（.x/package.json | .x/index.js | .x/index.json | .x/index.node），只要一个存在就返回并不再执行</li>
<li>如果 X 不带路径<br>a. 根据 X 所在父模块，确定 X 可能的安装目录，依次往上级目录查找，把 X 当成文件名或目录名加载</li>
<li>找不到抛错’not found’</li>
</ol>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>React深入浅出知识链路</title>
    <url>/2021/10/05/react%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="react-渲染流程？"><a href="#react-渲染流程？" class="headerlink" title="react 渲染流程？"></a>react 渲染流程？</h2><span id="more"></span>

<p><img src="/images/md_img/react-render.png" alt="react-render"></p>
<p>React16 以前 React 的组件更新创建虚拟 DOM 和 Diff 的过程是不可中断，如果需要更新组件树层级非常深的话,diff 过程会占用浏览器线程，阻塞 js 执行以及 dom 渲染，基于以上原因 react 团队调整架构将原来数据结构的虚拟 dom 改为 fiber 数据结构，实现由原来不可中断的更新过程变成异步可中断的更新（双缓存机制），</p>
<p>React Filber 架构分为三层:</p>
<ul>
<li><p>Scheduler（调度器，调度任务优先级，高优先级任务进入 Reconciler）</p>
</li>
<li><p>Reconciler（协调器，diff 算法找出变化的组件）</p>
</li>
<li><p>Renderer（渲染器，将组件渲染到页面）</p>
</li>
</ul>
<blockquote>
<p>React18 开启 concurrent mode 通过时间切片解决了任务拆分和任务优先级的问题，整个 Fiber 树的更新流程分为 render 阶段和 commit 阶段。</p>
</blockquote>
<ul>
<li><p>首先在 DOM 挂载和更新的时候会通过 React.createElement(后改为 babel、tsx 更编译工具引入 react/jsx-runtime 包引入),将 react 组件变成 jsx 对象，或者叫 virtual-dom</p>
</li>
<li><p>这些渲染任务会经过 Scheduler 的调度根据优先级的不同，通过帧率动态调整，计算剩余时间，模拟 requestIdleCallback，实现了时间切片，决定哪些任务进入 render 阶段，</p>
</li>
<li><p>在 render 阶段根据 jsx 对象构建新的 workInProgressFiber 树，通过 Reconciler 协调器对比 jsx 和当前 fiber 的差异标记对应的副作用tag，（比如在mount 时 fiber 节点标记为 placement），将有副作用（placement 插入、update 更新、deletetion 删除等）的 fiber 节点加入一条单向循环链表中，子节点副作用存放在父节点。</p>
</li>
<li><p>在 commit 阶段（分为 before mutation、mutation、layout 阶段）会遍历这条链表，执行副作用处理响应的生命周期（如 placement 插入，执行 passive：useEffect 的副作用），然后将处理后的节点渲染到真实 DOM 节点，这个过程会引用不同的渲染器，在浏览器中就是 react-dom，在 canvas 或 svg 中就是 react-art 等。</p>
</li>
<li><p>在 update 时根据最新的 jsx 对象对比 current fiber，在构建新的 workInProgressFiber 树（diff 算法），对比过程同样会收集副作用</p>
</li>
<li><p>更新的时候利用的是在内存中构建并直接替换的双缓存技术，react 中最多会同时存在两颗 fiber 树，屏幕上显示内容对应的 fiber 树为 current fiber 树，正在内存中构建的 fiber 树为 workInProgressFiber 树</p>
</li>
<li><p>两颗缓存树之间的替换操作是在 commit 阶段的 mutation 之后 layout 之前执行的 root.finishedWork = root.current.alternate</p>
</li>
</ul>
<h2 id="diff-策略"><a href="#diff-策略" class="headerlink" title="diff 策略"></a>diff 策略</h2><blockquote>
<p>React 文档中提到即使最前沿的算法，前后两棵树完全比对的算法时间复杂度为 O(n^3)，其中 n 是树中元素的数量。所以为了降低算法复杂度，React 的 diff 策略会预设三个限制</p>
</blockquote>
<ol>
<li>只对同级元素进行 Diff，如果 Dom 节点在两次更新中跨越了层级，那么 React 不会尝试复用它</li>
<li>不同类型的元素不复用，如果元素由 div 变为 p，React 会销毁 div 及其子孙节点，并新建 p 及其子孙节点</li>
<li>通过 key prop 来确定 dom 节点的更新情况</li>
</ol>
<blockquote>
<p>React 可以从同级的节点数量将 Diff 分为单节点 diff 和多节点 diff</p>
</blockquote>
<ol>
<li>单节点 diff 优先判断 key 是否相同，如果 key 相同判断 type 是否相同，只有都相同才会复用 dom 节点，type 不同将其 child 及其兄弟 fiber 都标记删除，如果仅 key 不同仅将其 child 标记删除</li>
<li>多节点 diff，分为三种情况新增、删除和更新，但是更新操作的优先级要更高，因为在日常开发中，更新组件发生的频率更高，所以 diff 会优先判断当前节点是否属于更新操作，而且在 diff 的时候 react 针对同级的 fiber 节点是通过 oldFiber.sibling 指针链接形成的单链表，所以无法使用双指针（从数组头和尾同时遍历提高效率）优化。基于这个原因，react 的 diff 算法的整体逻辑会经历两轮遍历：第一轮处理更新的节点，第二轮处理剩下的不属于更新的节点</li>
</ol>
<h2 id="当-shouldYield-为-true，以至于-performUnitOfWork-被中断后如何重新启动？"><a href="#当-shouldYield-为-true，以至于-performUnitOfWork-被中断后如何重新启动？" class="headerlink" title="当 shouldYield 为 true，以至于 performUnitOfWork 被中断后如何重新启动？"></a>当 shouldYield 为 true，以至于 performUnitOfWork 被中断后如何重新启动？</h2><blockquote>
<p>React 架构中的 Scheduler 调度器包含两个功能：时间切片、优先级调度</p>
</blockquote>
<ul>
<li>时间切片采用执行时机更靠前的 MessageChannel，如果当前宿主环境不支持 MessageChannel 则使用 setTimeout，而且在 Scheduler 中为任务分配的初始剩余时间为 5ms，随着应用运行会根据 fps 动态调整任务的可执行时间</li>
<li>优先级调度是通过 runWithPriority 实现的，接收一个优先级和一个回调函数，其中不同的优先级对应的是不同时长的任务过期时间<ul>
<li>Scheduler 中存在两个队列 timerQueue 保存未就绪任务、taskQueue 保存已就绪任务，当 shouldYield 为 true 时，会在 taskQueue 已就绪任务中通过小顶堆查找时间最早的任务并执行它<ul>
<li>配置 delay 代表‘task 需要延迟执行时间’，会先进入 timerQueue，当 delay 对应时间结束后会从 timerQueue 取出进入 taskQueue</li>
<li>taskQueue 会根据 task.expirationTime 作为排序依据，值越小代表 task 的优先级越高。</li>
</ul>
</li>
</ul>
</li>
<li>配置 delay 且未到期一定不会执行，配置 delay 且到期或者未配置 delay 会根据 task.expirationTime 排序调度并执行，过期 task 执行时不会被打断</li>
</ul>
<h2 id="React-优先级队列的实现使用的数据结构为小顶堆"><a href="#React-优先级队列的实现使用的数据结构为小顶堆" class="headerlink" title="React 优先级队列的实现使用的数据结构为小顶堆"></a>React 优先级队列的实现使用的数据结构为小顶堆</h2><ul>
<li>特点：是一颗完全二叉树，除最后一层外，其他层的节点个数都是满的，且最后一层节点靠左排列。堆中每个节点的值都小于等于其子树节点的值<ul>
<li>由于堆化操作已经完成对堆的排序，所以 peek 获取最小的值时间复杂度为 O(1)</li>
</ul>
</li>
</ul>
<h2 id="宏任务选择"><a href="#宏任务选择" class="headerlink" title="宏任务选择"></a>宏任务选择</h2><p>优先级高到低</p>
<ol>
<li>在支持 setImmediate 的环境中，node.js 和旧版本 IE 中，使用 setImmediate 调度宏任务，相比 MessageChannel 执行时机更早</li>
<li>在支持 MessageChannel 的环境中（浏览器，worker 中），使用 MessageChannel 调度宏任务，通过 MessagePort 属性发送数据</li>
<li>其余情况使用 setTimeout 调度宏任务，存在最小延迟时间，执行时机晚于上述两个 api</li>
</ol>
<h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><p>会对 <em>props</em> 和 <em>state</em> 进行浅比较（可能会因为深层的数据不一致而产生错误的否定判断），跳过不比较的更新，提高组件性能</p>
<h2 id="PureComponent-和-shouldComponentUpdate-的关系"><a href="#PureComponent-和-shouldComponentUpdate-的关系" class="headerlink" title="PureComponent 和 shouldComponentUpdate 的关系"></a>PureComponent 和 shouldComponentUpdate 的关系</h2><p><strong>PureComponent</strong>通过自带的 <em>props</em> 和 <em>state</em> 浅比较实现了<strong>shouldComponentUpdate(nextProps, nextState)</strong></p>
<h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><p><strong>memo</strong>接收两个参数：</p>
<ul>
<li>第一个参数：组件本身，也就是要优化的组件</li>
<li>第二个参数：(preProps, nextProps)=&gt;boolean, 若为 <strong>true</strong> 则不更新，为 <strong>false</strong> 则更新</li>
</ul>
<h2 id="生命周期-v16-0-前"><a href="#生命周期-v16-0-前" class="headerlink" title="生命周期 v16.0 前"></a>生命周期 v16.0 前</h2><p>四大阶段：Initialization（初始化）、Mounting（挂载）、Update（更新）、Unmounting（卸载）</p>
<p>Initailization：</p>
<ul>
<li>constructor()：初始化操作，定义 this.state 的初始内容，只会执行一次</li>
<li>super 的作用：调用基类构造方法，将父组件的 props 注入子组件，供子组件读取（props 只读不可变，state 可变）</li>
</ul>
<p>Mounting</p>
<ul>
<li>componentWillMount：组件挂载到 DOM 前调用，只调用一次不会引起组件重渲染</li>
<li>render：渲染</li>
<li>componentDidMount：组件挂载到 DOM 后调用，只调用一次</li>
</ul>
<p>Update</p>
<ul>
<li>componentWillReceiveProps(nextProps): 调用与 props 引起的组件更新过程中</li>
<li>shouldComponentUpdate(nextProps, nextState): 性能优化组件，返回 false 停止更新，减少组件的不必要渲染，优化性能</li>
<li>componentWillUpdate(nextProps, nextState):组件更新前调用</li>
<li>componentDidUpdate(prevProps, prevState):组件更新后调用</li>
</ul>
<p>Unmounting</p>
<ul>
<li>componentWillUnmount：组件被卸载前调用，执行一些清理工作，避免内存泄漏</li>
</ul>
<h2 id="React-v16-4-后"><a href="#React-v16-4-后" class="headerlink" title="React v16.4 后"></a>React v16.4 后</h2><p>移除了：componentWillMount、componentWillReceiveProps、componentWillUpdate<br>新增了：static getDerivedStateFromProps、getSnapshotBeforeUpdate</p>
<p>getDerivedStateFromProps(prevProps, prevState):组件创建和更新时调用<br>getSnapshotBeforeUpdate(prevProps, prevState):更新时 DOM 节点渲染前，获取 DOM 信息（如滚动位置），返回值作为参数传递给 componentDidUpdate</p>
<h2 id="React-v16-8-的-hooks"><a href="#React-v16-8-的-hooks" class="headerlink" title="React v16.8 的 hooks"></a>React v16.8 的 hooks</h2><ul>
<li>useState</li>
<li>useEffect</li>
<li>useLayoutEffect：同步，useLayoutEffect 在 DOM 更新之后，浏览器绘制之前，浏览器只会绘制一次，useLayoutEffect 先于 useEffect 前执行，如果在 useEffect 中改变 DOM，可能会导致浏览器再次回流和重绘，useLayoutEffect 的 callback 中代码执行会阻塞浏览器绘制</li>
<li>useReducer</li>
<li>useMemo</li>
<li>useCallback</li>
<li>useRef</li>
<li>useImperativeHandle(ref, createHandle, [deps]):createHandle 返回值作为暴露给付组件的 ref 对象</li>
<li>useDebugValue：可用于在 React 开发者工具中显示自定义 hook 的标签</li>
</ul>
<h2 id="React-v18-的-hooks"><a href="#React-v18-的-hooks" class="headerlink" title="React v18 的 hooks"></a>React v18 的 hooks</h2><ul>
<li>useSyncExternalStore：是一个推荐用于读取和订阅外部数据源的 hook，其方式与选择性的 hydration 和时间切片等并发渲染功能兼容</li>
<li>useTransition：返回一个状态值表示过渡任务的等待状态，以及一个启动该过渡任务的函数。</li>
<li>useDeferredValue：接受一个值，并返回该值的新副本，该副本将推迟到更紧急地更新之后。</li>
<li>useId ： 是一个用于生成横跨服务端和客户端的稳定的唯一 ID 的同时避免 hydration 不匹配的 hook。</li>
</ul>
<h2 id="react-dom"><a href="#react-dom" class="headerlink" title="react-dom"></a>react-dom</h2><ul>
<li>createPortal: 在 Portal 中提供了一种将子节点渲染到已 DOM 节点中的方式，该节点存在于 DOM 组件的层次结构之外。</li>
<li>flushSync：可以将回调函数中的更新任务，放到一个较高级的优先级中，适用于强制刷新，同时确保了 DOM 会被立即更新</li>
<li>unstable_batchedUpdates :可用于手动批量更新 state，可以指定多个 setState 合并为一个更新请求</li>
</ul>
<h2 id="虚拟-DOM-的优缺点？"><a href="#虚拟-DOM-的优缺点？" class="headerlink" title="虚拟 DOM 的优缺点？"></a>虚拟 DOM 的优缺点？</h2><p>优点：</p>
<ol>
<li>处理了浏览器兼容性问题，避免了用户操作真实 DOM</li>
<li>内容经过 xss 处理，可以防范 xss 攻击</li>
<li>跨平台开发</li>
<li>更新的时候可以实现差异化更新，减少更新 DOM 的操作</li>
</ol>
<p>缺点：</p>
<ol>
<li>虚拟 DOM 需要消耗额外的内存</li>
<li>首次渲染不一定会更快</li>
</ol>
<h2 id="Portal-传送门"><a href="#Portal-传送门" class="headerlink" title="Portal 传送门"></a>Portal 传送门</h2><blockquote>
<p>可以将 DOM 结构脱离父节点渲染到指定节点位置，并且不会破坏事件传播，事件冒泡会正常工作，生命周期正常执行。常见使用场景：渲染模态框、工具提示、弹出消息等</p>
</blockquote>
<h2 id="useEffect-和-useLayoutEffect-的执行时机"><a href="#useEffect-和-useLayoutEffect-的执行时机" class="headerlink" title="useEffect 和 useLayoutEffect 的执行时机"></a>useEffect 和 useLayoutEffect 的执行时机</h2><ul>
<li>useEffect 在 beforeMutation 阶段调度 flushPassiveEffects，在 layout 阶段注册 destroy、create 函数，mutation 阶段执行 destroy 函数，在 commit 阶段完成后，异步执行 flushPassiveEffects，内部执行注册的回调</li>
<li>useLayoutEffect 在 mutation 阶段执行 destroy 销毁函数，在 layout 阶段执行 create 创建函数</li>
<li>getSnapshotBeforeUpdate 生命周期钩子在 beforeMutation 阶段执行</li>
</ul>
<h2 id="为什么不能在循环或者条件语句中使用hooks？"><a href="#为什么不能在循环或者条件语句中使用hooks？" class="headerlink" title="为什么不能在循环或者条件语句中使用hooks？"></a>为什么不能在循环或者条件语句中使用hooks？</h2><blockquote>
<p>这是React Hooks的首要规则，因为React Hooks是以单向循环链表(好处：可以实现并发、可打断、可恢复、可继续执行下一个fiber任务)的形式存储的，即是有序的。循环是为了从最后一个节点移到一个节点的时候，只需通过next一步就可以拿到第一个节点，而不需要一层层回溯。React Hooks的执行，分为 mount 和 update 阶段，在mount阶段的时候，通过mountWorkInProgressHook() 创建各个hooks (如useState, useMemo, useEffect, useCallback等)，并且将当前hook添加到表尾。在update阶段，在获取或者更新hooks值的时候，会先获取当前hook的状态，hook.memoizedState，并且是按照顺序或读写更新hook，若在条件或者循环语句使用hooks，那么在更新阶段，若增加或者减少了某个hook，hooks的数量发生变化，而React是按照顺序，通过next读取下一个hook，则导致后面的hooks和挂载阶段对应不上，发生读写错值的情况，从而引发bug。</p>
</blockquote>
<h2 id="为何-React-需要-fiber-并发模式这一套复杂东西，而-Vue-不需要呢？"><a href="#为何-React-需要-fiber-并发模式这一套复杂东西，而-Vue-不需要呢？" class="headerlink" title="为何 React 需要 fiber 并发模式这一套复杂东西，而 Vue 不需要呢？"></a>为何 React 需要 fiber 并发模式这一套复杂东西，而 Vue 不需要呢？</h2><p>React 需要引入 Fiber 架构和并发模式的主要原因是为了解决其在大型应用中的性能问题。在 React 之前的版本中，由于采用了递归调用的方式进行虚拟 DOM 的处理，当组件层级较深或组件数量较多时，会出现性能瓶颈，导致页面卡顿甚至无响应。</p>
<p>Fiber 架构的引入使得 React 能够实现增量渲染和优先级调度，使得在处理更新时可以灵活地中断、终止和恢复任务，从而更好地控制渲染过程，提高页面的流畅度和响应速度。而并发模式则允许 React 在浏览器空闲时执行任务，进一步提升性能表现。</p>
<p>相比之下，Vue 在设计上采用了不同的响应式系统和渲染优化策略，使得在大型应用中依然能够保持良好的性能表现，且相对于 React 的 Fiber 架构而言更加简洁直观。因此，虽然 Vue 不需要类似于 Fiber 的复杂架构，但仍然能够提供出色的性能。</p>
<p>总的来说，React 引入 Fiber 架构并非故意为难自己，而是为了不断优化框架性能，提升用户体验。不同框架在性能优化上采取了不同的策略和设计思路，最终都是为了更好地满足开发者和用户的需求。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript知识浅析</title>
    <url>/2019/08/23/typescript%E7%9F%A5%E8%AF%86%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="TypeScript-中的数据类型"><a href="#TypeScript-中的数据类型" class="headerlink" title="TypeScript 中的数据类型"></a>TypeScript 中的数据类型</h2><blockquote>
<p>typescript 中为了使编写的代码更规范，更利于维护，增加了类型校验，在 typescript 中主要提供了以下数据类型：</p>
</blockquote>
<span id="more"></span>

<ul>
<li>unknown (Top Type)<ul>
<li>保留静态检查能力，但是不能调用任何方法</li>
</ul>
</li>
<li>布尔类型 bolean</li>
<li>数字类型 number</li>
<li>字符串类型 string</li>
<li>数组类型 array</li>
<li>元组类型 tuple</li>
<li>枚举类型 enum</li>
<li>任意类型 any</li>
<li>null 和 undefined</li>
<li>void 类型</li>
<li>never 类型 (Bottom Type)<ul>
<li>联合类型的过滤</li>
<li>防御性编程，switch 类型收窄</li>
</ul>
</li>
</ul>
<p>类型之间的并集(|)会向上取顶部类型，即 never | ‘a’ =&gt; ‘a’, unknown | ‘a’ =&gt; unknown;<br>类型之间的交集(&amp;)会向下取底部类型，即 never &amp; ‘a’=&gt;never, unknown &amp; ‘a’ =&gt; ‘a’;</p>
<h2 id="ts-中-Object-和-object-这两个类型的区别？"><a href="#ts-中-Object-和-object-这两个类型的区别？" class="headerlink" title="ts 中 Object 和 object 这两个类型的区别？"></a>ts 中 Object 和 object 这两个类型的区别？</h2><blockquote>
<p>Object 可以被赋值为原始类型，但是 object 只能赋值为复杂数据类型</p>
</blockquote>
<h2 id="ts-中-type-和-interface-的区别"><a href="#ts-中-type-和-interface-的区别" class="headerlink" title="ts 中 type 和 interface 的区别"></a>ts 中 type 和 interface 的区别</h2><ol>
<li>type 可以声明基本类型别名，联合类型，元祖等类型</li>
<li>interface 能够声明合并</li>
<li>interface 可以 extends 进行类型扩展，type 可以通过交叉类型(&amp;)实现 interface 的 extend 行为。</li>
</ol>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>koa-generator快速搭建koa服务</title>
    <url>/2022/03/08/koa-generator%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAkoa%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="1-全局安装koa-generator脚手架"><a href="#1-全局安装koa-generator脚手架" class="headerlink" title="1.全局安装koa-generator脚手架"></a>1.全局安装<em>koa-generator</em>脚手架</h2><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g koa-generator</span><br><span class="line"># or</span><br><span class="line">yarn global add koa-generator</span><br></pre></td></tr></table></figure>

<h2 id="创建koa项目"><a href="#创建koa项目" class="headerlink" title="创建koa项目"></a>创建<em>koa</em>项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">koa2 project-name</span><br><span class="line"></span><br><span class="line">// 使用ejs引擎</span><br><span class="line">koa2 -e project-name</span><br></pre></td></tr></table></figure>

<h2 id="进入项目安装依赖"><a href="#进入项目安装依赖" class="headerlink" title="进入项目安装依赖"></a>进入项目安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd project-name</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure>

<h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br><span class="line"># or</span><br><span class="line">npm run dev</span><br><span class="line"># or...</span><br></pre></td></tr></table></figure>

<h3 id="使用-pm2-启动-koa-项目"><a href="#使用-pm2-启动-koa-项目" class="headerlink" title="使用 pm2 启动 koa 项目"></a>使用 pm2 启动 koa 项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install -g pm2</span><br><span class="line">// 启动项目</span><br><span class="line">pm2 start ./bin/www</span><br><span class="line">// pm2自动重启</span><br><span class="line">pm2 start ./bin/www/ --watch</span><br></pre></td></tr></table></figure>

<h3 id="pm2-相关命令（www-是项目名）"><a href="#pm2-相关命令（www-是项目名）" class="headerlink" title="pm2 相关命令（www 是项目名）"></a>pm2 相关命令（www 是项目名）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 list          #查看所有已启动项目</span><br><span class="line">pm2 start         #启动</span><br><span class="line">pm2 restart www   #重启</span><br><span class="line">pm2 stop www      #停止</span><br><span class="line">pm2 delete www    #删除</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3源码分析</title>
    <url>/2022/01/02/vue3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><span id="more"></span>

<ul>
<li>命令式：关注过程的一种编程范式，描述了完成一个功能的纤细逻辑与实现<ul>
<li>性能好</li>
</ul>
</li>
<li>声明式：不关注过程只关注结果<ul>
<li>可维护性强</li>
<li>开发成本（开发周期）、开发体验（心智负担）</li>
</ul>
</li>
</ul>
<h2 id="vue-框架设计原则"><a href="#vue-框架设计原则" class="headerlink" title="vue 框架设计原则"></a>vue 框架设计原则</h2><blockquote>
<p>vue 封装了命令式的逻辑，而对外暴露了声明式的接口；<br>vue 在可维护性和性能之间进行取舍，找到平衡点，在保证可维护性的基础上，尽可能的减少性能的损耗</p>
</blockquote>
<h2 id="vue-组件挂载时会发生如下几件事："><a href="#vue-组件挂载时会发生如下几件事：" class="headerlink" title="vue 组件挂载时会发生如下几件事："></a>vue 组件挂载时会发生如下几件事：</h2><ul>
<li>编译：vue 模板会被编译为渲染函数（就是用来返回虚拟 DOM 树的函数）</li>
<li>挂载：运行时渲染器会调用渲染函数，遍历返回虚拟 DOM 树，基于虚拟 DOM 树创建实际的 DOM 节点，此过程会追踪所用到的所有响应式依赖</li>
<li>更新：当依赖发生改变后，副作用会重新执行，创建一个更新后的虚拟 DOM 树，然后运行时会将新旧两颗虚拟 DOM 树进行对比，将必要的更新应用到真实 DOM 节点</li>
</ul>
<h2 id="带编译时信息的虚拟-DOM"><a href="#带编译时信息的虚拟-DOM" class="headerlink" title="带编译时信息的虚拟 DOM"></a>带编译时信息的虚拟 DOM</h2><blockquote>
<p>vue 中，框架同时控制着编译器和运行时，所以可以通过带编译时信息的虚拟 DOM 做很多编译时优化，例如静态提升、动态类型标记、树结构打平等</p>
</blockquote>
<blockquote>
<p>react 的实现是纯运行时的，所以 react 的更新算法无法预知新的虚拟 DOM 树会是怎样，所以每次更新总是需要遍历整棵树、对比每个 vnode 上的 props 的区别来更新节点，尽管 DOM 树中有些静态节点不会改变，但在每次重新渲染还会创建新的 vnode，带来了大量不必要的内存压力</p>
</blockquote>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3核心技术揭秘</title>
    <url>/2023/03/24/vue3%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98/</url>
    <content><![CDATA[<h2 id="vue-的特点（优点）"><a href="#vue-的特点（优点）" class="headerlink" title="vue 的特点（优点）"></a>vue 的特点（优点）</h2><span id="more"></span>

<ul>
<li>vue 关注视图层，用数据操作的方式代替了 dom 操作</li>
<li>vue 通过响应式的数据绑定实现了数据和视图之间的更新交互</li>
<li>vue 通过组件化开发让工程结构更加明确，更易于维护</li>
<li>vue 通过虚拟 DOM，优化了 DOM 操作，实现了性能提高</li>
<li>vue 拥有自己的 vue-cli/vite 脚手架工具，对良好的工程化性能</li>
</ul>
<h2 id="vue3-生命周期"><a href="#vue3-生命周期" class="headerlink" title="vue3 生命周期"></a>vue3 生命周期</h2><ul>
<li>onBeforMount -&gt; vue 实例挂载之前执行</li>
<li>onMounted -&gt; vue 实例挂载完成执行</li>
<li>onBeforeUpdate -&gt; 组件内数据发生变化之前执行</li>
<li>onUpdated -&gt; 组件内数据发生变化之后执行</li>
<li>onBeforeUnmount -&gt; 组件销毁之前</li>
<li>onUnmounted -&gt; 组件销毁之后</li>
<li>onActivated -&gt; keep-alive 组件激活时执行</li>
<li>onDeactivated -&gt; keep-alive 组件销毁时执行</li>
<li>onErrorCaptured -&gt; 捕获错误</li>
<li>onRenderTracked -&gt; dev 组件更新时跟踪所有变量和方法</li>
<li>onRenderTriggered -&gt; dev 触发渲染时调用，返回变化新旧值</li>
</ul>
<h2 id="vue3-相比于-vue2-有哪些不同？"><a href="#vue3-相比于-vue2-有哪些不同？" class="headerlink" title="vue3 相比于 vue2 有哪些不同？"></a>vue3 相比于 vue2 有哪些不同？</h2><ul>
<li>组合式（composition）api<ul>
<li>vue2 是选项式（option）api</li>
</ul>
</li>
<li>响应式原理<ul>
<li>vue2 响应式原理基础是 Object.defineProperty<ul>
<li>深层嵌套递归数据响应式</li>
<li>缺点：无法监听对象或数据新增、删除的元素</li>
<li>解决方案：针对数组原型方法 push、pop、shift、unshift、splice、sort 等进行 hack 处理，提供 Vue.set 监听对象/数组新增属性</li>
<li>tips：Object.defineProperty 可以监听数组已有元素，vue2 没有提供是因为性能问题</li>
</ul>
</li>
<li>vue3 是 Proxy（配合 Reflect）<ul>
<li>兼容性：放弃了 IE11 以下</li>
<li>动态属性增删都可以拦截</li>
<li>使用 Reflect 可以修正 Proxy 的 this 指向问题</li>
<li>vue3 使用 Proxy 并不能监听对象内部深层次的属性变化，处理方式是在 getter 中递归响应式，只有真正访问内部属性时才会变成响应式，节约性能</li>
</ul>
</li>
</ul>
</li>
<li>生命周期的变化<ul>
<li>vue3 需要添加 on ，使用上需要先引入，vue 可以直接调用</li>
<li>移除了 beforeCrete、created</li>
</ul>
</li>
<li>多根节点<ul>
<li>vue3 支持多根节点</li>
</ul>
</li>
<li>异步组件<ul>
<li>vue3 提供 Suspense 组件，通过 fallback 插槽提供异步组件渲染兜底的内容，如 loading 等</li>
</ul>
</li>
<li>Teleport<ul>
<li>vue3 提供 Teleport 组件可将部分组件移动到指定 dom 节点位置，如 Dialog 组件</li>
</ul>
</li>
<li>css 变量<ul>
<li>支持在 style 标签中使用 v-bind,给 css 绑定 js 变量</li>
</ul>
</li>
<li>代码打包体积<ul>
<li>vue3 的 api 可以被 tree-shaking，使用了 es6module，tree-shaking 依赖于 es6 模块的静态结构特性</li>
</ul>
</li>
<li>虚拟 dom<ul>
<li>vue3 静态提升：保存静态节点（pathchflag 为 -1）直接复用，添加更新类型标记 pathchflag（为 1 是动态绑定的元素）</li>
<li>事件缓存，可以在第一次渲染后缓存事件，vue2 每次渲染都会传递一个新函数</li>
</ul>
</li>
<li>diff 算法<ul>
<li>vue2 双端比较</li>
<li>vue3 最长递归子序列</li>
</ul>
</li>
</ul>
<h2 id="defineProperty-和-Proxy-的区别？"><a href="#defineProperty-和-Proxy-的区别？" class="headerlink" title="defineProperty 和 Proxy 的区别？"></a>defineProperty 和 Proxy 的区别？</h2><ul>
<li><p>Object.defineProperty 是 Es5 的方法，Proxy 是 Es6 的方法</p>
</li>
<li><p>defineProperty 是劫持对象属性，Proxy 是代理整个对象；</p>
</li>
<li><p>defineProperty 不能监听(重置可以)到对象<strong>新增</strong>属性和<strong>修改</strong>新增属性的变化，Proxy 可以</p>
</li>
<li><p>defineProperty 不能监听根据自身数组下标<strong>修改</strong>数组元素的变化（所以 vue2 提供了 Vue.$set和Vue.$delete）</p>
</li>
<li><p>defineProperty 不兼容 IE8，Proxy 不兼容 IE11</p>
</li>
<li><p>defineProperty 不支持 Map、Set 等数据结构</p>
</li>
<li><p>defineProperty 只能监听 get、set，而 Proxy 可以拦截多达 13 种方法；</p>
</li>
<li><p>Reflect 是为了在执行对应的拦截操作的方法时能传递正确的 this 上下文</p>
<ul>
<li>Proxy handler 中的 receiver 指向<ul>
<li>正常情况下，<code>receiver</code>指向的是<code>当前的代理对象</code></li>
<li>特殊情况下，<code>receiver</code>指向引发<code>当前操作的对象</code>（obj）<ul>
<li>Object.setPrototypeOf(obj, proxy)，访问 obj.name 时如果没有 name 就会根据原型链查找</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Proxy 兼容性相对较差，且无法通过 pollyfill 解决；所以 Vue3 不支持 IE11 以下；</p>
</li>
<li><p>Proxy 返回的是一个新对象</p>
</li>
<li><p>Proxy 也是不能对对象进行深层次响应的，实现动态递归响应式，只有在使用（get）的时候才会做响应式处理</p>
</li>
</ul>
<h2 id="vue3-响应式原理"><a href="#vue3-响应式原理" class="headerlink" title="vue3 响应式原理"></a>vue3 响应式原理</h2><ul>
<li>activeEffect 解决匿名函数问题</li>
<li>WeakMap、Map、Set 存储对象属性的相关副作用函数</li>
<li>track()实现依赖收集、层级依赖追踪、依赖清理（解决嵌套副作用）</li>
<li>trigger()当某个依赖值发生变化时，通过执行副作用函数获得与依赖变化后对应的最新值</li>
</ul>
<h2 id="v-if-和-v-for-的优先级？"><a href="#v-if-和-v-for-的优先级？" class="headerlink" title="v-if 和 v-for 的优先级？"></a>v-if 和 v-for 的优先级？</h2><p>v-if 的优先级高于 v-for</p>
<h2 id="ref-和-reactive-定义响应式数据"><a href="#ref-和-reactive-定义响应式数据" class="headerlink" title="ref 和 reactive 定义响应式数据"></a>ref 和 reactive 定义响应式数据</h2><p>ref 原理</p>
<ol>
<li>ref 内部封装一个 RefImpl 类，并设置 get/set，当通过.value 调用就会触发劫持，从而实现响应式</li>
<li>当接受的对象或数组时，内部仍然是 reactive 去实现的</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码路径：packages/reactivity/src/ref.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  private <span class="attr">_value</span>: T</span><br><span class="line">  private <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  public dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  public readonly __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, public readonly __v_isShallow: boolean</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = __v_isShallow ? value : <span class="title function_">toRaw</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    newVal = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>reactive 原理</p>
<ol>
<li>使用 Proxy 代理传入对象实现响应式</li>
<li>Proxy 拦截数据的更新和获取操作，使用 Reflect 完成原本的操作（get/set）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target,</span></span><br><span class="line"><span class="params">  isReadonly,</span></span><br><span class="line"><span class="params">  baseHandlers,</span></span><br><span class="line"><span class="params">  collectionHandlers,</span></span><br><span class="line"><span class="params">  proxyMap</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!shared.<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;<span class="built_in">String</span>(target)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target is already a Proxy, return it.</span></span><br><span class="line">  <span class="comment">// exception: calling readonly() on a reactive object</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[<span class="string">&#x27;__v_raw&#x27;</span> <span class="comment">/* RAW */</span>] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[<span class="string">&#x27;__v_isReactive&#x27;</span> <span class="comment">/* IS_REACTIVE */</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target already has corresponding Proxy</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// only specific value types can be observed.</span></span><br><span class="line">  <span class="keyword">const</span> targetType = <span class="title function_">getTargetType</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="number">0</span> <span class="comment">/* INVALID */</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="number">2</span> <span class="comment">/* COLLECTION */</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  );</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy);</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vue3-中-watch-和-watchEffect-有什么区别？"><a href="#vue3-中-watch-和-watchEffect-有什么区别？" class="headerlink" title="vue3 中 watch 和 watchEffect 有什么区别？"></a>vue3 中 watch 和 watchEffect 有什么区别？</h2><ul>
<li><p>watch 显式指定依赖源，依赖源变化时执行回调函数</p>
<ul>
<li>第一个参数为不同形式的数据源<ul>
<li>单个 ref</li>
<li>计算属性</li>
<li>getter 函数（要有返回值）</li>
<li>响应式对象(默认时深层遍历)，不能直接侦听响应式对象的属性，应该用一个返回该属性的 getter 函数</li>
<li>以上类型的值组成的数组</li>
</ul>
</li>
<li>第二个参数是数据发生变化时执行的回调函数<ul>
<li>接收三个参数：新值、旧值、清理副作用的回调函数（例如清除无效的副作用，等待中的异步请求）</li>
</ul>
</li>
<li>第三个参数是一个可选对象<ul>
<li>immediate：在侦听器创建时立即触发回调</li>
<li>deep：深度遍历</li>
<li>flush：回调的触发时机<ul>
<li>pre：默认，dom 更新前调用</li>
<li>post：dom 更新后调用</li>
<li>sync：sync 同步调用</li>
</ul>
</li>
<li>onTrack/onTrigger: 用于调试的钩子，在依赖收集和回调函数触发时被调用</li>
</ul>
</li>
<li>其他：<ul>
<li>watch 的返回值是一个用来停止该副作用的函数</li>
<li>使用同步语句创建的侦听器，会自动绑定到宿主组件实例实例上，并在宿主组件卸载时自动停止</li>
<li>异步回调（setTimeout 等）创建的侦听器，则不会绑定到当前组件上，必须手动停止，以防止内存泄漏</li>
</ul>
</li>
</ul>
</li>
<li><p>watchEffect 自动收集依赖源，依赖源变化时重新执行自身</p>
<ul>
<li>接收两个参数<ul>
<li>第一个参数是一个回调函数<ul>
<li>回调函数的参数为一个 onCleanup 函数，用来清除副作用</li>
</ul>
</li>
<li>第二个参数是一个可选对象<ul>
<li>flush：回调的触发时机<ul>
<li>pre：默认，dom 更新前调用</li>
<li>post：dom 更新后调用</li>
<li>sync：sync 同步调用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>watchEffect 的回调函数会立即执行，即{immediate: true}</li>
<li>computed 其实类似一个带输出的同步版本 watchEffect</li>
<li>watchEffect 仅会在同步执行期间才会追踪依赖，使用异步回调时，只有在第一个 await 之前访问到的依赖才会被追踪</li>
<li>watchEffect 无法访问侦听数据的新值和旧值</li>
<li>动态新增的依赖也会被收集</li>
</ul>
</li>
<li><p>使用场景：</p>
<ul>
<li>大部分时候使用 watch 显示指定依赖以避免不必要的重复触发，也避免在后续代码修改或重构时不小心引入新的依赖</li>
<li>watchEffect 使用于逻辑相对简单，依赖源和逻辑强相关的场景</li>
</ul>
</li>
</ul>
<h2 id="vue-中动态引入的图片为什么要是-require？"><a href="#vue-中动态引入的图片为什么要是-require？" class="headerlink" title="vue 中动态引入的图片为什么要是 require？"></a>vue 中动态引入的图片为什么要是 require？</h2><p>因为动态添加 src 被当作<u><strong>静态资源</strong></u>处理了，而动态 src 编译过后的地址与图片编译后的资源地址不一致导致无法正确引入资源，而使用 require 返回的资源文件就是编译后的文件地址，所以可以正确的引入资源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue文件中使用require动态的引入一张图片</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 使用require动态引入图片 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;require(&#x27;../assets/logo.png&#x27;)&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终编译的结果</span></span><br><span class="line"><span class="comment">//这张图片是可以被正确打开的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/logo.6c137b82.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>什么是静态资源？</p>
<p>静态资源就是直接放在项目中的资源，不需要发送请求获取<br>动态资源就是需要发送请求获取资源（数据库连接数据处理）</p>
</li>
<li><p>为什么静态引入图片，没有使用 require 返回的依然是编译后的文件地址？</p>
<p>因为 webpack 编译 vue 文件时，遇见 src 等属性会默认使用 require 引入资源路径</p>
<ul>
<li>如 <code>url(./image.png)</code> 会转为 <code>require(&#39;./image.png&#39;)</code></li>
<li><code>&lt;img src=&#39;./image.png&#39; /&gt;</code> 会被编译为 <code>h(&#39;img&#39;,&#123;attrs: &#123;src: require(&#39;./image.png&#39;)&#125;&#125;)</code></li>
</ul>
</li>
<li><p>动态引入图片，src 后面的属性值 webpack 会认为是一个变量，根据 v-bind 指令去解析 src 的属性值，并不会通过 require 引入资源路径</p>
</li>
<li><p>引入 public 下面静态资源的时候，也会默认使用 require 引入吗？</p>
<p>官方：<br><code>任何放置在public文件夹下的静态资源会被简单的复制，而不经过webpack，你需要通过绝对路径来引用它们</code></p>
<p>答：不会，使用 require 引入资源的前提是该资源是 webpack 解析的模块，而 public 下的文件压根不会走编译，所以不会使用 require</p>
</li>
<li><p>为什么使用 public 下的资源一定要用绝对路径？</p>
<p>答：public 文件不会被编译返回的是代码中定义的文件地址，src 下的文件被编译，编译后生成的文件目录（dist）下会找不到对应目录</p>
</li>
</ul>
<h2 id="Vue2、Vue3、React-三者-diff-算法有什么区别？"><a href="#Vue2、Vue3、React-三者-diff-算法有什么区别？" class="headerlink" title="Vue2、Vue3、React 三者 diff 算法有什么区别？"></a>Vue2、Vue3、React 三者 diff 算法有什么区别？</h2><ul>
<li>严格的 Tree diff 算法的时间复杂度是 O(n*3)</li>
<li>vue、react 框架对 tree diff 进行了优化 O(n)<ul>
<li>只比较同一层级，不跨级比较</li>
<li>tag 不同则删除重建</li>
<li>子节点通过 key 区分<ul>
<li>vdom diff 算法会根据 key 判断元素是否需要删除</li>
<li>匹配了 key，则只移动元素 - 性能较好</li>
<li>未匹配 key，则删除重建 - 性能较差</li>
</ul>
</li>
</ul>
</li>
<li>区别<ul>
<li>react 仅右移</li>
<li>vue2 双端比较</li>
<li>vue3 最长递增子序列</li>
</ul>
</li>
</ul>
<h2 id="KeepAlive-组件实现原理"><a href="#KeepAlive-组件实现原理" class="headerlink" title="KeepAlive 组件实现原理"></a>KeepAlive 组件实现原理</h2><blockquote>
<p>KeepAlive 是一个内置组件，主要用于组件缓存，它包裹的组件在切换后不会被销毁，而是保留在内存中，避免重复渲染 DOM，include/exclude 用于包含/排除组件，max 用于限制最大缓存实例个数，使用 LRU 缓存算法(最大最小使用缓存)：超过最大数量时移除最久没被访问的实例</p>
</blockquote>
<h2 id="Vue-router-三种模式（React-router-也一样）"><a href="#Vue-router-三种模式（React-router-也一样）" class="headerlink" title="Vue-router 三种模式（React-router 也一样）"></a>Vue-router 三种模式（React-router 也一样）</h2><ul>
<li>Hash</li>
<li>WebHistory</li>
<li>MemoryHistory（v4 之前叫做 abstract history）</li>
</ul>
<h2 id="如何统一监听-Vue-组件报错？"><a href="#如何统一监听-Vue-组件报错？" class="headerlink" title="如何统一监听 Vue 组件报错？"></a>如何统一监听 Vue 组件报错？</h2><ul>
<li><p>window.onerror</p>
<ul>
<li>全局监听所有 js 错误</li>
<li>try…catch 中的错误无法被监听到</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">msg, source, line, column, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg, source, line, column, error);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>errorCaptured 生命周期</p>
<ul>
<li>监听所有下级组件的错误</li>
<li>返回 false 会阻止向上传播</li>
</ul>
</li>
<li><p>errorHandler 配置</p>
<ul>
<li>Vue 全局错误监听，所有组件错误都会汇总到这里</li>
<li>但 errorCaptured 返回 false，不会传播到这里</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error, vm, info);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>异步错误</p>
<ul>
<li>异步回调里面的错误，errorHandler 监听不到</li>
<li>需要使用 window.onerror</li>
</ul>
</li>
</ul>
<h2 id="vue-router-路由钩子"><a href="#vue-router-路由钩子" class="headerlink" title="vue-router 路由钩子"></a>vue-router 路由钩子</h2><p>const router = createRouter({});</p>
<ul>
<li>全局前置守卫<ul>
<li>router.beforeEach((to, from)=&gt;{})</li>
</ul>
</li>
<li>全局解析守卫<ul>
<li>router.beforeResolve：和 router.beforeEach 类似，因为它在 每次导航时都会触发，但是确保在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被正确调用</li>
</ul>
</li>
<li>全局后置钩子<ul>
<li>router.afterEach((to, from)=&gt;{})</li>
</ul>
</li>
<li>路由独享守卫<ul>
<li>beforeEnter:(to, from)=&gt;{}</li>
</ul>
</li>
<li>组件内守卫<ul>
<li>onBeforeRouteLeave</li>
<li>onBeforeRouteUpdate</li>
</ul>
</li>
</ul>
<h2 id="pinia-原理浅析"><a href="#pinia-原理浅析" class="headerlink" title="pinia 原理浅析"></a>pinia 原理浅析</h2><ul>
<li>通过 createPinia 创建 pinia 实例，在 app.use 的时候执行 pinia 内部的 install 方法<ul>
<li>install 方法通过 vue 的 provide 将当前 pinia 实例注入到每个 vue 组件实例中</li>
</ul>
</li>
<li>在业务中使用 useXxx 的时候调用 defineStore 方法，该方法在正真调用的时候才会初始化对应模块的数据参数<ul>
<li>defineStore 首先创建一个 store 对象，将 options 上面的 state、getters 利用 vue 的响应式 composition API 进行处理和转换，使之成为响应式数据并挂载在 store 对象上</li>
<li>通过 Object.assign 对这个 store 进行一些扩展 api（reset、$patch 等）</li>
<li>返回 store 对象作为 defineStore 方法的返回值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue响应式系统实现</title>
    <url>/2022/08/07/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bucket = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="comment">// 用一个全局变量存储当前激活的effect函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">// effect栈</span></span><br><span class="line"><span class="keyword">const</span> effectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn, options = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">effectFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用cleanup函数完成清除工作</span></span><br><span class="line">    <span class="title function_">cleanup</span>(effectFn);</span><br><span class="line">    <span class="comment">// 当调用effect注册副作用函数时，将副作用函数赋值给activeEffect</span></span><br><span class="line">    activeEffect = effectFn;</span><br><span class="line">    <span class="comment">// 调用副作用函数之前将当前副作用函数压入栈顶</span></span><br><span class="line">    effectStack.<span class="title function_">push</span>(effectFn);</span><br><span class="line">    <span class="comment">// 把fn的执行结果存储在res中</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title function_">fn</span>();</span><br><span class="line">    <span class="comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并将activeEffect还原为之前的值</span></span><br><span class="line">    effectStack.<span class="title function_">pop</span>();</span><br><span class="line">    activeEffect = effectStack[effectStack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 将options挂载到effectFn上</span></span><br><span class="line">  effectFn.<span class="property">options</span> = options;</span><br><span class="line">  <span class="comment">// 用来存储所有与该副作用函数相关的依赖集合</span></span><br><span class="line">  effectFn.<span class="property">deps</span> = [];</span><br><span class="line">  <span class="comment">// 只有非lazy的时候，才执行</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="title function_">effectFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">getter</span>) &#123;</span><br><span class="line">  <span class="comment">// 用来缓存上一次计算的值</span></span><br><span class="line">  <span class="keyword">let</span> value;</span><br><span class="line">  <span class="comment">// dirty标志，用来识别是否需要重新计算值，为true时则意味着“脏”，需要计算</span></span><br><span class="line">  <span class="keyword">let</span> dirty = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> effectFn = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">scheduler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dirty) &#123;</span><br><span class="line">        dirty = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应</span></span><br><span class="line">        <span class="title function_">trigger</span>(obj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (dirty) &#123;</span><br><span class="line">        value = <span class="title function_">effectFn</span>();</span><br><span class="line">        dirty = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 当读取value时，手动调用track函数进行追踪</span></span><br><span class="line">      <span class="title function_">track</span>(obj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">source, cb, options = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">// 如果是函数，说明用户传递的不再是一个响应式数据，而是一个getter函数，直接把source赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则调用traverse递归读取响应式数据属性</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(source);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">// cleanup用来存储用户注册的国旗回调</span></span><br><span class="line">  <span class="keyword">let</span> cleanup;</span><br><span class="line">  <span class="comment">// 定义onInvalidate函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onInvalidate</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 将过期回调存储到cleanup中</span></span><br><span class="line">    cleanup = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提取调度器scheduler为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">job</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 在scheduler中重新执行副作用函数，得到的是新值</span></span><br><span class="line">    newValue = <span class="title function_">effectFn</span>();</span><br><span class="line">    <span class="comment">// 在调用糊掉函数cb之前，先调用过期回调</span></span><br><span class="line">    <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">      <span class="title function_">cleanup</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将旧值和新值作为回调函数的参数</span></span><br><span class="line">    <span class="title function_">cb</span>(newValue, oldValue);</span><br><span class="line">    <span class="comment">// 更新旧值，不然下次会得到错误的旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 使用effect注册副作用函数时，开启lazy选项，并把返回值存储到effectFn中一边后续手动调用</span></span><br><span class="line">  <span class="keyword">const</span> effectFn = <span class="title function_">effect</span>(<span class="function">() =&gt;</span> <span class="title function_">getter</span>(), &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">scheduler</span>: job,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">immediate</span>) &#123;</span><br><span class="line">    <span class="comment">// 当immediate为true时立即执行job，从而触发回调执行</span></span><br><span class="line">    <span class="title function_">job</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 手动调用副作用函数，拿到的值就是旧值</span></span><br><span class="line">    oldValue = <span class="title function_">effectFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">value, seen = <span class="keyword">new</span> <span class="built_in">Set</span>()</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果要读取的数据是原始值，或者已经被读取过了，那么什么都不做</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&quot;object&quot;</span> || value === <span class="literal">null</span> || seen.<span class="title function_">has</span>(value)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 将数据添加到seen中，代表便利地读取过了，避免循环引用引起的死循环</span></span><br><span class="line">  seen.<span class="title function_">add</span>(value);</span><br><span class="line">  <span class="comment">// 暂时不考虑数组等其他结构</span></span><br><span class="line">  <span class="comment">// 假设value是一个对象，使用for...in读取对新啊个的每一个值，并递归调用traverse进行处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">    <span class="title function_">traverse</span>(value[k], seen);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params">effectFn</span>) &#123;</span><br><span class="line">  <span class="comment">// 遍历effectFn.deps数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; effectFn.<span class="property">deps</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// deps是依赖集合</span></span><br><span class="line">    <span class="keyword">const</span> deps = effectFn.<span class="property">deps</span>[i];</span><br><span class="line">    <span class="comment">// 将effectFn从依赖集合中移除</span></span><br><span class="line">    deps.<span class="title function_">delete</span>(effectFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后需要重置effectFn.deps数组</span></span><br><span class="line">  effectFn.<span class="property">deps</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在get拦截函数内调用track函数追踪变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 没有activeEffect，直接return</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span> target[key];</span><br><span class="line">  <span class="comment">// 根据target从“桶”中取得depsMap，也是一个Map类型：key --&gt; effects</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = bucket.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="comment">// 如果不存在depsMap，新建一个Map并与target关联</span></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    bucket.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据key从depsMap中取得deps，它是一个Set类型，</span></span><br><span class="line">  <span class="comment">// 里面存储着所有与当前key相关联的副作用函数：effects</span></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, (deps = <span class="keyword">new</span> <span class="title class_">Set</span>()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后将当前激活的副作用函数添加到“桶”中</span></span><br><span class="line">  deps.<span class="title function_">add</span>(activeEffect);</span><br><span class="line">  <span class="comment">// deps就是一个与当前副作用函数存在联系的依赖集合</span></span><br><span class="line">  <span class="comment">// 将其添加到activeEffect.deps数组中</span></span><br><span class="line">  activeEffect.<span class="property">deps</span>.<span class="title function_">push</span>(deps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在set函数拦截内调用trigger函数出发变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 根据target从桶中取出depsMap，它是 key --&gt; effects</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = bucket.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 根据key取得所有副作用函数effects</span></span><br><span class="line">  <span class="keyword">const</span> effects = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line">  <span class="comment">// 在调用forEach遍历Set集合时，如果一个值已经被访问过了，</span></span><br><span class="line">  <span class="comment">// 但该值被删除并重新添加集合，如果此时forEach遍历还没结束</span></span><br><span class="line">  <span class="comment">// 该值会重新被访问，就会导致无限循环执行。</span></span><br><span class="line">  <span class="comment">// 解决方法：构造另一个Set集合遍历它</span></span><br><span class="line">  <span class="keyword">const</span> effectsToRun = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="comment">// 执行副作用函数</span></span><br><span class="line">  effects &amp;&amp;</span><br><span class="line">    effects.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果trigger触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行</span></span><br><span class="line">      <span class="keyword">if</span> (effectFn !== activeEffect) &#123;</span><br><span class="line">        effectsToRun.<span class="title function_">add</span>(effectFn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  effectsToRun.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果一个副作用函数存在调度器，则调用该调度器，并将副作用函数作为参数传递</span></span><br><span class="line">    <span class="keyword">if</span> (effectFn.<span class="property">options</span>.<span class="property">scheduler</span>) &#123;</span><br><span class="line">      effectFn.<span class="property">options</span>.<span class="title function_">scheduler</span>(effectFn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则直接执行副作用函数</span></span><br><span class="line">      <span class="title function_">effectFn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">text</span>: <span class="string">&quot;hello world&quot;</span>, <span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="comment">// 拦截读取操作</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="comment">// 将副作用函数activeEffect添加到存储副作用函数的桶中</span></span><br><span class="line">    <span class="title function_">track</span>(target, key);</span><br><span class="line">    <span class="comment">// 返回属性值</span></span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截设置操作</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置属性值</span></span><br><span class="line">    target[key] = newVal;</span><br><span class="line">    <span class="comment">// 把副作用函数从桶中取出并执行</span></span><br><span class="line">    <span class="title function_">trigger</span>(target, key);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp1, temp2;</span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">foo</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">obj.<span class="property">foo</span>++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="comment">// const sum = computed(() =&gt; obj.foo + obj.bar);</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(sum.value);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.foo++;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lazy</span></span><br><span class="line"><span class="comment">// const effectFn = effect(</span></span><br><span class="line"><span class="comment">//   () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(obj.text);</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     lazy: true,</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="comment">// effectFn();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的effect与effect栈</span></span><br><span class="line"><span class="comment">// effect(function effectFn1() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;effectFn1 执行&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   effect(function effectFn2() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;effectFn2 执行&quot;);</span></span><br><span class="line"><span class="comment">//     temp2 = obj.ok;</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   temp1 = obj.text;</span></span><br><span class="line"><span class="comment">//   obj.text += &quot;1&quot;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分支切换与cleanup</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;effect run&#x27;);</span></span><br><span class="line"><span class="comment">//   document.body.innerText =  obj.ok ? obj.text : &quot;not&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   obj.text = &#x27;foolishmax&#x27;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不存在的属性不添加响应式</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   obj.text = &quot;hello vue3&quot;;</span></span><br><span class="line"><span class="comment">//   // obj.notExist = &#x27;hello vue3&#x27;</span></span><br><span class="line"><span class="comment">// &#125;, 3000);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>TS进阶题目</title>
    <url>/2022/01/17/typescript%E8%BF%9B%E9%98%B6%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<ul>
<li>在线 TS 地址 <a href="https://www.typescriptlang.org/">typescript</a></li>
</ul>
<span id="more"></span>

<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul>
<li>以下代码为什么会提示错误，应该如何解决上述问题？</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第一种解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;T <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createCustomer&lt;t <span class="keyword">extends</span> <span class="title class_">User</span>&gt;(<span class="attr">u</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...u,</span><br><span class="line">    <span class="attr">id</span>: u.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&#x27;customer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul>
<li>以下函数我们希望参数<em>a</em>和<em>b</em>的类型都是一致的，即<em>a</em>和<em>b</em>同时为<em>number</em>或<em>string</em>类型，当它们的类型不一致时，ts 类型检查器能自动提示对应的错误信息。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>,b: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure>

<p><strong>第一种解决方案</strong></p>
<ul>
<li>函数重载</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>, b: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a <span class="keyword">as</span> <span class="built_in">number</span>) + (b <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<p><strong>第二种解决方案</strong></p>
<ul>
<li>自定义路由守卫</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isStringArray = (<span class="attr">params</span>: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]): params is <span class="built_in">string</span>[] =&gt; <span class="keyword">typeof</span> params[<span class="number">0</span>] === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">...args: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isStringArray</span>(args)) &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + <span class="string">&#x27;:&#x27;</span> + args[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + args[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<p><strong>第三种解决方案</strong></p>
<ul>
<li>范型</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> f&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;:&#x27;</span> + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a <span class="keyword">as</span> <span class="built_in">number</span>) + (b <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul>
<li>实现 SetOptional 工具类型，支持把给定的 keys 对应的属性变为可选，参考<em>Partial<T></em></li>
<li>实现 SetRequired 工具类型，支持把给定的 keys 对应的属性变成必填，参考 <em>Require<T></em></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetOptional 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>; <span class="comment">//该属性变为可选的</span></span><br><span class="line">  b?: <span class="built_in">string</span>; <span class="comment">//保持不变</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetRequired 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>; <span class="comment">//保持不变</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>; <span class="comment">//该属性变为必选的</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<ul>
<li>SetOptional</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对交叉类型进行扁平化处理</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>SetRequired</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt; &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Simplely</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplely</span>&lt;&#123; [X <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[X]; &#125; &amp; &#123; [P <span class="keyword">in</span> K]?: T[P] &#125;&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplely</span>&lt;&#123; [X <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[X]; &#125; &amp; &#123; [P <span class="keyword">in</span> K]-?: T[P] &#125;&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeRequired</span> = <span class="title class_">SetRequired</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 3</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Simplify</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Omit</span>&lt;T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetRequired</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Simplify</span>&lt;<span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt; &amp; <span class="title class_">Omit</span>&lt;T, K&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><ul>
<li><em>Pick&lt;T, K extends keyof T&gt;</em> 的作用是将某个类型中的字属性挑出来，得到包含这个类型部分属性的字类型。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>问题：如何定义一个<em>ConditionalPick</em>工具类型，支持根据指定的<em>Condition</em>条件来生成新的类型，对应的使用示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">d</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeyOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// =&gt; &#123;a: string&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#key-remapping-in-mapped-types">神奇的 as</a></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">d</span>: &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConditionalPick</span>&lt;T, K&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> (T[P] <span class="keyword">extends</span> K ? P : <span class="built_in">never</span>)]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeysOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// =&gt; &#123;a: string&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><ul>
<li>定义一个工具类型<em>AppendArgument</em>,为已有函数累心增加指定类型的参数，新增的参数名是<em>x</em>，将作为新函数类型的第一个参数，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F, A&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<ul>
<li>延伸阅读 <a href="https://mp.weixin.qq.com/s/mkvnJh3fBmL86Vnrv9xAyQ">掌握 TS 这些工具类型，让你开发事半功倍</a></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>, A&gt; = <span class="function">(<span class="params">x: A, ...args: Parameters&lt;F&gt;</span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<ul>
<li>延伸阅读 <a href="https://mp.weixin.qq.com/s/JT2N2K5hvQAXN45B2DEbQw">用上这几招，轻松实现 TS 类型提取</a></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendArgument</span>&lt;F, T&gt; = F <span class="keyword">extends</span> (...<span class="attr">args</span>: infer <span class="title class_">Args</span>) =&gt; infer <span class="title class_">Return</span> ? <span class="function">(<span class="params">x: T, ...args: Args</span>) =&gt;</span> <span class="title class_">Return</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FinalFn</span> = <span class="title class_">AppendArgument</span>&lt;<span class="title class_">Fn</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"><span class="comment">// (x: boolean, a: number, b: string) =&gt; number</span></span><br></pre></td></tr></table></figure>

<h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul>
<li>定义一个 NativeFlat 工具类型，支持把数组类型拍平(扁平化),示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NativeFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NativeResult</span> = <span class="title class_">NativeFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>],[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],[<span class="string">&#x27;d&#x27;</span>]]&gt;;</span><br><span class="line"><span class="comment">// =&gt; &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在完成<em>NativeFlat</em>工具类型之后，继续实现<em>DeepFlat</em>工具类型，以支持多维数组类型：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="built_in">unknown</span> <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Deep</span> = [[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepTestResult</span> = <span class="title class_">DeepFlat</span>&lt;<span class="title class_">Deep</span>&gt;</span><br><span class="line"><span class="comment">// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<ul>
<li>NativeFlat</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NaiveFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? T[P][<span class="built_in">number</span>] : T[P]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NaiveResult</span> = <span class="title class_">NaiveFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>]]&gt;</span><br><span class="line"><span class="comment">// NaiveResult的结果： &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>DeepFlat</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Deep</span> = [[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? <span class="title class_">DeepFlat</span>&lt;T[K]&gt; : T[K]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepTestResult</span> = <span class="title class_">DeepFlat</span>&lt;<span class="title class_">Deep</span>&gt;</span><br><span class="line"><span class="comment">// DeepTestResult: &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><ul>
<li>使用类型别名定义一个<em>EmptyObject</em>类型，是的该类型只允许空对象赋值：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// Error</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>更改以下<em>takeSomeTypeOnly</em>函数类型定义，让参数只允许严格 SomeType 类型的值，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">takeSomeTypeOnly</span>(<span class="params">x: SomeType</span>) &#123;<span class="keyword">return</span> x&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(x); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">additionalProp</span>: <span class="string">&#x27;x&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(y); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<ul>
<li>EmptyObject</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type PropertyKey = string | number | symbol;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// Error</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>takeSomeTypeOnly</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = &#123;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Exclusive</span>&lt;<span class="variable constant_">T1</span>, <span class="variable constant_">T2</span> <span class="keyword">extends</span> <span class="variable constant_">T1</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="variable constant_">T2</span>]: K <span class="keyword">extends</span> keyof <span class="variable constant_">T1</span> ? <span class="variable constant_">T2</span>[K] : <span class="built_in">never</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> takeSomeTypeOnly&lt;T <span class="keyword">extends</span> <span class="title class_">SomeType</span>&gt;(<span class="attr">x</span>: <span class="title class_">Exclusive</span>&lt;<span class="title class_">SomeType</span>, T&gt;) &#123;<span class="keyword">return</span> x&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(x); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;<span class="attr">prop</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">additionalProp</span>: <span class="string">&#x27;x&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">takeSomeTypeOnly</span>(y); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><ul>
<li>定义一个<em>NonEmptyArray</em>工具类型，用于确保数据为非空数组</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = [T, ...T[]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = T[] &amp; &#123;<span class="number">0</span>: T&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 3</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> <span class="built_in">number</span>]: T;</span><br><span class="line">&#125; &amp; &#123;</span><br><span class="line">  <span class="number">0</span>: T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">err</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = []; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">succ</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello Ts&#x27;</span>]; <span class="comment">//Ok</span></span><br></pre></td></tr></table></figure>

<h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><ul>
<li>定义一个<em>JoinStrArray</em>工具类型，用于根据指定的<code>Separator</code>分隔符，对字符串数据类型进行拼接，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[], <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;</span><br><span class="line">  <span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[],</span><br><span class="line">  <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">&gt; =</span><br><span class="line"><span class="title class_">Arr</span> <span class="keyword">extends</span> [infer <span class="title class_">El</span>,...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Rest</span> <span class="keyword">extends</span> <span class="built_in">string</span>[]</span><br><span class="line">? <span class="title class_">El</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">? <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="string">&quot;&quot;</span></span><br><span class="line">? <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>,<span class="string">`<span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">: <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>,<span class="string">`<span class="subst">$&#123;Result&#125;</span><span class="subst">$&#123;Separator&#125;</span><span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">: <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><ul>
<li>实现一个<em>Trim</em>工具类型，用于对字符串字面量类型进行去空格处理，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Trim</span>&lt;<span class="string">&#x27;  foolishmax  &#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TrimLeft</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">` <span class="subst">$&#123;infer R&#125;</span>`</span> ? <span class="title class_">TrimLeft</span>&lt;R&gt; : V;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TrimRight</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer R&#125;</span> `</span>? <span class="title class_">TrimRight</span>&lt;R&gt; : V;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="title class_">TrimLeft</span>&lt;<span class="title class_">TrimRight</span>&lt;V&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Trim</span>&lt;<span class="string">&#x27;  foolishmax  &#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h2><ul>
<li>实现一个*IsEqual&lt;A, B&gt;*工具类型，用于比较两个类型是否相等，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案（原始方案） 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = A <span class="keyword">extends</span> B ? (B <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E3</span> = <span class="title class_">IsEqual</span>&lt;<span class="literal">true</span>, <span class="built_in">boolean</span>&gt; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E4</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span> | <span class="number">2</span>, <span class="number">1</span>&gt; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">这是因为泛型和*<span class="keyword">extends</span>*两者结合所产生的*distributive conditionial types*效应导致的</span><br></pre></td></tr></table></figure>

<p><strong>解决方案（稍微优化）2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = [A] <span class="keyword">extends</span> [B] ? [B] <span class="keyword">extends</span> [A] ? <span class="literal">true</span> : <span class="literal">false</span> : <span class="literal">false</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; = [A, B] <span class="keyword">extends</span> [B, A] ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E3</span> = <span class="title class_">IsEqual</span>&lt;<span class="built_in">any</span>, <span class="built_in">string</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E4</span> = <span class="title class_">IsEqual</span>&lt; &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;, &#123; <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">这是因为<span class="title class_">Ts</span>中<span class="built_in">any</span>可以赋值为任何类型，任何类型也可以赋值给<span class="built_in">any</span>，这就意味着<span class="built_in">any</span>和任意类型之间都是assignable的，对于<span class="keyword">extends</span>而言就是都可以相互<span class="keyword">extends</span>的，所以<span class="variable constant_">E3</span>是<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">readonly</span>不会改变assignable。</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 4</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;A, B&gt; =</span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> A ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> B ? <span class="number">1</span> : <span class="number">2</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">IsEqual</span>&lt;<span class="number">1</span>, <span class="number">2</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">IsEqual</span>&lt;&#123;a : <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">IsEqual</span>&lt;[<span class="number">1</span>], []&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h2><ul>
<li>实现一个<em>Head</em>工具类型，用于获取数组类型的第一个类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [] ? <span class="built_in">never</span> : T[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [<span class="attr">head</span>: infer H, ...<span class="attr">rest</span>: <span class="built_in">any</span>[]] ? H : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&gt; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h2><ul>
<li>实现一个<em>Tail</em>工具类型，用于获取数组类型除了第一个类型外，剩余的类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tail</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Tail</span>&lt;[]&gt; <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>]&gt; <span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&gt; <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Tail</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? B : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Tail</span>&lt;[]&gt; <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>]&gt; <span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Tail</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&gt; <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h2><ul>
<li>实现一个<em>Unshift</em>工具类型，用于把指定类型 E 作为第一个元素添加到<em>T</em>数组类型中，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">Unshift</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">Unshift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>&gt;; <span class="comment">//[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = [E, ...T];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">Unshift</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">Unshift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>&gt;; <span class="comment">//[0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h2><ul>
<li>实现一个<em>Shift</em>工具类型，用于移除<em>T</em>数组类型中的第一个类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">Shift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? B : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">Shift</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt;; <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]&gt;; <span class="comment">// [number, boolean]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">Shift</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S3</span> = <span class="title class_">Shift</span>&lt;[<span class="built_in">string</span>]&gt;; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h2 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h2><ul>
<li>实现一个<em>Push</em>工具类型，用于把指定类型<em>E</em>作为最后一个元素添加到<em>T</em>数组类型中，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = T <span class="keyword">extends</span> [...infer U] ? [...U, E] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = [...T, E];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt;; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h2 id="第十七题"><a href="#第十七题" class="headerlink" title="第十七题"></a>第十七题</h2><ul>
<li>实现一个<em>Includes</em>工具类型，用于判断指定的类型<em>E</em>，是否包含在<em>T</em>数组类型中，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = E <span class="keyword">extends</span> T[<span class="built_in">number</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], E&gt; = T <span class="keyword">extends</span> [infer A, ...infer R] ? E <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;R, E&gt; : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">Includes</span>&lt;[], <span class="number">1</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Includes</span>&lt;[<span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h2><ul>
<li>实现一个<em>UnionToIntersection</em>工具类型，用于把联合类型转换为交叉类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; | &#123;<span class="attr">age</span>: <span class="built_in">number</span>&#125;&gt;; <span class="comment">// &#123;name: string&#125; &amp; &#123;age: number&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<ul>
<li><p><a href="https://www.jianshu.com/p/071b948209f3">逆变协变</a></p>
</li>
<li><p>注释</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fun</span>&lt;X&gt; = <span class="function">(<span class="params">...args: X[]</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: <span class="title class_">Fun</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Fun</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line">g = f <span class="comment">// this cannot be assigned</span></span><br><span class="line"></span><br><span class="line">当f赋值给g时，新的g不能使用<span class="built_in">number</span>类型的参数，我们丢失了g的一部分类型，这就属于 逆变(contra-variance),这个和交集的工作机制类似。</span><br><span class="line"></span><br><span class="line">当我们把逆变位置放在条件类型时：<span class="title class_">Typescript</span>会创建一个交集，我们从函数参数中infer了一个类型，<span class="title class_">TypeScript</span>知道我们必须符合逆变的条件，然后<span class="title class_">TypeScript</span>会自动创建并集中所有的成分的交集。</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = (U <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="function">(<span class="params">k: U</span>) =&gt;</span> <span class="built_in">void</span> : <span class="built_in">never</span>) <span class="keyword">extends</span> (<span class="attr">k</span>: infer I) =&gt; <span class="built_in">void</span> ? I : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; | &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;&gt; <span class="comment">// &#123; name: string; &#125; &amp; &#123; age: number; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h2><ul>
<li>实现一个 <em>OptionalKeys</em> 工具类型，用来获取对象类型中声明的可选属性，示例如下:</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="title class_">NonNullable</span>&lt;&#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: <span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span></span><br><span class="line">&#125;[keyof T]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = keyof &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span>]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionsKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 3</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = <span class="title class_">Exclude</span>&lt;&#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T <span class="keyword">extends</span> T[P] ? <span class="built_in">never</span> : T[P]</span><br><span class="line">&#125;[keyof T], <span class="literal">undefined</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt;; <span class="comment">// &quot;from&quot; | &quot;speak</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 4</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span>;</span><br><span class="line">  speak?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: (<span class="literal">undefined</span> <span class="keyword">extends</span> T[P] ? P : <span class="built_in">never</span>)</span><br><span class="line">&#125;[keyof T] &amp; keyof T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt;; <span class="comment">// &quot;from&quot; | &quot;speak</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h2><ul>
<li>实现一个<em>Curry</em>工具类型，用来实现函数类型的柯里化处理，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Curry</span>&lt;</span><br><span class="line">  F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>,</span><br><span class="line">  P <span class="keyword">extends</span> <span class="built_in">any</span>[] = <span class="title class_">Parameters</span>&lt;F&gt;,</span><br><span class="line">  R = <span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">Curry</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// () =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a:<span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number) =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number)=&gt;(arg: string) =&gt; Date</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Curry</span>&lt;</span><br><span class="line">  F <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>,</span><br><span class="line">  P <span class="keyword">extends</span> <span class="built_in">any</span>[] = <span class="title class_">Parameters</span>&lt;F&gt;,</span><br><span class="line">  R = <span class="title class_">ReturnType</span>&lt;F&gt;,</span><br><span class="line">&gt; = P <span class="keyword">extends</span> [infer A, ...infer B]</span><br><span class="line">  ? B <span class="keyword">extends</span> []</span><br><span class="line">  ? <span class="function">(<span class="params">arg: A</span>) =&gt;</span> R</span><br><span class="line">  : <span class="function">(<span class="params">arg: A</span>) =&gt;</span> <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">...arg: B</span>) =&gt;</span> R&gt;</span><br><span class="line">  : F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">Curry</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// () =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a:<span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number) =&gt; Date</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">Curry</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">Date</span>&gt;; <span class="comment">// (arg: number)=&gt;(arg: string) =&gt; Date</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十一题"><a href="#第二十一题" class="headerlink" title="第二十一题"></a>第二十一题</h2><ul>
<li>实现一个<em>Merge</em>工具类型，用于把两个类型合成一个新的类型，第二类型（SecondType）的<em>Keys</em>将会覆盖第一种类型（FirstType）的<em>Keys</em>，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;<span class="title class_">FirstType</span>, <span class="title class_">SecondType</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<ul>
<li>将 FirstType 和 SecondType 做交叉类型，并遍历每一个属性；</li>
<li>如果当前属性名在 SecondType 类型中，则使用 SecondType 类型中的当前属性值；</li>
<li>如果当前属性名在 FirstType 类型中，则使用 FirstType 类型中的当前属性值；</li>
<li>否则为 never；</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;<span class="title class_">FirstType</span>, <span class="title class_">SecondType</span>&gt; =&#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof (<span class="title class_">FirstType</span> &amp; <span class="title class_">SecondType</span>)]</span><br><span class="line">  : K <span class="keyword">extends</span> keyof <span class="title class_">SecondType</span></span><br><span class="line">  ? <span class="title class_">SecondType</span>[K]</span><br><span class="line">  : K <span class="keyword">extends</span> keyof <span class="title class_">FirstType</span></span><br><span class="line">  ? <span class="title class_">FirstType</span>[K]</span><br><span class="line">  : <span class="built_in">never</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<ul>
<li>先将 FirstType 类型中已经有的，和 SecondType 类型中相同的属性删除；</li>
<li>将前面结果和 SecondType 做交叉类型，获得合并后结果。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Merge</span>&lt;F, S&gt; = <span class="title class_">Omit</span>&lt;F, keyof S&gt; &amp; S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M = <span class="title class_">Merge</span>&lt;<span class="title class_">Foo</span>, <span class="title class_">Bar</span>&gt;; <span class="comment">// &#123;a: number, b: number&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十二题"><a href="#第二十二题" class="headerlink" title="第二十二题"></a>第二十二题</h2><ul>
<li>实现一个<em>RequireAtLeastOne</em>工具类型，它将创建一个至少含有一个给定<em>keys</em>的类型，其余<em>keys</em>类型保持原样，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;</span><br><span class="line">  <span class="title class_">ObjectType</span>,</span><br><span class="line">  <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>,</span><br><span class="line">&gt; = 代码实现</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span>|<span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;</span><br><span class="line">  <span class="title class_">ObjectType</span>,</span><br><span class="line">  <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>,</span><br><span class="line">&gt; = <span class="title class_">KeysType</span> <span class="keyword">extends</span> <span class="built_in">unknown</span> ? <span class="title class_">ObjectType</span> &amp; &#123;</span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">KeysType</span>]-?: <span class="title class_">ObjectType</span>[K]</span><br><span class="line">&#125; : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span> | <span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-expect-error 因为没有&#x27;text&#x27;和&#x27;json&#x27;中的任何一个，报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder2</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&#x27;text&#x27;</span> | <span class="string">&#x27;json&#x27;</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = keyof <span class="title class_">ObjectType</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">ObjectType</span>]: K <span class="keyword">extends</span> <span class="title class_">KeysType</span> ? <span class="title class_">ObjectType</span> &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;<span class="title class_">ObjectType</span>, K&gt;&gt; : <span class="built_in">never</span>;</span><br><span class="line">&#125;[keyof <span class="title class_">ObjectType</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&quot;text&quot;</span> | <span class="string">&quot;json&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 3</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Responder</span> = &#123;</span><br><span class="line">  text?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  json?: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  secure?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span> <span class="keyword">extends</span> keyof <span class="title class_">ObjectType</span> = <span class="title class_">KeysType</span> <span class="keyword">extends</span> <span class="built_in">unknown</span></span><br><span class="line">? <span class="title class_">Omit</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span>&gt; &amp; <span class="title class_">Require</span>&lt;<span class="title class_">Pick</span>&lt;<span class="title class_">ObjectType</span>, <span class="title class_">KeysType</span>&gt;&gt;</span><br><span class="line">: <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前类型至少包含 &#x27;text&#x27; 或 &#x27;json&#x27; 键</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">responder</span>: <span class="title class_">RequireAtLeastOne</span>&lt;<span class="title class_">Responder</span>, <span class="string">&quot;text&quot;</span> | <span class="string">&quot;json&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;&#123;&quot;message&quot;: &quot;ok&quot;&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第二十三题"><a href="#第二十三题" class="headerlink" title="第二十三题"></a>第二十三题</h2><ul>
<li>实现一个<em>RemoveIndexSignature</em>工具类型，用于移除已有类型中的索引签名，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">symbol</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">bar</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveIndexSignature</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">RemoveIndexSignature</span>&lt;<span class="title class_">Foo</span>&gt;; <span class="comment">// &#123;bar: ()=&gt;void;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">symbol</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">bar</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveIndexSignature</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="built_in">string</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="built_in">number</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="built_in">symbol</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : K]: T[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">RemoveIndexSignature</span>&lt;<span class="title class_">Foo</span>&gt;; <span class="comment">// &#123;bar: () =&gt; void;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十四题"><a href="#第二十四题" class="headerlink" title="第二十四题"></a>第二十四题</h2><ul>
<li>实现一个 <code>Mutable</code> 工具类型，用于移除对象类型上所有属性或者部分属性的 <code>readonly</code> 修饰符，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; =</span><br><span class="line">&#123;-<span class="keyword">readonly</span> [K <span class="keyword">in</span> <span class="title class_">Keys</span>]: T[K] &#125; &amp; <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, <span class="title class_">Keys</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T = keyof T&gt; =</span><br><span class="line">&#123;-<span class="keyword">readonly</span> [K <span class="keyword">in</span> <span class="title class_">Keys</span>]: T[K] : T[K]&#125; &amp; <span class="title class_">Omit</span>&lt;T, <span class="title class_">Keys</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">mutableFoo</span>: <span class="title class_">Mutable</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">mutableFoo.<span class="property">a</span> = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line">mutableFoo.<span class="property">b</span> = <span class="string">&#x27;6&#x27;</span>; <span class="comment">// Cannot assign to &#x27;b&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十五题"><a href="#第二十五题" class="headerlink" title="第二十五题"></a>第二十五题</h2><ul>
<li>实现一个 <code>IsUnion</code> 工具类型，判断指定的类型是否为联合类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsUnion</span>&lt;T, U = T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">unknown</span>&gt; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsUnion</span>&lt;T, U = T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span> ? [U] <span class="keyword">extends</span> [T] ? <span class="literal">false</span> : <span class="literal">true</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">never</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsUnion</span>&lt;<span class="built_in">string</span>|<span class="built_in">unknown</span>&gt; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>知识点： 1.联合类型作为泛型的时候 extends 会触发分发执行 2.联合类型 T 写成[T]就变成了普通类型，extends 的时候不会分发执行</p>
<p>这里第一步<code>T extends any</code>肯定为真，一个其实就是利用其分发的特性，后面的[T]就是一个联合类型拆开后的某一个，因此如果是联合类型的话<code>[U] extends [T]</code>一定为否</p>
<h2 id="第二十六题"><a href="#第二十六题" class="headerlink" title="第二十六题"></a>第二十六题</h2><ul>
<li>实现一个<code>IsNever</code>工具类型，判断指定的类型是否为<code>never</code>类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsNever</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span> | <span class="built_in">string</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsNever</span>&lt;<span class="literal">null</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<ul>
<li>用<code>[]</code>包裹 T，否则泛型参数会被当作一个裸类型处理，走<code>条件式分布类型</code>的判断逻辑，当泛型参数是 any 这种特殊值时，会得到分布后的类型。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsNever</span>&lt;T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsNever</span>&lt;<span class="built_in">never</span> | <span class="built_in">string</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsNever</span>&lt;<span class="literal">null</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十七题"><a href="#第二十七题" class="headerlink" title="第二十七题"></a>第二十七题</h2><ul>
<li>实现一个<code>Reverse</code>工具类型，用于对元祖类型中元素的位置颠倒，并返回该数组，元祖的第一个元素就会变成最后一个，最后一个元素变成第一个。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[],</span><br><span class="line">  R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? <span class="title class_">Reverse</span>&lt;B, [A, ...R]&gt; : R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">&gt; = T <span class="keyword">extends</span> [infer A, ...infer B] ? [...<span class="title class_">Reverse</span>&lt;B&gt;, A] : [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Reverse</span>&lt;[]&gt; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Reverse</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十八题"><a href="#第二十八题" class="headerlink" title="第二十八题"></a>第二十八题</h2><ul>
<li>实现一个<code>Split</code>工具类型，根据给定的分割符(Delimiter)对包含分割符的字符串进行切割，可用于定义<code>String.prototype.split</code>方法的返回值类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Item</span> = <span class="string">`zs, ls, ww`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Split</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Delimiter</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="title class_">Split</span>&lt;<span class="title class_">Item</span>, <span class="string">&#x27;,&#x27;</span>&gt;; <span class="comment">// [&quot;zs&quot;, &quot;ls&quot;,&quot;ww&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Item</span> = <span class="string">`zs, ls, ww`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Split</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">Delimiter</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Key&#125;</span><span class="subst">$&#123;Delimiter&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">? [<span class="title class_">Key</span>, ...<span class="title class_">Split</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Delimiter</span>&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span> <span class="comment">/* 处理空字符串 */</span></span><br><span class="line">? []</span><br><span class="line">: [S]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="title class_">Split</span>&lt;<span class="title class_">Item</span>, <span class="string">&#x27;,&#x27;</span>&gt;; <span class="comment">// [&quot;zs&quot;, &quot;ls&quot;,&quot;ww&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType2</span> = <span class="title class_">Split</span>&lt;<span class="string">&#x27;a|b|c||d&#x27;</span>, <span class="string">&#x27;|&#x27;</span>&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType3</span> = <span class="title class_">Split</span>&lt;<span class="string">&#x27;abcdef&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="第二十九题"><a href="#第二十九题" class="headerlink" title="第二十九题"></a>第二十九题</h2><ul>
<li>实现一个<code>ToPath</code>工具类型，用于把属性访问<code>(.或[])</code>路径转换为元祖的形式，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToPath</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo.bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo[0].bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;0&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToPath</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer F&#125;</span><span class="subst">$&#123;<span class="string">`[<span class="subst">$&#123;infer D&#125;</span>]`</span>&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? [...<span class="title class_">ToPath</span>&lt;F&gt;, ...([D] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? [] : [D]), ...<span class="title class_">ToPath</span>&lt;R&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer F&#125;</span>.<span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? [...<span class="title class_">ToPath</span>&lt;F&gt;, ...<span class="title class_">ToPath</span>&lt;R&gt;]</span><br><span class="line">: S <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">? []</span><br><span class="line">: [S]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo.bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToPath</span>&lt;<span class="string">&#x27;foo[0].bar.baz&#x27;</span>&gt; <span class="comment">// [&#x27;foo&#x27;, &#x27;0&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十题"><a href="#第三十题" class="headerlink" title="第三十题"></a>第三十题</h2><ul>
<li>完善<code>Chainable</code>类型的定义，是的 TS 能成功推断出<code>result</code>变量的类型，调用<code>option</code>方法之后会不断扩展当前对象的类型，使得调用<code>get</code>方法后能获取正确的类型。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span> = &#123;</span><br><span class="line">  <span class="title function_">option</span>(<span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">any</span>): <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">get</span>(): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lolo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;address&#x27;</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;XiaMen&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">get</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ResultType</span> = <span class="keyword">typeof</span> result</span><br><span class="line"><span class="comment">// 期望 ResultType 的类型是：</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   age: number</span></span><br><span class="line"><span class="comment">//   name: string</span></span><br><span class="line"><span class="comment">//   address: &#123;</span></span><br><span class="line"><span class="comment">//     value: string</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span>&lt;T = &#123;&#125;&gt; = &#123;</span><br><span class="line">  option&lt;K <span class="keyword">extends</span> <span class="built_in">string</span>, V <span class="keyword">extends</span> <span class="built_in">any</span>&gt;(<span class="attr">key</span>: K, <span class="attr">value</span>: V): <span class="title class_">Chainable</span>&lt;&#123; [P <span class="keyword">in</span> K]: V &#125; &amp; T&gt;;</span><br><span class="line">  <span class="title function_">get</span>(): T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config.<span class="title function_">option</span>(<span class="string">&quot;age&quot;</span>, <span class="number">7</span>).<span class="title function_">option</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lolo&quot;</span>).<span class="title function_">option</span>(<span class="string">&quot;address&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;XiaMen&quot;</span> &#125;).<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ResultType</span> = <span class="keyword">typeof</span> result;</span><br></pre></td></tr></table></figure>

<h2 id="第三十一题"><a href="#第三十一题" class="headerlink" title="第三十一题"></a>第三十一题</h2><ul>
<li>实现一个<code>Repeat</code>工具类型，用于根据类型变量<code>C</code>的值，重复<code>T</code>类型并以元祖的形式返回新的类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Repeat</span>&lt;T, C <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Repeat</span>&lt;<span class="number">0</span>, <span class="number">0</span>&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Repeat</span>&lt;<span class="number">1</span>, <span class="number">3</span>&gt;; <span class="comment">// [1, 1, 1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Repeat</span>&lt;<span class="built_in">number</span>, <span class="number">2</span>&gt;; <span class="comment">// [number, number]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Repeat</span>&lt;T, C <span class="keyword">extends</span> <span class="built_in">number</span>, A <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> C ? A : <span class="title class_">Repeat</span>&lt;T, C, [...A, T]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Repeat</span>&lt;<span class="number">0</span>, <span class="number">0</span>&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Repeat</span>&lt;<span class="number">1</span>, <span class="number">3</span>&gt;; <span class="comment">// [1, 1, 1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Repeat</span>&lt;<span class="built_in">number</span>, <span class="number">2</span>&gt;; <span class="comment">// [number, number]</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十二题"><a href="#第三十二题" class="headerlink" title="第三十二题"></a>第三十二题</h2><ul>
<li>实现一个<code>RepeatString</code>工具类型，用于根据类型变量<code>C</code>的值，重复 T 类型并以<code>字符串</code>的形式返回新的类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RepeatString</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  C <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>&gt;; <span class="comment">// &#x27;abab&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RepeatString</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  C <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">any</span>[] = []</span><br><span class="line">&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> C</span><br><span class="line">? S</span><br><span class="line">: <span class="title class_">RepeatString</span>&lt;T, C, <span class="string">`<span class="subst">$&#123;S&#125;</span><span class="subst">$&#123;T&#125;</span>`</span>, [...A, T]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;a&quot;</span>, <span class="number">0</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">RepeatString</span>&lt;<span class="string">&quot;ab&quot;</span>, <span class="number">2</span>&gt;; <span class="comment">// &#x27;abab&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十三题"><a href="#第三十三题" class="headerlink" title="第三十三题"></a>第三十三题</h2><ul>
<li>实现一个<code>ToNumber</code>工具类型，用于实现把数值字符串转换为数值类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToNumber</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;0&quot;</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;10&quot;</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;20&quot;</span>&gt;; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToNumber</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, S <span class="keyword">extends</span> <span class="built_in">any</span>[] = [], L <span class="keyword">extends</span> <span class="built_in">number</span> = S[<span class="string">&quot;length&quot;</span>]&gt; =</span><br><span class="line"><span class="string">`<span class="subst">$&#123;L&#125;</span>`</span> <span class="keyword">extends</span> T ? L : <span class="title class_">ToNumber</span>&lt;T, [...S, <span class="number">1</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;0&quot;</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;10&quot;</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ToNumber</span>&lt;<span class="string">&quot;20&quot;</span>&gt;; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十四题"><a href="#第三十四题" class="headerlink" title="第三十四题"></a>第三十四题</h2><ul>
<li>实现一个<code>SmallerThan</code>工具类型，用于比较数值类型的大小，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SmallerThan</span>&lt;</span><br><span class="line">  N <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  M <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">&gt; = <span class="comment">//代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">0</span>, <span class="number">1</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">2</span>, <span class="number">0</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">8</span>, <span class="number">10</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SmallerThan</span>&lt;</span><br><span class="line">  N <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  M <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">any</span>[] = [],</span><br><span class="line">  L <span class="keyword">extends</span> <span class="built_in">number</span> = S[<span class="string">&quot;length&quot;</span>]</span><br><span class="line">&gt; = L <span class="keyword">extends</span> N</span><br><span class="line">? L <span class="keyword">extends</span> M ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">: L <span class="keyword">extends</span> M ? <span class="literal">false</span> : <span class="title class_">SmallerThan</span>&lt;N, M, [...S, <span class="number">1</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">0</span>, <span class="number">1</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">2</span>, <span class="number">0</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">SmallerThan</span>&lt;<span class="number">8</span>, <span class="number">10</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十五题"><a href="#第三十五题" class="headerlink" title="第三十五题"></a>第三十五题</h2><ul>
<li>实现一个<code>Add</code>工具类型，用于实现对数组对应的数值进行加法运算，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T, R&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">Add</span>&lt;<span class="number">5</span>, <span class="number">5</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Add</span>&lt;<span class="number">8</span>, <span class="number">20</span>&gt;; <span class="comment">// 28</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Add</span>&lt;<span class="number">10</span>, <span class="number">20</span>&gt;; <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>[], V&gt; = [...T, V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CreateTuple</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">  A <span class="keyword">extends</span> <span class="built_in">number</span>[] = []</span><br><span class="line">&gt; = A[<span class="string">&quot;length&quot;</span>] <span class="keyword">extends</span> T ? A : <span class="title class_">CreateTuple</span>&lt;T, <span class="title class_">Push</span>&lt;A, <span class="number">1</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>, R <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = [...<span class="title class_">CreateTuple</span>&lt;T&gt;, ...<span class="title class_">CreateTuple</span>&lt;R&gt;][<span class="string">&quot;length&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">Add</span>&lt;<span class="number">5</span>, <span class="number">5</span>&gt;; <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">Add</span>&lt;<span class="number">8</span>, <span class="number">20</span>&gt;; <span class="comment">// 28</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Add</span>&lt;<span class="number">10</span>, <span class="number">20</span>&gt;; <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十六题"><a href="#第三十六题" class="headerlink" title="第三十六题"></a>第三十六题</h2><ul>
<li>实现一个<code>Filter</code>工具类型，用于根据类型变量<code>F</code>的值进行类型过滤，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], F&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Filter</span>&lt;[<span class="number">6</span>, <span class="string">&quot;lolo&quot;</span>, <span class="number">7</span>, <span class="string">&quot;semlinker&quot;</span>, <span class="literal">false</span>], <span class="built_in">number</span>&gt;; <span class="comment">// [6, 7]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Filter</span>&lt;[<span class="string">&quot;kakuqo&quot;</span>, <span class="number">2</span>, [<span class="string">&quot;ts&quot;</span>], <span class="string">&quot;lolo&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [&quot;kakuqo&quot;, &quot;lolo&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Filter</span>&lt;[<span class="number">0</span>, <span class="literal">true</span>, <span class="built_in">any</span>, <span class="string">&quot;abao&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [any, &quot;abao&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本题关键点就是对`any`类型的处理：</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="built_in">any</span> &amp; <span class="number">1</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="built_in">any</span> &amp; <span class="built_in">boolean</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="built_in">any</span> &amp; <span class="built_in">never</span>; <span class="comment">// never</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="number">0</span> <span class="keyword">extends</span> (<span class="number">1</span> &amp; T) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], F&gt; = T <span class="keyword">extends</span> [infer <span class="variable constant_">R1</span>, ...infer <span class="variable constant_">R2</span>]</span><br><span class="line">? <span class="title class_">IsAny</span>&lt;<span class="variable constant_">R1</span>&gt; <span class="keyword">extends</span> <span class="literal">true</span></span><br><span class="line">? [<span class="variable constant_">R1</span>, ...<span class="title class_">Filter</span>&lt;<span class="variable constant_">R2</span>, F&gt;]</span><br><span class="line">: [...<span class="variable constant_">R1</span> <span class="keyword">extends</span> F ? [<span class="variable constant_">R1</span>] : [], ...<span class="title class_">Filter</span>&lt;<span class="variable constant_">R2</span>, F&gt;]</span><br><span class="line">:[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Filter</span>&lt;[<span class="number">6</span>, <span class="string">&quot;lolo&quot;</span>, <span class="number">7</span>, <span class="string">&quot;semlinker&quot;</span>, <span class="literal">false</span>], <span class="built_in">number</span>&gt;; <span class="comment">// [6, 7]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Filter</span>&lt;[<span class="string">&quot;kakuqo&quot;</span>, <span class="number">2</span>, [<span class="string">&quot;ts&quot;</span>], <span class="string">&quot;lolo&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [&quot;kakuqo&quot;, &quot;lolo&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Filter</span>&lt;[<span class="number">0</span>, <span class="literal">true</span>, <span class="built_in">any</span>, <span class="string">&quot;abao&quot;</span>], <span class="built_in">string</span>&gt;; <span class="comment">// [any, &quot;abao&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十七题"><a href="#第三十七题" class="headerlink" title="第三十七题"></a>第三十七题</h2><ul>
<li>实现一个<code>Flat</code>工具类型，支持把数组类型拍平（扁平化）,示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer <span class="title class_">First</span>, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">First</span> <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">? [...<span class="title class_">Flat</span>&lt;<span class="title class_">First</span>&gt;, ...<span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">: [<span class="title class_">First</span>, ...<span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">: [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], S <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = T <span class="keyword">extends</span> [infer R, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? R <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">? <span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Flat</span>&lt;R, S&gt;&gt;</span><br><span class="line">: <span class="title class_">Flat</span>&lt;<span class="title class_">Rest</span>, [...S, R]&gt;</span><br><span class="line">: S</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F0</span> = <span class="title class_">Flat</span>&lt;[]&gt;; <span class="comment">// []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="title class_">Flat</span>&lt;[<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, [<span class="string">&#x27;e&#x27;</span>, [<span class="string">&#x27;f&#x27;</span>]]]]&gt;; <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十八题"><a href="#第三十八题" class="headerlink" title="第三十八题"></a>第三十八题</h2><ul>
<li>实现<code>StartsWith</code>工具类型，判断字符串字面量类型<code>T</code>是否以给定的字符串字面量类型<code>U</code>开头，并根据判断结果返回布尔值，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StartsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>之后，继续实现<code>EndsWith</code>工具类型，判断字符串字面量类型<code>T</code>是否以给定的字符串字面量类型<code>U</code>结尾，并根据判断结果返回布尔值，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EndsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;23&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>&gt;; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StartWith</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StartsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;U&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S0</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">StartsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EndsWith</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EndsWith</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Head&#125;</span><span class="subst">$&#123;U&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E0</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;23&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E1</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13&#x27;</span>&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">E2</span> = <span class="title class_">EndsWith</span>&lt;<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>&gt;; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="第三十九题"><a href="#第三十九题" class="headerlink" title="第三十九题"></a>第三十九题</h2><ul>
<li>实现<code>IsAny</code>工具类型，用于判断类型<code>T</code>是否为<code>any</code>类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思路： 利用任何类型和any交叉都等于any来实现</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = <span class="number">0</span> <span class="keyword">extends</span> <span class="number">1</span> &amp; T ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unknown 只能赋给 unknown 或者 any</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsAny</span>&lt;T&gt; = [<span class="built_in">unknown</span>] <span class="keyword">extends</span> [T] ? ([T] <span class="keyword">extends</span> [<span class="built_in">string</span>] ? <span class="literal">true</span> : <span class="literal">false</span>) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">unknown</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IsAny</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// tue</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十题"><a href="#第四十题" class="headerlink" title="第四十题"></a>第四十题</h2><ul>
<li>实现<code>AnyOf</code>工具类型，只要数组中任意元素的类型非<code>Falsy</code>类型、<code>&#123;&#125;</code>类型或<code>[]</code>类型，则返回<code>true</code>，否则返回<code>false</code>,如果数组为空的话，则返回<code>false</code>，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AnyOf</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A0</span> = <span class="title class_">AnyOf</span>&lt;[]&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="title class_">AnyOf</span>&lt;[<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">false</span>,[],&#123;&#125;]&gt;; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">AnyOf</span>&lt;[<span class="number">1</span>, <span class="string">&quot;&quot;</span>,<span class="literal">false</span>,[],&#123;&#125;]&gt;; <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Falsy</span> = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span></span><br><span class="line">&#125; | [] | <span class="string">&#x27;&#x27;</span> | <span class="string">&quot;&quot;</span> | <span class="literal">false</span> | <span class="number">0</span> | <span class="literal">undefined</span> | <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnyOf</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? (A <span class="keyword">extends</span> <span class="title class_">Falsy</span> ? <span class="title class_">AnyOf</span>&lt;<span class="title class_">Rest</span>&gt; : <span class="literal">true</span>)</span><br><span class="line">: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十一题"><a href="#第四十一题" class="headerlink" title="第四十一题"></a>第四十一题</h2><ul>
<li>实现<code>Replace</code>工具类型，用于实现字符串类型的替换操作，具体的使用示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoobar&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此外，继续实现<code>ReplaceAll</code>工具类型，用于实现替换所有满足条件的字串，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;barfoo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R3</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarfoobar&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;fobarfobar&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer H&#125;</span><span class="subst">$&#123;From&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="string">`<span class="subst">$&#123;H&#125;</span><span class="subst">$&#123;To&#125;</span><span class="subst">$&#123;R&#125;</span>`</span></span><br><span class="line">: S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">Replace</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoobar&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;</span><br><span class="line">  S <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">From</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">To</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer H&#125;</span><span class="subst">$&#123;From&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="string">`<span class="subst">$&#123;H&#125;</span><span class="subst">$&#123;To&#125;</span><span class="subst">$&#123;ReplaceAll&lt;R, From, To&gt;&#125;</span>`</span></span><br><span class="line">: S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R0</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>&gt;; <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;barfoo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarbar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>&gt;; <span class="comment">// &#x27;foofoofoo&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R3</span> = <span class="title class_">ReplaceAll</span>&lt;<span class="string">&#x27;foobarfoobar&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;fobarfobar&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十二题"><a href="#第四十二题" class="headerlink" title="第四十二题"></a>第四十二题</h2><ul>
<li>实现<code>IndexOf</code>工具类型，用于获取数组类型中指定项的索引值，若不存在的话，则返回<code>-1</code>字面量类型，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IndexOf</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">0</span>&gt;; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">1</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">3</span>&gt;; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IndexOf</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>, R <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = A <span class="keyword">extends</span> [infer H, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Item</span> <span class="keyword">extends</span> H</span><br><span class="line">? R[<span class="string">&quot;length&quot;</span>]</span><br><span class="line">: <span class="title class_">IndexOf</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Item</span>, [...R, H]&gt;</span><br><span class="line">: -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I0</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">0</span>&gt;; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">1</span>&gt;; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">IndexOf</span>&lt;<span class="title class_">Arr</span>, <span class="number">3</span>&gt;; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十三题"><a href="#第四十三题" class="headerlink" title="第四十三题"></a>第四十三题</h2><ul>
<li>实现一个<code>Permutation</code>工具类型，当输入一个联合类型时，返回一个包含该联合类型的全排列类型数组。示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, K = T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] | [&#x27;b&#x27; , &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;; <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;] | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, K = T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>]</span><br><span class="line">? []</span><br><span class="line">: K <span class="keyword">extends</span> K</span><br><span class="line">? [K, ...<span class="title class_">Permutation</span>&lt;<span class="title class_">Exclude</span>&lt;T, K&gt;&gt;]</span><br><span class="line">: <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P0</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] | [&#x27;b&#x27; , &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">P1</span> = <span class="title class_">Permutation</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt;; <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] | [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;] | [&quot;b&quot;, &quot;a&quot;, &quot;c&quot;] | [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;] | [&quot;c&quot;, &quot;a&quot;, &quot;b&quot;] | [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十四题"><a href="#第四十四题" class="headerlink" title="第四十四题"></a>第四十四题</h2><ul>
<li>实现<code>Unpacked</code>工具类型，用于对类型执行“拆箱”操作，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unpacked</span>&lt;T&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T00</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T01</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>[]&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T02</span> = <span class="title class_">Unpacked</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T03</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T04</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;[]&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T05</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T06</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">never</span>&gt;;  <span class="comment">// never</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unpacked</span>&lt;T&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer A</span><br><span class="line">? A</span><br><span class="line">: T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer B&gt;</span><br><span class="line">? B</span><br><span class="line">: T <span class="keyword">extends</span> (infer A)[]</span><br><span class="line">? A</span><br><span class="line">: T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T00</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T01</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">string</span>[]&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T02</span> = <span class="title class_">Unpacked</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T03</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T04</span> = <span class="title class_">Unpacked</span>&lt;<span class="title class_">Unpacked</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;[]&gt;&gt;;  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T05</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T06</span> = <span class="title class_">Unpacked</span>&lt;<span class="built_in">never</span>&gt;;  <span class="comment">// never</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十五题"><a href="#第四十五题" class="headerlink" title="第四十五题"></a>第四十五题</h2><ul>
<li>实现<code>JsonifiedObject</code>工具类型，用于对<code>Object</code>对象类型进行序列话操作，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">toJSON</span>(): <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Jsonified</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObject</span> = &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;literalstring&quot;</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">date</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">customClass</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    <span class="attr">clz</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">attr</span>: <span class="title class_">Date</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JsonifiedMyObject</span> = <span class="title class_">Jsonified</span>&lt;<span class="title class_">MyObject</span>&gt;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ex</span>: <span class="title class_">JsonifiedMyObject</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: <span class="string">&quot;MyClass&quot;</span> = ex.<span class="property">customClass</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: <span class="built_in">string</span> = ex.<span class="property">obj</span>.<span class="property">nested</span>.<span class="property">attr</span>;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">toJSON</span>(): <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Jsonified</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> &#123; <span class="title function_">toJSON</span>(): infer <span class="title class_">Return</span> &#125;</span><br><span class="line">    ? <span class="title class_">ReturnType</span>&lt;T[K][<span class="string">&quot;toJSON&quot;</span>]&gt;</span><br><span class="line">    : T[K] <span class="keyword">extends</span> (...<span class="attr">arg</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span></span><br><span class="line">    ? <span class="built_in">never</span></span><br><span class="line">    : T[K] <span class="keyword">extends</span> <span class="built_in">object</span></span><br><span class="line">    ? <span class="title class_">Jsonified</span>&lt;T[K]&gt;</span><br><span class="line">    : T[K];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObject</span> = &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;literalstring&quot;</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">date</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="attr">customClass</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&quot;property&quot;</span>;</span><br><span class="line">    <span class="attr">clz</span>: <span class="title class_">MyClass</span>;</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">attr</span>: <span class="title class_">Date</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JsonifiedMyObject</span> = <span class="title class_">Jsonified</span>&lt;<span class="title class_">MyObject</span>&gt;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ex</span>: <span class="title class_">JsonifiedMyObject</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: <span class="string">&quot;MyClass&quot;</span> = ex.<span class="property">customClass</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: <span class="built_in">string</span> = ex.<span class="property">obj</span>.<span class="property">nested</span>.<span class="property">attr</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第四十六题"><a href="#第四十六题" class="headerlink" title="第四十六题"></a>第四十六题</h2><ul>
<li>实现<code>RequireAllOrNone</code>工具类型，用于满足以下功能，当设置<code>age</code>属性时，<code>gender</code>属性也会变成必填，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAllOrNone</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireAllOrNone</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Omit</span>&lt;T, K&gt; &amp; (</span><br><span class="line">  &#123;[P <span class="keyword">in</span> K]-?: T[P]&#125; | &#123;[P <span class="keyword">in</span> K]?: <span class="built_in">never</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireAllOrNone</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123; <span class="comment">// error</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="第四十七题"><a href="#第四十七题" class="headerlink" title="第四十七题"></a>第四十七题</h2><ul>
<li>实现<code>RequireExactlyOne</code>工具类型，用于满足以下功能，即只能包含<code>age</code>或<code>gender</code>属性，不能包含着两个属性，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能包含Keys中唯一的一个Key</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireExactlyOne</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T&gt; = <span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能包含Keys中唯一的一个Key</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequireExactlyOne</span>&lt;T, <span class="title class_">Keys</span> <span class="keyword">extends</span> keyof T, K <span class="keyword">extends</span> keyof T = <span class="title class_">Keys</span>&gt; =</span><br><span class="line"><span class="title class_">Keys</span> <span class="keyword">extends</span> <span class="built_in">any</span></span><br><span class="line">? <span class="title class_">Omit</span>&lt;T, K&gt; &amp; <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, <span class="title class_">Keys</span>&gt;&gt; &amp; <span class="title class_">Partial</span>&lt;<span class="title class_">Record</span>&lt;<span class="title class_">Exclude</span>&lt;K, <span class="title class_">Keys</span>&gt;, <span class="built_in">never</span>&gt;&gt;</span><br><span class="line">: <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p3</span>: <span class="title class_">RequireExactlyOne</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;lolo&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="第四十八题"><a href="#第四十八题" class="headerlink" title="第四十八题"></a>第四十八题</h2><ul>
<li>实现<code>ConsistsOnlyOf</code>工具类型，用于判断<code>LongString</code>字符串类型是否由 0 个或多个<code>Substring</code>字符串类型组成，示例如下：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">SubString</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;ababab&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aBa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C3</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">SubString</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =</span><br><span class="line"><span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">? <span class="literal">true</span></span><br><span class="line">: <span class="title class_">LongString</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;SubString&#125;</span><span class="subst">$&#123;infer R&#125;</span>`</span></span><br><span class="line">? <span class="title class_">ConsistsOnlyOf</span>&lt;R, <span class="title class_">SubString</span>&gt;</span><br><span class="line">: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C0</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;ababab&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>&gt;; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;aBa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C3</span> = <span class="title class_">ConsistsOnlyOf</span>&lt;<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="第四十九题"><a href="#第四十九题" class="headerlink" title="第四十九题"></a>第四十九题</h2><ul>
<li>项目中定义了接口返回的数据的类型，每层都能灵活扩展一些属性，怎么做呢？</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口返回数据结构</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Data</span> = &#123;</span><br><span class="line">  aaa?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">bbb</span>: &#123;</span><br><span class="line">    <span class="attr">ccc</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepRecord</span>&lt;<span class="title class_">Obj</span> <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> keyof <span class="title class_">Obj</span>]: <span class="title class_">Obj</span>[key] <span class="keyword">extends</span> <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;</span><br><span class="line">    ? <span class="title class_">DeepRecord</span>&lt;<span class="title class_">Obj</span>[key]&gt; &amp; <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;</span><br><span class="line">    : <span class="title class_">Obj</span>[key];</span><br><span class="line">&#125; &amp; <span class="title class_">Record</span>&lt;keyof <span class="built_in">any</span>, <span class="built_in">unknown</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IData</span> = <span class="title class_">DeepRecord</span>&lt;<span class="title class_">Data</span>&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="第五十题"><a href="#第五十题" class="headerlink" title="第五十题"></a>第五十题</h2><ul>
<li>当一个索引为 ‘desc’ | ‘asc’ 的时候，其他索引都是 false</li>
</ul>
<p><strong>解决方案</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GenerateType</span>&lt;keys <span class="keyword">extends</span> keyof <span class="built_in">any</span>, <span class="variable constant_">V1</span>, <span class="variable constant_">V2</span>&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> keys]: &#123;</span><br><span class="line">    [key1 <span class="keyword">in</span> key]: <span class="variable constant_">V1</span>;</span><br><span class="line">  &#125; &amp; &#123;</span><br><span class="line">    [key2 <span class="keyword">in</span> <span class="title class_">Exclude</span>&lt;keys, key&gt;]: <span class="variable constant_">V2</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;[keys];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> R = <span class="title class_">GenerateType</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span>, <span class="string">&quot;desc&quot;</span> | <span class="string">&quot;asc&quot;</span>, <span class="literal">false</span>&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="第五十一题"><a href="#第五十一题" class="headerlink" title="第五十一题"></a>第五十一题</h2><ul>
<li>取出<strong>interface</strong>中<strong>userInfo</strong>的类型</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">  data?: &#123;</span><br><span class="line">    userInfo?: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 1</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单版 Required</span></span><br><span class="line"><span class="comment">// 缺点 层级深了需要写多个Required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = <span class="title class_">Required</span>&lt;<span class="title class_">Required</span>&lt;<span class="title class_">Result</span>&gt;[<span class="string">&quot;data&quot;</span>]&gt;[<span class="string">&quot;userInfo&quot;</span>];</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归Required</span></span><br><span class="line"><span class="comment">// 缺点数据类型都会变成Required</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsOptional</span>&lt;<span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Obj</span>, <span class="title class_">Obj</span>&gt; = &#123;&#125; <span class="keyword">extends</span> <span class="title class_">Pick</span>&lt;<span class="title class_">Obj</span>, <span class="title class_">Key</span>&gt;</span><br><span class="line">  ? <span class="title class_">Key</span></span><br><span class="line">  : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepRequired</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]-?: <span class="title class_">IsOptional</span>&lt;K, T&gt; <span class="keyword">extends</span> <span class="built_in">never</span> ? T[K] : <span class="title class_">DeepRequired</span>&lt;T[K]&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = <span class="title class_">DeepRequired</span>&lt;<span class="title class_">Result</span>&gt;[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;userInfo&quot;</span>];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack原理</title>
    <url>/2021/10/27/webpack%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>构建 webpack 知识体系分为下面三个层级： 1.基础–会配置 2.进阶–能优化 3.深入–懂原理</p>
<h2 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h2><span id="more"></span>

<h3 id="1-简单配置"><a href="#1-简单配置" class="headerlink" title="1.简单配置"></a>1.简单配置</h3><p>该部分需掌握：<br>1.Webpack 常规配置项有哪些？ 2.常用 loader 有哪些？如何配置？ 3.常用插件 plugin 有哪些？如何配置？<br>4.Babel 如何配置？Babel 插件如何使用？</p>
<h4 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h4><p>需要现在本地安装<strong>webpack</strong>及<strong>webpack-cli</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure>

<h4 id="1-2-开始工作"><a href="#1-2-开始工作" class="headerlink" title="1.2 开始工作"></a>1.2 开始工作</h4><p>webpack 在 4 以后就支持 0 配置打包，我们可以测试一下</p>
<ol>
<li>新建 webpack-work 项目，新建 <code>./src/index.js</code>文件，写一段简单的代码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a = &#x27;hello foolishmax&#x27;;</span><br><span class="line">console.log(a);</span><br><span class="line">module.exports = a;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接运行<code>npx webpack</code>，启动打包<br><img src="../images/md_img/webpack-mode-error.png" alt="webpack-mode-error">)</li>
</ol>
<p>打包完成，会有一个提示：<code>The &#39;mode&#39; option has not been set,...</code></p>
<p>意思就是我们没有配置 mode（告知 webpack 使用相应模式的内置优化，默认为<code>production</code>，另外还有<code>development</code>、<code>none</code>）</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>development</td>
<td>开发模式，打包更加快速，省了代码优化步骤</td>
</tr>
<tr>
<td>production</td>
<td>生产模式，打包比较慢，开启 tree-shaking 和压缩代码</td>
</tr>
<tr>
<td>none</td>
<td>不使用任何默认优化选项</td>
</tr>
</tbody></table>
<p>webpack.config.js 中配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-配置文件"><a href="#1-3-配置文件" class="headerlink" title="1.3 配置文件"></a>1.3 配置文件</h4><p>虽然可以零配置打包，但是实际工作中，还是需要使用配置文件的方式来满足不同项目的需求。 1.跟路径下创建配置文件<code>webpack.config.js</code> 2.新增基本配置信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;, // 模式</span><br><span class="line">  entry: &#x27;./src/index.js&#x27;, // 打包入口地址</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.js&#x27;, // 输出文件名</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;) // 输出文件目录</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-4-loader"><a href="#1-4-loader" class="headerlink" title="1.4 loader"></a>1.4 loader</h4><p>这里我们把入口文件改成 css 文件，看下打包结果如何 1.新增<code>./src/main.css</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 0 20px;</span><br><span class="line">  max-width: 800px;</span><br><span class="line">  background: #f4f8fb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.修改 entry 配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  entry: &#x27;./src/main.css&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.js&#x27;,</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.运行打包命令： <code>npx webpack</code><br><img src="../images/md_img/webpack-loader.png" alt="loader"><br>这里的报错信息是因为：webpack 默认支持处理 js 文件，其他类型都处理不了，需要借助 loader 来对不同类型的文件进行处理。</p>
<p>4.安装<code>css-loader</code>来处理 CSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install css-loader -D</span><br></pre></td></tr></table></figure>

<p>5.配置资源加载模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  entry: &#x27;./src/main.css&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.css&#x27;,</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [ // 转换规则</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/, // 匹配所有css文件</span><br><span class="line">        use: &#x27;css-loader&#x27;, //对应的loader名称</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>6.重新运行打包命令<code>npx webpack</code>,就可以打包成功了</p>
<p>总结：loader 就是将 webpack 不认识的内容转化为认识的内容</p>
<h4 id="插件（plugin）"><a href="#插件（plugin）" class="headerlink" title="插件（plugin）"></a>插件（plugin）</h4><p>插件可以贯穿 webpack 打包的生命周期，执行不同的任务</p>
<p>1.新建<code>./src/index.html</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>如果想要打包后的资源文件，例如 js 或者 css 文件可以自动引入到 html 中，就需要使用插件<code>html-webpack-plugin</code>来做这件事情。</p>
<p>2.本地安装 <code>html-webpack-plugin</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>3.配置插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  entry: &#x27;./src/main.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;bundle.js&#x27;,</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [ // 转换规则</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/, // 匹配所有css文件</span><br><span class="line">        use: &#x27;css-loader&#x27;, //对应的loader名称</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行一下打包，打开 dist 目录下的 index.html 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script defer src=&quot;bundle.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到它自动引入打包好的 bundle.js</p>
<h4 id="1-6-自动清空打包目录"><a href="#1-6-自动清空打包目录" class="headerlink" title="1.6 自动清空打包目录"></a>1.6 自动清空打包目录</h4><p>每次打包的时候，打包目录都会遗留上次打包的文件，为了保持打包目录的纯净，打包前需将上次打包目录清空。</p>
<p>1.安装 <code>clean-webpack-plugin</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>2.配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-7-区分环境"><a href="#1-7-区分环境" class="headerlink" title="1.7 区分环境"></a>1.7 区分环境</h4><p>本地环境</p>
<ul>
<li>需要更快的构建速度</li>
<li>需要打印 debug 信息</li>
<li>需要 live reload 或者 hot reload 功能</li>
<li>需要 sourcemap 方便定位问题</li>
<li>…</li>
</ul>
<p>生产环境：</p>
<ul>
<li>需要更小的包体积，代码压缩+tree-shaking</li>
<li>需要进行代码分割</li>
<li>需要压缩图片体积</li>
<li>…</li>
</ul>
<p><a href="https://juejin.cn/post/7023242274876162084#heading-6">掘金</a></p>
<h2 id="webpack-常用-loader-和-plugin"><a href="#webpack-常用-loader-和-plugin" class="headerlink" title="webpack 常用 loader 和 plugin"></a>webpack 常用 loader 和 plugin</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">样式：style-loader、css-loader、less-loader、sass-loader</span><br><span class="line">文件：file-loader、url-loader</span><br><span class="line">编译：babel-loader、ts-loader</span><br><span class="line">校验：eslint-loader</span><br><span class="line"></span><br><span class="line">常用的plugin</span><br><span class="line">html-webpack-plugin</span><br><span class="line">webpack-bundle-analyzer 打包分析</span><br><span class="line">HotModuleReplacementPlugin 热更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自己写webpack插件：</span><br><span class="line">主要就是通过访问compliler和compilation拦截webpack的执行</span><br></pre></td></tr></table></figure>


<h2 id="如何利用-webpack-来优化前端性能？"><a href="#如何利用-webpack-来优化前端性能？" class="headerlink" title="如何利用 webpack 来优化前端性能？"></a>如何利用 webpack 来优化前端性能？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用webpack优化前端性能是指优化webpack的输出结果，</span><br><span class="line">让打包的最终结果在浏览器运行快速高效。</span><br><span class="line"></span><br><span class="line">压缩代码。删除多余的代码、注释、简化代码的写法等等方式。</span><br><span class="line">可以利用webpack的UglifyJsPlugin和ParallelUglifyPlugin来压缩JS文件</span><br><span class="line">，利用cssnano（css-loader?minimize）来压缩css</span><br><span class="line"></span><br><span class="line">利用CDN加速。在构建过程中，将引用的静态资源路径修改为CDN上对</span><br><span class="line">应的路径。可以利用webpack对于output参数和各loader的publicPath</span><br><span class="line">参数来修改资源路径</span><br><span class="line"></span><br><span class="line">删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。</span><br><span class="line"></span><br><span class="line">可以通过在启动webpack时追加参数--optimize-minimize来</span><br><span class="line">实现提取公共代码。</span><br></pre></td></tr></table></figure>

<h2 id="谈谈你对-webpack-的理解？"><a href="#谈谈你对-webpack-的理解？" class="headerlink" title="谈谈你对 webpack 的理解？"></a>谈谈你对 webpack 的理解？</h2><p>webpack 是一个打包模块化 js 的工具，在 webpack 里一切文件皆模块<br>，通过 loader 转换，通过 plugin 注入钩子，最后输出由多个<br>模块组合成的文件，webpack 专注构建模块化。WebPack 可<br>以看做是模块的打包机器：它做的事情是，分析你的项目<br>结构，找到 js 模块及其它的一些浏览器不能直接运行的<br>拓展语言，例如：Scss，TS 等，并将其打包为合适的格式<br>以供浏览器使用。</p>
<h2 id="说说-webpack-与-grunt、gulp-的不同？"><a href="#说说-webpack-与-grunt、gulp-的不同？" class="headerlink" title="说说 webpack 与 grunt、gulp 的不同？"></a>说说 webpack 与 grunt、gulp 的不同？</h2><p>三者都是前端构建工具，grunt 和 gulp 在早期比较流行，<br>现在 webpack 相对来说比较主，不过一些轻量化的任务<br>还是会用 gulp 来处理，比如单独打包 CSS 文件等。</p>
<p>webpack 是基于入口的,webpack 会自动地递归解析<br>入口所需要加载的所有资源文件，然后用不同的<br>Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。</p>
<p>grunt 和 gulp 是基于任务和流（Task、Stream）的。<br>类似 jQuery，找到一个（或一类）文件，对其做一<br>系列链式操作，更新流上的数据，整条链式操作<br>构成了一个任务，多个任务就构成了 web 的构建流程。</p>
<p>所以，从构建来说，gulp 和 grunt 需要开发者将整个<br>前端构建过程拆分成多个<code>Task</code>，并合理控制所有<code>Task</code>的<br>调用关系；webpack 需要开发者找到入口，并需要清楚对<br>于不同的资源应该使什么 Loader 做何种解析和加工对<br>于知识背景来说，gulp 更像后端开发者的思路，<br>需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路</p>
<h2 id="什么是-bundle-什么是-chunk，什么是-module"><a href="#什么是-bundle-什么是-chunk，什么是-module" class="headerlink" title="什么是 bundle,什么是 chunk，什么是 module?"></a>什么是 bundle,什么是 chunk，什么是 module?</h2><ul>
<li>bundle：是由 webpack 打包出来的文件</li>
<li>chunk：代码块，一个 chunk 由多个模块组合而成，用于代码的合并和分割</li>
<li>module：是开发中的单个模块，在 webpack 的世界，一切皆模块，一个模块对应一个文件，webpack 会从配置的 entry 中递归开始找出所有依赖的模块</li>
</ul>
<h2 id="Loader-和-Plugin-的不同？"><a href="#Loader-和-Plugin-的不同？" class="headerlink" title="Loader 和 Plugin 的不同？"></a>Loader 和 Plugin 的不同？</h2><p>不同的作用<br>Loader 直译为”加载器”。Webpack 将一切文件视为模块，<br>但是 webpack 原生是只能解析 js 文件，如果想将其他文件<br>也打包的话，就会用到 loader。 所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。</p>
<p>Plugin 直译为”插件”。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>
<p>不同的用法<br>Loader 在 module.rules 中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个 Object，里面描述了对于什么<br>类型的文件（test），使用什么加载(loader)和使用的参数（options）</p>
<p>Plugin 在 plugins 中单独配置。 类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</p>
<h2 id="描述一下编写-loader-或-plugin-的思路？"><a href="#描述一下编写-loader-或-plugin-的思路？" class="headerlink" title="描述一下编写 loader 或 plugin 的思路？"></a>描述一下编写 loader 或 plugin 的思路？</h2><p>Loader 像一个”翻译官”把读到的源文件内容转义成新的文件内容，<br>并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。<br>编写 Loader 时要遵循单一原则，每个 Loader 只做一种”转义”工作。 每个 Loader 的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用 this.callback()方法，将内容返回给 webpack。 还可以通过 this.async()生成一个 callback 函数，再用这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发 loader 的工具函数集——loader-utils。<br>相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>
<h2 id="构建打包优化（webpack-bundle-analyzer-分析各个打包文件）"><a href="#构建打包优化（webpack-bundle-analyzer-分析各个打包文件）" class="headerlink" title="构建打包优化（webpack-bundle-analyzer 分析各个打包文件）"></a>构建打包优化（webpack-bundle-analyzer 分析各个打包文件）</h2><p>速度优化:</p>
<ul>
<li><p>exclude/include</p>
<p>通过 exclude、include 配置来确保转译尽可能少的文件</p>
</li>
<li><p>cache</p>
</li>
<li><p>thread-loader</p>
</li>
<li><p>resolve.alias</p>
<p>webpack 直接根据对应别名的目录查找模块，减少搜索时间</p>
</li>
<li><p>模块懒加载</p>
</li>
<li><p>externals + CDN</p>
</li>
</ul>
<h2 id="vite-为什么快？"><a href="#vite-为什么快？" class="headerlink" title="vite 为什么快？"></a>vite 为什么快？</h2><blockquote>
<p>vite 借助了浏览器对 ESM 规范的支持，采取了和 webpack 不同的 unbundle 机制，unbundle 机制中模块之间的依赖关系的解析是由浏览器实现的（浏览器本身支持 ESM 的规范），不会对源文件做合并捆绑操作<br>webpack 工作机制：构建模块依赖图，然后再将模块依赖图分解为最终供浏览器使用的几个输出文件。所以 webpack 在这些阶段也做了一些优化，loader 的缓存功能，webpack5 的持久化缓存等</p>
</blockquote>
<p>构建 module graph 的过程可以简单归纳为:</p>
<p>获取配置文件中 entry 对应的 url (这个 url 一般为相对路径);<br>resolve - 将 url 解析为绝对路径，找到源文件在本地磁盘的位置，并构建一个 module 对象；<br>load - 读取源文件的内容;<br>transform - 使用对应的 loader 将源文件内容转化为浏览器可识别的类型；<br>parse - 将转化后的源文件内容解析为 AST 对象，分析 AST 对象，找到源文件中的静态依赖(import xxx from ‘xxx’) 和动态依赖(import(‘xx’))对应的 url, 并收集到 module 对象中；<br>遍历第 5 步收集到的静态依赖、动态依赖对应的 url，重复 2 - 6 步骤，直到项目中所有的源文件都遍历完成。</p>
<p>分解 module graph 的过程也可以简单归纳为:</p>
<p>预处理 module graph，对 module graph 做 tree shaking；<br>遍历 module graph，根据静态、动态依赖关系，将 module graph 分解为 initial chunk、async chunks；<br>优化 initial chunk、 async chunks 中重复的 module；<br>根据 optimization.splitChunks 进行优化，分离第三方依赖、被多个 chunk 共享的 module 到 common chunks 中；<br>根据 chunk 类型，获取对应的 template；<br>遍历每个 chunk 中收集的 module，结合 template，为每个 chunk 构建最后的输出内容；<br>将最后的构建内容输出到 output 指定位置；</p>
<ul>
<li>vite 的快：快速的冷启动和热更新</li>
<li>vite 的慢：首屏性能和懒加载性能<ul>
<li>不对源文件做合并捆绑操作，会导致大量的 http 请求</li>
<li>把本该在 dev server 启动时做的工作（resolve、load、transform、parse 等）放在了响应浏览器请求的过程中</li>
<li>但是第二次就快了，再次 reload 页面时 dev server 会将之前已经完成转换的内容缓存起来</li>
</ul>
</li>
</ul>
<h2 id="前端-webpack-分包"><a href="#前端-webpack-分包" class="headerlink" title="前端 webpack 分包"></a>前端 webpack 分包</h2><ul>
<li><p>默认情况下 webpack 会将所有代码构建成一个单独的包，随着项目的推进，包体积会越来越大导致应用响应耗时增长。</p>
</li>
<li><p>两个弊端：</p>
<ul>
<li>资源冗余，用户访问内容只有一部分，但是客户端加载了整个代码包，浪费资源</li>
<li>缓存失效，所有资源打成一个包后只修改一个字符也会导致客户端重新下载整个资源，缓存命中率低</li>
</ul>
</li>
<li><p>解决：</p>
<ul>
<li>通过 webpack 的 optimization 属性来配置分包规则</li>
</ul>
</li>
</ul>
<h2 id="webpack5-和-webpack4-的区别？"><a href="#webpack5-和-webpack4-的区别？" class="headerlink" title="webpack5 和 webpack4 的区别？"></a>webpack5 和 webpack4 的区别？</h2><blockquote>
<p>可以参考 webpack 官网的从 v4 升级到 v5 的版本迁移解决方案</p>
</blockquote>
<ul>
<li><p>tree Shaking -只支持 esmodule，但是 vue、react 框架都是用 babel-loader 编译的，可以设置 modules：false 防止 babel 将模块类型转译为 commonjs 类型，导致 tree-shaking 失效</p>
<ul>
<li>webpack5 中 mode=’production’自动开启 tree-shaking</li>
</ul>
</li>
<li><p>代码压缩</p>
<ul>
<li>webpack4 需要下载 terser-webpack-plugin 插件</li>
<li>webpack5 内置了这个插件，并在 mode=’production’时自动开启 js 压缩功能</li>
</ul>
</li>
<li><p>sideEffects 副作用</p>
<ul>
<li>optimization.sideEffects = true 开启副作用功能</li>
<li>package.json 中设置 sideEffects:false 标记所有模块无副作用</li>
<li>webpack 在打包前会检查项目所属的 package.json 文件中的 sideEffects 标识，如果没有副作用那么这个模块就不需要打包。</li>
</ul>
</li>
<li><p>webpack 缓存</p>
<ul>
<li>webpack4 的缓存配置需要安装对应缓存插件</li>
<li>webpack5 内置 cache 缓存机制，直接配置。</li>
<li>使用持久化缓存<br>cache: {<br>type: ‘filesystem’， // cache 会在开发模式下设置成 memory，并在生产模式下把 chache 给禁用掉<br>cacheDirectory: path.join(__dirname, ‘node_modules/.cac/webpack’)<br>}</li>
</ul>
</li>
<li><p>loader 的优化，通过 type 替换 loader</p>
</li>
<li><p>启动服务</p>
<ul>
<li>webpack4 是通过 webpack-dev-server 启动服务</li>
<li>webpack5 内置 webpack serve 启动</li>
</ul>
</li>
<li><p>模块联邦（微前端）</p>
<ul>
<li>实现应用程序之间的隔离</li>
</ul>
</li>
<li><p>热更新</p>
</li>
</ul>
<h2 id="webpack的构建流程"><a href="#webpack的构建流程" class="headerlink" title="webpack的构建流程"></a>webpack的构建流程</h2><ul>
<li><p>从入口文件entry出发，分析module模块并递归整个项目模块间的依赖关系</p>
</li>
<li><p>加载执行响应loader将module模块解析成webpack能够识别的有效模块，生成模块依赖图</p>
</li>
<li><p>编译过程触发多个事件钩子，执行配置的plugin插件</p>
</li>
<li><p>将解析后的模块分组生成chunk</p>
</li>
<li><p>根据output输出配置生成最后的bundle</p>
</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx指南</title>
    <url>/2023/07/20/nginx%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="负载均衡4种策略"><a href="#负载均衡4种策略" class="headerlink" title="负载均衡4种策略"></a>负载均衡4种策略</h2><ul>
<li>轮询：默认方式</li>
<li>weight：在轮询基础上增加权重，也就是轮询到的几率不同</li>
<li>ip_hash：按照ip的hash分配，保证每个访客的请求固定访问一个服务器，解决session问题</li>
<li>fair：按照相应时间来分配，需要安装nginx-upstream-fair插件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认轮询</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weight</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ip_hash</span></span><br><span class="line">upstream nest-server &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3001</span>;</span><br><span class="line">  server <span class="number">192.</span>xxx.<span class="property">x</span>.<span class="property">x</span>:<span class="number">3002</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端性能优化</title>
    <url>/2019/07/17/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="WEB-前端性能优化常见方法"><a href="#WEB-前端性能优化常见方法" class="headerlink" title="WEB 前端性能优化常见方法"></a>WEB 前端性能优化常见方法</h1><p>前端性能优化针对不用资源有不同的性能优化方式</p>
<span id="more"></span>

<ul>
<li><p>内容优化</p>
<pre><code>+ (1)减少HTTP请求数：因为一个完整的请求要经过    DNS寻址，与服务器建立连接，发送数据，
</code></pre>
<p>等待服务器响应，接受数据等消耗时间成本和资源成本的复杂过程。 - 常见解决方法： + 资源和并和压缩：合并多个 CSS 文件和 js 文件并使用相应的工具对 js、css、图片等进行压缩处理 + 雪碧图（精灵图）：减少请求数 + 合理设置 http 缓存：原则就是能缓存的越多越好，越久越好，通过 http header 中<br>设置 Expires 过期时间，或者 Last-Modifed 进行请求验证 + 减少 http 请求头、配置多个域名和 CDN 加速、使用缓存<br>（HTTP 缓存、浏览器缓存、应用缓存）、优化 cookie + （2）避免重定向：减少不必要的 http 跳转 + （3）延迟加载组件，预加载组件，图片懒加载 + （4）减少 DOM 元素数量：页面中存在大量 DOM 元素，会导致 JavaScript 遍历 DOM 的效率变慢。</p>
</li>
<li><p>服务器优化</p>
<ul>
<li>（1）使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度</li>
<li>（2）Gzip 压缩</li>
<li>（3）设置 ETag：ETags（Entity tags，实体标签）是 web 服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。</li>
<li>（4）提前刷新缓冲区</li>
<li>（5）避免空的图像 src</li>
</ul>
</li>
<li><p>Cookie 优化</p>
<ul>
<li>（1）减少 Cookie 的大小</li>
<li>（2）针对 Web 组件使用域名无关的 Cookie</li>
</ul>
</li>
<li><p>CSS 优化</p>
<ul>
<li>将 CSS 代码放在 HTML 页面的顶部</li>
<li>避免使用 CSS 表达式</li>
<li>使用<link>来代替@import</li>
<li>避免使用 Filters</li>
</ul>
</li>
<li><p>JavaScript 优化</p>
<ul>
<li>(1) 将 JavaScript 脚本放在页面的底部。</li>
<li>(2) 将 JavaScript 和 CSS 作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为 JavaScript 和 CSS 文件都能在浏览器中产生缓存。</li>
<li>(3) 最小化 DOM 的访问：使用 JavaScript 访问 DOM 元素比较慢。</li>
<li>(4) document.getElement…将获取到的元素长度提取出来</li>
<li>(5) 尽量减少会产生 reflow 和 repaint 的操作，因为它们都是需要消耗资源的</li>
<li>(6) 慎用 with，with 他会修改编译时的词法作用域，修改了执行环境，访问非局部属性的<br>时候，会从指定 obj 作用域上开始查找，相当于增长了作用域长度，而过长的作用域链会造成<br>查找性能下降。</li>
<li>(7) 慎用 eval 和 Function,需要 js 引擎将源代码转换成可执行代码，这是很消耗资源的操作，<br>同时，也不利于压缩工具进行压缩。</li>
<li>(8) 减少作用域链的查找，访问非本作用域下的变量，在循环遍历的时候使用局部变量缓存该变量，<br>遍历结束后再重写那个变量，尤其是全局变量处于作用域的最顶端，访问时查找次数最多</li>
</ul>
</li>
<li><p>图像优化</p>
<ul>
<li>(1)优化图片大小</li>
<li>（2）通过 CSS Sprites 优化图片</li>
<li>（3）不要在 HTML 中使用压缩图片</li>
<li>（4）favicon.ico 要小而且可缓存</li>
</ul>
</li>
<li><p>robots.txt<br>搜索引擎蜘蛛访问网站时会第一个访问 robots.txt 文件，robots.txt 用于指导搜索引擎<br>蜘蛛禁止抓取网站的某些内容和只允许抓取哪些内容，放在站点根目录。</p>
</li>
<li><p>dns-prefetch</p>
<ul>
<li><p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//cdn.bootcss.com&quot;&gt;</code></p>
</li>
<li><p>使用 dns-prefetch 对项目中使用的域名进行 DNS 预解析，减少 DNS 查询。</p>
</li>
</ul>
</li>
<li><p>URL 优化<br>越短越好<br>避免太多参数<br>目录层次尽量少<br>文件及目录名具有描述性<br>字母全部小写<br>连词符使用-而不是_<br>URL 中包括关键字</p>
</li>
<li><p>TDK 优化<br>TDK 为 title，description，keywords 三个的统称。<br>title：分隔符一般有 ， - <em>,其中</em>对百度比较友好，-对谷歌比较友好，title 长度 pc 端一般<br>30 个中文，移动端 20 个，超过会截断为省略号。</p>
</li>
<li><p>其他<br>标签语义化<br>img 设置 alt 属性<br>不需要跟踪爬行的链接，设置 rel = “nofollow”</p>
</li>
</ul>
<p>[参考]：（<a href="https://segmentfault.com/a/1190000008829958%EF%BC%89">https://segmentfault.com/a/1190000008829958）</a></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>人月神话书摘</title>
    <url>/2023/12/19/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E4%B9%A6%E6%91%98/</url>
    <content><![CDATA[<p>什么叫“人月神话”？</p>
<p>人是程序员，月是时间，，如果1人干10个月如果等同10人干1个月，那就成神话。</p>
<span id="more"></span>

<p>001</p>
<p>焦油坑</p>
<p>过去几十年的大型系统开发就犹如一个焦油坑，很多大型动物在其中剧烈挣扎，他们中大多数开发出了可运行的系统–不过，其中只有非常少数的项目满足了目标、时间进度和预算的要求。</p>
<p>各种团队，大型的和小型的，庞杂的和精干的，一个接一个淹没在了焦油坑中。表面上看起来好像没有任何一个单独的问题会导致困难，每个都能被解决，但是当它们相互纠缠和累积在一起的时候，团队的行动就会变得越来越慢且很难看清问题的本质。</p>
<p>002</p>
<p>人月神话</p>
<p>缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来影响还大。</p>
<p>我们围绕成本核算的估计技术，混淆了工作量和项目进展。人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。</p>
<p>向软件项目中增派人手从三个方面增加了项目必要的总体工作量：</p>
<p>任务重新分配本身和所造成的工作中断；</p>
<p>培训新人员；</p>
<p>额外的相互沟通。</p>
<p>关于进度安排，我的经验是为1/3计划、1/6编码、1/4构件测试以及1/4系统测试。</p>
<p>Brook法则：向进度落后的项目中增加人手，只会使进度更加落后。</p>
<p>特别需要指出的是，不为系统测试安排足够的时间简直就是一场灾难。</p>
<p>在现实情况中，一旦开发团队观察到进度的偏差，总是倾向于对任务进行削减。当项目延期所导致的后续成本非常高时，这常常是唯一可行的方法。</p>
<p>003</p>
<p>外科手术队伍</p>
<p>小型、精干队伍是最好的–尽可能的少。</p>
<p>需要协作沟通的人员的数量影响着开发成本，因为成本的主要组成部分是相互的沟通和交流，以及更正沟通不当所引起的不良结果（系统调试）。</p>
<p>Mills建议大型项目的每一个部分由一个团队解决，但是该队伍以类似外科手术的方式组建，而并非一拥而上。</p>
<p>一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法–既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。</p>
<p>004</p>
<p>贵族专制、民主政治和系统设计</p>
<p>为了反映一系列连贯的设计思路，宁可省略一些不规则的特性和改进，也不提倡独立和无法整合的系统，哪怕它们其实包含着许多很好的设计。</p>
<p>同工作的水平分割相比，垂直划分从根本上大大减少了劳动量，结果是使交流彻底地简化，概念完整性得到大幅提高。</p>
<p>005</p>
<p>蛇添足</p>
<p>一种普遍倾向是过分地设计第二个系统，向系统添加很多修饰功能和想法，它们曾在第一个系统中被小心谨慎地推迟了。</p>
<p>实际情况中，尽早交流和持续沟通能使结构师有较好的成本意识，以及使开发人员获得对设计的信心，并且不会混淆各自的责任分工。</p>
<p>面对估算过高的难题，结构师有两个选择：削减设计或者建议成本更低的实现方法–挑战估算的结果</p>
<p>006</p>
<p>贯彻执行</p>
<p>即使是大型的设计团队，设计结果也必须由一个或两个人来完成，以确保这些决定是一致的。</p>
<p>允许体系结构师对实现人员的询问做出电话应答解释是非常重要的，并且必须进行日志记录和整理发布。</p>
<p>对于存有疑问的实现人员，应鼓励他们打电话询问相应的结构师，而不是一边自行猜测一边工作，这是一项很基本的措施。</p>
<p>007</p>
<p>为什么巴比伦塔会失败？</p>
<p>巴比伦塔项目的失败是因为缺乏交流，以及交流的结果–组织。</p>
<p>“因为左手不知道右手在做什么，从而进度灾难、功能的不合理和系统缺陷纷纷出现。</p>
<p>随着工作的进行，许多小组慢慢地修改自己程序的功能、规模和速度，他们明确或者隐含地更改了一些有效输入和输出结果用法上的约定，而因此给其他部分引发了BUG。</p>
<p>解决方案：</p>
<p>团队应该以尽可能多的方式进行相互之间的交流：非正式、常规项目会议，会上进行简要的技术陈述、共享的正式项目工作手册。举行常规项目会议，会议中，团队一个接一个地进行简要的技术陈述。这种方式非常有用，能澄清成百上千的细小误解。</p>
<p>制定项目工作手册，并实时记录变更：首先，必须在页面上标记发生改变的文本，例如，使用页边上的竖线标记每行变化的文字。第二，分发的变更页附带独立的总结性文字，对变更的重要性以及批注进行记录。</p>
<p>008</p>
<p>胸有成竹</p>
<p>编码大约只占了问题的六分之一左右，编码估计或者比率的错误可能会导致不合理的荒谬结果。</p>
<p>对常用编程语句而言。生产率似乎是固定的。这个固定的生产率包括了编程中需要注释，并可能存在错误的情况.</p>
<p>使用适当的高级语言，编程的生产率可以提高5倍。</p>
<p>009</p>
<p>削足适履</p>
<p>在大型的团队中，各个小组倾向于不断地局部优化，以满足自己的目标，而较少考虑队用户的整体影响。这种方向性的问题是大型项目的主要危险。</p>
<p>为了满足目标，每个人都在局部优化自己的程序，很少会有人停下来，考虑一下对客户的整体影响。</p>
<p>培养开发人员从系统整体出发、面向用户的态度是软件编程管理人员最重要的职能。</p>
<p>10</p>
<p>提纲挈领</p>
<p>如果要制造一台机器，哪些是关键的文档呢？</p>
<p>目标：定义待满足的目标和需要，定义迫切需要的资源、约束和优先级。</p>
<p>首先，书面记录决策是必要的。只有记录下来，分歧才会明朗，矛盾才会突出。项目经理常常会不断发现，许多理应被普遍认同的策略，完全不为团队的一些成员所知。每个文档本身就可以作为检查列表或者数据库。</p>
<p>项目经理的基本职责是使每个人都向着相同的方向前进。项目经理的主要日常工作是沟通，而不是做出决定；文档使各项计划和决策在整个团队范围内得到交流。</p>
<p>通过周期性的回顾，他能清楚项目所处的状态，以及哪些需要重点进行更改和调整。</p>
<p>11</p>
<p>未雨绸缪</p>
<p>变更的客观需要</p>
<p>对于大多数项目，第一个开发的系统并不合用。它可能太慢、太大，而且难以使用，或者三者兼而有之。</p>
<p>用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。</p>
<p>软件产品易于掌握的特性和不可见性，导致了它的构建人员（特别容易）面临着永恒的需求变更。</p>
<p>目标上（和开发策略上）的一些正常变化无可避免，事先为它们做准备总比假设它们不会出现要好得多。</p>
<p>为变更计划组织结构</p>
<p>当系统发生变化时，管理结构也需要进行调整。只要管理人员和技术人才的天赋允许，老板必须对他们的能力培养给予极大的关注，使管理人员和技术人才具有互换性。</p>
<p>为什么缺陷不能更彻底地被修复？</p>
<p>首先，看上去很轻微的错误，似乎仅仅是局部操作上的失败，实际上却是系统级别的问题，通常这不是很明显。</p>
<p>设计实现的人员越少、接口越少，产生的错误也就越少。</p>
<p>所有修改都倾向于破坏系统的架构，增加了系统的混乱程度。用在修复原有设计上瑕疵的工作量越来越少，而早期维护活动本身的漏洞所引起修复工作越来越多。</p>
<p>随着时间的推移，系统变得越来越无序，修复工作迟早会失去根基 ，尽管理论上系统一直可用，但实际上，整个系统已经面目全非，无法再成为下一步进展的基础。</p>
<p>机器在变化，配置在变化，用户的需求在变化，所以现实系统不可能永远可用。崭新的、对于原有系统的重新设计是完全必要的。</p>
<p>12</p>
<p>干将莫邪</p>
<p>每个编程人员也保留着编辑器、排序、内存信息转储、磁盘实用程序等工具。 这种方法对软件项目来说是愚蠢的。首先，项目的关键问题是沟通，个性化的工具妨碍–而不是促进沟通。</p>
<p>交互式编程</p>
<p>MIT的Multics项目的成果之一，是它对软件编程系统开发的贡献。在那些系统编程所关注的方面，Multics（以及后续系统，IBM的TSS）和其他交互式计算机系统在概念上有很大的不同：多个级别上数据和程序的共享和保护，可延伸的库管理，以及协助终端用户共同开发的设施。我确信在某些应用上，批处理系统决不会被交互式系统所取代。</p>
<p>13</p>
<p>整体部分</p>
<p>许许多多的失败完全源于那些产品未精确定义的地方。</p>
<p>“细致的功能定义、详细的规格说明、规范化的功能描述说明以及这些方法的实施，大大减少了系统中必须查找的bug数量。 注: 需求文档越详细，bug越少</p>
<p>在编写任何代码之前，规格说明必须提交给测试小组，以详细地检查说明的完整性和明确性 注: 需求文档给测试过一遍</p>
<p>他将程序开发划分成体系结构设计、设计实现和物理编码实现，每个步骤可以使用自顶向下的方法很好地实现。</p>
<p>好的自顶向下设计从几个方面避免了bug。</p>
<p>首先，清晰的结构和表达方式更容易对需求和模块功能进行精确的描述。</p>
<p>其次，模块分割和模块独立性避免了系统级的bug。</p>
<p>另外，细节的隐藏使结构上的缺陷更加容易识别。</p>
<p>最后，设计在每个精化步骤的层次上是可以测试的，所以测试可以尽早开始，并且每个步骤的重点可以放在合适的级别上。</p>
<p>一些糟糕的系统往往就是试图挽救一个基础很差的设计，而对它添加了很多表面装饰般的补丁。自顶向下的方法减少了这样的企图。</p>
<p>14</p>
<p>祸起萧墙</p>
<p>当人们听到某个项目的进度发生了灾难性偏离时，可能会认为项目一定是遭受了一系列重大灾难。然而，通常灾祸来自白蚁的肆虐，而不是龙卷风的侵袭。</p>
<p>里程碑</p>
<p>里程碑的选择只有一个原则，那就是，里程碑必须是具体的、特定的、可度量的事件，能够进行清晰定义。</p>
<p>例如：”结构师和实现人员签字认可的规格说明”，”100%源代码编制完成，纸带打孔完成并输入到磁盘库”，”测试通过了所有的测试用例”。</p>
<p>如果里程碑很模糊，老板就常常会得到一份与实际情况不符的报告。</p>
<p>慢性进度偏离是士气杀手。[Microsoft的Jim McCarthy说：”如果你错过了一个最终期限（deadline），确保制订下一条deadline</p>
<p>如果在某项活动开始之前就着手估计，并且每两周进行一次仔细的修订，根据实际情况动态调整时间。当里程碑没有正确反映损失的时间，并对人们形成误导，以致事态无法挽回的时候，它会彻底碾碎小组的士气。</p>
<p>保持进度透明可见</p>
<p>一线经理的利益和老板的利益是内在冲突的。一线经理担心如果汇报了问题，老板会采取行动,这些行动会取代经理的作用，降低自己的威信，搞乱了其他计划。所以，只要项目经理认为自己可以独立解决问题，他就不会告诉老板。</p>
<p>有两种掀开毯子把污垢展现在老板面前的方法，它们必须都被采用。</p>
<p>一种是减少角色冲突和鼓励状态共享</p>
<p>减少角色的冲突。老板必须规范自己，不对项目经理可以解决的问题做出反应。当项目经理了解到老板收到项目报告之后不会惊慌，或者不会越俎代庖时，他就逐渐会提交真实的评估结果。</p>
<p>另一种是猛地拉开地毯。</p>
<p>猛地拉开地毯。不论协作与否，拥有能了解状态真相的评审机制是必要的。PERT图以及频繁的里程碑是这种评审的基础。大型项目中，可能需要每周对某些部分进行评审，大约一个月左右进行整体评审。</p>
<p>没有银弹软件工程中的根本和次要问题</p>
<p>没有任何技术或管理上的进展，能够独立地许诺十年内使生产率、可靠性或简洁性获得数量级上的进步。因为软件有无法规避的特性：复杂度、一致性、可变性、不可见性。</p>
<p>产品复杂度：</p>
<p>由于复杂度，团队成员之间的沟通非常困难，导致了产品瑕疵、成本超支和进度延迟；</p>
<p>由于复杂度，列举和理解所有可能的状态十分困难，影响了产品的可靠性；</p>
<p>由于函数的复杂度，函数调用变得困难，导致程序难以使用；</p>
<p>由于结构性复杂度，程序难以在不产生副作用的情况下用新函数扩充；由于结构性复杂度，造成很多安全机制状态上的不可见性。</p>
<p>复杂度不仅仅导致技术上的困难，还引发了很多管理上的问题。它使全面理解问题变得困难，从而妨碍了概念上的完整性；它使所有离散出口难以寻找和控制；它引起了大量学习和理解上的负担，使开发慢慢演变成了一场灾难。</p>
<p>软件可变性：</p>
<p>软件实体经常会遭受到持续的变更压力</p>
<p>现实工作中，经常发生两种情况。</p>
<p>当人们发现软件很有用时，会在原有应用范围的边界，或者在超越边界的情况下使用软件。功能扩展的压力主要来自那些喜欢基本功能，又对软件提出了很多新用法的用户们。</p>
<p>其次，软件一定是在某种计算机硬件平台上开发，成功软件的生命期通常比当初的计算机硬件平台要长。即使不是更换计算机，则有可能是换新型号的磁盘、显示器或者打印机。软件必须与各种新生事物保持一致。</p>
<p>软件不可见性</p>
<p>软件是不可见的和无法可视化的。 其中的秘密就是逐步发育成长，而不是一次性搭建。</p>
<p>软件开发是一件棘手的事情，并不会有魔术般的解决方案，现在是从业者研究和分析革命性进展的时刻，而不是等待或希望它的出现。</p>
<p>现在有可能可以在软件生产率上取得逐步的进展，而不是等待不可能到来的大突破。</p>
]]></content>
  </entry>
  <entry>
    <title>代码的艺术</title>
    <url>/2023/06/16/%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="一流代码的特性"><a href="#一流代码的特性" class="headerlink" title="一流代码的特性"></a>一流代码的特性</h2><ul>
<li><p>正确和性能</p>
<ul>
<li>鲁棒性</li>
<li>高效</li>
</ul>
</li>
<li><p>可读性和可维护</p>
<ul>
<li>简洁</li>
<li>简短</li>
<li>可测试</li>
</ul>
</li>
<li><p>共享和重用</p>
<ul>
<li>共享</li>
<li>可移植</li>
</ul>
</li>
<li><p>运维和运营</p>
<ul>
<li>可监控/可观测</li>
<li>可运维</li>
<li>可扩展</li>
</ul>
</li>
</ul>
<h2 id="好的代码从哪里来？"><a href="#好的代码从哪里来？" class="headerlink" title="好的代码从哪里来？"></a>好的代码从哪里来？</h2><p>编码前：需求分析，系统设计<br>编码中：编写代码，单元测试<br>编码后：集成测试、上线、持续运营/迭代改进</p>
<p>一个好的系统/产品是以上过程持续迭代的结果</p>
]]></content>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全</title>
    <url>/2019/10/10/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h2><span id="more"></span>

<h2 id="你知道哪些前端攻击？该如何预防？"><a href="#你知道哪些前端攻击？该如何预防？" class="headerlink" title="你知道哪些前端攻击？该如何预防？"></a>你知道哪些前端攻击？该如何预防？</h2><ul>
<li><p>xss</p>
<ul>
<li>Cross Site Script 跨站脚本攻击</li>
<li>手段：将 js 代码插入到网页内容中，渲染时执行 js 代码</li>
<li>预防：特殊字符替换（前端或后端）</li>
<li>输入检查，对于用户输入进行格式检查。</li>
</ul>
</li>
<li><p>csrf</p>
<ul>
<li><p>Cross Site Request Forgery 跨站请求伪造</p>
</li>
<li><p>手段：诱导用户去访问另一个网站的接口，伪造请求</p>
</li>
<li><p>预防：严格的跨域限制 + 验证码机制</p>
</li>
<li><p>csrf 详细过程</p>
<ul>
<li>用户登录 A 网站，有了 A 网站的 cookie</li>
<li>诱导用户到 B 网站，并发起 A 网站的请求</li>
<li>A 网站的 API 发现有 cookie，认为是用户自己操作的</li>
</ul>
</li>
<li><p>csrf 预防手段</p>
<ul>
<li>严格的跨域请求限制，如判断 referer（请求来源）</li>
<li>为 cookie 设置 SameSite，禁止跨域传递 cookie<ul>
<li>Chrome 51 开始，浏览器的 Cookie 新增加了一个 SameSite 属性，用来防止 CSRF 攻击 和用户追踪（第三方恶意获取 cookie），限制第三方 Cookie，从而减少安全风险。</li>
</ul>
</li>
<li>关键接口使用短信验证码</li>
<li>token 验证</li>
</ul>
</li>
</ul>
</li>
<li><p>点击劫持</p>
<ul>
<li>click jacing</li>
<li>手段：诱导界面上蒙一个透明 iframe，诱导用户点击</li>
<li>预防：让 iframe 不能跨域加载<ul>
<li>X-FRAME-OPTIONS 响应头是用来给浏览器指示允许一个页面可否在<code>&lt;frame&gt;</code>,<br><code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站<br>内容没有被嵌到别人的网站中去，也从而避免点击劫持的攻击。</li>
</ul>
</li>
</ul>
</li>
<li><p>DDos</p>
<ul>
<li>Distribute denial-of-service 分布式拒绝服务</li>
<li>手段：分布式的、大规模的流量访问，使服务器瘫痪</li>
<li>预防：软件层不好做，需硬件预防（如阿里云 WAF）</li>
</ul>
</li>
<li><p>SQL 注入</p>
<ul>
<li>手段：提交内容时写入 SQL 语句，破环数据库</li>
<li>预防：处理输入的内容，替换特殊字符</li>
</ul>
</li>
</ul>
<h2 id="什么是跨域？解决跨域的方法有哪些"><a href="#什么是跨域？解决跨域的方法有哪些" class="headerlink" title="什么是跨域？解决跨域的方法有哪些?"></a>什么是跨域？解决跨域的方法有哪些?</h2><ul>
<li><p>同源策略</p>
<ul>
<li>是一种浏览器的安全策略</li>
<li>协议、域名、端口号必须完全一致</li>
<li>不同源的客户端脚本在没有明确的授权的情况下，不能读取对方的资源</li>
</ul>
</li>
<li><p>跨域</p>
<ul>
<li>指一个域下的文档或脚本尝试去请求另一个域下的资源。</li>
</ul>
</li>
</ul>
<!-- more -->

<ul>
<li><p>解决跨域</p>
<ul>
<li><p>jsonp</p>
</li>
<li><p>postMessage 跨域</p>
</li>
<li><p>WebSocket 协议跨域</p>
</li>
<li><p>CORS（跨域资源共享，服务端设置 Access-Control-Allow-Origin，前端无需设置，<br>若要带 cookie 请求，前后端都要设置）</p>
</li>
<li><p>nginx 反向代理接口跨域</p>
</li>
<li><p>document.domain(两个页面通过 js 强制设置 document.domain 为基础主域，针对基础域名相同的情况)</p>
</li>
<li><p>window.name + iframe</p>
</li>
<li><p>location.hash + iframe</p>
</li>
<li><p>…</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>前端安全</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化</title>
    <url>/2023/03/31/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><span id="more"></span>

<blockquote>
<p>把复杂的代码按照功能的不同划分成不同的模块单独维护，提高开发效率，方便后期维护。<br>服务端规范主要是 CommonJS，例如 nodejs。<br>客户端主要有 AMD（异步模块定义，推崇依赖前置 requirejs）、CMD（通用模块定义，推崇依赖就近，seajs），但是随着 ES6 的普及，前端的这些第三方的模块化实现已经在渐渐的淘汰</p>
</blockquote>
<p>模块化的演进：</p>
<ol>
<li>基于文件划分模块的方式</li>
<li>每个模块暴露一个全局对象，所有模块成员都挂载在这个对象中，例如 jQuery 库把它的 api 都放在了 window.$下面，但zepto也是在window.$下容易命名冲突</li>
<li>使用 IIFE 为模块提供私有空间</li>
<li>利用 IIFE 的参数作为依赖声明使用</li>
<li>模块化规范（AMD、CMD、CommonJS、ESM 等）</li>
</ol>
<h2 id="CommonJS-解析"><a href="#CommonJS-解析" class="headerlink" title="CommonJS 解析"></a>CommonJS 解析</h2><blockquote>
<p>CommonJS 的核心思想是通过 require 方法来同步加载依赖的其他模块，通过 module.export 来导出需要暴露的接口</p>
</blockquote>
<p>require 内部逻辑：<br>例如：require(X)</p>
<ol>
<li>如果 X 是内置模块（比如 require(‘http’)）<br>a. 返回该模块<br>b. 不再继续执行</li>
<li>如果 X 以 ‘./‘或者 ‘../‘开头<br>a. 根据 X 所在父模块，确定 X 的绝对路径<br>b. 将 X 当作文件，依次查找以下文件（.x ｜.x.js | .x.json | .x.node），只要一个存在就返回该文件，不再继续执行<br>c. 把 X 当作目录，依次查找以下文件（.x/package.json | .x/index.js | .x/index.json | .x/index.node），只要一个存在就返回并不再执行</li>
<li>如果 X 不带路径<br>a. 根据 X 所在父模块，确定 X 可能的安装目录，依次往上级目录查找，把 X 当成文件名或目录名加载</li>
<li>找不到抛错’not found’</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>单页面应用前端路由原理</title>
    <url>/2022/03/14/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="什么是单页面应用？"><a href="#什么是单页面应用？" class="headerlink" title="什么是单页面应用？"></a>什么是单页面应用？</h2><span id="more"></span>

<p>单页面应用是指第一次进入页面的时候会请求一个 html 文件，切换到其他组件的时候，虽然路径会发生相应的变化，但是没有新的 html 文件请求，原理是 js 会感知到 url 的变化，js 会动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这时候的路由不是后端做的而是由前端来做，来判断页面到底显示哪个组件，这个过程就是单页面的应用。</p>
<h2 id="单页面应用的优缺点"><a href="#单页面应用的优缺点" class="headerlink" title="单页面应用的优缺点"></a>单页面应用的优缺点</h2><p>优点：页面切换快，因为页面每次切换的时候，并不需要做 html 文件的请求，这样就减少的很多 http 发送的时延。</p>
<p>缺点：单页面应用的首屏加载时间比较慢，首屏加载需要一次 html 请求和一次 js 请求，时间相对较慢，而且 SEO 效果差，因为搜索引擎只认识 html 中的内容，但是单页面应用中内容很多需要靠 js 渲染出来，搜索引擎不识别这部分内容，就会导致 SEO 效果不好。</p>
<h2 id="什么是多页面应用？"><a href="#什么是多页面应用？" class="headerlink" title="什么是多页面应用？"></a>什么是多页面应用？</h2><p>多页面应用是指每一次页面跳转的时候，服务器都会返回一个新的 html 文档，这种类型的应用叫做多页应用。</p>
<h2 id="多页面应用的优缺点"><a href="#多页面应用的优缺点" class="headerlink" title="多页面应用的优缺点"></a>多页面应用的优缺点</h2><p>优点：首屏加载快，SEO 效果好，因为客户端向服务端发起请求的时候，服务器之返回了一个 html 页面，所以加载比较快。</p>
<p>缺钱：页面切换比较慢</p>
<h2 id="单页面应用和多页面应用的区别"><a href="#单页面应用和多页面应用的区别" class="headerlink" title="单页面应用和多页面应用的区别"></a>单页面应用和多页面应用的区别</h2><p>1.应用构成不同<br>多页面应用是由多个不同的页面构成，单页面应用是一个外壳页面和多个页面片段构成。</p>
<p>2.页面跳转方式不同<br>多页面应用的页面跳转是从一个页面跳转到另一个页面，而单页面则是把一个页面判断删除或隐藏，加载另一个页面片段。</p>
<p>3.跳转后公共资源是否重新加载<br>跳转后多页面应用需要重新进行加载，但是单页面不需要重新加载</p>
<p>4.用户体验不同<br>多页面应用首屏加载快但是切换慢，单页面应用首屏加载慢但是切换快</p>
<p>5.页面传递数据方式不同<br>多页面应用依靠 url、cookie、localstorage 来传递数据，单页面应用则是靠组件进行通信，相对更加简单。</p>
<h2 id="前端路由的原理"><a href="#前端路由的原理" class="headerlink" title="前端路由的原理"></a>前端路由的原理</h2><p>前端路由的原理本质上就是通过不刷新浏览器的请求下修改 url、检测 url 的变化，截获 url 的地址，通过解析、匹配路由规则从而实现 UI 的更新，路由的实现通常有两种实现：hash 模式、history 模式</p>
<h3 id="hash-路由的原理"><a href="#hash-路由的原理" class="headerlink" title="hash 路由的原理"></a>hash 路由的原理</h3><p>在 hash 模式下，在 url 中#后面的部分表示的是一个客户端状态，当这部分发生变化的时候，浏览器本身就不会刷新，这样就满足了第一个条件，即在不刷新浏览器的情况下修改浏览器链接，同时通过监听 hashChange 事件来监听 url 中 hash 值的变化，触发相关函数，改变相关组件。</p>
<h3 id="history-路由的原理"><a href="#history-路由的原理" class="headerlink" title="history 路由的原理"></a>history 路由的原理</h3><p>history 模式利用 html5 中 history API，history.pushState 和 history.replaceState 这两个方法可以在不刷新页面的情况下，操作浏览器的历史记录，然后通过 popState 事件来监听 url 的变化，从而触发相关函数，改变相关组件。</p>
<p>history.back()、history.forward()、history.go()会触发 popstate 事件<br>history.pushState()、history.replaceState 不会出发 popstate 事件，需要对 replaceState 和 pushState 创建全局 Event 事件，然后 window.addEventListener 监听我们加的 event 事件<br>手动触发 popstate：<br>history.pushState({}, ‘’, ‘/new-path’);<br>window.dispatchEvent(new PopStateEvent(‘popstate’));</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾回收机制</title>
    <url>/2019/10/19/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="谈谈-JS-垃圾回收机制？"><a href="#谈谈-JS-垃圾回收机制？" class="headerlink" title="谈谈 JS 垃圾回收机制？"></a>谈谈 JS 垃圾回收机制？</h2> <span id="more"></span>

<h2 id="V8-垃圾回收机制"><a href="#V8-垃圾回收机制" class="headerlink" title="V8 垃圾回收机制"></a>V8 垃圾回收机制</h2><p>常见的内存泄漏原因：<br>全局变量过多引起内存泄漏<br>闭包<br>dom 事件未清除<br>循环引用<br>eval</p>
<p>垃圾收集器会定期（周期性）的找出那些不再继续使用的变量，释放其内存，因为开销比较大，所以会按照固定的时间间隔周期性的执行</p>
<p>最常用的两种方法：标记清除（常用）和引用计数</p>
<p>标记清除：变量进入作用域，进行标记，离开作用域进行清除回收</p>
<p>引用计数：就是跟踪记录每个值被引用的次数，引用一次加 1，删除减 1，引用计数为 0 时，进行回收，（循环引用可能会导致内存泄漏）</p>
<ul>
<li><p>V8 会把堆分为新生代和老生代</p>
</li>
<li><p>新生代（副垃圾回收器）</p>
<ul>
<li>存放生存时间短的对象</li>
<li>通常只支持 1 ～ 8M 的容量</li>
<li>分为对象区和空闲区<ul>
<li>对对象区域中的垃圾做标记，标记完成进入垃圾清理阶段，把存活的对象复制到空闲区域，把这些对象有序的排列起来</li>
<li>完成复制后，对象区和空闲区进行角色翻转</li>
</ul>
</li>
</ul>
</li>
<li><p>老生代（主垃圾回收器）</p>
<ul>
<li>对象存放生存时间久</li>
<li>对象占用空间大</li>
<li>采用：标记清除算法 和 标记压缩算法</li>
</ul>
</li>
<li><p>副垃圾回收器采用对象晋升策略：移动那些经过两次垃圾回收依然还存活的对象到老生代中</p>
</li>
</ul>
<p>V8 实现了精准式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。</p>
<p>新生代算法<br>新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。<br>在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。<br>在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。<br>新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动。<br>算法会检查 From 空间中存活的对象并复制到 To 空间中，如果失活的对象就会销毁。<br>当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</p>
<p>老生代算法<br>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是 标记清除算法 和 标记压缩算法。<br>在将算法前，先来说下什么情况下对象会出现在老生代空间中：<br>● 新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间。<br>● To 空间的对象占比大于 25%。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。</p>
<p>以下情况会启动 标记清除算法：<br>● 某一空间没有分块的时候<br>● 空间中对象超过一定限制<br>● 空间不能保证新生代中的对象移动时</p>
<p>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动 压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清除不需要的内存。</p>
<h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><pre><code>Javascript中的内存管理是自动执行的，而且是不可见的。在我们创建基本类型、对象、函数
时，这些都需要内存，当不需要某样东西时，JavaScript引擎会利用垃圾回收机制清除它。

在局部作用域中，当函数执行完毕，局部变量也就没必要存在了，因此垃圾收集器很容易
做出判断回收。但是全局变量什么时候需要自动释放内存空间很难判断，因此在开发中，
需要尽量避免使用全局变量。
</code></pre>
<h4 id="可达性"><a href="#可达性" class="headerlink" title="可达性"></a>可达性</h4><p>JavaScript 中内存管理的主要概念是可达性。</p>
<p>当一些值以某种方式可访问或可用，它们会被存储在内存中，叫做可达值。</p>
<ul>
<li>一些固有可达值，由于显而易见的原因无法删除。例如：<ul>
<li>本地函数的局部变量或参数</li>
<li>当前嵌套调用链上的其他函数的变量和参数</li>
<li>全局变量等</li>
</ul>
</li>
</ul>
<p>这些值 称为 根</p>
<ul>
<li>如果引用或引用链 可以从根访问任何其他值，则认为该值是可访问的。<ul>
<li>一个对象引用另一个对象的属性，则该对象是为可达性。</li>
</ul>
</li>
</ul>
<p>JavaScript 引擎中有一个后台进程称为垃圾回收器，它监视所有对象，并删除哪些不可访问的对象。</p>
<h4 id="内部算法"><a href="#内部算法" class="headerlink" title="内部算法"></a>内部算法</h4><p>v8 的垃圾回收策略基于分代式垃圾回收机制。将内存分为新生代和老生代，分别采用不同<br>的算法。</p>
<p>新生代采用 Scavenge 算法(赋值算法)</p>
<ul>
<li><p>Scavenge 为新生代采用的算法，是一种采用复制的方式实现的垃圾回收算法。它将内存分<br>为 from 和 to 两个空间。每次 gc,会将 from 空间的存活对象复制到 to 空间。然后两个空间角色<br>对换(又称反转)。</p>
</li>
<li><p>该算法是牺牲空间换时间，所以适合新生代，因为它的对象生存周期较短。</p>
</li>
</ul>
<p>老生代采用 Mark-Sweep(标记清除)和 Mark-Compact(标记整理)</p>
<ul>
<li>标记-清除算法，定期执行一下“垃圾回收”步骤：<ul>
<li>垃圾回收器获取根并“标记”它们</li>
<li>然后访问并标记所有来自它们的引用</li>
<li>然后访问标记的对象 并 标记它们的引用</li>
<li>以此类推，知道有为访问的引用为止</li>
<li>除了标记的对象外，所有对象都被删除。</li>
</ul>
</li>
</ul>
<p>Mark-Compact 算法(标记整理)</p>
<ul>
<li>标记清除存在一个问题，清除死亡对象后会造成内存空间不连续，这时候 v8 会使用<br>Mark-Compact 算法(标记整理)，它会在标记完成之后将活着的对象往一端移动，移动完成<br>后直接清理掉边界外的内存。</li>
</ul>
<p>Reference Counting(引用计数算法)</p>
<ul>
<li>引用计数，就是记录每个对象被引用的次数，每次新建对象、赋值引用和删除引用的同时<br>更新计数器，如果计数器值为 0 则直接回收内存。 很明显，引用计数最大的优势是暂停时间短</li>
</ul>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li><p>增量回收：如果有很多对象，并且我们试图一次遍历并标记整个对象集，那么可能会花费<br>一些时间，并在执行中会有一定的延迟。因此，引擎试图将垃圾回收分解为多个部分，然后<br>各个部分分别执行，这需要额外的标记来跟踪变化，这样有很多微小的延迟，而不是很大的延迟。</p>
</li>
<li><p>空闲时间收集：垃圾回收器只在 CPU 空闲时运行，以减少对执行的可能影响。</p>
</li>
</ul>
<h4 id="v8-的内存限制"><a href="#v8-的内存限制" class="headerlink" title="v8 的内存限制"></a>v8 的内存限制</h4><ul>
<li>64 位系统最大约为 1.4G</li>
<li>32 位系统最大约为 0.7G</li>
</ul>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优化网站以符合谷歌的Core Web Vitals标准</title>
    <url>/2023/06/25/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E4%BB%A5%E7%AC%A6%E5%90%88%E8%B0%B7%E6%AD%8C%E7%9A%84Core-Web-Vitals%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h2 id="为什么要做Core-Web-Vitals"><a href="#为什么要做Core-Web-Vitals" class="headerlink" title="为什么要做Core Web Vitals?"></a>为什么要做Core Web Vitals?</h2><p>网站响应速度越快，在谷歌中的排名越高的机会就越大</p>
<span id="more"></span>

<h2 id="谷歌排名的主要因素（优先级从高到低）"><a href="#谷歌排名的主要因素（优先级从高到低）" class="headerlink" title="谷歌排名的主要因素（优先级从高到低）"></a>谷歌排名的主要因素（优先级从高到低）</h2><ol>
<li><p>高质量的内容</p>
<p> 在Google排名因素里绝对以‘内容为王，外链为皇’，如果能创造对用户来说独特、新颖、且有帮助的内容，那么Google搜索引擎会将结果页面排到更高位置。</p>
<p> Google特别关注内容质量，无论如何优化网站，如果内容没有价值，就不要期望能获得更高的排名。</p>
<p> 那么，什么才算是高质量的内容呢？</p>
<p> <strong>原创、独特、有价值的内容</strong></p>
<p> 如果内容重复或者跟其他网站类似，那么就会对SEO产生负面影响，对于新网站来说Google可能就不会去索引你的页面，网站就不会获得排名。如果经常发布重复内容，Google会减少抓去你的网站内容的频率。</p>
<p> <strong>经常更新内容</strong></p>
<p> 通过定期更新网站，为其添加新东西，通过增加内容新鲜度给搜索引擎发出一个积极的信号。如果内容主题涉及到新闻或者某件事的发展趋势，可以通过Google Trends工具找到最新的信息来保持内容的新鲜度。</p>
<p> <strong>内容长度</strong></p>
<p> 平均长度1890个词的文章会排在第一页，但对字数的限制没有一个硬性规定。更好的解决办法是撰写具有深度的内容，能够完全回答用户的问题并提供详细的解决方案。</p>
<p> <strong>内容结构和组织方式</strong></p>
<p> 组织合理、结构清晰的网页，可以让访客更轻松的、更方便的阅读并找到问题的解决方案。<br> 优化文章的结构和组织可以使用多个标题和副标题（H2、H3、H4等），还可以使用列表的形式组织内容，好处就是Google会为不同的关键词筛选带列表形式的高质量内容，将其展示为答案盒子。<br> 通过整理内容的结构和组织方式，内容的可读性将大大提高，正反馈就是提高了用户体验，增加了<code>停留时间（Dwell Time）</code>间接的增加了提高排名的机会。</p>
</li>
<li><p>反向链接</p>
<p> Google排名算法中第二优先级排名因素就是反向链接。<br> 如果你的网站能从权重高的网站获得反向链接，通过这些链接相当于给Google传递了一个信号，即你的内容是值得信赖的，因为有这么多不同的网站都可以为你做担保。<br> 通过这些反向链接（入站链接）可以为你的网站带来更多流量，就有极大的可能获取更高的排名。</p>
</li>
<li><p>搜索意图</p>
<p> 你的网站内容是否匹配用户的搜索意图对Google排名的影响非常重要。<br> 这就意味着如果你想写关于某个主题的内容，一定要匹配搜索意图，如果想为某个搜索关键字排名，则应该制作视频或者信息图表等。<br> 通过匹配搜索意图，可以回答这些问题并创建人们正在寻找的内容。</p>
</li>
<li><p>网站加载速度</p>
<p> 提高网站加载速度不仅可以提高Google搜索引擎的排名，还可以降低网站的跳出率，提高其转换率，提供更高的用户体验。<br> 可以使用Google免费的工具<a href="https://pagespeed.web.dev/">PageSpeed Insights</a>来检查你的网站加载速度，PageSpeed Insights会生成网页的实际性能报告，并能提供如何改进响应网页的建议。<br> 如何提高网站的加载速度？</p>
</li>
<li><p>移动友好</p>
<p> 在GSMA智库近日发布了《2023年全球移动经济报告发展》报告，报告显示截至2022年底，全球独立移动用户数为54亿，其中移动互联网用户数为44亿，且自从Google在2019年提出移动优先的口号，所以网站自适应移动端就称为了关键。<br> 这就意味着Google会优先使用你的网站移动版去索引和排名，如果想快速提升你的网站排名，那么就需要让你的网站变成移动端友好型网站。</p>
</li>
<li><p>域名权威</p>
<p> “域名权威”是 SEO 相关的术语，指网站的域名在某领域相关内容具有权威性，一般域名建站时间越久、反链越多、流量越大、搜索引擎点击数越高、跳出率越低，域名就越权威。<br> 通过专注在自己的领域，创造出更优秀的内容，可以通过关键词分析工具，找到访客感兴趣的主题，围绕这些主题打造高质量内容增加话题的权威性。<br> 如此，Google变为逐渐把你的网站当作该主题领域的权威专家，提高你的网站的域名权威，从而提高网站在搜索引擎的排名</p>
</li>
<li><p>关键词优化</p>
<p> 关键词即用户搜索框输入的内容，它如实的反馈了用户的需求，所以找准关键词，也就意味着锁定了目标用户。<br> 所以你的网站中包含了你的受众群体正在搜索的关键词是非常关键的。</p>
<p> 如何做网站关键词优化？<br> ·标题：在SEO标题的开始就包含目标关键词<br> ·元描述：写吸引人的描述，然后添加关键词，告诉用户这个页面是做什么的，提高用户的自然搜索点击率<br> ·图片alt文字：可以将关键词添加到alt文本中告诉Google这是什么<br> ·锚文本：Google使用锚文本来查找页面内容，给关键词加上锚文本链接帮助Google识别页面内容<br> ·使用LSI关键词：用户会搜索除主要关键词之外的其他相关词条，这些词条被称LSI（潜在语义索引）关键词，通过在页面上包含这些内容，可以帮助Google找出有关内容。<br> ·避免关键词堆砌：不可不断重复主要关键词，这是一种不好的SEO做法。<br> ·在H2和H3中添加关键词：通过关键词变体来进一步优化内容组织结构<br> ·URL中添加关键词</p>
</li>
<li><p>网站结构</p>
<p> 站内结构决定了网站是否容易被收录，是否方便用户浏览，是否符合蜘蛛的爬取等等。<br> 网站结构是指网站中页面之间的层次关系。从用户角度来讲，能够使用户方便快捷的在网站中浏览内容，不至于迷失。对搜索引擎来说，优化网站结构，可以帮助蜘蛛快速抓取网站内容</p>
</li>
<li><p>网站安全</p>
<p> HTTPS会影响网站的排名，HTTPS保证了您的站点是否在用户的浏览器和Web服务器之间建立了安全连接，它可以加密网站和用户浏览器之间的数据</p>
</li>
<li><p>用户体验</p>
<p>网站的整体的用户体验也是影响Google排名的一个重要因素，但是Google是如何衡量的呢？<br>Google使用了一个名为RankBrain的人工智能程序，该程序结合了其他的排名要素，例如：<br>·自然搜索点击率（CTR）：通过提高网站链接的点击率，可以提高排名<br>·停留时间（Dwell Time）：从搜索结果到你的网站后的停留时间<br>·跳出率：进入网站到离开网站没有任何交互，Google会任务该页面不相关，不会对其进行排名</p>
</li>
</ol>
<p>总结：<br>    以上就是本文的所有内容，希望你能够习惯这篇关于影响Google排名10大因素的文章。</p>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/110720993">SEO站内优化：网站结构优化</a><br><a href="https://www.zhihu.com/question/351325115">怎么做网站关键词优化？</a><br><a href="https://developers.google.cn/speed/docs/insights/about?hl=zh-CN">PageSpeed Insights</a><br><a href="https://blog.csdn.net/coslay/article/details/43539913">优化网站加载速度的14个技巧</a><br><a href="https://www.wbolt.com/organic-ctr.html">什么是自然搜索点击率（Organic CTR）？</a><br><a href="https://www.wbolt.com/organic-ctr.html">什么是跳出率及如何保持网站较低跳出率</a></p>
<h2 id="谷歌如何评估网站性能？"><a href="#谷歌如何评估网站性能？" class="headerlink" title="谷歌如何评估网站性能？"></a>谷歌如何评估网站性能？</h2><p>性能度量应用程序（如浏览器开发工具）报告技术度量，例如</p>
<ul>
<li>阻塞时间：等待下载开始所花费的时间。</li>
<li>DNS解析：将主机名解析为IP地址以索引资产的时间。</li>
<li>连接时间：初始化TCP连接的时间。</li>
<li>首字节时间（TTFB）：请求和响应第一个字节之间的总时间。</li>
<li>接受时间：检索整个资产的时间</li>
<li>DOM加载时间：下载和呈现HTML文档对象模型的时间，分析和修改DOM的脚本可以可靠运行的第一个点。</li>
<li>页面加载时间：下载页面和所有资产（图像、样式表、脚本等）的时间</li>
<li>总页面重量：所有资产总大小，通常报告为压缩（下载）和未压缩大小</li>
<li>DOM元素数：页面上HTML元素的总数，元素越多，页面处理时间越长</li>
<li>首次内容绘制（FCP）：浏览器第一个元素像素之前所有的时间</li>
<li>首个有意义慧智（FMP）：主页内容对用户可见之间所花费的时间。</li>
<li>交互时间（TTI）：页面完全交互并能够可靠响应用户输入所花费的时间。</li>
<li>首次CPU空间（FCI）：CPU呈现页面并运行所有初始化脚本，等待进一步输入的时间</li>
<li>CPU使用率：呈现页面和响应用户输入时所需的处理活动</li>
<li>每秒布局数：浏览器必须重新计算样式和页面布局的速率</li>
</ul>
<p>以上这些可以用于确定特定的瓶颈，如服务器负载、CMS缓存、浏览器缓存、下载速度和javascript效率。但无法确定页面提供的用户体验是否良好。<br>如：应用程序可以快速下载并显示，但第一次交互后会变得无响应，因为它正在执行大量未优化javascript代码。</p>
<h2 id="什么是Core-Web-Vitals"><a href="#什么是Core-Web-Vitals" class="headerlink" title="什么是Core Web Vitals?"></a>什么是Core Web Vitals?</h2><ul>
<li>最大内容绘制（LCP）：加载性能</li>
<li>首次输入延迟（FID）：交互性能</li>
<li>累计布局偏移（CLS）：视觉稳定性</li>
</ul>
<h2 id="最大内容绘制-LCP"><a href="#最大内容绘制-LCP" class="headerlink" title="最大内容绘制 LCP"></a>最大内容绘制 LCP</h2><p>本质上代表的是可用内容在页面上呈现的速度有多快？</p>
<p>LCP分数低的常见原因：</p>
<ol>
<li>在客户端上生成的页面内容，而不是在服务器上生成的内容需要更长的时间，LCP客户端渲染（CSR） &gt; 服务端渲染（SSR），顺便提一下SSR更有利于首屏渲染，CSR更利于页面交互</li>
<li>服务端限制，服务端响应慢</li>
<li>HTML中国呢引用了阻塞CSS和javascript，导致延迟页面加载</li>
<li>大型图像或视频占用网络带宽，导致需要更长的渲染时间</li>
</ol>
<p>如何提高LCP分数：</p>
<ol>
<li>升级服务器和/或主机服务。确保下载速度即使在高使用率时也保持快速。</li>
<li>激活服务器压缩和HTTP/2+。没有理由不这样做！</li>
<li>减少服务器工作。删除未使用的代码和CMS插件，然后启用有效缓存。</li>
<li>确保浏览器可以有效缓存文件。在HTTP头中设置适当的Expires、Last Modified和/或ETag哈希，以便不再请求文件。</li>
<li>使用内容交付网络（CDN）在地理位置更靠近用户的服务器上拆分负载和托管资源。</li>
<li>优化你的图像。将它们减少到最小尺寸，并使用适当的格式来最小化文件大小。确保尽早请求最大内容块中的任何图像；预加载可能会有所帮助。</li>
<li>通过添加loading=”lazy”属性延迟加载图像。添加宽度和高度属性，以确保在图像完成加载之前在页面上保留适当的空间。</li>
<li>最小化第三方请求，并将移动资产考虑到主域以避免无关DNS查找。</li>
<li>最小化请求文件的数量和大小，尤其是在HTML的顶部。</li>
<li>确保仅加载所需的web字体。切换到web安全字体以获得最佳性能。</li>
<li>删除未使用的JavaScript和CSS文件。</li>
<li>连接并缩小JavaScript和CSS文件。</li>
<li>避免CSS@import语句-它们是串联的渲染块和加载样式。</li>
<li>避免Base64编码-它会增加文件大小并需要额外的处理。</li>
<li>考虑关键的联机CSS。在页面顶部的&lt;link&gt;块中嵌入基本的“折叠上方”CSS，然后异步加载更多样式表。</li>
<li>稍后使用异步、延迟或ES模块JavaScript运行脚本。在服务工作者中执行长时间运行的JavaScript进程。</li>
</ol>
<h2 id="首次输入延迟-FID"><a href="#首次输入延迟-FID" class="headerlink" title="首次输入延迟 FID"></a>首次输入延迟 FID</h2><p>本质上代表网页对用户的输入、点击和滚动等操作的响应速度有多快？</p>
<p>FID分数低的常见原因：</p>
<p>FID和TBT分数低通常是由占用处理器的客户端代码引起的，例如：</p>
<ol>
<li>大量的呈现阻塞CSS和JavaScript，这会在下载和解析代码时停止页面加载</li>
<li>加载页面时立即运行的大型流程密集型脚本</li>
<li>长时间运行或优化较差的JavaScript任务</li>
</ol>
<p>默认情况下，浏览器运行在单个线程上，一次只能处理一个任务。如果一个JavaScript函数需要一秒钟的时间来执行，那么所有其他渲染过程都会在这一秒钟内被阻塞。页面无法响应用户输入、更新DOM、显示动画等。甚至GIF动画也可以在旧浏览器中被阻塞。</p>
<p>如何提高FID分数：</p>
<ol>
<li>在服务器上生成并缓存尽可能多的静态HTML内容。尽量不要依赖客户端JavaScript框架为每个人呈现相同的HTML。</li>
<li>确保浏览器可以有效缓存文件。在HTTP头中设置适当的Expires、Last Modified和/或ETag哈希，以便不再请求文件。</li>
<li>采用渐进式增强技术，因此在JavaScript运行之前，该界面可以在HTML和CSS中使用。</li>
<li>删除未使用的JavaScript和CSS文件。</li>
<li>连接并缩小JavaScript和CSS文件。</li>
<li>避免过度使用昂贵的CSS属性，如框阴影和过滤器。</li>
<li>稍后使用异步、延迟或ES模块JavaScript运行脚本。</li>
<li>最小化对分析、社交媒体小部件、论坛等的第三方JavaScript请求。这些请求可以快速加载到数兆字节的JavaScript。</li>
<li>根据需要延迟加载JavaScript组件，例如聊天窗口小部件、视频播放器等。</li>
<li>延迟加载不太重要的脚本，如分析、广告和社交媒体工具。</li>
<li>将长时间运行的JavaScript任务分解为一系列较小的作业，这些作业在短时间的requestIdleCallback、setTimeout或requestAnimationFrame延迟后执行。</li>
<li>考虑在Web工作者中使用一个后台线程来执行长时间运行的JavaScript进程。</li>
</ol>
<h2 id="累计布局偏移-CLS"><a href="#累计布局偏移-CLS" class="headerlink" title="累计布局偏移 CLS"></a>累计布局偏移 CLS</h2><p>本质上代表页面内容是否会意外移动或者跳转尤其是在初始加载期间</p>
<p>通过以下指标相乘计算累计布局偏移CLS：</p>
<ul>
<li>影响分数：视口中国呢所有不稳定元素的总面积（%）</li>
<li>距离分数：不稳定元素移动的最大距离（px），移动像素/视口大小</li>
</ul>
<p>手动测测CLS：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cls = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onLayoutShiftEntry</span>(<span class="params">entry: any</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry.<span class="property">hadRecentInput</span>) &#123;</span><br><span class="line">    cls += entry.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entries.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="title function_">onLayoutShiftEntry</span>(entry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">observe</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;layout-shift&quot;</span>, <span class="attr">buffered</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主动触发</span></span><br><span class="line">observer.<span class="title function_">takeRecords</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> <span class="title function_">onLayoutShiftEntry</span>(entry));</span><br></pre></td></tr></table></figure>

<p>累积布局偏移分数低的常见原因：</p>
<p>CLS分数低通常是由于加载页面资产和动态或未调整大小的DOM元素速度慢造成的：</p>
<ol>
<li>页面上的空间不用于图像、iFrame、广告等。</li>
<li>内容被动态地注入DOM，通常是在网络请求广告、社交媒体小部件等之后。</li>
<li>Web字体加载会导致不可见文本（FOIT）或未设置样式文本（FOUT）的明显闪烁。</li>
</ol>
<p>如何提高累积布局偏移分数：<br>客户端审计可以发现问题，但通常是确保在内容下载之前为内容预留空间。为最大内容绘制建议的服务器优化提示将有一些好处，但可能会有进一步的改进：</p>
<ol>
<li>在HTML的&lt;img&gt;和&lt;iframe&gt;标记中添加宽度和高度属性，或者使用新的CSS纵横比属性确保在下载资产之前在页面上保留适当的空间。</li>
<li>为封装第三方内容（如广告和小部件）的容器元素设置适当的尺寸。</li>
<li>确保尽早请求显示在页面顶部的图像和其他资产-预加载可能会有所帮助。</li>
<li>尽量减少Web字体的使用，并考虑在可能的时候使用常用的OS字体。</li>
<li>加载web字体并将CSS字体显示设置为可选或交换。确保使用大小相似的回退字体，以最小化布局偏移。</li>
<li>避免向页面顶部插入元素，除非页面响应用户操作（如单击）。</li>
<li>确保在输入触发器的500毫秒内完成用户交互。</li>
<li>使用CSS变换和不透明度可以获得更高效的动画，而不会导致重新布局。</li>
<li>考虑关键的联机CSS。在页面顶部的&lt;link&gt;块中嵌入基本的“折叠上方”CSS，然后异步加载其他样式表。</li>
<li>必要时，考虑包容，一种新的CSS特性，允许您识别页面的孤立子树。浏览器可以通过渲染或不渲染特定的DOM内容块来优化处理。</li>
</ol>
]]></content>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>如何管理前端团队</title>
    <url>/2023/11/09/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F/</url>
    <content><![CDATA[<h2 id="个人角度"><a href="#个人角度" class="headerlink" title="个人角度"></a>个人角度</h2><p>开发人员：业务需求 -&gt; 自己动手 -&gt; 解决问题</p>
<p>管理者：业务需求 -&gt; 分析需求、分解需求 -&gt; 分配任务 -&gt; 跟踪进度 -&gt; 解决问题</p>
<p><strong>如何胜任技术管理者需要提高自己各个方面的能力，主要有以下方面：</strong></p>
<ol>
<li><p>技术能力：这是技术管理者的立身之本，肯定需要不断学习、不断精进，如果技不如人肯定无法服众。</p>
</li>
<li><p>业务能力：需要对业务有正确的理解，能理解业务的本质需求，才能让技术实现业务价值。</p>
</li>
<li><p>规划能力： 技术管理者需要明确团队目标、并以结果为导向，做出合理的规划：</p>
</li>
<li><p>1 技术体系规划：项目技术选型（可控性、稳定性、适用性、易用性）、技术文档沉淀等</p>
</li>
<li><p>2 任务规划：根据任务难易程度分配不同开发人员、任务时间安排等</p>
</li>
<li><p>3 人员安排规划：根据组员的实际情况和特点，安排合适的事情给合适的人，使团队利益最大化</p>
</li>
<li><p>沟通协作能力：技术管理者不仅在项目团队内，可能需要跨组或者跨部门进行沟通协作，需要向上级转达战略、任务，和团队内成员沟通清楚需要做什么，为什么这么做</p>
</li>
<li><p>判断能力： 需要全局把控项目，有底气在项目中对事项进行判断和决策：</p>
</li>
<li><p>1 风险判断：业务实现方向有没有问题、任务排期超时等</p>
</li>
<li><p>2 决策判断：某个时间段，应该做哪些内容，哪些做不了</p>
</li>
<li><p>3 诗句判断：针对业务评审的具体实现成本、实现方向等</p>
</li>
<li><p>领导力：技术管理者需要有责任，有担当，团队有问题必然反映到团队负责人身上有问题</p>
</li>
<li><p>架构能力：治理好系统复杂度才是最务实的</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>实现一个多人协作在线文档有哪些技术难点？</title>
    <url>/2023/06/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%9A%BE%E7%82%B9%EF%BC%9F/</url>
    <content><![CDATA[<p>多人协作提供了稳定、高效、安全的协作环境，这种类似的产品需要克服的技术难点还是很多的，如：</p>
<span id="more"></span>

<ol>
<li><p>实时同步</p>
<p> 实现实时同步的难点在于如何快速传输用户的操作。<br> 常见的做法是websocket等技术，建立持久化连接，实时推送数据。<br> 同时为了减少网络传输量，可以采用差量同步的方式，只传输变化的部分数据。</p>
</li>
<li><p>冲突解决</p>
<p> 多个用户同时编辑同一个文档时，可能会冲突。<br> 常见解决方案是采用OT（Operational Transformation）技术，将用户的操作换成操作序列，并在服务器上合并，最后同步给用户，还需要采用<strong>锁机制</strong>，保证同一时间只有一个用户能够编辑文档。</p>
</li>
<li><p>高并发</p>
<p> 在线文档需要支持多人同时访问和编辑，就需要处理高并发的情况。<br> 提高并发性能，可以采用分布式架构、负载均衡等技术</p>
</li>
<li><p>安全性</p>
<p> 在线文档需要保证用户数据安全，包括用户身份验证、数据传输加密等。<br> 解决：采用HTTPS协议、SSL证书等技术实现数据传输加密，密码、验证码进行用户身份验证等</p>
</li>
<li><p>数据存储</p>
<p> 可以采用分布式数据库、缓存等技术提高数据存储和管理的效率和性能</p>
</li>
<li><p>实时性能</p>
<p> 在线文档需要保证实时性能，即用户的操作能够实时生效，不能出现延迟等问题。<br> 解决：采用异步IO、事件驱动等技术，同时对系统进行优化和调整，提高系统性能和响应速度。</p>
</li>
</ol>
<p>两个主要的技术难点就是：实时通信、编辑冲突</p>
<ul>
<li>实时通信：long pull 或者 websocket</li>
<li>编辑冲突：编辑锁、GUN diff-patch（类似git版本控制diff）、OT（Operational Transformation）、Myer’s diff-patch</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>实现精简版useSize</title>
    <url>/2022/08/04/%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%AE%80%E7%89%88useSize/</url>
    <content><![CDATA[<p><a href="https://ahooks.gitee.io/">ahooks</a>是阿里开源的一套 React Hooks 库，里面封装了大量好用的 Hooks，最近也在项目中频繁使用到了库中<a href="https://ahooks.gitee.io/hooks/use-size">useSize</a>这个钩子函数，于是就学习了一下它的源码实现，并且实现了一个精简版<strong>useSize</strong>。</p>
<span id="more"></span>

<p>要点一：<strong>ResizeObserver</strong>监听 Element 内容区域的边界框改变</p>
<p>要点二：<strong>requestAnimationFrame</strong>优化高频刷新情况下的数据更新</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">MutableRefObject</span>,</span><br><span class="line">  useCallback,</span><br><span class="line">  useEffect,</span><br><span class="line">  useLayoutEffect,</span><br><span class="line">  useRef,</span><br><span class="line">  useState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TargetValue</span>&lt;T&gt; = T | <span class="literal">undefined</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TargetType</span> = <span class="title class_">HTMLElement</span> | <span class="title class_">Element</span> | <span class="title class_">Window</span> | <span class="title class_">Document</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">BasicTarget</span>&lt;T <span class="keyword">extends</span> <span class="title class_">TargetType</span> = <span class="title class_">Element</span>&gt; =</span><br><span class="line">  | (<span class="function">() =&gt;</span> <span class="title class_">TargetValue</span>&lt;T&gt;)</span><br><span class="line">  | <span class="title class_">TargetValue</span>&lt;T&gt;</span><br><span class="line">  | <span class="title class_">MutableRefObject</span>&lt;<span class="title class_">TargetValue</span>&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Size</span> = &#123; <span class="attr">width</span>: <span class="built_in">number</span>; <span class="attr">height</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useSize</span>(<span class="params">target: BasicTarget</span>): <span class="title class_">Size</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState&lt;<span class="title class_">Size</span> | <span class="literal">undefined</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [resizeObserver, setResizeObserver] = useState&lt;<span class="title class_">ResizeObserver</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> setRafState = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">value: Size | ((prevState?: Size) =&gt; Size)</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(ref.<span class="property">current</span>);</span><br><span class="line"></span><br><span class="line">      ref.<span class="property">current</span> = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setState</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resizeObserver?.<span class="title function_">disconnect</span>();</span><br><span class="line">      <span class="title function_">cancelAnimationFrame</span>(ref.<span class="property">current</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">targetEl</span>: <span class="title class_">TargetValue</span>&lt;<span class="title class_">TargetType</span>&gt;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;current&quot;</span> <span class="keyword">in</span> target) &#123;</span><br><span class="line">      targetEl = target.<span class="property">current</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      targetEl = <span class="title function_">target</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      targetEl = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!targetEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resizeObserver = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; clientWidth, clientHeight &#125; = entry.<span class="property">target</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">setRafState</span>(&#123;</span><br><span class="line">          <span class="attr">width</span>: clientWidth,</span><br><span class="line">          <span class="attr">height</span>: clientHeight,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setResizeObserver</span>(resizeObserver);</span><br><span class="line"></span><br><span class="line">    resizeObserver?.<span class="title function_">observe</span>(targetEl);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> size = <span class="title function_">useSize</span>(ref);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">red</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to resize the preview window <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        width: &#123;size?.width&#125;px, height: &#123;size?.height&#125;px</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仅作为自己的学习积累，有什么需要改进的地方请大家多多批评指点 😅！</p>
]]></content>
      <tags>
        <tag>react-hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>常见设计模式</title>
    <url>/2019/09/27/%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="SOLID-五大设计原则"><a href="#SOLID-五大设计原则" class="headerlink" title="SOLID 五大设计原则"></a>SOLID 五大设计原则</h2><span id="more"></span>

<ul>
<li><p>S 单一职责原则</p>
<p>一个程序只做好一件事，如果功能过于复杂就拆分开，每个部分保持独立</p>
</li>
<li><p>O 开放封闭原则</p>
<p>对修改封闭，对扩展开放</p>
</li>
<li><p>L 李氏置换原则</p>
<p>子类能覆盖父类</p>
</li>
<li><p>I 接口独立原则</p>
<p>保持接口的单一独立，避免出现胖接口</p>
</li>
<li><p>D 依赖倒置原则</p>
<p>面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>
</li>
</ul>
<h2 id="常见的设计模式"><a href="#常见的设计模式" class="headerlink" title="常见的设计模式"></a>常见的设计模式</h2><blockquote>
<p>工厂模式、单例模式、构造函数模式、建造者模式、代理模式、命令模式、观察者模式、适配器模式、职责链模式、装饰器模式、策略模式等</p>
</blockquote>
<ul>
<li><p>工厂模式</p>
<p>jquery、react createElement</p>
</li>
<li><p>单例模式</p>
<ul>
<li>自定义事件 EventBus 全局唯一</li>
<li>Vuex Redux 的 store 全局唯一</li>
</ul>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleTon</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">SingleTon</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(): <span class="title class_">SingleTon</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">SingleTon</span>.<span class="property">instance</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title class_">SingleTon</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">SingleTon</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">SingleTon</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SingleTon</span>.<span class="title function_">getInstance</span>(); <span class="comment">// 正确</span></span><br><span class="line"><span class="title class_">SingleTon</span>.<span class="property">instance</span>; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SingleTon</span>(); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>策略模式</p>
<ul>
<li>定义一系列算法，将它们封装起来，目的就是将算法的使用和算法的实现分离开来</li>
<li>策略类的实现由两部分组成<ul>
<li>策略类：封装具体算法实现</li>
<li>环境类：接收请求，并把请求委托给一个策略类</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">A</span>: <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">B</span>: <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">C</span>: <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> calculateBouns = <span class="keyword">function</span> (<span class="params">level, salary</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculateBouns</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">10000</span>)); <span class="comment">// 40000</span></span><br></pre></td></tr></table></figure></li>
<li><p>代理模式</p>
<ul>
<li><p>常用的场景 - 缓存代理 - 虚拟代理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缓存代理</span></span><br><span class="line"><span class="keyword">var</span> proxyMult = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (cache[args] = mult.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">proxyMult</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 输出:24</span></span><br><span class="line"><span class="title function_">proxyMult</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 输出:24</span></span><br><span class="line"><span class="comment">// 当第二次调用 proxyMult(1, 2, 3, 4) 时，本体 mult 函数并没有被计算，proxyMult 直接返回了之前缓存好的计算结果</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2019/10/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><span id="more"></span>

<h4 id="文件主要目录及文件作用"><a href="#文件主要目录及文件作用" class="headerlink" title="文件主要目录及文件作用"></a>文件主要目录及文件作用</h4> <!--more-->

<ul>
<li>component 组件文件夹<ul>
<li>navBar 底部组件<ul>
<li>navBar.js 底部组件的 js 代码</li>
<li>navBar.json 底部组件的配置文件</li>
<li>navBar.wxml 底部组件的 html 代码</li>
<li>navBar.wxss 底部组件的 css 代码</li>
</ul>
</li>
</ul>
</li>
<li>pages 页面文件夹<ul>
<li>index 首页<ul>
<li>index.js 首页的 js 代码</li>
<li>index.json 首页的配置文件</li>
<li>index.wxml 首页的 html 代码</li>
<li>index.wxss 首页的 css 代码</li>
</ul>
</li>
</ul>
</li>
<li>public 图片文件夹</li>
<li>utils 工具文件夹<ul>
<li>api.js 控制 api 的文件</li>
<li>md5.js 工具：MD5 加密文件</li>
<li>timestamp.js 工具：事件戳文件</li>
</ul>
</li>
<li>app.json 设置全局的基础数据等</li>
<li>app.wxss 公共样式，可通过 import 导入更多</li>
<li>project.config.json 项目配置文件</li>
</ul>
<h4 id="微信小程序生命周期"><a href="#微信小程序生命周期" class="headerlink" title="微信小程序生命周期"></a>微信小程序生命周期</h4><ul>
<li>onLoad(): 页面加载时触发，一个页面只会调用一次，可以在 onLoad 中获取打开当前页面<br>所调用的 query 参数。</li>
<li>onShow(): 页面显示/切入前台时触发，每次打开页面都会调用一次。</li>
<li>onReady(): 页面初次渲染完成时触发，一个页面只会调用一次。</li>
<li>onHide(): 页面隐藏/切入后台时触发，当 navigateTo 或底部 tab 切换时调用。</li>
<li>onUnload(): 页面卸载时触发。</li>
</ul>
<h4 id="app-json-是对当前小程序的全局配置，讲述三个配置各个项的含义"><a href="#app-json-是对当前小程序的全局配置，讲述三个配置各个项的含义" class="headerlink" title="app.json 是对当前小程序的全局配置，讲述三个配置各个项的含义?"></a>app.json 是对当前小程序的全局配置，讲述三个配置各个项的含义?</h4><ul>
<li>pages 字段：用于描述当前小程序所有页面路径，为了让微信客户端知道当前小程序页面<br>定义在那个目录。</li>
<li>window 字段：小程序所有页面的顶部背景颜色，文字颜色定义等。</li>
<li>tab 字段：小程序全局顶部 tab 或底部 tab。</li>
</ul>
<h4 id="小程序的-wxss-和-css-有哪些不一样的地方？"><a href="#小程序的-wxss-和-css-有哪些不一样的地方？" class="headerlink" title="小程序的 wxss 和 css 有哪些不一样的地方？"></a>小程序的 wxss 和 css 有哪些不一样的地方？</h4><ul>
<li>新像素单位 rpx</li>
<li>样式可直接使用 import 导入</li>
</ul>
<h4 id="小程序-wxml-和标准的-html-的异同？"><a href="#小程序-wxml-和标准的-html-的异同？" class="headerlink" title="小程序 wxml 和标准的 html 的异同？"></a>小程序 wxml 和标准的 html 的异同？</h4><p>都是用来描述页面的结构，都是由标签、属性等构成。</p>
<ul>
<li>标签名字不一样，且小程序标签更少，单一标签更多。</li>
<li>多了一些 wx:if 这样的属性和双大括号这样的表达式。</li>
<li>wxml 只能在微信小程序开发者工具中预览，html 可以在浏览器内预览。</li>
<li>组件封装不同，wxml 对组件进行了重新封装。</li>
<li>小程序运行在 JS Core 内，没有 DOM 树和 window 对象，小程序无法使用 window 对象和 document<br>对象。</li>
</ul>
<h4 id="小程序-wxss-和-css-的异同？"><a href="#小程序-wxss-和-css-的异同？" class="headerlink" title="小程序 wxss 和 css 的异同？"></a>小程序 wxss 和 css 的异同？</h4><p>都是用来描述页面的样子</p>
<ul>
<li>wxss 具有 css 大部分的特性，也做了一些扩充和修改。</li>
<li>wxss 新增了尺寸单位，wxss 在底层支持新的尺寸单位 rpx。</li>
<li>wxss 仅支持部分 css 选择器。</li>
<li>wxss 提供全局样式和局部样式。</li>
</ul>
<h4 id="小程序页面间有哪些传递数据的方法？"><a href="#小程序页面间有哪些传递数据的方法？" class="headerlink" title="小程序页面间有哪些传递数据的方法？"></a>小程序页面间有哪些传递数据的方法？</h4><ul>
<li>使用全局变量实现数据传递</li>
<li>页面跳转或重定向时，使用 url 带参数传递数据</li>
<li>使用组件模板 template 传递参数</li>
<li>使用数据库传递数据</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端源码剖析</title>
    <url>/2023/03/22/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h2 id="为什么需要微前端？"><a href="#为什么需要微前端？" class="headerlink" title="为什么需要微前端？"></a>为什么需要微前端？</h2><span id="more"></span>

<ul>
<li><p>将不同的功能按照不同维度拆分成多个子应用（将子应用打包成一个个 lib），当路径切换时通过主应用来加载这些子应用当路径切换时通过主应用来加载这些子应用当路径切换时通过主应用来加载这些子应用</p>
</li>
<li><p>核心：先拆-&gt;后合</p>
</li>
</ul>
<h2 id="微前端解决的问题？"><a href="#微前端解决的问题？" class="headerlink" title="微前端解决的问题？"></a>微前端解决的问题？</h2><ul>
<li>不同团队（技术栈不同），开发同一个应用</li>
<li>每个团队开发的模块独立开发，独立部署</li>
<li>增量迁移</li>
</ul>
<h2 id="实现微前端技术方案？"><a href="#实现微前端技术方案？" class="headerlink" title="实现微前端技术方案？"></a>实现微前端技术方案？</h2><ul>
<li><p>实现微前端考虑要点</p>
<ul>
<li>如何进行应用拆分</li>
<li>如何进行应用通信</li>
<li>如何进行应用隔离</li>
</ul>
</li>
<li><p>技术方案</p>
<ul>
<li><p>iframe</p>
<ul>
<li>通过 postMessage 通信</li>
<li>自带的沙箱机制可以进行应用隔离</li>
<li>缺点：用户体验差，弹框只能在 iframe 中、内部刷新切换状态丢失等</li>
</ul>
</li>
<li><p>Web Components</p>
<ul>
<li>将前端应用程序分解为自定义 html 元素</li>
<li>通过 CustomEvent 通信</li>
<li>Shadow DOM 天生的作用域隔离</li>
<li>缺点：兼容问题、学习成本、调试困难</li>
</ul>
</li>
<li><p>single-spa</p>
<ul>
<li>通过路由劫持，采用 SystemJS，子应用暴露固定钩子 bootstrap、mount、unmount 接入协议</li>
<li>基于 props 进行通信</li>
<li>无沙箱机制，需要自己实现 JS 沙箱和 CSS 沙箱</li>
<li>缺点：学习成本、无沙箱机制、应用改造、资源重复加载问题</li>
</ul>
</li>
<li><p>Module federation</p>
<ul>
<li>通过模块联邦将组件打包导出</li>
<li>共享模块通信</li>
<li>无 CSS 沙箱和 JS 沙箱</li>
<li>缺点：需要 webpack5</li>
<li>百度 EMP</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="微前端框架"><a href="#微前端框架" class="headerlink" title="微前端框架"></a>微前端框架</h2><ul>
<li><p>qiankun(基于 single-spa)</p>
<ul>
<li>沙箱（sandbox、快照、window.proxy）</li>
<li>样式隔离（shadowDom、scopedCss）</li>
</ul>
</li>
<li><p>micro-app（基于 webComponent）</p>
<ul>
<li>webComponent<ul>
<li>允许用户自定义一个元素，名字随便起</li>
<li>shadowDom 样式隔离是 webComponent 的一部分</li>
<li>支持组件的模版、插槽、生命周期、属性等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简易版-single-spa-源码实现"><a href="#简易版-single-spa-源码实现" class="headerlink" title="简易版 single-spa 源码实现"></a>简易版 single-spa 源码实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;go(&#x27;#/a&#x27;)&quot;</span>&gt;</span>a应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">&quot;go(&#x27;#/b&#x27;)&quot;</span>&gt;</span>b应用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- navigation-event.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对用户的路径切换 进行劫持，劫持后，重新调用reroute方法，进行计算应用的加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">urlRoute</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>(<span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, urlRoute);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, urlRoute); <span class="comment">// 浏览器历史切换的时候会执行此方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 但是当路由切换的时候 我们触发single-spa的addEventLister, 应用中可能也包含addEventLister</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 需要劫持原生的路由系统，保证当我们加载完后再切换路由</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> capturedEventListeners = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hashchange</span>: [],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">popstate</span>: [],</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> listentingTo = [<span class="string">&#x27;hashchange&#x27;</span>, <span class="string">&#x27;popstate&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> originalAddEventListener = <span class="variable language_">window</span>.<span class="property">addEventListener</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> originalRemoveEventListener = <span class="variable language_">window</span>.<span class="property">removeEventListener</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">addEventListener</span> = <span class="keyword">function</span> (<span class="params">eventName, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 有要监听的事件， 函数不能重复</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">          listentingTo.<span class="title function_">includes</span>(eventName) &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">          !capturedEventListeners[eventName].<span class="title function_">some</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">(<span class="params">listener</span>) =&gt;</span> listener === callback</span></span><br><span class="line"><span class="language-javascript">          )</span></span><br><span class="line"><span class="language-javascript">        ) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> capturedEventListeners[eventName].<span class="title function_">push</span>(callback);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> originalAddEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">removeEventListener</span> = <span class="keyword">function</span> (<span class="params">eventName, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 有要监听的事件， 函数不能重复</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (listentingTo.<span class="title function_">includes</span>(eventName)) &#123;</span></span><br><span class="line"><span class="language-javascript">          capturedEventListeners[eventName] = capturedEventListeners[</span></span><br><span class="line"><span class="language-javascript">            eventName</span></span><br><span class="line"><span class="language-javascript">          ].<span class="title function_">filter</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn !== callback);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> originalRemoveEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">callCaptureEventListeners</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> eventType = e[<span class="number">0</span>].<span class="property">type</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (listentingTo.<span class="title function_">includes</span>(eventType)) &#123;</span></span><br><span class="line"><span class="language-javascript">            capturedEventListeners[eventType].<span class="title function_">forEach</span>(<span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              listener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, e);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">patchFn</span>(<span class="params">updateState, methodName</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> urlBefore = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> r = updateState.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 调用此方法 确实发生了路径的变化</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> urlAfter = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (urlBefore !== urlAfter) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 手动派发popstate事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">PopStateEvent</span>(<span class="string">&#x27;popstate&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> r;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span> = <span class="title function_">patchFn</span>(<span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span>, <span class="string">&#x27;pushState&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span> = <span class="title function_">patchFn</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;replaceState&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- app.helpers.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// app status</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_LOADED</span> = <span class="string">&#x27;NOT_LOADED&#x27;</span>; <span class="comment">// 没有被加载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">LOADING_SOURCE_CODE</span> = <span class="string">&#x27;LOADING_SOURCE_CODE&#x27;</span>; <span class="comment">// 路径匹配了 要去加载这个资源</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">LOAD_ERROR</span> = <span class="string">&#x27;LOAD_ERROR&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 启动的过程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_BOOTSTRAPED</span> = <span class="string">&#x27;NOT_BOOTSTRAPED&#x27;</span>; <span class="comment">// 资源加载完毕了 需要启动，此时还没有启动</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">BOOTSTRAPING</span> = <span class="string">&#x27;BOOTSTRAPING&#x27;</span>; <span class="comment">// 启动中</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">NOT_MOUNTED</span> = <span class="string">&#x27;NOT_MOUNTED&#x27;</span>; <span class="comment">// 没有被挂载</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 挂载流程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">MOUNTING</span> = <span class="string">&#x27;MOUNTING&#x27;</span>; <span class="comment">// 正在挂载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">MOUNTED</span> = <span class="string">&#x27;MOUNTED&#x27;</span>; <span class="comment">// 挂载完成</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载流程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">UNMOUNTING</span> = <span class="string">&#x27;UNMOUNTING&#x27;</span>; <span class="comment">// 卸载中</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 加载正在下载应用 LOADING_SOURCE_CODE，激活已经运行了</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 看一下这个应用是否正在被激活</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">isActive</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> app.<span class="property">status</span> === <span class="variable constant_">MOUNTED</span>; <span class="comment">// 此应用正在被激活</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 看一下此应用是否被激活</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">shouldBeActive</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> app.<span class="title function_">activeWhen</span>(<span class="variable language_">window</span>.<span class="property">location</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">getAppChanges</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToLoad = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToMount = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appsToUnmount = [];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        apps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> appShouldBeActive = <span class="title function_">shouldBeActive</span>(app);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">switch</span> (app.<span class="property">status</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_LOADED</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">LOADING_SOURCE_CODE</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 1） 标记当前路径下 哪些应用要被加载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToLoad.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_BOOTSTRAPED</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">BOOTSTRAPING</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">NOT_MOUNTED</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 2) 当前路径下 哪些应用要被挂在</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToMount.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">case</span> <span class="attr">MOUNTED</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 3） 当前路径下 哪些应用要被卸载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (!appShouldBeActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                appsToUnmount.<span class="title function_">push</span>(app);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123; appsToLoad, appsToMount, appsToUnmount &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lifecycles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// load</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">flattenArrayToPromise</span>(<span class="params">fns</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        fns = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(fns) ? fns : [fns];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// redux</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> fns.<span class="title function_">reduce</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">(<span class="params">rPromise, fn</span>) =&gt;</span> rPromise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">fn</span>(props)),</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toLoadPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_LOADED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此应用加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">LOADING_SOURCE_CODE</span>; <span class="comment">// 正在加载应用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// loadApp 对于之前的内容 System.import()</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">loadApp</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> &#123; bootstrap, mount, unmount &#125; = v;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_BOOTSTRAPED</span>;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">bootstrap</span> = <span class="title function_">flattenArrayToPromise</span>(bootstrap);</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">mount</span> = <span class="title function_">flattenArrayToPromise</span>(mount);</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">unmount</span> = <span class="title function_">flattenArrayToPromise</span>(unmount);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// mount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toMountPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_MOUNTED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">mount</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// unmount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toUnmountPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">MOUNTED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">UNMOUNTING</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// app.unmount 方法用户可能写的是一个数组。。。。。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">unmount</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// bootstrap</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">toBootstrapPromise</span>(<span class="params">app</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (app.<span class="property">status</span> !== <span class="variable constant_">NOT_BOOTSTRAPED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此应用加载完毕了</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">status</span> = <span class="variable constant_">BOOTSTRAPING</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> app.<span class="title function_">bootstrap</span>(app.<span class="property">customProps</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            app.<span class="property">status</span> = <span class="variable constant_">NOT_MOUNTED</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> app;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- reroute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 后续路径变化 也需要走这里， 重新计算哪些应用被加载或者写在</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> appChangeUnderWay = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> peopleWaitingOnAppChange = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">reroute</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果多次触发reroute 方法我们可以创造一个队列来屏蔽这个问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (appChangeUnderWay) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            peopleWaitingOnAppChange.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              resolve,</span></span><br><span class="line"><span class="language-javascript">              reject,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取app对应的状态 进行分类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; appsToLoad, appsToMount, appsToUnmount &#125; = <span class="title function_">getAppChanges</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 加载完毕后 需要去挂载的应用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (started) &#123;</span></span><br><span class="line"><span class="language-javascript">          appChangeUnderWay = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 用户调用了start方法 我们需要处理当前应用要挂载或者卸载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title function_">performAppChange</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 先拿到应用去加载  -》</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">loadApps</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">loadApps</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 应用的加载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(appsToLoad.<span class="title function_">map</span>(toLoadPromise)).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            callEventListener</span></span><br><span class="line"><span class="language-javascript">          ); <span class="comment">// 目前我们没有调用start</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">performAppChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 将不需要的应用卸载掉, 返回一个卸载的promise</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1) 稍后测试销毁逻辑</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> unmountAllPromises = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToUnmount.<span class="title function_">map</span>(toUnmountPromise)</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 流程加载需要的应用  -》 启动对应的应用 -》 卸载之前的 -》 挂载对应的应用</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 2) 加载需要的应用（可能这个应用在注册的时候已经被加载了）</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 默认情况注册的时候 路径是 /a , 但是当我们start的时候应用是/b</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> loadMountPromises = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToLoad.<span class="title function_">map</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">toLoadPromise</span>(app).<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当应用加载完毕后 需要启动和挂载，但是要保证挂载前 先卸载掉来的应用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">tryBootstrapAndMount</span>(app, unmountAllPromises);</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果应用 没有加载   加载 -》启动挂载   如果应用已经加载过了  挂载</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> <span class="title class_">MountPromises</span> = <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span></span><br><span class="line"><span class="language-javascript">            appsToMount.<span class="title function_">map</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">tryBootstrapAndMount</span>(app, unmountAllPromises)</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">function</span> <span class="title function_">tryBootstrapAndMount</span>(<span class="params">app, unmountAllPromises</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title function_">shouldBeActive</span>(app)) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 保证卸载完毕在挂载</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="title function_">toBootstrapPromise</span>(app).<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span></span></span><br><span class="line"><span class="language-javascript">                unmountAllPromises.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">toMountPromise</span>(app))</span></span><br><span class="line"><span class="language-javascript">              );</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([loadMountPromises, <span class="title class_">MountPromises</span>]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 卸载完毕后</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">callEventListener</span>();</span></span><br><span class="line"><span class="language-javascript">            appChangeUnderWay = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (peopleWaitingOnAppChange.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              peopleWaitingOnAppChange = []; <span class="comment">// 多次操作 我缓存起来，。。。。</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">callEventListener</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">callCaptureEventListeners</span>(event);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- registerApplication --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> apps = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">registerApplication</span>(<span class="params">appName, loadApp, activeWhen, customProps</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> registeration = &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: appName,</span></span><br><span class="line"><span class="language-javascript">          loadApp,</span></span><br><span class="line"><span class="language-javascript">          activeWhen,</span></span><br><span class="line"><span class="language-javascript">          customProps,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">status</span>: <span class="variable constant_">NOT_LOADED</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        apps.<span class="title function_">push</span>(registeration);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>(); <span class="comment">// 重写路由</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> started = <span class="literal">false</span>; <span class="comment">// 默认没有调用start方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        started = <span class="literal">true</span>; <span class="comment">// 用户启动了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reroute</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 入口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app1 = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bootstrap</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 bootstrap1&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 bootstrap2&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mount</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> (props) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 mount1&#x27;</span>, props);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 mount2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unmount</span>: <span class="keyword">async</span> (props) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app1 unmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> app2 = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bootstrap</span>: <span class="keyword">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 bootstrap1&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mount</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// new Vue().$mount()...</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reejct</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 mount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">unmount</span>: <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app2 unmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">registerApplication</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> () =&gt; app1,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;#/a&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">registerApplication</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> () =&gt; app2,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;#/b&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 开启路径的监控，路径切换的时候 可以调用对应的mount unmount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">start</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个监控操作 应该被延迟到 当应用挂挂载完毕后再行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>, <span class="string">&#x27;p----&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用户调用pushState replaceState 此方法不会触发逻辑reroute</span></span></span><br><span class="line"><span class="language-javascript">        history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="literal">null</span>, url);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>标准项目流程</title>
    <url>/2023/05/29/%E6%A0%87%E5%87%86%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="项目开发三大要素"><a href="#项目开发三大要素" class="headerlink" title="项目开发三大要素"></a>项目开发三大要素</h2><span id="more"></span>

<ul>
<li><p>工作流程（15 个流程）</p>
<ul>
<li>需求分析： PD、PM、用户</li>
<li>PRD 评审： 产品、交互、前端、后端、测试</li>
<li>交互/UI（稿）评审： 产品、交互、UI、前端、后端、测试</li>
<li>技术方案评审： 前端、后端、测试</li>
<li>接口设计评审： 前端、后端</li>
<li>代码开发： 前端、后端</li>
<li>前后端联调： 前端、后端、测试</li>
<li>冒烟用例： 前端、后端</li>
<li>提测：前端、后端</li>
<li>测试：测试</li>
<li>预发验收：用户、PD</li>
<li>发布上线/验证：用户、PD</li>
<li>观察用户数据：PM、后端、测试</li>
<li>复盘：ALL</li>
<li>敏捷迭代：下一轮循环</li>
</ul>
</li>
<li><p>人员</p>
<ul>
<li>用户（C 端用户、B 端用户）</li>
<li>产品(PD)/项目经理(PM)</li>
<li>UI 设计师</li>
<li>交互设计师（UE）</li>
<li>前端开发</li>
<li>后端开发</li>
<li>测试</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>产品需求文档（PRD-product requirement document）</li>
<li>交互稿</li>
<li>UI 稿</li>
<li>技术方案</li>
<li>接口文档</li>
<li>冒烟测试用例</li>
<li>测试用例</li>
<li>发布日志</li>
<li>上线报告</li>
<li>复盘文档</li>
</ul>
</li>
</ul>
<h2 id="PRD-包含哪些部分（五部分）？"><a href="#PRD-包含哪些部分（五部分）？" class="headerlink" title="PRD 包含哪些部分（五部分）？"></a>PRD 包含哪些部分（五部分）？</h2><ul>
<li>需求背景（业务价值）</li>
<li>需求简介（列表）</li>
<li>业务架构（产品结构、业务逻辑）</li>
<li>产品原型（全局说明）</li>
<li>非功能性需求</li>
</ul>
<p>考虑点：</p>
<ol>
<li>投入产出比 ROI（return on inverstment）</li>
<li>产品效果 PV、UV</li>
</ol>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul>
<li>可控性</li>
<li>稳定性</li>
<li>适用性</li>
<li>易用性</li>
</ul>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2019/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="什么是数据结构与算法？"><a href="#什么是数据结构与算法？" class="headerlink" title="什么是数据结构与算法？"></a>什么是数据结构与算法？</h2><span id="more"></span>

<ul>
<li>数据结构就是在计算机中，存储和组织数据的方式。<!--more-->
<pre><code>+ 常见的数据结构：
&lt;img src=&quot;http://vamknight.com/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png&quot;&gt;
&lt;!--more--&gt;
</code></pre>
</li>
<li>算法（Algorithm）的定义：<ul>
<li>算法就是解决问题的方法/步骤，数据结构的实现离不开算法。<ul>
<li>一个有限指令集，每条指令的描述不依赖于语言</li>
<li>接受一些输入（有些情况不需要输入）</li>
<li>产生输出</li>
<li>一定在有限步骤之后终止</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><!--more-->

<ul>
<li><p>集合通常是由一组无序的，不能重复的元素构成。可以看成是一种特殊的数组，特殊之处在于里<br>面的元素没有顺序就意味着不能通过下标值进行访问，不能重复意味着相同的对象在同一个集合中只能存<br>在一份。</p>
<!-- more --></li>
<li><p>集合都有哪些常见的操作方法呢？</p>
<ul>
<li><p>add(value)：向集合添加一个新的项。</p>
</li>
<li><p>remove(value)：从集合移除一个值。</p>
</li>
<li><p>has(value)：如果值在集合中，返回 true，否则返回 false。</p>
</li>
<li><p>clear()：移除集合中的所有项。</p>
</li>
<li><p>size()：返回集合所包含元素的数量。与数组的 length 属性类似。</p>
</li>
<li><p>values()：返回一个包含集合中所有值的数组。</p>
</li>
</ul>
</li>
<li><p>集合之间都有哪些操作呢？</p>
<ul>
<li>并集：对于两个给定的集合，返回一个包含两个集合中所有元素的新集合。</li>
<li>交集：对于两个给定的集合，返回一个包含两个集合中公有元素的新集合。</li>
<li>差集：对于两个给定的集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的新集合。</li>
<li>子集：验证一个给定集合是否是另一个集合的子集。</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/foolishmax/static/master/blogPic/%E9%9B%86%E5%90%88%E5%85%B3%E7%B3%BB.png">

<ul>
<li>集合封装的完整代码：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 封装集合的构造函数</span><br><span class="line">function Set() &#123;</span><br><span class="line">    // 使用一个对象来保存集合的元素</span><br><span class="line">    this.items = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 集合的操作方法</span><br><span class="line">    // 判断集合中是否有某个元素</span><br><span class="line">    Set.prototype.has = function (value) &#123;</span><br><span class="line">        return this.items.hasOwnProperty(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 向集合中添加元素</span><br><span class="line">    Set.prototype.add = function (value) &#123;</span><br><span class="line">        // 1.判断集合中是否已经包含了该元素</span><br><span class="line">        if (this.has(value)) return false</span><br><span class="line"></span><br><span class="line">        // 2.将元素添加到集合中</span><br><span class="line">        this.items[value] = value</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 从集合中删除某个元素</span><br><span class="line">    Set.prototype.remove = function (value) &#123;</span><br><span class="line">        // 1.判断集合中是否包含该元素</span><br><span class="line">        if (!this.has(value)) return false</span><br><span class="line"></span><br><span class="line">        // 2.包含该元素, 那么将元素删除</span><br><span class="line">        delete this.items[value]</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 清空集合中所有的元素</span><br><span class="line">    Set.prototype.clear = function () &#123;</span><br><span class="line">        this.items = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取集合的大小</span><br><span class="line">    Set.prototype.size = function () &#123;</span><br><span class="line">        return Object.keys(this.items).length</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        考虑兼容性问题, 使用下面的代码</span><br><span class="line">        var count = 0</span><br><span class="line">        for (var value in this.items) &#123;</span><br><span class="line">            if (this.items.hasOwnProperty(value)) &#123;</span><br><span class="line">                count++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取集合中所有的值</span><br><span class="line">    Set.prototype.values = function () &#123;</span><br><span class="line">        return Object.keys(this.items)</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        考虑兼容性问题, 使用下面的代码</span><br><span class="line">        var keys = []</span><br><span class="line">        for (var value in this.items) &#123;</span><br><span class="line">            keys.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">        return keys</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //集合之间的操作</span><br><span class="line">    //并集</span><br><span class="line">    Set.prototype.union = function (otherSet) &#123;</span><br><span class="line">        //this:集合对象A</span><br><span class="line">        //otherSet:集合对象B</span><br><span class="line">        //1.创建新的集合</span><br><span class="line">        var unionSet = new Set()</span><br><span class="line"></span><br><span class="line">        //2.将A集合中所有的元素添加到新集合中</span><br><span class="line">        var values = this.values()</span><br><span class="line">        for(var i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">            unionSet.add(values[i])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //3.取出B集合中的元素，判断是否需要添加到新集合</span><br><span class="line">        values = otherSet.values()</span><br><span class="line">        for(var i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">            unionSet.add(values[i])</span><br><span class="line">        &#125;</span><br><span class="line">        return unionSet</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //交集</span><br><span class="line">        Set.prototype.intersection = function (otherSet) &#123;</span><br><span class="line">            var intersectionSet = new Set()</span><br><span class="line">            var values = this.values()</span><br><span class="line">            //取出A集合一个个元素，判断是否同时存在于B中，存在B中，则添加到新集合中</span><br><span class="line">            for (var i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">                var item = values[i]</span><br><span class="line">                if (otherSet.has(item)) &#123;</span><br><span class="line">                    intersectionSet.add(item)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return intersectionSet</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    //差集</span><br><span class="line">    Set.prototype.difference = function (otherSet) &#123;</span><br><span class="line">        var differenceSet = new Set()</span><br><span class="line">        var values = this.values()</span><br><span class="line">        //取出A集合一个个元素，判断是否同时存在于B中，不存在B中，则添加到新集合中</span><br><span class="line">        for (var i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">            var item = values[i]</span><br><span class="line">            if (!otherSet.has(item)) &#123;</span><br><span class="line">                differenceSet.add(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return differenceSet</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 子集</span><br><span class="line">    Set.prototype.subset = function (otherSet) &#123;</span><br><span class="line">        var values = this.values()</span><br><span class="line">        for (var i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">            var item = values[i]</span><br><span class="line">            if (!otherSet.has(item)) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         return true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><!--more-->

<ul>
<li><p>队列是一种受限的线性表，先进先出（FIFO First In First Out）。</p>
<ul>
<li>它只允许在表的前端（front）进行删除操作</li>
<li>在表的后端（rear）进行插入操作<!--more--></li>
</ul>
</li>
<li><p>常见应用场景： + 队列主要用在和时间有关的地方，特别是操作系统中，队列是实现多任务的重要机制。 + 消息机制可以通过队列来实现，进程调度也是使用队列来实现。</p>
<img src="https://raw.githubusercontent.com/foolishmax/static/master/blogPic/%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></li>
<li><p>队列有哪些常见的操作呢？</p>
<ul>
<li>enqueue(element): 向队列尾部添加一个（或多个）新的项。</li>
<li>dequeue(): 移除队列的第一项，并返回被移除的元素。</li>
<li>front(): 返回队列中第一个元素，队列不做任何改动。</li>
<li>isEmpty(): 如果队列中不包含任何元素，返回 true，否则返回 false。</li>
<li>size(): 返回队列包含的元素个数，与数组 length 类似。</li>
<li>toString(): 将队列中的内容，转成字符串形式。</li>
</ul>
</li>
<li><p>队列常见操作的封装：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//封装队列</span><br><span class="line">function Queue() &#123;</span><br><span class="line">    //属性</span><br><span class="line">    this.items = []</span><br><span class="line">    //将元素加入到队列中</span><br><span class="line">    Queue.prototype.enqueue = function(element) &#123;</span><br><span class="line">        this.items.push(element)</span><br><span class="line">    &#125;</span><br><span class="line">    //从队列中删除前端元素</span><br><span class="line">    Queue.prototype.dequeue = function() &#123;</span><br><span class="line">        return this.items.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    //查看前端的元素</span><br><span class="line">    Queue.prototype.front = function() &#123;</span><br><span class="line">        return this.items[0]</span><br><span class="line">    &#125;</span><br><span class="line">    //查看队列是否为空</span><br><span class="line">    Queue.prototype.isEmpty = function() &#123;</span><br><span class="line">        return this.items.length == 0</span><br><span class="line">    &#125;</span><br><span class="line">    //查看队列中元素的个数</span><br><span class="line">    Queue.prototype.size = function() &#123;</span><br><span class="line">        return this.items.length</span><br><span class="line">    &#125;</span><br><span class="line">    //toString方法</span><br><span class="line">    Queue.prototype.toString = function() &#123;</span><br><span class="line">        var resultString = &#x27;&#x27;</span><br><span class="line">        for (var i = 0; i&lt; this.items.length; i++) &#123;</span><br><span class="line">            resultString += this.items[i] + &#x27; &#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用队列函数</span><br><span class="line">var queue = new Queue()</span><br><span class="line">queue.enqueue(20)</span><br><span class="line">alert(queue)</span><br></pre></td></tr></table></figure>

<ul>
<li>面试题： 击鼓传花</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//面试题: 击鼓传花</span><br><span class="line">function passGame(nameList, num) &#123;</span><br><span class="line">    //创建一个队列结构</span><br><span class="line">    var queue = new Queue()</span><br><span class="line">    //将所有人加入到队列中</span><br><span class="line">    for(var i = 0; i &lt; nameList.length; i++) &#123;</span><br><span class="line">        queue.enqueue(nameList[i])</span><br><span class="line">    &#125;</span><br><span class="line">    //开始数数字</span><br><span class="line">    while (queue.size() &gt; 1) &#123;</span><br><span class="line">        //不是num重新加入队列末尾</span><br><span class="line">        //是num从队列中删除</span><br><span class="line">        for (var i = 0; i&lt; num - 1; i++) &#123;</span><br><span class="line">            queue.enqueue(queue.dequeue())</span><br><span class="line">        &#125;</span><br><span class="line">        queue.dequeue()</span><br><span class="line">    &#125;</span><br><span class="line">    return queque.front()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>封装优先队列</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//封装优先级队列</span><br><span class="line">function PriorityQueue() &#123;</span><br><span class="line">    //内部创建一个构造类</span><br><span class="line">    function QueueElement(element, priority) &#123;</span><br><span class="line">        this.element = element</span><br><span class="line">        this.priority = priority</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //属性</span><br><span class="line">    this.items = []</span><br><span class="line"></span><br><span class="line">    //实现队列元素的插入</span><br><span class="line">    PriorityQueue.prototype.enqueue = function(element, priority) &#123;</span><br><span class="line">        //创建QueueElement对象</span><br><span class="line">        var queueElement = new QueueElement(element, priority)</span><br><span class="line"></span><br><span class="line">        //判断为队列是否为空</span><br><span class="line">        if (this.items.length == 0) &#123;</span><br><span class="line">            this.items.push(queueElement)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            var added = false</span><br><span class="line">            for (var i = 0; i &lt; this.items.length; i++) &#123;</span><br><span class="line">                if (queueElement.priority &lt; this.items[i].priority) &#123;</span><br><span class="line">                    this.items.splice(i, 0, queueElement)</span><br><span class="line">                    added = true</span><br><span class="line">                    break</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!added) &#123;</span><br><span class="line">                this.items.push(queueElement)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        //从队列中删除前端元素</span><br><span class="line">    PriorityQueue.prototype.dequeue = function() &#123;</span><br><span class="line">        return this.items.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    //查看前端的元素</span><br><span class="line">    PriorityQueue.prototype.front = function() &#123;</span><br><span class="line">        return this.items[0]</span><br><span class="line">    &#125;</span><br><span class="line">    //查看队列是否为空</span><br><span class="line">    PriorityQueue.prototype.isEmpty = function() &#123;</span><br><span class="line">        return this.items.length == 0</span><br><span class="line">    &#125;</span><br><span class="line">    //查看队列中元素的个数</span><br><span class="line">    PriorityQueue.prototype.size = function() &#123;</span><br><span class="line">        return this.items.length</span><br><span class="line">    &#125;</span><br><span class="line">    //toString方法</span><br><span class="line">    PriorityQueue.prototype.toString = function() &#123;</span><br><span class="line">        var resultString = &#x27;&#x27;</span><br><span class="line">        for (var i = 0; i&lt; this.items.length; i++) &#123;</span><br><span class="line">            resultString += this.items[i].element + &#x27;-&#x27; + this.items[i].priority + &#x27; &#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试代码</span><br><span class="line">var pq = new PriorityQueue()</span><br><span class="line">pq.enqueue(&#x27;a&#x27;,10)</span><br><span class="line">pq.enqueue(&#x27;b&#x27;,100)</span><br><span class="line">pq.enqueue(&#x27;c&#x27;,50)</span><br><span class="line">alert(pq)</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><!--more-->

<ul>
<li><p>什么是链表？ + 链表的元素在内存中不必是连续的空间，链表的每个元素由一个存储元素本身的节点和一个指向下一个元素的引用组成。</p>
<!--more--></li>
<li><p>相对于数组，链表都有哪些优势？</p>
<ul>
<li>内存空间不是比是连续的. 可以充分利用计算机的内存. 实现灵活的内存动态管理。</li>
<li>链表不必在创建时就确定大小, 并且大小可以无限的延伸下去。</li>
<li>链表在插入和删除数据时, 时间复杂度可以达到 O(1). 相对数组效率高很多。</li>
</ul>
</li>
<li><p>相对于数组，链表都有哪些缺点？ + 链表访问任何一个位置的元素时, 都需要从头开始访问.(无法跳过第一个元素访问任何一个元素)。 + 无法通过下标直接访问元素, 需要从头一个个访问, 直到找到对应的问题。</p>
<!--more--></li>
<li><p>链表的数据结构：</p>
<img src="http://vamknight.com/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png"></li>
<li><p>链表有哪些常见操作？ + append(element)：向列表尾部添加一个新的项</p>
<pre><code>+ insert(position, element)：向列表的特定位置插入一个新的项。

+ update(position, element): 修改某一个位置上的元素。

+ remove(element)：从列表中移除一项。

+ indexOf(element)：返回元素在列表中的索引。如果列表中没有该元素则返回-1。

// 链表中的属性
this.length = 0
this.head = null

// 链表尾部追加元素方法
LinkedList.prototype.append = function (element) &#123;
    // 1.根据新元素创建节点
    var newNode = new Node(element)

    // 2.判断原来链表是否为空
    if (this.head === null) &#123; /
+ removeAt(position)：从列表的特定位置移除一项。
</code></pre>
<p>this.next = null<br>}<br>/ 链表尾空<br>this.head = newNode<br>} else { // 链表不为空<br>// 2.1.定义变量, 保存当前找到的节点<br>var current = this.head<br>while (current.next) {<br>current = current.next<br>}</p>
<pre><code>        // 2.2.找到最后一项, 将其next赋值为node
        current.next = newNode
    &#125;

    // 3.链表长度增加1
    this.length++
&#125;

// 链表的toString方法
LinkedList.prototype.toString = function () &#123;
    // 1.定义两个变量
    var current = this.head
    var listString = &quot;&quot;

    // 2.循环获取链表中所有的元素
    while (current) &#123;
        listString += &quot;,&quot; + current.element
        current = current.next
    &#125;

    // 3.返回最终结果
    return listString.slice(1)
&#125;

// 根据下标删除元素
LinkedList.prototype.insert = function (position, element) &#123;
    // 1.检测越界问题: 越界插入失败
    if (position &lt; 0 || position &gt; this.length) return false

    // 2.定义变量, 保存信息
    var newNode = new Node(element)
    var current = this.head
    var previous = null
    index = 0

    // 3.判断是否列表是否在第一个位置插入
    if (position == 0) &#123;
        newNode.next = current
        this.head = newNode
    &#125; else &#123;
        while (index++ &lt; position) &#123;
            previous = current
            current = current.next
        &#125;

        newNode.next = current
        previous.next = newNode
    &#125;

    // 4.length+1
    this.length++

    return true
&#125;

//update方法
LinkedList.prototype.update = function (position, newData) &#123;
    if (position &lt; 0 || position &gt;= this.length) return  null

    var current = this.head
    var index = 0
    while (index++ &lt; position) &#123;
        current = current.next
    &#125;
    current.data = newData
    return true
&#125;

// 根据位置移除节点
LinkedList.prototype.removeAt = function (position) &#123;
    // 1.检测越界问题: 越界移除失败, 返回null
    if (position &lt; 0 || position &gt;= this.length) return null

    // 2.定义变量, 保存信息
    var current = this.head
    var previous = null
    var index = 0

    // 3.判断是否是移除第一项
    if (position === 0) &#123;
        this.head = current.next
    &#125; else &#123;
        while (index++ &lt; position) &#123;
            previous = current
            current = current.next
        &#125;

        previous.next = current.next
    &#125;

    // 4.length-1
    this.length--

    // 5.返回移除的数据
    return current.element
&#125;

// 根据元素获取链表中的位置
LinkedList.prototype.indexOf = function (element) &#123;
    // 1.定义变量, 保存信息
    var current = this.head
    index = 0

    // 2.找到元素所在的位置
    while (current) &#123;
        if (current.element === element) &#123;
            return index
        &#125;
        index++
        current = current.next
    &#125;

    // 3.来到这个位置, 说明没有找到, 则返回-1
    return -1
&#125;

// 根据元素删除信息
LinkedList.prototype.remove = function (element) &#123;
    var index = this.indexOf(element)
    return this.removeAt(index)
&#125;

// 判断链表是否为空
LinkedList.prototype.isEmpty = function () &#123;
    return this.length == 0
&#125;

// 获取链表的长度
LinkedList.prototype.size = function () &#123;
    return this.length
&#125;

// 获取第一个节点
LinkedList.prototype.getFirst = function () &#123;
    return this.head.element
&#125;
</code></pre>
<p>}</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 以上操作的都是单向链表，下面来认识一下双向链表。</span><br><span class="line">- 单向链表的缺点：</span><br><span class="line">    + 只能从头遍历到尾，也就是链表的相连的过程是单向的，实现的原理是上一个链表中有一个指向下一个的引用。</span><br><span class="line">    + 我们可以轻松的到达下一个节点，但是回到上一个节点是很难的，只能从头遍历。</span><br><span class="line">    + 但是，实际开发中，经常会遇到回到上一个节点的情况。</span><br><span class="line">- 双向链表：</span><br><span class="line">    + 既可以从头遍历到尾，又可以从尾遍历到头。</span><br><span class="line">    + 也就是链表相连的过程是双向的。</span><br><span class="line">    + 实现的原理就是既有先前连接的引用，也有一个向后连接的引用。</span><br><span class="line">    + 双向链表可以有效的解决单向链表的问题。</span><br><span class="line">- 双向链表的一些缺点：</span><br><span class="line">    + 每次在插入或删除某一个节点时，需要处理四个引用，实现起来比较复杂。</span><br><span class="line">    + 相对于单向链表占用的内存更大一些。</span><br><span class="line"></span><br><span class="line">- 双向链表的结构图：</span><br><span class="line">&lt;img src=&quot;http://vamknight.com/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png&quot;&gt;</span><br><span class="line"></span><br><span class="line">- 双向链表的特点：</span><br><span class="line">    + 可以使用一个head和一个tail分别指向头部和尾部的节点。</span><br><span class="line">    + 每个节点都是由三部分组成：前一个节点的指针（prev）、保存的元素（item）、后一个节点的指针（next）。</span><br><span class="line">    + 双向链表的第一个节点的prev是null。</span><br><span class="line">    + 双向链表的最后一个节点的next是null。</span><br><span class="line"></span><br><span class="line">- 双向链表都有哪些常见操作？</span><br><span class="line">    + append(element)：向列表尾部添加一个新的项</span><br><span class="line"></span><br><span class="line">    + insert(position, element)：向列表的特定位置插入一个新的项。</span><br><span class="line"></span><br><span class="line">    + update(position, element): 修改某一个位置上的元素。</span><br><span class="line"></span><br><span class="line">    + get(position): 获取对应位置的元素。</span><br><span class="line"></span><br><span class="line">    + remove(element)：从列表中移除一项。</span><br><span class="line"></span><br><span class="line">    + indexOf(element)：返回元素在列表中的索引。如果列表中没有该元素则返回-1。</span><br><span class="line"></span><br><span class="line">    + removeAt(position)：从列表的特定位置移除一项。</span><br><span class="line"></span><br><span class="line">    + isEmpty()：如果链表中不包含任何元素，返回true，如果链表长度大于0则返回false。</span><br><span class="line"></span><br><span class="line">    + size()：返回链表包含的元素个数。与数组的length属性类似。</span><br><span class="line"></span><br><span class="line">    + toString()：由于列表项使用了Node类，就需要重写继承自JavaScript对象默认的toString方法，让其只输出元素的值。</span><br><span class="line"></span><br><span class="line">    + forwardString(): 返回正向遍历的节点字符串形式。</span><br><span class="line"></span><br><span class="line">    + backwardString(): 返回反向遍历的节点字符串形式。</span><br><span class="line"></span><br><span class="line">- 双向链表常见方法的封装：</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>// 创建双向链表的构造函数<br>function DoublyLinkedList() {<br>// 创建节点构造函数<br>function Node(element) {<br>this.element = element<br>this.next = null<br>this.prev = null // 新添加的<br>}</p>
<pre><code>// 定义属性
this.length = 0
this.head = null
this.tail = null // 新添加的

// 定义相关操作方法
// 在尾部追加数据
DoublyLinkedList.prototype.append = function (element) &#123;
    // 1.根据元素创建节点
    var newNode = new Node(element)

    // 2.判断列表是否为空列表
    if (this.head == null) &#123;
        this.head = newNode
        this.tail = newNode
    &#125; else &#123;
        this.tail.next = newNode
        newNode.prev = this.tail
        this.tail = newNode
    &#125;

    // 3.length+1
    this.length++
&#125;

// 在任意位置插入数据
DoublyLinkedList.prototype.insert = function (position, element) &#123;
    // 1.判断越界的问题
    if (position &lt; 0 || position &gt; this.length) return false

    // 2.创建新的节点
    var newNode = new Node(element)

    // 3.判断插入的位置
    if (position === 0) &#123; // 在第一个位置插入数据
        // 判断链表是否为空
        if (this.head == null) &#123;
            this.head = newNode
            this.tail = newNode
        &#125; else &#123;
            this.head.prev = newNode
            newNode.next = this.head
            this.head = newNode
        &#125;
    &#125; else if (position === this.length) &#123; // 插入到最后的情况
        // 思考: 这种情况是否需要判断链表为空的情况呢? 答案是不需要, 为什么?
        this.tail.next = newNode
        newNode.prev = this.tail
        this.tail = newNode
    &#125; else &#123; // 在中间位置插入数据
        // 定义属性
        var index = 0
        var current = this.head
        var previous = null

        // 查找正确的位置
        while (index++ &lt; position) &#123;
            previous = current
            current = current.next
        &#125;

        // 交换节点的指向顺序
        newNode.next = current
        newNode.prev = previous
        current.prev = newNode
        previous.next = newNode
    &#125;

    // 4.length+1
    this.length++

    return true
&#125;

// 根据位置删除对应的元素
DoublyLinkedList.prototype.removeAt = function (position) &#123;
    // 1.判断越界的问题
    if (position &lt; 0 || position &gt;= this.length) return null

    // 2.判断移除的位置
    var current = this.head
    if (position === 0) &#123;
        if (this.length == 1) &#123;
            this.head = null
            this.tail = null
        &#125; else &#123;
            this.head = this.head.next
            this.head.prev = null
        &#125;
    &#125; else if (position === this.length -1) &#123;
        current = this.tail
        this.tail = this.tail.prev
        this.tail.next = null
    &#125; else &#123;
        var index = 0
        var previous = null

        while (index++ &lt; position) &#123;
            previous = current
            current = current.next
        &#125;

        previous.next = current.next
        current.next.prev = previous
    &#125;

    // 3.length-1
    this.length--

    return current.element
&#125;

// 根据元素获取在链表中的位置
DoublyLinkedList.prototype.indexOf = function (element) &#123;
    // 1.定义变量保存信息
    var current = this.head
    var index = 0

    // 2.查找正确的信息
    while (current) &#123;
        if (current.element === element) &#123;
            return index
        &#125;
        index++
        current = current.next
    &#125;

    // 3.来到这个位置, 说明没有找到, 则返回-1
    return -1
&#125;

// 根据元素删除
DoublyLinkedList.prototype.remove = function (element) &#123;
    var index = this.indexOf(element)
    return this.removeAt(index)
&#125;

// 判断是否为空
DoublyLinkedList.prototype.isEmpty = function () &#123;
    return this.length === 0
&#125;

// 获取链表长度
DoublyLinkedList.prototype.size = function () &#123;
    return this.length
&#125;

// 获取第一个元素
DoublyLinkedList.prototype.getHead = function () &#123;
    return this.head.element
&#125;

// 获取最后一个元素
DoublyLinkedList.prototype.getTail = function () &#123;
    return this.tail.element
&#125;

// 遍历方法的实现
// 正向遍历的方法
DoublyLinkedList.prototype.forwardString = function () &#123;
    var current = this.head
    var forwardStr = &quot;&quot;

    while (current) &#123;
        forwardStr += &quot;,&quot; + current.element
        current = current.next
    &#125;

    return forwardStr.slice(1)
&#125;

// 反向遍历的方法
DoublyLinkedList.prototype.reverseString = function () &#123;
    var current = this.tail
    var reverseStr = &quot;&quot;

    while (current) &#123;
        reverseStr += &quot;,&quot; + current.element
        current = current.prev
    &#125;

    return reverseStr.slice(1)
&#125;

// 实现toString方法
DoublyLinkedList.prototype.toString = function () &#123;
    return this.forwardString()
&#125;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><!--more-->

<ul>
<li><p>我们知道数组是一种线性结构，可以在数组的任意位置插入或删除数据。但有些时候，我们为了实现某种功能，必须对这种 任意性 加以限制，而我们的栈和队列就是比较常见的 <strong>受限的线性结构</strong>。</p>
</li>
<li><p>栈是一种<strong>先进后出</strong>或**后进先出(LIFO Last In First Out)**的数据结构，栈内的元素只能通过列表的一端访问，这一端称为栈顶，因为<br>数据只能在栈顶添加或删除，所以只要数据的保存满足“先进后出或后进先出”的原理，都优先考虑使用栈。</p>
</li>
<li><p>栈的结构示意图：</p>
<img src="https://raw.githubusercontent.com/foolishmax/static/master/blogPic/%E6%A0%88%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png">
<!--more--></li>
<li><p>栈常见有哪些操作？</p>
</li>
</ul>
<ul>
<li>push（element）：添加一个新元素到栈顶位置。</li>
<li>pop（）：移除栈顶的元素，同时返回被移除的元素。</li>
<li>peek（）：返回栈顶的元素，不对栈做任何修改。</li>
<li>isEmpty（）：如果栈里没有任何元素返回 true，否则返回 false。</li>
<li>size（）：返回栈里的元素个数，类似数组中的 length。</li>
<li>toString（）：将栈结构的内容以字符形式返回。</li>
</ul>
<ul>
<li>栈常见操作的封装：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Stack() &#123;</span><br><span class="line">    this.items = []</span><br><span class="line">    //将元素压入栈</span><br><span class="line">    Stack.prototype.push = function(element) &#123;</span><br><span class="line">        this.items.push(element)</span><br><span class="line">    &#125;</span><br><span class="line">    //从栈中移除元素</span><br><span class="line">    Stack.prototype.pop = function() &#123;</span><br><span class="line">        return this.items.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    //查看栈顶元素</span><br><span class="line">    Stack.prototype.peek = function() &#123;</span><br><span class="line">        return this.items[this.items.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">    //判断栈是否为空</span><br><span class="line">    Stack.prototype.isEmpty = function() &#123;</span><br><span class="line">        return this.items.length == 0</span><br><span class="line">    &#125;</span><br><span class="line">    //判断栈中元素个数</span><br><span class="line">    Stack.prototype.size = function() &#123;</span><br><span class="line">        return this.items.length</span><br><span class="line">    &#125;</span><br><span class="line">    //toString方法</span><br><span class="line">    Stack.prototype.toString = function() &#123;</span><br><span class="line">        var resultString = &#x27;&#x27;</span><br><span class="line">        for (var i = 0; i&lt; this.items.length; i++) &#123;</span><br><span class="line">            resultString += this.items[i] + &#x27; &#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//栈的使用</span><br><span class="line">var s = new Stack()</span><br><span class="line">s.push(23)</span><br><span class="line">alert(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//函数十进制转为二进制</span><br><span class="line">function dec2bin(decNumber) &#123;</span><br><span class="line">    //定义栈对象</span><br><span class="line">    var stack = new Stack()</span><br><span class="line">    while (decNumber &gt; 0) &#123;</span><br><span class="line">        //获取余数放入栈中</span><br><span class="line">        stack.push(decNumber % 2)</span><br><span class="line">        //获取除后的结果,作为下次操作的对象</span><br><span class="line">        decNumber = Math.floor(decNumber / 2)</span><br><span class="line">    &#125;</span><br><span class="line">    //从栈中取出0和1</span><br><span class="line">    var binaryString = &#x27;&#x27;</span><br><span class="line">    while (!stack.isEmpty()) &#123;</span><br><span class="line">        binaryString += stack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    return binaryString</span><br><span class="line">&#125;</span><br><span class="line">//调用函数</span><br><span class="line">alert(dec2bin(100))</span><br></pre></td></tr></table></figure>

<h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><!--more-->

<h4 id="五大算法"><a href="#五大算法" class="headerlink" title="五大算法"></a>五大算法</h4><ul>
<li><p>贪心算法</p>
</li>
<li><p>分治算法</p>
</li>
<li><p>动态规划</p>
</li>
<li><p>回溯法</p>
</li>
<li><p>分支限界法</p>
</li>
</ul>
<!--more-->

<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function bubleSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    for (let outer = len ; outer &gt;= 2; outer--) &#123;</span><br><span class="line">        for(let inner = 0; inner &lt;=outer - 1; inner++) &#123;</span><br><span class="line">            if(arr[inner] &gt; arr[inner + 1]) &#123;</span><br><span class="line">                [arr[inner],arr[inner+1]] = [arr[inner+1],arr[inner]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function selectSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    for(let i = 0 ;i &lt; len - 1; i++) &#123;</span><br><span class="line">        for(let j = i ; j&lt;len; j++) &#123;</span><br><span class="line">            if(arr[j] &lt; arr[i]) &#123;</span><br><span class="line">                [arr[i],arr[j]] = [arr[j],arr[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function insertSort(arr) &#123;</span><br><span class="line">    for(let i = 1; i &lt; arr.length; i++) &#123;  //外循环从1开始，默认arr[0]是有序段</span><br><span class="line">        for(let j = i; j &gt; 0; j--) &#123;  //j = i,将arr[j]依次插入有序段中</span><br><span class="line">            if(arr[j] &lt; arr[j-1]) &#123;</span><br><span class="line">                [arr[j],arr[j-1]] = [arr[j-1],arr[j]];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function quickSort(arr) &#123;</span><br><span class="line">    if(arr.length &lt;= 1) &#123;</span><br><span class="line">        return arr;  //递归出口</span><br><span class="line">    &#125;</span><br><span class="line">    var left = [],</span><br><span class="line">        right = [],</span><br><span class="line">        current = arr.splice(0,1);</span><br><span class="line">    for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if(arr[i] &lt; current) &#123;</span><br><span class="line">            left.push(arr[i])  //放在左边</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right.push(arr[i]) //放在右边</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return quickSort(left).concat(current,quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建列表类</span><br><span class="line">function ArrayList() &#123;</span><br><span class="line">    this.array = []</span><br><span class="line">    //方法</span><br><span class="line">    //插入方法</span><br><span class="line">    ArrayList.prototype.insert = function(item)&#123;</span><br><span class="line">        this.array.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    //toString 方便测试</span><br><span class="line">    ArrayList.prototype.toString = function()&#123;</span><br><span class="line">        return this.array.join(&#x27;-&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!--var arr = new ArrayList()--&gt;</span><br><span class="line">&lt;!--arr.insert(1)--&gt;</span><br><span class="line">&lt;!--arr.insert(2)--&gt;</span><br><span class="line">&lt;!--arr.insert(3)--&gt;</span><br><span class="line"></span><br><span class="line">//实现排序算法</span><br><span class="line">//冒泡排序</span><br><span class="line">ArrayList.prototype.bubbleSort = function () &#123;</span><br><span class="line">    // 1.获取数组的长度</span><br><span class="line">    var length = this.array.length</span><br><span class="line"></span><br><span class="line">    // 2.反向循环, 因此次数越来越少</span><br><span class="line">    for (var i = length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        // 3.根据i的次数, 比较循环到i位置</span><br><span class="line">        for (var j = 0; j &lt; i; j++) &#123;</span><br><span class="line">            // 4.如果j位置比j+1位置的数据大, 那么就交换</span><br><span class="line">            if (this.array[j] &gt; this.array[j+1]) &#123;</span><br><span class="line">                // 交换</span><br><span class="line">                this.swap(j, j+1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayList.prototype.swap = function (m, n) &#123;</span><br><span class="line">    var temp = this.array[m]</span><br><span class="line">    this.array[m] = this.array[n]</span><br><span class="line">    this.array[n] = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选择排序</span><br><span class="line">ArrayList.prototype.selectionSort = function () &#123;</span><br><span class="line">    // 1.获取数组的长度</span><br><span class="line">    var length = this.array.length</span><br><span class="line"></span><br><span class="line">    // 2.外层循环: 从0位置开始取出数据, 直到length-2位置</span><br><span class="line">    for (var i = 0; i &lt; length - 1; i++) &#123;</span><br><span class="line">        // 3.内层循环: 从i+1位置开始, 和后面的内容比较</span><br><span class="line">        var min = i</span><br><span class="line">        for (var j = min + 1; j &lt; length; j++) &#123;</span><br><span class="line">            // 4.如果i位置的数据大于j位置的数据, 那么记录最小的位置</span><br><span class="line">            if (this.array[min] &gt; this.array[j]) &#123;</span><br><span class="line">                min = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 5.交换min和i位置的数据</span><br><span class="line">        this.swap(min, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//插入排序</span><br><span class="line">ArrayList.prototype.insertionSort = function () &#123;</span><br><span class="line">    // 1.获取数组的长度</span><br><span class="line">    var length = this.array.length</span><br><span class="line"></span><br><span class="line">    // 2.外层循环: 外层循环是从1位置开始, 依次遍历到最后</span><br><span class="line">    for (var i = 1; i &lt; length; i++) &#123;</span><br><span class="line">        // 3.记录选出的元素, 放在变量temp中</span><br><span class="line">        var j = i</span><br><span class="line">        var temp = this.array[i]</span><br><span class="line"></span><br><span class="line">        // 4.内层循环: 内层循环不确定循环的次数, 最好使用while循环</span><br><span class="line">        while (j &gt; 0 &amp;&amp; this.array[j-1] &gt; temp) &#123;</span><br><span class="line">            this.array[j] = this.array[j-1]</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5.将选出的j位置, 放入temp元素</span><br><span class="line">        this.array[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//希尔排序</span><br><span class="line">ArrayList.prototype.shellSort = function () &#123;</span><br><span class="line">    // 1.获取数组的长度</span><br><span class="line">    var length = this.array.length</span><br><span class="line"></span><br><span class="line">    // 2.根据长度计算增量</span><br><span class="line">    var gap = Math.floor(length / 2)</span><br><span class="line"></span><br><span class="line">    // 3.增量不断变量小, 大于0就继续排序</span><br><span class="line">    while (gap &gt; 0) &#123;</span><br><span class="line">        // 4.实现插入排序</span><br><span class="line">        for (var i = gap; i &lt; length; i++) &#123;</span><br><span class="line">            // 4.1.保存临时变量</span><br><span class="line">            var j = i</span><br><span class="line">            var temp = this.array[i]</span><br><span class="line"></span><br><span class="line">            // 4.2.插入排序的内层循环</span><br><span class="line">            while (j &gt; gap - 1 &amp;&amp; this.array[j - gap] &gt; temp) &#123;</span><br><span class="line">                this.array[j] = this.array[j - gap]</span><br><span class="line">                j -= gap</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 4.3.将选出的j位置设置为temp</span><br><span class="line">            this.array[j] = temp</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5.重新计算新的间隔</span><br><span class="line">        gap = Math.floor(gap / 2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//快速排序</span><br><span class="line"> // 选择枢纽</span><br><span class="line"> ArrayList.prototype.median = function (left, right) &#123;</span><br><span class="line">     // 1.求出中间的位置</span><br><span class="line">     var center = Math.floor((left + right) / 2)</span><br><span class="line"></span><br><span class="line">     // 2.判断并且进行交换</span><br><span class="line">     if (this.array[left] &gt; this.array[center]) &#123;</span><br><span class="line">         this.swap(left, center)</span><br><span class="line">     &#125;</span><br><span class="line">     if (this.array[center] &gt; this.array[right]) &#123;</span><br><span class="line">         this.swap(center, right)</span><br><span class="line">     &#125;</span><br><span class="line">     if (this.array[left] &gt; this.array[right]) &#123;</span><br><span class="line">         this.swap(left, right)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // 3.巧妙的操作: 将center移动到right - 1的位置.</span><br><span class="line">     this.swap(center, right - 1)</span><br><span class="line"></span><br><span class="line">     // 4.返回pivot</span><br><span class="line">     return this.array[right - 1]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 快速排序实现</span><br><span class="line"> ArrayList.prototype.quickSort = function () &#123;</span><br><span class="line">     this.quickSortRec(0, this.array.length - 1)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ArrayList.prototype.quickSortRec = function (left, right) &#123;</span><br><span class="line">     // 0.递归结束条件</span><br><span class="line">     if (left &gt;= right) return</span><br><span class="line"></span><br><span class="line">     // 1.获取枢纽</span><br><span class="line">     var pivot = this.median(left, right)</span><br><span class="line"></span><br><span class="line">     // 2.开始进行交换</span><br><span class="line">     // 2.1.记录左边开始位置和右边开始位置</span><br><span class="line">     var i = left</span><br><span class="line">     var j = right - 1</span><br><span class="line">     // 2.2.循环查找位置</span><br><span class="line">     while (true) &#123;</span><br><span class="line">         while (this.array[++i] &lt; pivot) &#123; &#125;</span><br><span class="line">         while (this.array[--j] &gt; pivot) &#123; &#125;</span><br><span class="line">         if (i &lt; j) &#123;</span><br><span class="line">               // 2.3.交换两个数值</span><br><span class="line">             this.swap(i, j)</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             // 2.4.当i&lt;j的时候(一定不会=, 看下面解释中的序号3), 停止循环因为两边已经找到了相同的位置</span><br><span class="line">             break</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // 3.将枢纽放在正确的位置</span><br><span class="line">     this.swap(i, right - 1)</span><br><span class="line"></span><br><span class="line">     // 4.递归调用左边</span><br><span class="line">     this.quickSortRec(left, i - 1)</span><br><span class="line">     this.quickSortRec(i + 1, right)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 封装ArrayList</span><br><span class="line"> function ArrayList() &#123;</span><br><span class="line">     this.array = []</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.insert = function (item) &#123;</span><br><span class="line">         this.array.push(item)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.toString = function () &#123;</span><br><span class="line">         return this.array.join()</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.bubbleSort = function () &#123;</span><br><span class="line">         // 1.获取数组的长度</span><br><span class="line">         var length = this.array.length</span><br><span class="line"></span><br><span class="line">         // 2.反向循环, 因此次数越来越少</span><br><span class="line">         for (var i = length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">             // 3.根据i的次数, 比较循环到i位置</span><br><span class="line">             for (var j = 0; j &lt; i; j++) &#123;</span><br><span class="line">                 // 4.如果j位置比j+1位置的数据大, 那么就交换</span><br><span class="line">                 if (this.array[j] &gt; this.array[j+1]) &#123;</span><br><span class="line">                     // 交换</span><br><span class="line">                     this.swap(j, j+1)</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.selectionSort = function () &#123;</span><br><span class="line">         // 1.获取数组的长度</span><br><span class="line">         var length = this.array.length</span><br><span class="line"></span><br><span class="line">         // 2.外层循环: 从0位置开始取出数据, 直到length-2位置</span><br><span class="line">         for (var i = 0; i &lt; length - 1; i++) &#123;</span><br><span class="line">             // 3.内层循环: 从i+1位置开始, 和后面的内容比较</span><br><span class="line">             var min = i</span><br><span class="line">             for (var j = min + 1; j &lt; length; j++) &#123;</span><br><span class="line">                 // 4.如果i位置的数据大于j位置的数据, 记录最小的位置</span><br><span class="line">                 if (this.array[min] &gt; this.array[j]) &#123;</span><br><span class="line">                     min = j</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             this.swap(min, i)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.insertionSort = function () &#123;</span><br><span class="line">         // 1.获取数组的长度</span><br><span class="line">         var length = this.array.length</span><br><span class="line"></span><br><span class="line">         // 2.外层循环: 外层循环是从1位置开始, 依次遍历到最后</span><br><span class="line">         for (var i = 1; i &lt; length; i++) &#123;</span><br><span class="line">             // 3.记录选出的元素, 放在变量temp中</span><br><span class="line">             var j = i</span><br><span class="line">             var temp = this.array[i]</span><br><span class="line"></span><br><span class="line">             // 4.内层循环: 内层循环不确定循环的次数, 最好使用while循环</span><br><span class="line">             while (j &gt; 0 &amp;&amp; this.array[j-1] &gt; temp) &#123;</span><br><span class="line">                 this.array[j] = this.array[j-1]</span><br><span class="line">                 j--</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             // 5.将选出的j位置, 放入temp元素</span><br><span class="line">             this.array[j] = temp</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.shellSort = function () &#123;</span><br><span class="line">         // 1.获取数组的长度</span><br><span class="line">         var length = this.array.length</span><br><span class="line"></span><br><span class="line">         // 2.根据长度计算增量</span><br><span class="line">         var gap = Math.floor(length / 2)</span><br><span class="line"></span><br><span class="line">         // 3.增量不断变量小, 大于0就继续排序</span><br><span class="line">         while (gap &gt; 0) &#123;</span><br><span class="line">             // 4.实现插入排序</span><br><span class="line">             for (var i = gap; i &lt; length; i++) &#123;</span><br><span class="line">                 // 4.1.保存临时变量</span><br><span class="line">                 var j = i</span><br><span class="line">                 var temp = this.array[i]</span><br><span class="line"></span><br><span class="line">                 // 4.2.插入排序的内存循环</span><br><span class="line">                 while (j &gt; gap - 1 &amp;&amp; this.array[j - gap] &gt; temp) &#123;</span><br><span class="line">                     this.array[j] = this.array[j - gap]</span><br><span class="line">                     j -= gap</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 // 4.3.将选出的j位置设置为temp</span><br><span class="line">                 this.array[j] = temp</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             // 5.重新计算新的间隔</span><br><span class="line">             gap = Math.floor(gap / 2)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.swap = function (m, n) &#123;</span><br><span class="line">         var temp = this.array[m]</span><br><span class="line">         this.array[m] = this.array[n]</span><br><span class="line">         this.array[n] = temp</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // 选择枢纽</span><br><span class="line">     ArrayList.prototype.median = function (left, right) &#123;</span><br><span class="line">         // 1.求出中间的位置</span><br><span class="line">         var center = Math.floor((left + right) / 2)</span><br><span class="line"></span><br><span class="line">         // 2.判断并且进行交换</span><br><span class="line">         if (this.array[left] &gt; this.array[center]) &#123;</span><br><span class="line">             this.swap(left, center)</span><br><span class="line">         &#125;</span><br><span class="line">         if (this.array[center] &gt; this.array[right]) &#123;</span><br><span class="line">             this.swap(center, right)</span><br><span class="line">         &#125;</span><br><span class="line">         if (this.array[left] &gt; this.array[right]) &#123;</span><br><span class="line">             this.swap(left, right)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 3.巧妙的操作: 将center移动到right - 1的位置.</span><br><span class="line">         this.swap(center, right - 1)</span><br><span class="line"></span><br><span class="line">         // 4.返回pivot</span><br><span class="line">         return this.array[right - 1]</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // 快速排序实现</span><br><span class="line">     ArrayList.prototype.quickSort = function () &#123;</span><br><span class="line">         this.quickSortRec(0, this.array.length - 1)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ArrayList.prototype.quickSortRec = function (left, right) &#123;</span><br><span class="line">         // 0.递归结束条件</span><br><span class="line">         if (left &gt;= right) return</span><br><span class="line"></span><br><span class="line">         // 1.获取枢纽</span><br><span class="line">         var pivot = this.median(left, right)</span><br><span class="line"></span><br><span class="line">         // 2.开始进行交换</span><br><span class="line">         var i = left</span><br><span class="line">         var j = right - 1</span><br><span class="line">         while (true) &#123;</span><br><span class="line">             while (this.array[++i] &lt; pivot) &#123; &#125;</span><br><span class="line">             while (this.array[--j] &gt; pivot) &#123; &#125;</span><br><span class="line">             if (i &lt; j) &#123;</span><br><span class="line">                 this.swap(i, j)</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 break</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 3.将枢纽放在正确的位置</span><br><span class="line">         this.swap(i, right - 1)</span><br><span class="line"></span><br><span class="line">         // 4.递归调用左边</span><br><span class="line">         this.quickSortRec(left, i - 1)</span><br><span class="line">         this.quickSortRec(i + 1, right)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><!--more-->

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建HashTable构造函数</span><br><span class="line">function HashTable() &#123;</span><br><span class="line">    // 定义属性</span><br><span class="line">    this.storage = []</span><br><span class="line">    this.count = 0</span><br><span class="line">    this.limit = 8</span><br><span class="line"></span><br><span class="line">    // 定义相关方法</span><br><span class="line">    // 判断是否是质数</span><br><span class="line">    HashTable.prototype.isPrime = function (num) &#123;</span><br><span class="line">        var temp = parseInt(Math.sqrt(num))</span><br><span class="line">        // 2.循环判断</span><br><span class="line">        for (var i = 2; i &lt;= temp; i++) &#123;</span><br><span class="line">            if (num % i == 0) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取质数</span><br><span class="line">    HashTable.prototype.getPrime = function (num) &#123;</span><br><span class="line">        while (!isPrime(num)) &#123;</span><br><span class="line">            num++</span><br><span class="line">        &#125;</span><br><span class="line">        return num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 哈希函数</span><br><span class="line">    HashTable.prototype.hashFunc = function(str, max) &#123;</span><br><span class="line">        // 1.初始化hashCode的值</span><br><span class="line">        var hashCode = 0</span><br><span class="line"></span><br><span class="line">        // 2.霍纳算法, 来计算hashCode的数值</span><br><span class="line">        for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">            hashCode = 37 * hashCode + str.charCodeAt(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 3.取模运算</span><br><span class="line">        hashCode = hashCode % max</span><br><span class="line">        return hashCode</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 插入数据方法</span><br><span class="line">    HashTable.prototype.put = function (key, value) &#123;</span><br><span class="line">        // 1.获取key对应的index</span><br><span class="line">        var index = this.hashFunc(key, this.limit)</span><br><span class="line"></span><br><span class="line">        // 2.取出数组(也可以使用链表)</span><br><span class="line">        // 数组中放置数据的方式: [[ [k,v], [k,v], [k,v] ] , [ [k,v], [k,v] ]  [ [k,v] ] ]</span><br><span class="line">        var bucket = this.storage[index]</span><br><span class="line"></span><br><span class="line">        // 3.判断这个数组是否存在</span><br><span class="line">        if (bucket === undefined) &#123;</span><br><span class="line">            // 3.1创建桶</span><br><span class="line">            bucket = []</span><br><span class="line">            this.storage[index] = bucket</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 4.判断是新增还是修改原来的值.</span><br><span class="line">        var override = false</span><br><span class="line">        for (var i = 0; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            var tuple = bucket[i]</span><br><span class="line">            if (tuple[0] === key) &#123;</span><br><span class="line">                tuple[1] = value</span><br><span class="line">                override = true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5.如果是新增, 前一步没有覆盖</span><br><span class="line">        if (!override) &#123;</span><br><span class="line">            bucket.push([key, value])</span><br><span class="line">            this.count++</span><br><span class="line"></span><br><span class="line">            if (this.count &gt; this.limit * 0.75) &#123;</span><br><span class="line">                var primeNum = this.getPrime(this.limit * 2)</span><br><span class="line">                this.resize(primeNum)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取存放的数据</span><br><span class="line">    HashTable.prototype.get = function (key) &#123;</span><br><span class="line">        // 1.获取key对应的index</span><br><span class="line">        var index = this.hashFunc(key, this.limit)</span><br><span class="line"></span><br><span class="line">        // 2.获取对应的bucket</span><br><span class="line">        var bucket = this.storage[index]</span><br><span class="line"></span><br><span class="line">        // 3.如果bucket为null, 那么说明这个位置没有数据</span><br><span class="line">        if (bucket == null) &#123;</span><br><span class="line">            return null</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 4.有bucket, 判断是否有对应的key</span><br><span class="line">        for (var i = 0; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            var tuple = bucket[i]</span><br><span class="line">            if (tuple[0] === key) &#123;</span><br><span class="line">                return tuple[1]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5.没有找到, return null</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除数据</span><br><span class="line">    HashTable.prototype.remove = function (key) &#123;</span><br><span class="line">        // 1.获取key对应的index</span><br><span class="line">        var index = this.hashFunc(key, this.limit)</span><br><span class="line"></span><br><span class="line">        // 2.获取对应的bucket</span><br><span class="line">        var bucket = this.storage[index]</span><br><span class="line"></span><br><span class="line">        // 3.判断同是否为null, 为null则说明没有对应的数据</span><br><span class="line">        if (bucket == null) &#123;</span><br><span class="line">            return null</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 4.遍历bucket, 寻找对应的数据</span><br><span class="line">        for (var i = 0; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            var tuple = bucket[i]</span><br><span class="line">            if (tuple[0] === key) &#123;</span><br><span class="line">                bucket.splice(i, 1)</span><br><span class="line">                this.count--</span><br><span class="line"></span><br><span class="line">                // 缩小数组的容量</span><br><span class="line">                if (this.limit &gt; 7 &amp;&amp; this.count &lt; this.limit * 0.25) &#123;</span><br><span class="line">                    var primeNum = this.getPrime(Math.floor(this.limit / 2))</span><br><span class="line">                    this.resize(primeNum)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return tuple[1]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 5.来到该位置, 说明没有对应的数据, 那么返回null</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // isEmpty方法</span><br><span class="line">    HashTable.prototype.isEmpty = function () &#123;</span><br><span class="line">        return this.count == 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // size方法</span><br><span class="line">    HashTable.prototype.size = function () &#123;</span><br><span class="line">        return this.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 哈希表扩容</span><br><span class="line">    HashTable.prototype.resize = function (newLimit) &#123;</span><br><span class="line">        // 1.保存旧的数组内容</span><br><span class="line">        var oldStorage = this.storage</span><br><span class="line"></span><br><span class="line">        // 2.重置属性</span><br><span class="line">        this.limit = newLimit</span><br><span class="line">        this.count = 0</span><br><span class="line">        this.storage = []</span><br><span class="line"></span><br><span class="line">        // 3.遍历旧数组中的所有数据项, 并且重新插入到哈希表中</span><br><span class="line">        oldStorage.forEach(function (bucket) &#123;</span><br><span class="line">            // 1.bucket为null, 说明这里面没有数据</span><br><span class="line">            if (bucket == null) &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 2.bucket中有数据, 那么将里面的数据重新哈希化插入</span><br><span class="line">            for (var i = 0; i &lt; bucket.length; i++) &#123;</span><br><span class="line">                var tuple = bucket[i]</span><br><span class="line">                this.put(tuple[0], tuple[1])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).bind(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器的缓存机制</title>
    <url>/2019/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><span id="more"></span>

<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><ol>
<li>强制缓存优先于协商缓存进行，</li>
<li>若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，</li>
<li>若不生效则进行协商缓存(Last-Modified / If-Modified-Since 和 Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存</li>
<li>若协商缓存失效，那么代表该请求的缓存失效，返回 200，重新返回资源和缓存标识，再存入浏览器缓存中；</li>
<li>生效则返回 304，继续使用缓存</li>
</ol>
<h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><pre><code>强缓存：不会向服务器发送请求，直接从缓存中读取资源，可以通过HTTP Header实现：Expires
和Cache-Control。
+ Expires：缓存过期时间，用来指定资源到期的时间，是服务端的具体的时间点，结合Last-modified
使用，Expires是HTTP/1.0的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。

+ Cache-Control(http/1.1)：和多个指令(private、no-store、no-cache)配合使用，实现资源缓存。

+ Expires和Cache-Control同时存在，Cache-Control优先级高于Expires。
</code></pre>
<h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><pre><code>协商缓存就是强缓存失效后，浏览器携带缓存表示向服务器发起请求，由服务器根据缓存表示决定
是否使用缓存的过程，主要有以下两种情况：
+ 协商缓存生效，返回304和Not Modified

+ 协商缓存失效，返回200和请求结果。

+ 协商缓存可以通过设置两种HTTP Header实现：Last-Modified和ETag。

+ ETag是服务器响应请求时，返回当前资源文件的一个唯一标识（有服务器生成），只要资源有变化
，ETag就会重新生成。
</code></pre>
<h2 id="http-缓存？"><a href="#http-缓存？" class="headerlink" title="http 缓存？"></a>http 缓存？</h2><ul>
<li><p>强制缓存</p>
<ul>
<li><img src="/images/md_img/fourceCache.png" alt="强制缓存"></li>
<li>强制缓存过期后会去服务端重新请求</li>
</ul>
</li>
<li><p>协商缓存</p>
<ul>
<li>服务端缓存策略</li>
<li>服务端判断客户端资源，是否和服务端资源一样</li>
<li>一致则返回 304，否则返回 200 和最新的资源</li>
<li>在 Response Headers 中，有两种：<ul>
<li>Last-Modified 资源的最后修改时间<ul>
<li><img src="/images/md_img/last_modified.png" alt="last_modified"></li>
</ul>
</li>
<li>Etag 资源的唯一标识<ul>
<li><img src="/images/md_img/etag.png" alt="etag"></li>
</ul>
</li>
</ul>
</li>
<li><img src="/images/md_img/negotiationCache.png" alt="协商缓存"></li>
<li>Last-Modified 和 Etag<ul>
<li>会优先使用 Etag</li>
<li>Last-Modified 只能精确到秒级</li>
<li>如果资源被重复生成，而内容不变，则 Etag 更精确</li>
</ul>
</li>
</ul>
</li>
<li><p>综述</p>
<ul>
<li><img src="/images/md_img/http%E7%BC%93%E5%AD%98.png" alt="http缓存"></li>
</ul>
</li>
</ul>
<h2 id="刷新操作对缓存的影响？"><a href="#刷新操作对缓存的影响？" class="headerlink" title="刷新操作对缓存的影响？"></a>刷新操作对缓存的影响？</h2><ul>
<li>正常操作：地址输入 url，跳转链接，前进后退等<ul>
<li>强制缓存有效，协商缓存有效</li>
</ul>
</li>
<li>手动刷新：F5，点击刷新按钮，右击菜单刷新<ul>
<li>强制缓存失效，协商缓存有效</li>
</ul>
</li>
<li>强制刷新：ctrl + F5<ul>
<li>强制缓存失效，协商缓存失效</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>获取唯一id的三种方法</title>
    <url>/2022/01/04/%E8%8E%B7%E5%8F%96%E5%94%AF%E4%B8%80id%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const UUID = (len = 32) =&gt; &#123;</span><br><span class="line">  return &quot;xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx&quot;</span><br><span class="line">    .replace(/[xy]/g, function replace(c) &#123;</span><br><span class="line">      /* eslint-disable no-bitwise */</span><br><span class="line">      const r = (Math.random() * 16) | 0;</span><br><span class="line">      const v = c === &quot;x&quot; ? r : (r &amp; 0x3) | 0x8;</span><br><span class="line"></span><br><span class="line">      return v.toString(16);</span><br><span class="line">    &#125;)</span><br><span class="line">    .substring(0, len);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const nanoid = (t = 21) =&gt; &#123;</span><br><span class="line">  let e = &quot;&quot;,</span><br><span class="line">    r = crypto.getRandomValues(new Uint8Array(t));</span><br><span class="line">  for (; t--; ) &#123;</span><br><span class="line">    let n = 63 &amp; r[t];</span><br><span class="line">    e +=</span><br><span class="line">      n &lt; 36</span><br><span class="line">        ? n.toString(36)</span><br><span class="line">        : n &lt; 62</span><br><span class="line">        ? (n - 26).toString(36).toUpperCase()</span><br><span class="line">        : n &lt; 63</span><br><span class="line">        ? &quot;_&quot;</span><br><span class="line">        : &quot;-&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const id = URL.createObjectURL(new Blob()).substr(-36)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>面试知识css篇</title>
    <url>/2019/09/06/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86css%E7%AF%87/</url>
    <content><![CDATA[<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><span id="more"></span>

<ul>
<li>标准盒模型：width 和 height 属性只包含 content 内容区</li>
<li>IE 盒模型：width 和 height 包含了 border、padding 和 content</li>
</ul>
<h2 id="flex-常用属性，grid-布局"><a href="#flex-常用属性，grid-布局" class="headerlink" title="flex 常用属性，grid 布局"></a>flex 常用属性，grid 布局</h2><p>flex 属性：<br>1.flex-direction 属性，决定主轴方向<br>2.flex-wrap 属性，控制换行<br>3.flex-flow 属性，flex-direction 和 flex-wrap 的简写形式，默认值 flex-flow: row nowrap;<br>4.justify-content 属性，项目主轴上的对齐方式<br>5.align-item 属性，项目在交叉轴上的对齐方式<br>6.align-content 属性，多个轴线的时候在元素交叉轴的对齐方式，只有一根轴线时不起作用<br>flex（子元素的属性）：<br>1.order 属性,定义项目的排列顺序，数值越小，排列越靠前，默认为 0.<br>2.align-self 属性，允许单个项目与其他项目不一样的对齐方式，会覆盖 align-items 属性.<br>3.flex 属性，flex-grow、flex-shrink、flex-basis 简写，默认为 0 1 auto<br>auto(1 1 auto) none(0 0 auto)<br>4.flex-grow 属性，定义项目的放大比例，默认为 0，即如果存在剩余空间也不放大，1 等分，一个项目为 2，其他为 1，则前者占据空间是其他的两倍。<br>5.flex-shrink 属性，定义项目的缩小比例，默认为 1，空间不足则缩小，如果所有项目都为 1，则等比例缩小，如果有的项目为 0，则空间不足时为 0 的不缩小，负值无效<br>6.flex-basis 属性，项目占据的固定空间</p>
<h2 id="calc-support-media-各自的含义及用法？"><a href="#calc-support-media-各自的含义及用法？" class="headerlink" title="calc, support, media 各自的含义及用法？"></a>calc, support, media 各自的含义及用法？</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@support</span> 主要用于检测浏览器是否支持css的某个属性，相当于条件语句，支持的话写一套样式，</span><br><span class="line">不支持写另外一套样式，例如:</span><br><span class="line"></span><br><span class="line">@supports (<span class="attribute">display</span>: <span class="attribute">grid</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@supports</span> <span class="keyword">not</span> (<span class="attribute">display</span>: <span class="attribute">grid</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">calc(): 用于动态计算值，支持 + - * / 运算</span><br><span class="line">  @media查询：可以针对不同的媒体类型定义不同的样式;</span><br></pre></td></tr></table></figure>

<h2 id="img-标签-title-和-alt-属性"><a href="#img-标签-title-和-alt-属性" class="headerlink" title="img 标签 title 和 alt 属性"></a>img 标签 title 和 alt 属性</h2><ul>
<li>alt: 图片加载失败时，显示在网页上的替代文字</li>
<li>title: 鼠标放在图片上的提示文字</li>
</ul>
<h2 id="SVG-和-Canvas-的区别？"><a href="#SVG-和-Canvas-的区别？" class="headerlink" title="SVG 和 Canvas 的区别？"></a>SVG 和 Canvas 的区别？</h2><ol>
<li>svg:表示以 XML 格式定义图像的可伸缩矢量图形。</li>
<li>canvas：通过 js 来绘制 2D 图形</li>
<li>Canvas 不支持事件处理器，SVG 支持事件处理器</li>
<li>由于 Canvas 和 SVG 的工作机制不同，Canvas 是逐像素进行渲染的，一旦图形绘制完成，就不会继续被浏览器关注。而 SVG 是通过 DOM 操作来显示的。SVG 适合带有大型渲染区域的应用程序，比如地图。而 Canvas 适合有许多对象要被频繁重绘的图形密集型游戏。</li>
<li>绘制的图片格式不同，canvas 位图，svg 矢量图</li>
<li>svg 通过标签 fill 属性可以调整颜色</li>
</ol>
<h2 id="JS-如何设置获取盒子模型对应的宽和高？"><a href="#JS-如何设置获取盒子模型对应的宽和高？" class="headerlink" title="JS 如何设置获取盒子模型对应的宽和高？"></a>JS 如何设置获取盒子模型对应的宽和高？</h2><ul>
<li><p>dom.style.width/height</p>
</li>
<li><p>dom.currentStyle.width/height (ie 支持)</p>
</li>
<li><p>window.getComputedStyle(dom).width/height</p>
</li>
<li><p>dom.getBoundingClientRect().width/height</p>
</li>
</ul>
<h2 id="CSS-权重（256-进制）"><a href="#CSS-权重（256-进制）" class="headerlink" title="CSS 权重（256 进制）"></a>CSS 权重（256 进制）</h2><pre><code>1. ！import  权值：infinite 无穷大

2. 内联样式， 权值1000

3. ID选择器， 权值： 100

4. 类、伪类、属性选择器， 权值： 10

5.标签、伪元素选择器， 权值： 1

6.通配符选择器 *，子选择器 &gt;,相邻选择器 +，权值： 0

权值相等，后来居上
</code></pre>
<h2 id="html5-的新特性"><a href="#html5-的新特性" class="headerlink" title="html5 的新特性"></a>html5 的新特性</h2><pre><code>1. 添加了article、aside、audio、video、footer、header、nav、section标签
2. 添加了canvas画布和svg渲染矢量图片
3. 添加了一些语义化的标签 header、footer、main、section...
4. input的type值新添加了很多属性（email，search，color，number...）
5. 添加了地理位置定位功能 Geolocation API
6. 添加了web Storage存储功能，localStorage和sessionStorage
7. 使用html5，通过创建cache manifest文件，可以轻松地创建web应用的离线版本
8. web worker创造多线程环境，是运行在后台的javaScript。
9。 服务端推送（EventSource用于接受服务端发送事件通知）
</code></pre>
<h2 id="CSS3-新添加的特性？"><a href="#CSS3-新添加的特性？" class="headerlink" title="CSS3 新添加的特性？"></a>CSS3 新添加的特性？</h2><pre><code>1. 媒体查询
2. transform，transition，translate，scale，rotate等相关动画效果
3. box-shadow，text-shadow等特效
4. CSS3 @font-face规则，可以引入任意字体
5. CSS3 @keyframes规则，创建动画(配合animation使用)
6. 2D、3D转化
7. 添加了border-radius、border-image、column-count、resize、box-sizing
、outline-offset等属性
</code></pre>
<h2 id="样式导入方式及优先级？"><a href="#样式导入方式及优先级？" class="headerlink" title="样式导入方式及优先级？"></a>样式导入方式及优先级？</h2><ul>
<li><p>引入方式</p>
<ul>
<li>行内样式</li>
<li>内联式</li>
<li>外链式</li>
<li>导入式: @import url(reset.css)</li>
</ul>
</li>
<li><p>各种方式的优先级</p>
<ul>
<li>行内样式 &gt; 外链式 &gt; 内联式 &gt; @import 导入式</li>
</ul>
</li>
<li><p>选择器优先原则：!important &gt; 行间样式 &gt; ID 选择器 &gt;class 选择器｜伪类选择器｜属性选择器 &gt;元素选择器｜伪元素选择器 &gt; 通配符选择器｜子选择器选择器｜相邻兄弟选择器</p>
</li>
</ul>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC(block formatting context)翻译为“块级格式化上下文”，它会生成独立的渲染区域<br>(不影响外面的元素，同时也不受外部元素的影响)，它有一下规则：</p>
<ul>
<li>内部的 box 会在垂直方向上一个接一个的放置。</li>
<li>内部 box 在垂直方向上的距离由 margin 决定，同属一个 BFC 内的相邻 box 会发生 margin 重叠。</li>
<li>BFC 的区域不会与 float box 发生重叠。</li>
<li>计算 BFC 的高度时，浮动元素也参与计算(清除浮动)</li>
</ul>
<p>触发 BFC 的条件：</p>
<ul>
<li>float 属性不为 none</li>
<li>position 为 absolute 或者 fixed</li>
<li>display 为 inline-block、table-cell、table-caption、flex、inline-flex</li>
<li>overflow 不为 visible</li>
</ul>
<h2 id="有哪些常见的-meta-标签？"><a href="#有哪些常见的-meta-标签？" class="headerlink" title="有哪些常见的 meta 标签？"></a>有哪些常见的 meta 标签？</h2><!--more-->

<ul>
<li><p>指定文档编码</p>
<ul>
<li><code>&lt;meta charset = &quot;UTF-8&quot;&gt;</code></li>
</ul>
</li>
<li><p>name 属性</p>
<ul>
<li><p><code>1.&lt;meta name=”viewport” content=”width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”&gt;：在移动设备浏览器上，禁用缩放（zooming） 功能，用户只能滚动屏幕。</code></p>
</li>
<li><p><code>2.&lt;meta name=”description” content=””&gt;：告诉搜索引擎，当前页面的主要内容是xxx。</code></p>
</li>
<li><p><code>3.&lt;meta name=”keywords” content=””&gt;：告诉搜索引擎，当前页面的关键字。</code></p>
</li>
<li><p><code>4.&lt;meta name=”author” content=””&gt;：告诉搜索引擎，标注网站作者是谁。</code></p>
</li>
<li><p><code>5.&lt;meta name=”copyright” content=””&gt;：标注网站的版权信息。</code></p>
</li>
</ul>
</li>
<li><p>http-equiv 属性(http 协议的响应头报文)</p>
<ul>
<li><p><code>1.&lt;meta http-equiv=”Set-Cookie” content=”cookievalue=xxx; expires=Friday,12-Jan-2001 18:18:18 GMT; path=/”&gt;:如果网页过期， 那么存盘的cookie将被删除。必须使用GMT的时间格式。</code></p>
</li>
<li><p><code>2.&lt;meta http-equiv=&#39;expires&#39; content=&#39;时间&#39; &gt;：用于设定网页的到期时间。 一旦网页过期，必须到服务器上重新传输。</code></p>
</li>
<li><p><code>3.&lt;meta http-equiv=”Refresh” content=”5;URL”&gt;：告诉浏览器在 【数字】秒后跳转到【一个网址】</code></p>
</li>
<li><p><code>4.&lt;meta http-equiv=”content-Type” content=”text/html; charset=utf-8″&gt;： 设定页面使用的字符集。</code></p>
</li>
</ul>
<p>-<code>5.&lt;meta http-equiv=”Pragma” content=”no-cache”&gt;：禁止浏览器从本地 计算机的缓存中访问页面内容。访问者将无法脱机浏览。</code></p>
<ul>
<li><p><code>6.&lt;meta http-equiv=”Window-target” content=”_top”&gt;：用来防止 别人在iframe(框架)里调用自己的页面，这也算是一个非常实用的属性。</code></p>
</li>
<li><p><code>7.&lt;meta http-equiv=&#39;X-UA-Compatible&#39; content=&#39;IE=edge,chrome=1&#39;&gt; :强制浏览器按照特定的版本标准进行渲染。但不支持IE7及以下版本。如果是 ie浏览器就用最新的ie渲染，如果是双核浏览器就用chrome内核。</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="一、为什么会有白屏和-FOUC-呢？"><a href="#一、为什么会有白屏和-FOUC-呢？" class="headerlink" title="一、为什么会有白屏和 FOUC 呢？"></a>一、为什么会有白屏和 FOUC 呢？</h2><blockquote>
<p>浏览器再渲染的时候没有请求到或请求时间过长造成的，那么浏览器怎么应对的呢？</p>
<ul>
<li>白屏：CSS 全部载入解析完成后渲染展示页面，如果没有加载完，就会出现白屏。</li>
<li>FOUC(Flash of Unstyled Content)无样式内容闪烁：用户定义样式表加载之前浏览器<br>使用默认样式显示文档，用户样式表加载渲染之后，再重新显示文档，造成页面闪烁。</li>
<li>使用 link 标签将样式表放在顶部<head>标签中，防止白屏问题出现。</li>
<li>将 JS 放在<body>标签底部，原因如下：<ul>
<li>脚本会阻塞后面内容的呈现</li>
<li>脚本会阻塞其后组件的下载</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="什么是-DOCTYPE-及其作用？"><a href="#什么是-DOCTYPE-及其作用？" class="headerlink" title="什么是 DOCTYPE 及其作用？"></a>什么是 DOCTYPE 及其作用？</h2><ul>
<li><p>DOCTYPE 是 document type（文档类型）的缩写。</p>
<!--more--></li>
<li><p>写法：<!DOCTYPE html>(声明了浏览器就会进入标准模式，按照 W3C 标准渲染页面)</p>
</li>
<li><p>DOCTYPE 的作用：</p>
<ul>
<li>DOCTYPE 是用来声明文档类型和 DTD 规范的，校验文件和代码的合法性。</li>
<li>告诉浏览器通过哪种规范（文档类型，DTD）来解析文档。</li>
</ul>
</li>
<li><p>DTD（document type definition）文档类型定义是一系列的语法规则，用来定义 XML<br>或 HTML 的文件类型。浏览器会根据它来判断文档类型，决定使用哪种协议来解析，以及切换<br>浏览器的模式。</p>
</li>
<li><p>浏览器模式</p>
<p>为了能够很好的显示满足标准的页面，又能最大程度兼容不合法的 HTML，浏览器厂商会提供两种<br>浏览器模式。</p>
<ul>
<li>标准模式：根据 W3C 标准来渲染页面。</li>
<li>混杂模式（兼容模式、怪异模式）：浏览器采用更加宽松、向后兼容的方式来渲染页面。</li>
</ul>
</li>
</ul>
<h2 id="CSS-清除浮动"><a href="#CSS-清除浮动" class="headerlink" title="CSS-清除浮动"></a>CSS-清除浮动</h2><!--more-->

<p><a href="https://segmentfault.com/a/1190000004865198">原文链接</a></p>
<h2 id="什么是-CSS-清除浮动"><a href="#什么是-CSS-清除浮动" class="headerlink" title="什么是 CSS 清除浮动?"></a>什么是 CSS 清除浮动?</h2><blockquote>
<p>在非 IE 浏览器（如 Firefox）下，当容器的高度为 auto，且容器的内容中有浮动（float 为 left 或 right）的元素，在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的现象。这个现象叫浮动溢出，为了防止这个现象的出现而进行的 CSS 处理，就叫 CSS 清除浮动。</p>
</blockquote>
<h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><ul>
<li>方法一：使用带 clear 属性的空元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在浮动元素后使用一个空元素如&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;，并在CSS中赋予</span><br><span class="line">.clear&#123;clear:both;&#125;属性即可清理浮动。亦可使用&lt;br class=&quot;clear&quot; /&gt;或&lt;hr class=&quot;clear&quot; /&gt;</span><br><span class="line">来进行清理。</span><br><span class="line">优点：简单，代码少，浏览器兼容好。</span><br><span class="line">缺点：需要添加大量的无语义的html元素，代码不够优雅，后期不容易维护。</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：使用 CSS 的 overflow 属性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给浮动元素的容器添加overflow:hidden;或overflow:auto;可以清除浮动。</span><br></pre></td></tr></table></figure>

<ul>
<li>方法三：给浮动的元素的容器添加浮动（不太推荐）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给浮动元素的容器也添加上浮动属性即可清除内部浮动，但是这样会使其整体浮动，影响布局，</span><br><span class="line">不推荐使用。</span><br></pre></td></tr></table></figure>

<ul>
<li>方法四：使用邻接元素处理</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么都不做，给浮动元素后面的元素添加clear:both属性。</span><br></pre></td></tr></table></figure>

<ul>
<li>方法五：使用 CSS 的：after 伪元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给浮动元素的容器添加一个clearfix的class，然后给这个class添加一个:after伪元素实现</span><br><span class="line">元素末尾添加一个看不见的块元素（Block element）清理浮动。</span><br><span class="line"></span><br><span class="line">.clearfix::after&#123;</span><br><span class="line">  content: &quot;020&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  height: 0;</span><br><span class="line">  clear: both;</span><br><span class="line">  visibility: hidden;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="getomputedstyle-和-style-的区别？"><a href="#getomputedstyle-和-style-的区别？" class="headerlink" title="getomputedstyle 和 style 的区别？"></a>getomputedstyle 和 style 的区别？</h2><ul>
<li><p>getComputedStyle 方法是只读的，只能获取样式，不能设置；而 element.style 能读写。</p>
</li>
<li><p>getComputedStyle 方法获取的是最终应用在元素上的所有 Css 属性样式(即使没有 css 代码)，<br>而 element.style 只能获取元素 style 属性中的 css 样式。</p>
</li>
<li><p>getComputedStyle 可以获取伪元素的样式。</p>
</li>
<li><p>兼容性：getComputedStyle 方法在 IE6~IE8 是不支持的。</p>
</li>
</ul>
<h2 id="为什么要语义化？"><a href="#为什么要语义化？" class="headerlink" title="为什么要语义化？"></a>为什么要语义化？</h2><p>根据内容的结构化，选择合适的标签，便于开发者阅读和写出更优雅的代码的同时利于 SEO 的优化。</p>
<ul>
<li>为了在没有 CSS 的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；</li>
<li>用户体验：例如 title、alt 用于解释名词或解释图片信息、label 标签的活用；</li>
<li>有利于 SEO ：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息： 爬虫依赖于标签来确定上下文和各个关键字的权重；</li>
<li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页</li>
<li>便于团队开发和维护，语义化更具可读性，是下一步网页的重要动向，遵循 W3C 标准的团队都遵循这个标准，可以减少差异化。</li>
</ul>
<h2 id="在-less-中如何将-px-转换为-vw？"><a href="#在-less-中如何将-px-转换为-vw？" class="headerlink" title="在 less 中如何将 px 转换为 vw？"></a>在 less 中如何将 px 转换为 vw？</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pxToVW</span> (<span class="keyword">@px</span>, @<span class="attribute">attr</span>: <span class="attribute">width</span>) &#123;</span><br><span class="line">  <span class="keyword">@vw</span>: (@px / <span class="number">750</span>) * <span class="number">100</span>;</span><br><span class="line">  @&#123;attr&#125;:~<span class="string">&quot;@&#123;vw&#125;vw&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">	<span class="selector-class">.pxToVW</span>(<span class="number">300</span>,<span class="attribute">width</span>)</span><br><span class="line">	<span class="selector-class">.pxToVW</span>(<span class="number">32</span>,<span class="attribute">font-size</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里是指，设计图是按照<span class="number">750px</span>的宽度进行设计的,</span><br><span class="line">title 中所有的值都是直接取的设计图的值，通过函数进行统一换算</span><br></pre></td></tr></table></figure>

<h2 id="px-em-rem-vw-vh有什么区别？"><a href="#px-em-rem-vw-vh有什么区别？" class="headerlink" title="px % em rem vw/vh有什么区别？"></a><em>px % em rem vw/vh</em>有什么区别？</h2><ul>
<li><p>px 基本单位，是绝对单位（其他的都是相对单位）</p>
</li>
<li><p>% 是相对于父元素的宽度比例</p>
</li>
<li><p>em 相对于当前元素或与之最近的设置了 font-size 的父元素的 font-size</p>
</li>
<li><p>rem 相对于根元素的 font-size</p>
</li>
<li><p>vw 屏幕宽度的 1%</p>
</li>
<li><p>vh 屏幕高度的 1%</p>
</li>
<li><p>vmin 取 vw、vh 两者中的最小值</p>
</li>
<li><p>vmax 取 vw、vh 两者中的最大值</p>
</li>
</ul>
<h2 id="offsetHeight、scrollHeight、clientHeight-区别？"><a href="#offsetHeight、scrollHeight、clientHeight-区别？" class="headerlink" title="offsetHeight、scrollHeight、clientHeight 区别？"></a>offsetHeight、scrollHeight、clientHeight 区别？</h2><ul>
<li><p>offsetHeight、offsetWidth: border + padding + content</p>
</li>
<li><p>clientHeight、clientWidth: padding + content</p>
</li>
<li><p>scrollHeight、scrollWidth: padding + 实际内容尺寸，包括溢出的不可见部分</p>
</li>
</ul>
<h2 id="HTMLCollection-和-NodeList-区别？"><a href="#HTMLCollection-和-NodeList-区别？" class="headerlink" title="HTMLCollection 和 NodeList 区别？"></a>HTMLCollection 和 NodeList 区别？</h2><ul>
<li><p>Node 和 Element</p>
<ol>
<li>DOM 是一棵树，所有节点都是 Node</li>
<li>Node 是 Element 的基类</li>
<li>Element 是其他 HTML 元素的基类，如 HTMLDivElement</li>
</ol>
</li>
<li><p>HTMLCollection 和 NodeList</p>
<ol>
<li>HTMLCollection 是 Element 的集合（elem.children）</li>
<li>NodeList 是 Node 集合（elem.childNodes）</li>
<li>HTMLCollection 不会包含 Text 和 Comment 节点，NodeList 则会包含</li>
</ol>
</li>
<li><p>HTMLCollection 和 NodeList 都不是数组，而是“累数组”</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(list);</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(list);</span><br><span class="line"><span class="keyword">const</span> arr3 = [...list];</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="如何理解-HTML-语义化？"><a href="#如何理解-HTML-语义化？" class="headerlink" title="如何理解 HTML 语义化？"></a>如何理解 HTML 语义化？</h2><ul>
<li>让人更容易读懂（增加代码可读性）</li>
<li>让搜索引擎更容易读懂（SEO）</li>
</ul>
<h2 id="块状元素-amp-内联元素？"><a href="#块状元素-amp-内联元素？" class="headerlink" title="块状元素 &amp; 内联元素？"></a>块状元素 &amp; 内联元素？</h2><ul>
<li>块级元素<ul>
<li>display: block/table;</li>
<li>div、h1、h2、table、ul、ol、p 等</li>
</ul>
</li>
<li>内联元素<ul>
<li>display: inline/inline-block;</li>
<li>span、img、input、button 等；</li>
</ul>
</li>
</ul>
<h2 id="如下代码，请问-div-的-offsetWidth-是多大？"><a href="#如下代码，请问-div-的-offsetWidth-是多大？" class="headerlink" title="如下代码，请问 div 的 offsetWidth 是多大？"></a>如下代码，请问 div 的 offsetWidth 是多大？</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>offsetWidth = (内容宽度 + 内边距 + 边框)，无外边距</li>
<li>答案： 100 + 10 + 1 * 2 = 122px</li>
<li>可以通过：box-sizing: border-box; 使得 offsetWidth=100</li>
</ul>
<h2 id="margin-纵向重叠问题"><a href="#margin-纵向重叠问题" class="headerlink" title="margin 纵向重叠问题"></a>margin 纵向重叠问题</h2><ul>
<li>如下代码，A 和 B 之间的距离是多少？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>B<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>相邻元素的 margin-top 和 margin-bottom 会发生重叠</li>
<li>空白内容 p 标签也会重叠</li>
<li>答案：15px</li>
</ul>
<h2 id="margin-负值问题"><a href="#margin-负值问题" class="headerlink" title="margin 负值问题"></a>margin 负值问题</h2><ul>
<li>margin-top 和 margin-left 负值，元素向上、向左移动</li>
<li>margin-right 负值，右侧元素左移，自身不受影响</li>
<li>margin-bottom 负值，下方元素上移，自身不受影响</li>
</ul>
<h2 id="BFC-理解与应用"><a href="#BFC-理解与应用" class="headerlink" title="BFC 理解与应用"></a>BFC 理解与应用</h2><ul>
<li>block format context，块级格式化上下文</li>
<li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li>
<li>形成 BFC 的常见条件<ul>
<li>float 不是 none</li>
<li>position 是 absolute 或 fixed</li>
<li>overflow 不是 visible(hidden、auto、scroll)</li>
<li>display 是 flex、inline-block 等</li>
</ul>
</li>
<li>常见应用：<ul>
<li>清除浮动</li>
<li>阻止 margin 重叠</li>
</ul>
</li>
</ul>
<h2 id="float-布局"><a href="#float-布局" class="headerlink" title="float 布局"></a>float 布局</h2><ul>
<li>实现圣杯布局和双飞翼布局<ul>
<li>目的<ul>
<li>三栏布局，中间一栏最先加载和渲染</li>
<li>两侧内容固定，中间内容随着宽度自适应</li>
<li>一般用于 PC 网页</li>
</ul>
</li>
<li>实现<ul>
<li>使用 float 布局</li>
<li>两侧使用 margin 负值，以便和中间内容横向重叠</li>
<li>防止中间内容被两侧覆盖，一个用 padding，一个用 margin</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="css-定位"><a href="#css-定位" class="headerlink" title="css 定位"></a>css 定位</h2><ul>
<li><p>absolute 和 relative 定位</p>
<ul>
<li>relative 依据自身定位</li>
<li>absolute 依据最近一层的定位元素定位<ul>
<li>定位元素：absolute、relative、fied、body</li>
</ul>
</li>
</ul>
</li>
<li><p>居中对齐</p>
<ul>
<li><p>水平居中</p>
<ul>
<li>inline 元素：text-align: center</li>
<li>block 元素：margin: auto</li>
<li>absolute 元素：left:50% + margin-left 负值</li>
</ul>
</li>
<li><p>垂直居中</p>
<ul>
<li>inline 元素：line-height 的值等于 height 的值</li>
<li>absolute 元素：top: 50% + margin-top 负值</li>
<li>absolute 元素：transform(-50%, -50%)</li>
<li>absolute 元素：top,left,bottom,right=0 + margin: auto</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="css-图文样式"><a href="#css-图文样式" class="headerlink" title="css-图文样式"></a>css-图文样式</h2><ul>
<li><p>line-height 如何继承</p>
<ul>
<li>如下代码，p 标签的行高是多少？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">200%</span>; <span class="comment">/* 40px */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/* 16 * 1.5 = 24 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">30px</span>; <span class="comment">/* 30px */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>答案： 40px</li>
</ul>
</li>
<li><p>具体数值，如 30px，则继承该值</p>
</li>
<li><p>写比例，如 2/1.5，则继承当前元素 font-size 的比例</p>
</li>
<li><p>写百分比，如 200%，则继承计算出来的值</p>
</li>
</ul>
<h2 id="css-响应式"><a href="#css-响应式" class="headerlink" title="css-响应式"></a>css-响应式</h2><ul>
<li><p>常见长度单位</p>
<ul>
<li>px，绝对长度单位</li>
<li>em，相对长度单位，相对于父元素</li>
<li>rem，相对长度单位，相对于根元素，常用与响应式布局</li>
</ul>
</li>
<li><p>响应式布局常用方案</p>
<ul>
<li>media-query，根据不同屏幕宽度设置根元素 font-size</li>
<li>rem，基于根元素的相对单位</li>
<li>rem 的弊端：“阶梯”性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">374px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">86px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> <span class="keyword">only</span> scrren <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">413px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@media</span> <span class="keyword">only</span> scrren <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0.16rem</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1rem</span>; <span class="comment">/* 100px */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>网页视口尺寸</p>
<ul>
<li>window.screen.height // 屏幕高度</li>
<li>window.innerHeight // 网页视口高度<ul>
<li>vh 网页视口高度的 1/100</li>
<li>vw 网页视口宽度的 1/100</li>
<li>vmax 取两者最大值；vmin 取两者最小值</li>
</ul>
</li>
<li>document.body.clientHeight // body 高度</li>
</ul>
</li>
</ul>
<h2 id="inline、block-和-inline-block-的区别？"><a href="#inline、block-和-inline-block-的区别？" class="headerlink" title="inline、block 和 inline-block 的区别？"></a>inline、block 和 inline-block 的区别？</h2><ul>
<li><p>block 块级元素</p>
<ul>
<li>单独占一行，宽度自动填充父元素宽度</li>
<li>可以设置 width、height</li>
<li>可以设置 padding、margin</li>
<li>块级元素可以包含行内元素和其他块级元素</li>
</ul>
</li>
<li><p>inline 内联元素（行内元素）</p>
<ul>
<li>不会单独占一行，多个元素并排一行，宽度随内容变化</li>
<li>设置 width、height 无效</li>
<li>可以设置水平方向的 padding、margin，但是垂直方向设置无效（如 padding-top）无效</li>
<li>行内元素只能包含数据和其他行内元素</li>
</ul>
</li>
<li><p>inline-block 行内块元素</p>
<ul>
<li>不会单独占一行</li>
<li>可以设置 width、height</li>
<li>可以设置 padding、margin，垂直方向也可以设置生效</li>
</ul>
</li>
</ul>
<h2 id="css-穿参给-js-的方法"><a href="#css-穿参给-js-的方法" class="headerlink" title="css 穿参给 js 的方法"></a>css 穿参给 js 的方法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">any-hover</span>: none) &#123;</span><br><span class="line">    <span class="selector-tag">body</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;hoverNone&#x27;</span>;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// js获取</span><br><span class="line">const hover = getComputedStyle(document<span class="selector-class">.body</span>, &#x27;<span class="selector-pseudo">::before</span>&#x27;)<span class="selector-class">.content</span>;</span><br><span class="line">hover就是<span class="attribute">content</span>对应的值</span><br></pre></td></tr></table></figure>

<h2 id="判断元素是否在可视窗口内"><a href="#判断元素是否在可视窗口内" class="headerlink" title="判断元素是否在可视窗口内"></a>判断元素是否在可视窗口内</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一：offsetTop - scrollTop &lt;= 视口高度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isInViewPortOfOne</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取可视窗口的高度。兼容所有浏览器</span></span><br><span class="line">  <span class="keyword">const</span> screenHeight =</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerHeight</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line">  <span class="comment">// 获取滚动条滚动的高度</span></span><br><span class="line">  <span class="keyword">const</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="comment">// 获取元素偏移的高度。就是距离可视窗口的偏移量。</span></span><br><span class="line">  <span class="keyword">const</span> offsetTop = element.<span class="property">offsetTop</span>;</span><br><span class="line">  <span class="comment">// 加100是为了提前加载</span></span><br><span class="line">  <span class="keyword">return</span> offsetTop - scrollTop &lt;= screenHeight + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法二：getBoundingClientRect().top &lt;= 视口高度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isInViewPortOfTwo</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> screenHeight =</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerHeight</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line">  <span class="keyword">return</span> el.<span class="title function_">getBoundingClientRect</span>()?.<span class="property">top</span> &lt;= screenHeight + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法三：IntersectionObserver</span></span><br><span class="line"><span class="comment">// io 为 IntersectionObserver对象 - 由IntersectionObserver()构造器创建</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// entries 为 IntersectionObserverEntry对象数组</span></span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// item 为 IntersectionObserverEntry对像</span></span><br><span class="line">    <span class="comment">// isIntersecting是一个Boolean值，判断目标元素当前是否可见</span></span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="comment">// div 可见时 进行相关操作</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">target</span>.<span class="property">innerText</span>);</span><br><span class="line">      io.<span class="title function_">unobserve</span>(item.<span class="property">target</span>); <span class="comment">//停止监听该div DOM节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;); <span class="comment">// 不传options参数，默认根元素为浏览器视口</span></span><br><span class="line"><span class="keyword">const</span> divArr = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>)];</span><br><span class="line">divArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">div</span>) =&gt;</span> io.<span class="title function_">observe</span>(div)); <span class="comment">// 遍历监听所有div DOM节点</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>面试手写篇</title>
    <url>/2022/03/31/%E9%9D%A2%E8%AF%95%E6%89%8B%E5%86%99%E7%AF%87/</url>
    <content><![CDATA[<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2>  <span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(arr[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(arrp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用filter + indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用Es6中的Set数据结构(扩展运算符)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.form 方法将set结构转换为数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br></pre></td></tr></table></figure>

<h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = arr.flat(Infinity)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = JSON.parse(JSON.stringify(arr).replace(/\[|\]/g,&quot;&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> accu.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(curr) ? <span class="title function_">flatArr</span>(curr) : curr);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatArr</span>(arr));</span><br></pre></td></tr></table></figure>

<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只考虑对象类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign()</span></span><br><span class="line"><span class="comment">// arr.slice(0)</span></span><br><span class="line"><span class="comment">// arr.concat()</span></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只考虑普通对象属性，不考虑内置对象和函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] =</span><br><span class="line">        <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">deepClone</span>(obj[key]) : obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse(JSON.stringify())</span></span><br><span class="line"><span class="comment">// lodash: _.cloneDeep()</span></span><br></pre></td></tr></table></figure>

<h2 id="实现一个-compose-组合-函数"><a href="#实现一个-compose-组合-函数" class="headerlink" title="实现一个 compose(组合)函数"></a>实现一个 compose(组合)函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">    <span class="keyword">if</span>(fn.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> fn[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">accu</span>(<span class="title function_">curr</span>(...args)) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">compose</span>(fn1, fn2, fn3, fn4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">res</span>(<span class="number">5</span>)); <span class="comment">// 5+4+3+2+1=15</span></span><br></pre></td></tr></table></figure>

<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><blockquote>
<p>函数柯里化就是让我们传递参数的方式不在局限于一次传完，可以分步，所以柯里化的核心就在于等到接收到的参数等于函数参数时再调用函数把所有参数传递进去</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 需要柯里化的函数fn，也可以支持初始参数的传入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//参数缓存在args里面,合并上次参数和本次参数</span></span><br><span class="line">    args = [...args, ...<span class="variable language_">arguments</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断参数个数，不够继续递归</span></span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &lt; fn.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//参数足够返回函数执行结果</span></span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">curry</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">assign</span> = <span class="keyword">function</span> (<span class="params">target, ...source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (target === <span class="literal">null</span> || target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Cannot convert undefined or null to object&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Object</span>(target);</span><br><span class="line"></span><br><span class="line">  source.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">          result[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer=<span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索联想，用户在不断输入时，用防抖来节约请求资源</span></span><br><span class="line"><span class="comment">// window触发resize的时候</span></span><br></pre></td></tr></table></figure>

<h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">      previous = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标不断点击触发，可以使其单位时间内只触发一次</span></span><br><span class="line"><span class="comment">// 监听滚动事件</span></span><br><span class="line"><span class="comment">// 防止高频点击提交</span></span><br></pre></td></tr></table></figure>

<h2 id="如何把字符串中大小写取反"><a href="#如何把字符串中大小写取反" class="headerlink" title="如何把字符串中大小写取反"></a>如何把字符串中大小写取反</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;LiBoShi&#x27;</span>;</span><br><span class="line"></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> content.<span class="title function_">toUpperCase</span>() === content</span><br><span class="line">    ? content.<span class="title function_">toLowerCase</span>()</span><br><span class="line">    : content.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf"><a href="#从-S-中查找-T-字符串，找到返回索引值，没有则返回-1，类似-indexOf" class="headerlink" title="从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf"></a>从 S 中查找 T 字符串，找到返回索引值，没有则返回-1，类似 indexOf</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">T</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="variable language_">this</span>.<span class="property">length</span> - T.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">substr</span>(i, T.<span class="property">length</span>) === T) &#123;</span><br><span class="line">      <span class="keyword">return</span> (index = i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myIndexOf</span> = myIndexOf;</span><br><span class="line"><span class="comment">// 正则方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">T</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(T);</span><br><span class="line">  <span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res === <span class="literal">null</span> ? -<span class="number">1</span> : res.<span class="property">index</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个全新的对象</span></span><br><span class="line"><span class="comment">// 新对象会被执行[[prototype]]连接</span></span><br><span class="line"><span class="comment">// 新对象绑定到函数调用的this</span></span><br><span class="line"><span class="comment">// 如果函数没有返回其他对象，那么返回对象本身，否则返回其他对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">const</span> result = fn.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result !== <span class="literal">null</span> ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="title function_">newFn</span>(<span class="title class_">Person</span>, <span class="string">&#x27;Jerome&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p.name :&gt;&gt; &#x27;</span>, p.<span class="property">name</span>); <span class="comment">// p.name :&gt;&gt;  Jerome</span></span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">desc</span>: <span class="keyword">function</span> (<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>来自<span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>去往<span class="subst">$&#123;to&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lbs&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">desc</span>.<span class="title function_">myCall</span>(person, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">  ctx[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">content, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">newFn</span>(<span class="params">...newFnArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 检测 New</span></span><br><span class="line">    <span class="comment">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">fn</span>(...args, ...newFnArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">myApply</span>(context, [...args, ...newFnArgs]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 通过left.__proto__.__proto__这种方式从下往上的获取原型对象</span></span><br><span class="line"><span class="comment">// 2. 通过Object.create(null)的实例是没有原型链</span></span><br><span class="line"><span class="comment">// 3. 有原型链的实例的尽头都是Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!left.<span class="property">__proto__</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (right === <span class="title class_">Object</span> || left.<span class="property">__proto__</span> === right.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_instanceof</span>(left.<span class="property">__proto__</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">_instanceof</span>(<span class="regexp">/123/</span>, <span class="title class_">RegExp</span>);</span><br></pre></td></tr></table></figure>

<h2 id="手写-Object-is"><a href="#手写-Object-is" class="headerlink" title="手写 Object.is"></a>手写 Object.is</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">is</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="comment">// x,y都为0，但是1 / +0 = +Infinity,1 / -0 = -Infinity 是不一样的</span></span><br><span class="line">    <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//NaN === NaN = false是不对的，做一个拦截操作</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">method, url, headers, body</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> req = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      req = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">open</span>(method, url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">      req.<span class="title function_">setRequestHeader</span>(key, headers[key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">onreadystatechange</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">readystate</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; req.<span class="property">status</span> &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">send</span>(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">fn, toThis</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> _this = toThis || <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = fn.<span class="title function_">call</span>(_this, arr[i], i, arr);</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="手写-promise"><a href="#手写-promise" class="headerlink" title="手写 promise"></a>手写 promise</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise1</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">PENDING</span>; <span class="comment">//默认状态，进行中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span>; <span class="comment">//成功值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span>; <span class="comment">// 失败原因</span></span><br><span class="line">    <span class="comment">// 解决异步问题</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">FULFILLED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">Promise</span>.<span class="property">REJECTED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      onFulfilled = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      onRejected = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">reason</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="title class_">Promise</span>.<span class="property">REJECTED</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">parse</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>), resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(<span class="params">result, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise1</span>) &#123;</span><br><span class="line">        result.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise1</span>) &#123;</span><br><span class="line">        value.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">length</span> === promises.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aaa = <span class="keyword">new</span> <span class="title class_">Promise1</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;lbs&#x27;</span>);</span><br><span class="line">  <span class="comment">//     reject(&#x27;error&#x27;)</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">aaa.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa);</span><br></pre></td></tr></table></figure>

<h2 id="手写-promise-allSettled"><a href="#手写-promise-allSettled" class="headerlink" title="手写 promise.allSettled"></a>手写 promise.allSettled</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseAllSettled</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseArr)) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;arguments must be an array&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promiseArr[i])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          res[i] = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>,</span><br><span class="line">            value,</span><br><span class="line">            <span class="comment">// 出题：输入一个 Promise 实例数组，输出最快、最慢的实例，以及每个实例的响应时长</span></span><br><span class="line">            <span class="comment">//加一个执行时间计算</span></span><br><span class="line">            <span class="attr">cost</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">          res[i] = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>,</span><br><span class="line">            reason,</span><br><span class="line">            <span class="comment">//加一个执行时间计算</span></span><br><span class="line">            <span class="attr">cost</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          count++;</span><br><span class="line">          <span class="keyword">if</span> (count == promiseLen) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写-event-bus"><a href="#手写-event-bus" class="headerlink" title="手写 event bus"></a>手写 event bus</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxListeners</span> = maxListeners || <span class="title class_">Infinity</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">event, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cbs = <span class="variable language_">this</span>.<span class="property">events</span>[event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cbs) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有这个事件函数&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cbs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> cb.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">maxListeners</span> !== <span class="title class_">Infinity</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxListeners</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当事件超过了最大监听数&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">push</span>(cb);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(event, fn);</span><br><span class="line">      cb.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(event, func);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cb) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== cb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lbs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lbs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//寄生式组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = obj.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, obj);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = obj.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object.create()</span></span><br><span class="line"><span class="comment">// 方法创建一个新对象，使用现有的对象来提供新创建对象的__proto__</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">constructor</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Student</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;lbs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br></pre></td></tr></table></figure>

<h2 id="createElement-手写"><a href="#createElement-手写" class="headerlink" title="createElement 手写"></a>createElement 手写</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolFor = <span class="title class_">Symbol</span>.<span class="property">for</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REACT_ELEMENT_TYPE</span> = <span class="title function_">symbolFor</span>(<span class="string">&#x27;react.element&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESERVED_PROPS</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">ref</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__self</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__source</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, config, children</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config !== <span class="literal">null</span>) &#123;</span><br><span class="line">    key = config.<span class="property">key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable constant_">RESERVED_PROPS</span>.<span class="title function_">hasOwnProperty</span>(propName)) &#123;</span><br><span class="line">      props[propName] = config[propName];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="variable language_">arguments</span>.<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.<span class="property">children</span> = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="title class_">Array</span>(childrenLength);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="variable language_">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    props.<span class="property">children</span> = childArray;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="attr">$$typeof</span>: <span class="variable constant_">REACT_ELEMENT_TYPE</span>,</span><br><span class="line">    type,</span><br><span class="line">    key,</span><br><span class="line">    props,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字"><a href="#编写正则，验证一个-6-～-16-位的字符串，必须同时包含大小写字母和数字" class="headerlink" title="编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字"></a>编写正则，验证一个 6 ～ 16 位的字符串，必须同时包含大小写字母和数字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">正向预查 ？= 必须</span><br><span class="line">反向预查 ？！必须不</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z]+$)(?!^[0-9]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line">补充：数字、字母、下划线组成字符串，必须有_</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?=_)\w/</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z0-9]+$)^\w&#123;1,10&#125;$/</span>; 限制<span class="number">1</span>-<span class="number">10</span>位</span><br></pre></td></tr></table></figure>

<h2 id="获取所有属性为-name，值为-value-的元素集合"><a href="#获取所有属性为-name，值为-value-的元素集合" class="headerlink" title="获取所有属性为 name，值为 value 的元素集合"></a>获取所有属性为 name，值为 value 的元素集合</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则\b单词边界</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getElements</span>(<span class="params">property, value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">  elements = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br><span class="line">  elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当前元素property对应的值</span></span><br><span class="line">    <span class="keyword">let</span> itemValue = item.<span class="title function_">getAttribute</span>(propertype);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (property === <span class="string">&#x27;class&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`\b<span class="subst">$&#123;value&#125;</span>\b`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg.<span class="title function_">test</span>(itemValue)) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (itemValue === value) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;中国hello你好&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/gi</span>;</span><br><span class="line"></span><br><span class="line">str = str</span><br><span class="line">  .<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">` <span class="subst">$&#123;value&#125;</span> `</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">trim</span>(); <span class="comment">// 去除首尾空格</span></span><br></pre></td></tr></table></figure>

<h2 id="js-实现斐波那契数列的几种方法"><a href="#js-实现斐波那契数列的几种方法" class="headerlink" title="js 实现斐波那契数列的几种方法"></a>js 实现斐波那契数列的几种方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.尾递归(每次调用都在收集结果，避免了线性递归不收集结果只依次展开消耗内存的坏处)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n, res1 = <span class="number">1</span>, res2 = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> res2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, res2, res1 + res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt; n; i++) &#123;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;输入的数字不能小于0&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="js-并发调度器"><a href="#js-并发调度器" class="headerlink" title="js 并发调度器"></a>js 并发调度器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//题目：</span></span><br><span class="line"><span class="comment">// 延迟函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时进行的任务最多2个</span></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加异步任务</span></span><br><span class="line"><span class="comment">// time: 任务执行的时间</span></span><br><span class="line"><span class="comment">// val: 参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, val</span>) =&gt; &#123;</span><br><span class="line">  scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sleep</span>(time).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">max</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">max</span> = max;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">p</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(p);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &gt;= <span class="variable language_">this</span>.<span class="property">max</span> || !<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span></span><br><span class="line">      .<span class="title function_">shift</span>()()</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并发加载"><a href="#并发加载" class="headerlink" title="并发加载"></a>并发加载</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitLoad</span>(<span class="params">urls, handler, limit</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promises = [];</span><br><span class="line">  <span class="keyword">const</span> limitUrls = urls.<span class="title function_">slice</span>(<span class="number">0</span>, limit);</span><br><span class="line">  <span class="keyword">const</span> restUrls = urls.<span class="title function_">slice</span>(limit);</span><br><span class="line">  promises = limitUrls.<span class="title function_">map</span>(<span class="function">(<span class="params">url, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; restUrls.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    p = p.<span class="title function_">then</span>(<span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">      promises[index] = <span class="title function_">handler</span>(restUrls[i]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">info</span> + <span class="string">&#x27;---OK!!!&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, url.<span class="property">time</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urls = [</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">1</span>, <span class="attr">time</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">2</span>, <span class="attr">time</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">3</span>, <span class="attr">time</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">4</span>, <span class="attr">time</span>: <span class="number">4000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">info</span>: <span class="number">5</span>, <span class="attr">time</span>: <span class="number">5000</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title function_">limitLoad</span>(urls, loadImg, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="前端内存处理"><a href="#前端内存处理" class="headerlink" title="前端内存处理"></a>前端内存处理</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 内存的生命周期</span><br><span class="line">    内存分配：声明变量、函数对象的时候，js会自动分配内存</span><br><span class="line">    内存使用</span><br><span class="line">    内存回收</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> js中的垃圾回收机制</span><br><span class="line">    引用计数：缺点循环引用无法清除</span><br><span class="line">    标记清除</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 常见内存泄漏</span><br><span class="line">    全局变量（记得手动回收）</span><br><span class="line">    未被清除的定时器</span><br><span class="line">    闭包</span><br><span class="line">    dom的引用</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 怎么避免内存泄漏</span><br><span class="line">    减少不必要的全局变量</span><br><span class="line">    使用完数据，及时解除引用</span><br><span class="line"></span><br><span class="line">实现sizeOf，传入object，计算其所占字节大小</span><br><span class="line"><span class="attr">number</span>: <span class="number">8</span> 字节</span><br><span class="line"><span class="attr">string</span>: <span class="number">2</span> 字节</span><br><span class="line">boolean; <span class="number">4</span> 字节</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sizeOfObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = keys[i];</span><br><span class="line">        bytes += <span class="title function_">calculator</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (seen.<span class="title function_">has</span>(obj[key])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            seen.<span class="title function_">add</span>(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes += <span class="title function_">calculator</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculator</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(objType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> obj.<span class="property">length</span> * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj.<span class="title function_">map</span>(calculator).<span class="title function_">reduce</span>(<span class="function">(<span class="params">accu, curr</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> accu + curr</span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">sizeOfObject</span>(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数据结构就是在计算机中存储和组织数据的方式。</p>
<p>算法（Algorithm）解决问题的逻辑或步骤</p>
<h2 id="封装函数使字符串以驼峰式命名"><a href="#封装函数使字符串以驼峰式命名" class="headerlink" title="封装函数使字符串以驼峰式命名"></a>封装函数使字符串以驼峰式命名</h2><ul>
<li>已知字符串 foo = ‘get-element-by-id’,写一个函数将其转换为驼峰式命名“getElementById”</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;get-element-by-id&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = foo.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  arr[i] = arr[i].<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + arr[i].<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//封装</span><br><span class="line">function toString(foo) &#123;</span><br><span class="line">    var arr = foo.split(&#x27;-&#x27;);</span><br><span class="line"></span><br><span class="line">    for(var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].substr(1, arr[i].length - 1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr.join(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(toString(&#x27;get-element-by-id&#x27;))</span><br></pre></td></tr></table></figure>

<ul>
<li>把 the-first-name 变成 theFirstName</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var reg = /-(\w)/g</span><br><span class="line">var str = &quot;the-first-name&quot;</span><br><span class="line">console.log(str.replace(reg, function($, $1)&#123;</span><br><span class="line">    return $1.toUpperCase()</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>把 aabb 换成 bbaa</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aabb&#x27;</span>;</span><br><span class="line"><span class="comment">// console.log(str.replace(reg,&quot;$2$2$1$1&quot;));//&quot;bbaa&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  str.<span class="title function_">replace</span>(reg, <span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span>, $<span class="number">2</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">2</span> + $<span class="number">2</span> + $<span class="number">1</span> + $<span class="number">1</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>正则简单的去重</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaaabbbbbccccc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">replace</span>(reg,<span class="string">&quot;$1&quot;</span>));<span class="comment">//abc</span></span><br></pre></td></tr></table></figure>

<h2 id="定制化输出特定数组"><a href="#定制化输出特定数组" class="headerlink" title="定制化输出特定数组"></a>定制化输出特定数组</h2><ul>
<li>随机生成一个长度为 10 的整数类型的数据</li>
<li>例如 [2, 10, 3, 35, 5, 11, 10, 11, 20]</li>
<li>将其排列成一个新数组，要求新数组形式如下：</li>
<li>[[2, 3, 5], [10, 11],[20],[35]]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取随机数 0-99</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomNumber</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">  max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>) + min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;, <span class="function">() =&gt;</span> <span class="title function_">getRandomNumber</span>(<span class="number">0</span>, <span class="number">99</span>));</span><br><span class="line"><span class="comment">// 2. 去重(没必要)</span></span><br><span class="line">arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="comment">// 3. 排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="comment">// 4. 存储 0-9 10-19 20-29</span></span><br><span class="line"><span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Math</span>.<span class="title function_">floor</span>(item / <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!map[key]) &#123;</span><br><span class="line">    map[key] = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map[key].<span class="title function_">push</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">  result.<span class="title function_">push</span>(map[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<h2 id="深度比较-isEqual"><a href="#深度比较-isEqual" class="headerlink" title="深度比较 isEqual"></a>深度比较 isEqual</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line">  <span class="comment">//其中一个为值类型或null</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj1) || !<span class="title function_">isObject</span>(obj2)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否两个参数是同一个变量</span></span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断keys数是否相等</span></span><br><span class="line">  <span class="keyword">const</span> obj1Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1);</span><br><span class="line">  <span class="keyword">const</span> obj2Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2);</span><br><span class="line">  <span class="keyword">if</span> (obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//深度比较每一个key</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isEqual</span>(obj1[key], obj2[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据数组的-key-去重"><a href="#根据数组的-key-去重" class="headerlink" title="根据数组的 key 去重"></a>根据数组的 key 去重</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dedup</span> = (<span class="params">data, getKey = () =&gt; &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dateMap = data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title function_">getKey</span>(cur);</span><br><span class="line">    <span class="keyword">if</span> (!pre[key]) &#123;</span><br><span class="line">      pre[key] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(dateMap);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">v</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">v</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">v</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dedup</span>(data, <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span>));</span><br></pre></td></tr></table></figure>

<h2 id="react-自定义封装不会反复创建的定时器（setInterval）"><a href="#react-自定义封装不会反复创建的定时器（setInterval）" class="headerlink" title="react 自定义封装不会反复创建的定时器（setInterval）"></a>react 自定义封装不会反复创建的定时器（setInterval）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useTimer</span> = (<span class="params">step = <span class="number">1</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setNum</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">    &#125;, step * <span class="number">1000</span>);</span><br><span class="line">    timer.<span class="property">current</span> = timeout;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    num,</span><br><span class="line">    start,</span><br><span class="line">    clear,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="修改下面代码，顺序输出-0-99"><a href="#修改下面代码，顺序输出-0-99" class="headerlink" title="修改下面代码，顺序输出 0-99"></a>修改下面代码，顺序输出 0-99</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要求：</span></span><br><span class="line"><span class="comment">// 1. 只能修改 setTimeout</span></span><br><span class="line"><span class="comment">// 2. 不能修改Math.floor(Math.random() * 1000)</span></span><br><span class="line"><span class="comment">// 3. 不能使用全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">  &#125;, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// 方法1: 立即执行函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: setTimeout第三个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for-循环和-splice-的坑"><a href="#for-循环和-splice-的坑" class="headerlink" title="for 循环和 splice 的坑"></a>for 循环和 splice 的坑</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环和splice的坑</span></span><br><span class="line"><span class="comment">// 具体描述：在对一个数组执行for循环时，</span></span><br><span class="line"><span class="comment">// 删除数组元素，会存在什么问题</span></span><br><span class="line"><span class="comment">// 方法1: i--</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">    i--; <span class="comment">// 需要处理下 i--</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: 倒序</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[index] === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    index--; <span class="comment">// 仍然会有问题</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><!--more-->

<ul>
<li>程序执行时需要的计算量和内存空间</li>
<li>复杂度是数量级，不是具体的数字</li>
<li>一般是针对一个具体的算法，而非一个完整的系统</li>
</ul>
<h2 id="将一个数组旋转-K-步"><a href="#将一个数组旋转-K-步" class="headerlink" title="将一个数组旋转 K 步"></a>将一个数组旋转 K 步</h2><ul>
<li>输入一个数组[1, 2, 3, 4, 5, 6, 7]</li>
<li>k=3,即旋转 3 步</li>
<li>输出[5, 6, 7, 1, 2, 3, 4]</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 步数</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n^2),空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate1</span>(<span class="params">arr: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!k || length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> step = <span class="title class_">Math</span>.<span class="title function_">abs</span>(k % length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; step; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// unshift内置api时间复杂度位O(n),开销比较大</span></span><br><span class="line">      arr.<span class="title function_">unshift</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 步数</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(1)，空间复杂度O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rotate2</span>(<span class="params">arr: <span class="built_in">number</span>[], k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!k || length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> step = <span class="title class_">Math</span>.<span class="title function_">abs</span>(k % length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> part1 = arr.<span class="title function_">slice</span>(-step);</span><br><span class="line">  <span class="keyword">const</span> part2 = arr.<span class="title function_">slice</span>(<span class="number">0</span>, length - step);</span><br><span class="line">  <span class="keyword">const</span> part3 = part1.<span class="title function_">concat</span>(part2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> * <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate1&#x27;</span>);</span><br><span class="line"><span class="title function_">rotate1</span>(arr, <span class="number">9</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate2&#x27;</span>);</span><br><span class="line"><span class="title function_">rotate2</span>(arr, <span class="number">9</span> * <span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;rotate2&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="两个栈实现一个队列"><a href="#两个栈实现一个队列" class="headerlink" title="两个栈实现一个队列"></a>两个栈实现一个队列</h2><ul>
<li>请用两个栈实现一个队列</li>
<li>API：add delete length</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">stack1</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">stack2</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">push</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delete</span>(): <span class="built_in">number</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (stack1.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = stack1.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack2.<span class="title function_">push</span>(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = stack2.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (stack2.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = stack2.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack1.<span class="title function_">push</span>(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义一个-js-函数，反转单向链表"><a href="#定义一个-js-函数，反转单向链表" class="headerlink" title="定义一个 js 函数，反转单向链表"></a>定义一个 js 函数，反转单向链表</h2><p>链表是一种物理结构(非逻辑结构),类似数组<br>数组需要一段连续的内存空间，而链表是零散的<br>链表节点的数据结构{ value, next?, prev? }</p>
<p>链表 vs 数组<br>都是有序结构<br>链表：查询慢 O(n),新增和删除快 O(1)<br>数组：查询快 O(1),新增和删除慢 O(n)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  next?: <span class="title class_">ILinkListNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLinkList</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;arr is empty&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">curNode</span>: <span class="title class_">ILinkListNode</span> = &#123;</span><br><span class="line">    <span class="attr">value</span>: arr[length - <span class="number">1</span>],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">1</span>) <span class="keyword">return</span> curNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    curNode = &#123;</span><br><span class="line">      <span class="attr">value</span>: arr[i],</span><br><span class="line">      <span class="attr">next</span>: curNode,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="keyword">const</span> list = <span class="title function_">createLinkList</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;list&#x27;</span>, list);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转单向链表，返回反转后的head node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listNode 需要操作的链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseLinkList</span>(<span class="params">listNode: ILinkListNode</span>): <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">prevNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">curNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">nextNode</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">undefined</span> = listNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (nextNode) &#123;</span><br><span class="line">    <span class="comment">// 第一个元素，删除next指针，防止循环引用</span></span><br><span class="line">    <span class="keyword">if</span> (curNode &amp;&amp; !prevNode) &#123;</span><br><span class="line">      <span class="keyword">delete</span> curNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转指针</span></span><br><span class="line">    <span class="keyword">if</span> (curNode &amp;&amp; prevNode) &#123;</span><br><span class="line">      curNode.<span class="property">next</span> = prevNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prevNode = curNode;</span><br><span class="line">    curNode = nextNode;</span><br><span class="line">    nextNode = nextNode?.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理链表最后一个元素</span></span><br><span class="line">  curNode!.<span class="property">next</span> = prevNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curNode!;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverseList = <span class="title function_">reverseLinkList</span>(list);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;reverseList&#x27;</span>, reverseList);</span><br></pre></td></tr></table></figure>

<h2 id="栈-封装"><a href="#栈-封装" class="headerlink" title="栈(封装)"></a>栈(封装)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">  <span class="comment">// 1. 将元素压入栈</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 2.从栈中取出元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 3.查看一下栈顶元素</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 4.判断栈是否为空</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 5.获取栈中元素个数</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6. toString方法</span></span><br><span class="line">  <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      res += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span> `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例：将十进制转换成二进制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec2bin</span>(<span class="params">decimalNumber</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">  <span class="keyword">let</span> binary = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (decimalNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    stack.<span class="title function_">push</span>(decimalNumber % <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    decimalNumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(decimalNumber / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    binary += stack.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深度封装-typeof-判断"><a href="#深度封装-typeof-判断" class="headerlink" title="深度封装 typeof 判断"></a>深度封装 typeof 判断</h2><pre><code>function myTypeof(val) &#123;
    var type = typeof(val)
    var res = &#123;
        &#39;[object Object]&#39; : &#39;object&#39;,
        &#39;[object Array]&#39; : &#39;array&#39;,
        &#39;[object Number]&#39; : &#39;object number&#39;,
        &#39;[object String]&#39; : &#39;object string&#39;,
        &#39;[object Boolean]&#39; : &#39;object boolean&#39;
    &#125;
    if (val === null) &#123;
        return &#39;null&#39;
    &#125; else if (type == &#39;object&#39;) &#123;
        var str = Object.prototype.toString.call(val)
        return res[str]
    &#125; else &#123;
        return type
    &#125;
&#125;
</code></pre>
<h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="title function_">reverseList</span>(head.<span class="property">next</span>);</span><br><span class="line"></span><br><span class="line">  head.<span class="property">next</span>.<span class="property">next</span> = head;</span><br><span class="line">  head.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cur === <span class="literal">null</span> || cur.<span class="property">next</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = cur.<span class="property">next</span>;</span><br><span class="line">    cur.<span class="property">next</span> = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cur.next = null</span></span><br><span class="line">    <span class="comment">// cur.next.next = cur</span></span><br><span class="line">    <span class="comment">// cur = cur.nexxt</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="打乱数组"><a href="#打乱数组" class="headerlink" title="打乱数组"></a>打乱数组</h2><pre><code>1. 常见的sort打乱数组的方法

function shuffle(arr) &#123;
   return arr.sort (function () &#123;
        return Math.random() - 0.5
    &#125;)
&#125;
var arr = [1,2,3,4,5,6,7]
shuffle(arr)

更加简洁的ES6写法

function shuffle(arr) &#123;
    return arr.sort(() =&gt; Math.random() - 0.5)
&#125;

但是这种写法有问题，并不能真正地随机打乱数组，经过大量的实验发现
每个元素仍然有很大的几率出现在它原来的位置附近。

2.洗牌算法
    从最后一个数据开始往前，每次随机一个位置，将两者的位置进行交换，直到数组交换完毕。


ES6实现：

function shuffle(arr) &#123;
    let i =  arr.length;
    while(i) &#123;
        let j = Math.floor(Math.random() * i--);
        [arr[j], arr[i]] = [arr[i], arr[j]];
    &#125;
    return arr
&#125;

var arr = [1,2,3,4,5,6,7]
shuffle(arr)
</code></pre>
<h2 id="用链表实现队列"><a href="#用链表实现队列" class="headerlink" title="用链表实现队列"></a>用链表实现队列</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILinkListNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">head</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">tail</span>: <span class="title class_">ILinkListNode</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入队，在tail位置</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">newNode</span>: <span class="title class_">ILinkListNode</span> = &#123;</span><br><span class="line">      <span class="attr">value</span>: n,</span><br><span class="line">      <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tail</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">len</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出队，在head位置</span></span><br><span class="line">  <span class="title function_">delete</span>(): <span class="built_in">number</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span> || <span class="variable language_">this</span>.<span class="property">len</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">len</span>--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">len</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">200</span>);</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">300</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;length&#x27;</span>, queue.<span class="property">length</span>); <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">delete</span>()); <span class="comment">//100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;length2&#x27;</span>, queue.<span class="property">length</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="链表和数组，哪个实现队列更快？"><a href="#链表和数组，哪个实现队列更快？" class="headerlink" title="链表和数组，哪个实现队列更快？"></a>链表和数组，哪个实现队列更快？</h2><ul>
<li>空间复杂度都是 O(n)</li>
<li>add 时间复杂度：链表 O(1)，数组 O(1);</li>
<li>delete 时间复杂度：链表 O(1)，数组 O(n);</li>
</ul>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//满二叉树：每层节点数都达到最大值，第n层节点数为2^(n - 1),总节点数为2^n -1(2的n次方减一)</span></span><br><span class="line"><span class="comment">//完全二叉树：除最后一层外，其他各层节点数都达到最大个数，最后一层所有节点集中在最左边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入前比较</span></span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// 右侧插入</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">value</span> &gt; node.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newNode.<span class="property">value</span> &lt; node.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 左侧插入</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序遍历</span></span><br><span class="line">  <span class="title function_">preOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">inOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraversalNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">callback</span>(node.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">postOrderTraversal</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraversalNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最大值</span></span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最小值</span></span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找指定值是否存在</span></span><br><span class="line">  <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &lt; node.<span class="property">value</span>) &#123;</span><br><span class="line">        node = node.<span class="property">left</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; node.<span class="property">value</span>) &#123;</span><br><span class="line">        node = node.<span class="property">right</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bst = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line"></span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">bst.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.preOrderTraversal((nodeValue) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.inOrderTraversal((nodeValue) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bst.postOrderTraversal((nodeValue) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(nodeValue)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(bst.max())</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst.<span class="title function_">search</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bst);</span><br></pre></td></tr></table></figure>

<h2 id="求一个二叉搜索树（BST）的第-k-小值"><a href="#求一个二叉搜索树（BST）的第-k-小值" class="headerlink" title="求一个二叉搜索树（BST）的第 k 小值"></a>求一个二叉搜索树（BST）的第 k 小值</h2><ul>
<li>前序(根左右)，中序(左根右)，后序(左右根)</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ItreeNode</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">left</span>: <span class="title class_">ItreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">right</span>: <span class="title class_">ItreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bstTree</span>: <span class="title class_">ItreeNode</span> = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">left</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">right</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树前序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树中序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树后序遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node tree node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求二叉搜索树第k值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node bst tree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 第k个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getKthValue</span>(<span class="params">node: ItreeNode | <span class="literal">null</span>, k: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node: ItreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>);</span><br><span class="line">    arr.<span class="title function_">push</span>(node.<span class="property">value</span>);</span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(node);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr[k - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列（递归）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度O(2^n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列（循环）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n1 = <span class="number">1</span>; <span class="comment">// 记录n-1的结果</span></span><br><span class="line">  <span class="keyword">let</span> n2 = <span class="number">0</span>; <span class="comment">// 记录n-2的结果</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    res = n1 + n2;</span><br><span class="line">    n2 = n1;</span><br><span class="line">    n1 = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="青蛙跳台阶（动态规划思想解决问题）"><a href="#青蛙跳台阶（动态规划思想解决问题）" class="headerlink" title="青蛙跳台阶（动态规划思想解决问题）"></a>青蛙跳台阶（动态规划思想解决问题）</h2><ul>
<li>一只青蛙，一次可以跳 1 级，也可以跳 2 级</li>
<li>问：青蛙跳到 n 级台阶，总共有多少种方式？</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 答案同上一题</span></span><br></pre></td></tr></table></figure>

<h2 id="将数组中的-0-移动到末尾"><a href="#将数组中的-0-移动到末尾" class="headerlink" title="将数组中的 0 移动到末尾"></a>将数组中的 0 移动到末尾</h2><ul>
<li>如输入[1, 0, 3, 0, 11, 0],输出[1, 3, 11, 0, 0, 0]</li>
<li>只移动 0 ，其他顺序不变</li>
<li>必须在原数组进行操作</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (嵌套循环)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr number arr</span></span><br><span class="line"><span class="comment"> * 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZero1</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> zeroCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - zeroCount; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">      arr.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// O(n)</span></span><br><span class="line">      i--;</span><br><span class="line">      zeroCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (双指针)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr number arr</span></span><br><span class="line"><span class="comment"> * 时间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZero2</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line">  <span class="keyword">let</span> j = -<span class="number">1</span>; <span class="comment">// 指向第一个 0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        j = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> n = arr[i];</span><br><span class="line">      arr[i] = arr[j];</span><br><span class="line">      arr[j] = n;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// moveZero1(arr);</span></span><br><span class="line"><span class="title function_">moveZero2</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">tempMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">index</span>: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, length = nums.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">    index = tempMap.<span class="title function_">get</span>(target - nums[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      result = [index, i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tempMap.<span class="title function_">set</span>(nums[i], i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算字符串中连续最多的字符以及次数"><a href="#计算字符串中连续最多的字符以及次数" class="headerlink" title="计算字符串中连续最多的字符以及次数"></a>计算字符串中连续最多的字符以及次数</h2><ul>
<li>输入’abbbcccccccddeee1234412’</li>
<li>计算得到连续最多的字符是’c’,7 次</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度： O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="attr">char</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findContinuousChar1</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">IRes</span> = &#123;</span><br><span class="line">    <span class="attr">char</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempLength = <span class="number">0</span>; <span class="comment">// 临时记录当前连续字符的长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    tempLength = <span class="number">0</span>; <span class="comment">// 重置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (str[i] === str[j]) &#123;</span><br><span class="line">        tempLength++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (str[i] !== str[j] || j === length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempLength &gt; res.<span class="property">length</span>) &#123;</span><br><span class="line">          res.<span class="property">char</span> = str[i];</span><br><span class="line">          res.<span class="property">length</span> = tempLength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">          i = j - <span class="number">1</span>; <span class="comment">// 跳步</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双指针</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度： O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="attr">char</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findContinuousChar2</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">IRes</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">IRes</span> = &#123;</span><br><span class="line">    <span class="attr">char</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempLength = <span class="number">0</span>; <span class="comment">// 临时记录当前连续字符的长度</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] === str[j]) &#123;</span><br><span class="line">      tempLength++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[i] !== str[j] || i === length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果不相等或者 i 循环到了末尾</span></span><br><span class="line">      <span class="keyword">if</span> (tempLength &gt; res.<span class="property">length</span>) &#123;</span><br><span class="line">        res.<span class="property">char</span> = str[j];</span><br><span class="line">        res.<span class="property">length</span> = tempLength;</span><br><span class="line">      &#125;</span><br><span class="line">      tempLength = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">        j = i; <span class="comment">// 让 j 追上 i</span></span><br><span class="line">        i--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abbbcccccccddeee1234412&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findContinuousChar1</span>(str));</span><br></pre></td></tr></table></figure>

<h2 id="对称数（回文）"><a href="#对称数（回文）" class="headerlink" title="对称数（回文）"></a>对称数（回文）</h2><ul>
<li>求 1 - 10000 之间的所有对称数（回文）</li>
<li>例如：0， 1， 2， 11， 22， 101， 232，1221</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findPalindromeNumbers1</span>(<span class="params">max: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">if</span> (max &lt; <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= max; i++) &#123;</span><br><span class="line">    <span class="comment">// 转换为字符转 -&gt; 转换为数组 -&gt; 再反转 -&gt; 比较</span></span><br><span class="line">    <span class="keyword">const</span> s = i.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (s === s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPalindromeNumbers1</span>(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findPalindromeNumbers2</span>(<span class="params">max: <span class="built_in">number</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">if</span> (max &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= max; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = i;</span><br><span class="line">    <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// n: 123</span></span><br><span class="line">    <span class="comment">// rev: 321</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      rev = rev * <span class="number">10</span> + (n % <span class="number">10</span>);</span><br><span class="line">      n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i === rev) res.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPalindromeNumbers2</span>(<span class="number">200</span>));</span><br></pre></td></tr></table></figure>

<h2 id="最长回文串"><a href="#最长回文串" class="headerlink" title="最长回文串"></a>最长回文串</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestPalindrome</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 寻找长度为奇数的回文子串(以当前元素向两边扩散)</span></span><br><span class="line">    <span class="keyword">const</span> s1 = <span class="title function_">palindrome</span>(s, i, i);</span><br><span class="line">    <span class="comment">// 寻找长度为偶数的回文子串(以s[i],s[i + 1])向两边扩散</span></span><br><span class="line">    <span class="keyword">const</span> s2 = <span class="title function_">palindrome</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">    res = res.<span class="property">length</span> &gt; s1.<span class="property">length</span> ? res : s1;</span><br><span class="line">    res = res.<span class="property">length</span> &gt; s2.<span class="property">length</span> ? res : s2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">palindrome</span>(<span class="params">s, l, r</span>) &#123;</span><br><span class="line">  <span class="comment">// 左右指针，从s[l]和s[r]向两边扩散，找到最长回文串</span></span><br><span class="line">  <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="property">length</span> &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">    l--;</span><br><span class="line">    r++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">substr</span>(l + <span class="number">1</span>, r - l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断字符串是否括号匹配"><a href="#判断字符串是否括号匹配" class="headerlink" title="判断字符串是否括号匹配"></a>判断字符串是否括号匹配</h2><ul>
<li>一个字符串 s 可能包含{}()[]三种括号</li>
<li>判断 s 是否是括号匹配的</li>
<li>如（a{b}c）匹配，而{a(b 或者{a(b}c)就是不匹配的</li>
</ul>
<p>栈 vs 数组<br>栈：逻辑结构，理论模型，不管如何实现，不受任何语言的限制。<br>数组：物理结构，真实的功能实现，受限于编程语言。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMatch</span>(<span class="params">left: <span class="built_in">string</span>, right: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; right === <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&#x27;(&#x27;</span> &amp;&amp; right === <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (left === <span class="string">&#x27;[&#x27;</span> &amp;&amp; right === <span class="string">&#x27;]&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">matchBracket</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">const</span> leftSymbols = <span class="string">&#x27;&#123;[(&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> rightSymbols = <span class="string">&#x27;)]&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 时间复杂度O(n),空间复杂度O(n)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> s = str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftSymbols.<span class="title function_">includes</span>(s)) &#123;</span><br><span class="line">      <span class="comment">// 左括号，压栈</span></span><br><span class="line">      stack.<span class="title function_">push</span>(s);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSymbols.<span class="title function_">includes</span>(s)) &#123;</span><br><span class="line">      <span class="keyword">const</span> top = stack[stack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断右括号是否匹配</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isMatch</span>(top, s)) &#123;</span><br><span class="line">        stack.<span class="title function_">pop</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高效的字符串前缀匹配"><a href="#高效的字符串前缀匹配" class="headerlink" title="高效的字符串前缀匹配"></a>高效的字符串前缀匹配</h2><ul>
<li>有一个英文单词库（数组），里面有几十万个英文单词</li>
<li>输入一个字符串，快速判断是不是某一个单词的前缀</li>
<li>（说明思路，不用写代码）</li>
</ul>
<p>思路一：</p>
<ol>
<li><p>遍历单词库数组</p>
</li>
<li><p>indexOf 判断前缀</p>
</li>
<li><p>实际时间复杂度超过 O(n),因为 indexOf 的计算量</p>
</li>
</ol>
<p>思路二（对象取 key 时间复杂度为 O(1)）：</p>
<ol>
<li><p>英文字母一共就 26 个，可以提前把单词库数组拆分为 26 个</p>
</li>
<li><p>第一层 26 个，第二层、第三层，继续拆分…</p>
</li>
<li><p>最后把单词库拆分为一颗树</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 树结构</span><br><span class="line">const wordsTree = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">    b: &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  c: &#123;</span><br><span class="line">    a: &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数字千分位格式化"><a href="#数字千分位格式化" class="headerlink" title="数字千分位格式化"></a>数字千分位格式化</h2><ul>
<li>将数字千分位格式化，输出字符串</li>
<li>如输入数字 12050100，输出字符串 12,050,100</li>
<li>(注意：逆序判断)</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 使用数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format1</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n); <span class="comment">// 只考虑整数</span></span><br><span class="line">  <span class="keyword">const</span> reverseArr = n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> reverseArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">        <span class="keyword">return</span> curr + <span class="string">&#x27;,&#x27;</span> + prev;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> curr + prev;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * 使用字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format2</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> str = n.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">const</span> length = str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = length - i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">        res = str[i] + res;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = <span class="string">&#x27;,&#x27;</span> + str[i] + res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res = str[i] + res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">把<span class="string">&quot;1000000000&quot;</span>变成<span class="string">&quot;100.000.000&quot;</span>这种写法，把后面往前面查，三位加个点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;100000000&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(reg, <span class="string">&#x27;.&#x27;</span>)) || <span class="comment">//&quot;100.000.000&quot;</span></span><br><span class="line"><span class="built_in">string</span>.<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;.&#x27;</span>) || <span class="comment">//先行断言?=,后行断言(?!\d)</span></span><br><span class="line">(<span class="number">25435345.22</span>).<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en-US&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="切换字母大小写"><a href="#切换字母大小写" class="headerlink" title="切换字母大小写"></a>切换字母大小写</h2><ul>
<li>输入一个字符串，切换其中字母的大小写</li>
<li>如：输入字符串 12aBc34，输出字符串 12AbC34</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchLetterCase1</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> length = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/[a-z]/</span>;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg1.<span class="title function_">test</span>(c)) &#123;</span><br><span class="line">      res += c.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg2.<span class="title function_">test</span>(c)) &#123;</span><br><span class="line">      res += c.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ASCII 编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchLetterCase2</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> length = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/[a-z]/</span>;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line">    <span class="keyword">const</span> code = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65</span> &amp;&amp; code &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">      res += c.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code &gt;= <span class="number">97</span> &amp;&amp; code &lt;= <span class="number">122</span>) &#123;</span><br><span class="line">      res += c.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="「扁平数组」转「树形结构」"><a href="#「扁平数组」转「树形结构」" class="headerlink" title="「扁平数组」转「树形结构」"></a>「扁平数组」转「树形结构」</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">treeing</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tree = [];</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">const</span> newItem = (map[item.<span class="property">id</span>] = &#123;</span><br><span class="line">      ...item,</span><br><span class="line">      <span class="attr">children</span>: [],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (map[item.<span class="property">pid</span>]) &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.<span class="property">pid</span>];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(newItem);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree.<span class="title function_">push</span>(newItem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="「树形结构」转「扁平结构」"><a href="#「树形结构」转「扁平结构」" class="headerlink" title="「树形结构」转「扁平结构」"></a>「树形结构」转「扁平结构」</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">tree, arr = []</span>) &#123;</span><br><span class="line">  tree.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, ...rest &#125; = item;</span><br><span class="line">    arr.<span class="title function_">push</span>(rest);</span><br><span class="line">    <span class="keyword">if</span> (children.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="title function_">flatten</span>(children, arr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="将树状结构转换为属性平铺的结构"><a href="#将树状结构转换为属性平铺的结构" class="headerlink" title="将树状结构转换为属性平铺的结构"></a>将树状结构转换为属性平铺的结构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">dd</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">ee</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">f</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  <span class="string">&#x27;a.b.c.dd&#x27;</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.d.ee&#x27;</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.f&#x27;</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解答</span></span><br><span class="line"><span class="comment">// 方法1: 递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatObj</span>(<span class="params">obj, preKey = <span class="string">&#x27;&#x27;</span>, result = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = <span class="string">`<span class="subst">$&#123;preKey&#125;</span><span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">flatObj</span>(obj[key], <span class="string">`<span class="subst">$&#123;newKey&#125;</span>.`</span>, result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[newKey] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: while循环-队列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatObj2</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj);</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = queue.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> v === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([<span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span>, v]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[<span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span>] = v;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="title function_">flatObj</span>(entry);</span><br><span class="line"><span class="title function_">flatObj2</span>(entry);</span><br></pre></td></tr></table></figure>

<h2 id="将平铺属性的数据结构转换为树状数据结构"><a href="#将平铺属性的数据结构转换为树状数据结构" class="headerlink" title="将平铺属性的数据结构转换为树状数据结构"></a>将平铺属性的数据结构转换为树状数据结构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="string">&#x27;a.b.c.dd&#x27;</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.d.ee&#x27;</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;a.f&#x27;</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">dd</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">ee</span>: <span class="string">&#x27;adee&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">f</span>: <span class="string">&#x27;af&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案</span></span><br><span class="line"><span class="comment">// 方法1: 双重循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = entry[key];</span><br><span class="line">    <span class="keyword">const</span> keyMap = key.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!result[keyMap[<span class="number">0</span>]]) &#123;</span><br><span class="line">      result[keyMap[<span class="number">0</span>]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp = result[keyMap[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> length = keyMap.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!tmp[keyMap[i]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === length - <span class="number">1</span>) &#123;</span><br><span class="line">          tmp[keyMap[i]] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tmp[keyMap[i]] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      tmp = tmp[keyMap[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2: 递归</span></span><br><span class="line"><span class="comment">// &#123;&quot;a.b.c.dd&quot;: &quot;abcdd&quot;&#125;</span></span><br><span class="line"><span class="comment">// =&gt; &#123;&quot;a.b.c&quot;: &#123;&quot;dd&quot;:&quot;abcdd&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">// =&gt;...</span></span><br><span class="line"><span class="comment">// =&gt; &#123;&quot;a&quot;: &#123;&quot;b&quot;: &#123;&quot;c&quot;: &#123;&quot;dd&quot;: &quot;abcdd&quot;&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">map2</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getNest</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lastIndex = key.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> value = entry[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> entry[key];</span><br><span class="line">      <span class="keyword">const</span> preKey = key.<span class="title function_">substring</span>(<span class="number">0</span>, lastIndex);</span><br><span class="line">      <span class="keyword">const</span> restKey = key.<span class="title function_">substring</span>(lastIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!entry[preKey]) &#123;</span><br><span class="line">        entry[preKey] = &#123; [restKey]: value &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry[preKey][restKey] = value;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/./</span>.<span class="title function_">test</span>(preKey)) &#123;</span><br><span class="line">        <span class="title function_">getNest</span>(preKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry) &#123;</span><br><span class="line">    <span class="title function_">getNest</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">map</span>(entry);</span><br><span class="line"><span class="title function_">map2</span>(entry);</span><br></pre></td></tr></table></figure>

<h2 id="实现-jsonp，传入-url、callback-和-callbackName-三个参数"><a href="#实现-jsonp，传入-url、callback-和-callbackName-三个参数" class="headerlink" title="实现 jsonp，传入 url、callback 和 callbackName 三个参数"></a>实现 jsonp，传入 url、callback 和 callbackName 三个参数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url, callback, callbackName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?type=jsonp&amp;callbackName=<span class="subst">$&#123;callbackName&#125;</span>&#125;`</span>;</span><br><span class="line">  script.<span class="property">onload</span> = callback;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  <span class="variable language_">window</span>[callbackName] = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonp</span>(</span><br><span class="line">  <span class="string">&#x27;http://www.xxx.com/xxx&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;fn&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="实现计时器-timer，仅暴露-start、stop、reset-方法"><a href="#实现计时器-timer，仅暴露-start、stop、reset-方法" class="headerlink" title="实现计时器 timer，仅暴露 start、stop、reset 方法"></a>实现计时器 timer，仅暴露 start、stop、reset 方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> second = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> refId = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> clear = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (refId !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(refId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> start = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    refId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(second);</span><br><span class="line">      second += <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stop = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">clear</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reset = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    second = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">clear</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; start, stop, reset &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="点击页面链接时，验证连接是否在-taobao-com-下，如果不是弹框提示"><a href="#点击页面链接时，验证连接是否在-taobao-com-下，如果不是弹框提示" class="headerlink" title="点击页面链接时，验证连接是否在*.taobao.com 下，如果不是弹框提示"></a>点击页面链接时，验证连接是否在*.taobao.com 下，如果不是弹框提示</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;a <span class="keyword">class</span>=<span class="string">&quot;link&quot;</span> href=<span class="string">&quot;http://www.taobao.com&quot;</span>&gt;淘宝&lt;/a&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.jd.com&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> links = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;link&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> listener = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> href = e.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">if</span> (href.<span class="title function_">indexOf</span>(<span class="string">&#x27;.taobao.com&#x27;</span>) === -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> result = <span class="title function_">confirm</span>(<span class="string">&#x27;确定离开吗&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="title function_">preventDefault</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="title function_">stopPropagation</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">// 绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = links.<span class="property">length</span>; i &lt; len; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  link[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, listener, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="实现-destructuringArray-方法"><a href="#实现-destructuringArray-方法" class="headerlink" title="实现 destructuringArray 方法"></a>实现 destructuringArray 方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">destructuringArray</span>(<span class="params">arr, str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> variables = str.<span class="title function_">replace</span>(<span class="regexp">/[\[\]]/g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//正则去除[]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">`str=<span class="subst">$&#123;arr&#125;</span>;return &#123;<span class="subst">$&#123;variables&#125;</span>&#125;`</span>)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">destructuringArray</span>([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">4</span>], <span class="number">3</span>], <span class="string">&#x27;[a,[b],c]&#x27;</span>); <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="请你设计并实现一个满足-LRU-最近最少使用-缓存-约束的数据结构。"><a href="#请你设计并实现一个满足-LRU-最近最少使用-缓存-约束的数据结构。" class="headerlink" title="请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。"></a>请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="attr">cache</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> capacity: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">capacity</span> = capacity;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">key</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="attr">key</span>: <span class="built_in">number</span>, <span class="attr">value</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[key]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">capacity</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lRUCache = <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">1</span>); <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">2</span>); <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="title function_">put</span>(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">1</span>); <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">3</span>); <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.<span class="title function_">get</span>(<span class="number">4</span>); <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure>

<h2 id="比较版本号"><a href="#比较版本号" class="headerlink" title="比较版本号"></a>比较版本号</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Compare</span>(<span class="params">verson1, verson2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> v1Arr = verson1.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> v2Arr = verson2.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; v1Arr.<span class="property">length</span> || j &lt; v2Arr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str1 = v1Arr[i] || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> str2 = v2Arr[j] || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (str1 - str2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str1 - str2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compare(&quot;2.0.1&quot;,&quot;2&quot;) 1</span></span><br></pre></td></tr></table></figure>

<h2 id="找出字符串中重复次数最多的字符"><a href="#找出字符串中重复次数最多的字符" class="headerlink" title="找出字符串中重复次数最多的字符"></a>找出字符串中重复次数最多的字符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findMaxStr</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res[str.<span class="title function_">charAt</span>(i)]) &#123;</span><br><span class="line">      res[str.<span class="title function_">charAt</span>(i)] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[str.<span class="title function_">charAt</span>(i)] = res[str.<span class="title function_">charAt</span>(i)] + <span class="number">1</span>; <span class="comment">// 如果有，增加一次</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> iMax = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> res) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[key] &gt; iMax) &#123;</span><br><span class="line">      iMax = res[key]; <span class="comment">// iMax要被重写</span></span><br><span class="line">      target = key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现次数最多的是:&#x27;</span> + target + <span class="string">&#x27;, 出现&#x27;</span> + iMax + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">findMaxStr</span>(<span class="string">&#x27;sabcdEs&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="实现-url-的-parse-解析？"><a href="#实现-url-的-parse-解析？" class="headerlink" title="实现 url 的 parse 解析？"></a>实现 url 的 parse 解析？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseUrl</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parser = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  parser.<span class="property">href</span> = url;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">protocol</span>: parser.<span class="property">protocol</span>,</span><br><span class="line">    <span class="attr">host</span>: parser.<span class="property">host</span>,</span><br><span class="line">    <span class="attr">hostname</span>: parser.<span class="property">hostname</span>,</span><br><span class="line">    <span class="attr">port</span>: parser.<span class="property">port</span>,</span><br><span class="line">    <span class="attr">pathname</span>: parser.<span class="property">pathname</span>,</span><br><span class="line">    <span class="attr">search</span>: parser.<span class="property">search</span>,</span><br><span class="line">    <span class="attr">hash</span>: parser.<span class="property">hash</span>,</span><br><span class="line">    <span class="attr">params</span>: (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="keyword">let</span> ret = &#123;&#125;,</span><br><span class="line">			<span class="keyword">let</span> seg = a.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="regexp">/^\?/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>),</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;seg.<span class="property">length</span>;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!seg[i]) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">				<span class="keyword">let</span> s = seg[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">				ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		&#125;)(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example usage:</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://www.example.com:8080/path/to/page?query=string#hash&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> parsedUrl = <span class="title function_">parseUrl</span>(url);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsedUrl);</span><br></pre></td></tr></table></figure>

<h2 id="实现对象数组-group"><a href="#实现对象数组-group" class="headerlink" title="实现对象数组 group"></a>实现对象数组 group</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">group</span>(<span class="params">arr, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[index];</span><br><span class="line">    <span class="keyword">const</span> category = <span class="title function_">fn</span>(element, index, arr);</span><br><span class="line">    <span class="keyword">if</span> (result[category]) &#123;</span><br><span class="line">      result[category].<span class="title function_">push</span>(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[category] = [element];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orderList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;steven&#x27;</span>,</span><br><span class="line">    <span class="attr">productName</span>: <span class="string">&#x27;西瓜&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="attr">province</span>: <span class="string">&#x27;henan&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;对方的&#x27;</span>,</span><br><span class="line">    <span class="attr">productName</span>: <span class="string">&#x27;杨梅&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">province</span>: <span class="string">&#x27;shanxi&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">group</span>(orderList, <span class="function">(<span class="params">&#123; province &#125;</span>) =&gt;</span> province);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<h2 id="怎么可以使用-for-of-来遍历对象"><a href="#怎么可以使用-for-of-来遍历对象" class="headerlink" title="怎么可以使用 for-of 来遍历对象"></a>怎么可以使用 for-of 来遍历对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动实现Symbol.iterator迭代器函数</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="variable language_">this</span>[keys[index]];</span><br><span class="line">      <span class="keyword">const</span> done = index &gt; keys.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        done,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-lodash-get"><a href="#实现-lodash-get" class="headerlink" title="实现 lodash.get"></a>实现 lodash.get</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">obj, path</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newPath = [];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(path)) &#123;</span><br><span class="line">    newPath = path;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newPath = path.<span class="title function_">replace</span>(<span class="regexp">/\[/g</span>, <span class="string">&#x27;.&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\]/</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newPath.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj = &#123;&#125;, key</span>) =&gt;</span> obj[key], obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> object = &#123; <span class="attr">a</span>: [&#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">get</span>(object, <span class="string">&#x27;a[0].b.c&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="数组随机排序-shuffle"><a href="#数组随机排序-shuffle" class="headerlink" title="数组随机排序 shuffle"></a>数组随机排序 shuffle</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单有缺陷</span></span><br><span class="line"><span class="comment">// ECMAScript标准提到对于同一组a、b的值，compareFn(a, b)需要总是返回相同的值,sort采用原地算法</span></span><br><span class="line"><span class="comment">// 且vs引擎中丨阿宇数组部分的sort源码，考虑性能原因，对于短数组（小于等于22）使用插入排序，长数组（大于22）使用快速排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6洗牌算法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (--i) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * i);</span><br><span class="line">    [arr[j], arr[i]] = [arr[i], arr[j]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分查找-O-log2n"><a href="#二分查找-O-log2n" class="headerlink" title="二分查找 O(log2n)"></a>二分查找 O(log2n)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// elements有序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">elements, value, _start, _end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> end = _end || elements.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> start = _start || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> povitIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (elements[povitIndex] === value) &#123;</span><br><span class="line">    <span class="keyword">return</span> povitIndex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value &lt; elements[povitIndex]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(elements, value, <span class="number">0</span>, povitIndex - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(elements, value, povitIndex + <span class="number">1</span>, end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序-O-n-2"><a href="#冒泡排序-O-n-2" class="headerlink" title="冒泡排序 O(n^2)"></a>冒泡排序 O(n^2)</h2><blockquote>
<p>重复地遍历要排序的数组，比较相邻的元素并交换位置，直到整个数组都已经排序</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> elementLength = elements.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementLength - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; elementLength - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (elements[j] &gt; elements[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = elements[j];</span><br><span class="line">        elements[j] = elements[j + <span class="number">1</span>];</span><br><span class="line">        elements[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(elements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> elements = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">bubbleSort</span>(elements);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(elements)</span></span><br></pre></td></tr></table></figure>

<h2 id="快速排序-O-最好-nlogn-最慢-n-2-平均-nlog2n"><a href="#快速排序-O-最好-nlogn-最慢-n-2-平均-nlog2n" class="headerlink" title="快速排序 O(最好 nlogn,最慢 n^2,平均 nlog2n)"></a>快速排序 O(最好 nlogn,最慢 n^2,平均 nlog2n)</h2><blockquote>
<p>基本思想是选择一个基准元素，然后将数组中的元素分为小于基准元素和大于基准元素的两部分，再对这两部分分别进行排序</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">arr</span></span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort1</span>(<span class="params">arr: number[]</span>): number[] &#123;</span><br><span class="line">  <span class="keyword">const</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> midIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> midValue = arr.<span class="title function_">splice</span>(midIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">left</span>: number[] = [];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">right</span>: number[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意： splice会改变原数组，不能直接使用length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (n &lt; midValue) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort1</span>(left).<span class="title function_">concat</span>(midValue, <span class="title function_">quickSort1</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort1</span>(arr));</span><br></pre></td></tr></table></figure>

<h2 id="插入排序-n-2"><a href="#插入排序-n-2" class="headerlink" title="插入排序(n^2)"></a>插入排序(n^2)</h2><blockquote>
<p>将数组分为已排序和未排序两部分，然后将未排序部分的第一个元素插入到已排序部分的正确位置上</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handle = [arr[<span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> newItem = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = handle.<span class="property">length</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newItem &gt; handle[j]) &#123;</span><br><span class="line">        handle.<span class="title function_">splice</span>(j + <span class="number">1</span>, <span class="number">0</span>, newItem);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (j === <span class="number">0</span>) &#123;</span><br><span class="line">        handle.<span class="title function_">unshift</span>(newItem);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertSort</span>(arr));</span><br></pre></td></tr></table></figure>

<h2 id="选择排序（n-2）"><a href="#选择排序（n-2）" class="headerlink" title="选择排序（n^2）"></a>选择排序（n^2）</h2><blockquote>
<p>将数组分为已排序和未排序两部分，然后从未排序部分选择最小的元素并放到已排序部分的末尾</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    index = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[index] &gt; arr[j]) &#123;</span><br><span class="line">        index = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index !== i) &#123;</span><br><span class="line">      [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectSort</span>(arr));</span><br></pre></td></tr></table></figure>

<h2 id="归并排序（nlogn）"><a href="#归并排序（nlogn）" class="headerlink" title="归并排序（nlogn）"></a>归并排序（nlogn）</h2><blockquote>
<p>将数组分成两个子数组，分别对这两个子数组进行排序，然后将排序后的子数组合并成一个有序的数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 合并两个有序的数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = [];</span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; right.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">      temp.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> temp.<span class="title function_">concat</span>(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治思想，归并排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">parseInt</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">let</span> right = arr.<span class="title function_">slice</span>(mid);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="合并两个有序数组？"><a href="#合并两个有序数组？" class="headerlink" title="合并两个有序数组？"></a>合并两个有序数组？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeArr</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> mergedArr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pointer1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> pointer2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pointer1 &lt; arr1.<span class="property">length</span> &amp;&amp; pointer2 &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[pointer1] &lt; arr2[pointer2]) &#123;</span><br><span class="line">      mergedArr.<span class="title function_">push</span>(arr1[pointer1]);</span><br><span class="line">      pointer1++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mergedArr.<span class="title function_">push</span>(arr2[pointer2]);</span><br><span class="line">      pointer2++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pointer1 &lt; arr1.<span class="property">length</span>) &#123;</span><br><span class="line">    mergedArr.<span class="title function_">push</span>(arr1[pointer1]);</span><br><span class="line">    pointer1++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pointer2 &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">    mergedArr.<span class="title function_">push</span>(arr2[pointer2]);</span><br><span class="line">    pointer2++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mergedArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h2>]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架开发</title>
    <url>/2023/04/04/%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h2><span id="more"></span>

<p>开发脚手架的核心目标：提升前端研发效能</p>
<p>内容：</p>
<ul>
<li>创建项目+通用代码<ul>
<li>埋点</li>
<li>http 请求</li>
<li>工具方法</li>
<li>组件库</li>
</ul>
</li>
<li>git 操作<ul>
<li>创建仓库</li>
<li>代码冲突</li>
<li>远程代码同步</li>
<li>创建版本</li>
<li>发布打 tag</li>
</ul>
</li>
<li>构建和发布上线<ul>
<li>依赖安装和构建</li>
<li>资源上传 cdn</li>
<li>域名绑定</li>
<li>测试/正式服务器</li>
</ul>
</li>
</ul>
<p>脚手架核心价值将研发过程：</p>
<ul>
<li>自动化：项目重复代码拷贝/git 操作/发布上线操作</li>
<li>标准化：项目创建/git flow/发布流程/回滚流程</li>
<li>数据化：研发过程系统化、数据化，使得研发过程可量化</li>
</ul>
<p>自动化构建工具：jenkins、trvis 通常需要 git hooks 触发，在服务端运行需要定制化操作，整个过程比较复杂</p>
<p>脚手架执行原理：<br>以 vue-cli 为例子</p>
<ol>
<li>在终端输入 vue create xxx</li>
<li>终端解析出 vue 命令</li>
<li>终端在环境变量中找到(相当于 which vue，找不到提示 commond not found) vue 命令</li>
<li>根据 node/bin/目录下 vue 命令（软连接）连接到 node 全局依赖 lib/node_modules 包下的 vue.js</li>
<li>终端利用 node(/usr/bin/env node) 执行 vue.js</li>
<li>vue.js 解析 command/options</li>
<li>vue.js 执行 command</li>
<li>执行完毕，退出</li>
</ol>
<p>疑问：</p>
<ol>
<li>为什么全局安装@vue/cli 会添加 vue 命令？<br>答： 在 package.json 中的 {bin: {‘vue’: ‘bin/vue.js’}}配置</li>
<li>全局安装 npm install -g @vue/cli 时发生了什么？<br>答：首先会把@vue/cli 这个项目安装在 node 的 lib/node_modules 目录下，然后检查项目中 package 中是否存在 bin 属性，如果存在的话会在 node 的 bin 目录下创建一个对应的软连接</li>
<li>执行 vue 命令发生了什么？<br>答：操作系统会找到 which vue 的目录路径并执行这个路径的文件（先去环境变量中找对应命令，拿到目录执行）</li>
<li>怎么直接执行一个 js 文件，不通过 node？<br>答：在文件顶部写 #！/usr/bin/env node,相当于告诉操作系统去环境变量中找 node 命令去执行这个文件；/usr/bin/env node xxx.js = xxx.js(顶部添加指令) = node test.js</li>
</ol>
<p>创建软连接命令：</p>
<ul>
<li>ln -s /Users/foo/xxx.js vue</li>
</ul>
<p>脚手架开发难点：</p>
<ol>
<li>分包：将复杂的系统拆分成若干个模块</li>
<li>命令注册：vue create、vue add 等</li>
<li>参数解析 vue command options(全称、简称) params,帮助信息：Usage： vue &lt;’xxx’&gt; [‘options’]; Options: xxx</li>
<li>命令行交互（让用户选择或者输入）</li>
<li>日志打印</li>
<li>命令行文字变色</li>
<li>网络通信：http/websocket</li>
<li>文件处理</li>
</ol>
<p>从应用角度看如何开发一个脚手架：</p>
<ol>
<li>开发 npm 项目，项目中包含一个 bin/vue.js 文件，并将项目发布到 npm</li>
<li>将 npm 项目安装到 node 的 lib/node_modules 中</li>
<li>在 node 的 bin 目录下配置 vue 软连接到 lib/node_modules/@vue/cli/bin/vue.js</li>
<li>执行 vue 的命令时就可以找到 vue.js 执行</li>
</ol>
]]></content>
      <categories>
        <category>脚手架</category>
      </categories>
      <tags>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>面试知识javascript篇</title>
    <url>/2021/10/04/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86javascript%E7%AF%87/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="从浏览器地址栏输入-url-到显示页面的步骤"><a href="#从浏览器地址栏输入-url-到显示页面的步骤" class="headerlink" title="从浏览器地址栏输入 url 到显示页面的步骤"></a>从浏览器地址栏输入 url 到显示页面的步骤</h2><span id="more"></span>

<pre><code>* 先检查搜索关键字是否符合url规则，然后将其组装成完成url进行访问
* 检查缓存，浏览器检查本地强缓存是否可用，如果命中强缓存就直接从缓存中返回资源
  - 根据http header中的expires、cache-control来判断是否命中强缓存
* DNS解析，如果未命中强缓存，则向服务器发起请求，通过递归查询和迭代查询解析域名来获取对应IP地址
  - 浏览器IP缓存
  - 操作系统IP缓存
  - 本地hosts文件
  - 路由器缓存
  - 本地DNS服务器以递归方式进行查询缓存记录
  - 若没有缓存记录就向根DNS服务器查询。根DNS服务器查询到结果后会把域名和IP地址告诉本地DNS服务器，
  本地DNS服务器把对应关系暂存在缓存中（以便下次用户查询，加快网络访问），然后再发给浏览器客户端的解析服务器。
* 客户端发送HTTP请求
* 建立TCP连接，三次握手
* 发起http请求
* 负载均衡：服务端网关收到http请求后，可能会进行一系列负载均衡处理，通过反向代理分配给对应集群中的服务器去执行
* 服务端返回响应：服务端收到请求后，根据请求头中缓存标识（If-Modified-Since/If-None-Match）来判断缓存是否生效，
生效返回304状态码，未命中缓存返回200状态码和标识（Last-Modified/Etag）
* 浏览器接收到http响应后，根据connection: keep-alive判断保持连接或者四次挥手断开TCP连接
* 浏览器缓存响应头中缓存标识字段（Last-Modified/Etag）
* 解析HTML文档，此时document.readystate为loading
* 构建DOM树，浏览器从上到下解析html文档生成DOM节点树
* 构建CSSOM树，浏览器解析遇到样式进行异步下载，构建CSSOM树（不会阻塞DOM树构建，但是会阻塞渲染，防止css规则不断变化）
* 构建渲染树，根据DOM节点树和CSSOM树构建渲染树Render
* 遇到图片异步下载，遇到不带async和defer的script时，阻塞html的解析并下载且执行
* 带async的script标签，不会中断html解析并行下载脚本，下载完成后中断html解析并执行脚本，优先级高于defer,但是无序
* 带defer的script标签，不会中断html解析并行下载脚本，当浏览器解析完html时，DOMContentLoaded事件即将触发时执行脚本
* 文档解析完成，document.readystate变为interactive,触发DOMContentLoaded事件
* 等待图片加载或所有异步脚本加载执行完成，document.readystate变为complete,window触发load事件
* 布局Layout，根据Render树计算每个节点在屏幕上的位置布局
* 绘制Paint，绘制节点到屏幕上，涉及到构建图层树、绘制列表、光栅化（合成线程）和显示等。
</code></pre>
<p>其他：<br>dns-prefetch:<br>前端网络性能优化的一种措施，提前解析之后可能遇到的域名，使解析结果缓存到系统缓存中，缩短 DNS 解析时间，进而提高网站的访问速度</p>
<p>dns-prefetch 原理：<br>浏览器缓存-&gt;系统缓存-&gt;路由器缓存-&gt;ISP(运行商)DNS 缓存-&gt;根域名服务器-&gt;顶级域名服务器-&gt;主域名服务器</p>
<p>dns-prefetch 将解析后的 IP 缓存放在系统缓存中<br>dns-prefetch 与 preconnect 预连接提示配对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com/&quot; crossorigin&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://fonts.gstatic.com/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>Note：如果页面需要建立与许多第三方域的连接，则将它们预先连接会适得其反。 preconnect 提示最好仅用于最关键的连接。对于其他的，只需使用 <link rel="dns-prefetch"> 即可节省第一步的时间 DNS 查找。</p>
<p>扩展：<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NDY4NDgyOQ==&mid=2247491757&idx=1&sn=a956c6c62c98e2d5ee71c8ed8d3a3eb8&chksm=cecfa85ff9b82149a3e50e81789b29cc0923745cf8a8f7713619aa2499753a3de760f24e6f93&scene=132#wechat_redirect">收到的 HTML 如果包含几十个图片标签，这些图片是以什么方式、什么顺序、建立了多少连接、使用什么协议被下载下来的呢？</a></p>
<h2 id="你知道哪些前端攻击？该如何预防？"><a href="#你知道哪些前端攻击？该如何预防？" class="headerlink" title="你知道哪些前端攻击？该如何预防？"></a>你知道哪些前端攻击？该如何预防？</h2><ul>
<li><p>xss</p>
<ul>
<li>Cross Site Script 跨站脚本攻击</li>
<li>手段：将 js 代码插入到网页内容中，渲染时执行 js 代码</li>
<li>预防：特殊字符替换（前端或后端）</li>
<li>输入检查，对于用户输入进行格式检查。</li>
</ul>
</li>
<li><p>csrf</p>
<ul>
<li><p>Cross Site Request Forgery 跨站请求伪造</p>
</li>
<li><p>手段：诱导用户去访问另一个网站的接口，伪造请求</p>
</li>
<li><p>预防：严格的跨域限制 + 验证码机制</p>
</li>
<li><p>csrf 详细过程</p>
<ul>
<li>用户登录 A 网站，有了 A 网站的 cookie</li>
<li>诱导用户到 B 网站，并发起 A 网站的请求</li>
<li>A 网站的 API 发现有 cookie，认为是用户自己操作的</li>
</ul>
</li>
<li><p>csrf 预防手段</p>
<ul>
<li>严格的跨域请求限制，如判断 referer（请求来源）</li>
<li>为 cookie 设置 SameSite，禁止跨域传递 cookie<ul>
<li>Chrome 51 开始，浏览器的 Cookie 新增加了一个 SameSite 属性，用来防止 CSRF 攻击 和用户追踪（第三方恶意获取 cookie），限制第三方 Cookie，从而减少安全风险。</li>
</ul>
</li>
<li>关键接口使用短信验证码</li>
<li>token 验证</li>
</ul>
</li>
</ul>
</li>
<li><p>点击劫持</p>
<ul>
<li>click jacing</li>
<li>手段：诱导界面上蒙一个透明 iframe，诱导用户点击</li>
<li>预防：让 iframe 不能跨域加载<ul>
<li>X-FRAME-OPTIONS 响应头是用来给浏览器指示允许一个页面可否在<code>&lt;frame&gt;</code>,<br><code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站<br>内容没有被嵌到别人的网站中去，也从而避免点击劫持的攻击。</li>
</ul>
</li>
</ul>
</li>
<li><p>DDos</p>
<ul>
<li>Distribute denial-of-service 分布式拒绝服务</li>
<li>手段：分布式的、大规模的流量访问，使服务器瘫痪</li>
<li>预防：软件层不好做，需硬件预防（如阿里云 WAF）</li>
</ul>
</li>
<li><p>SQL 注入</p>
<ul>
<li>手段：提交内容时写入 SQL 语句，破环数据库</li>
<li>预防：处理输入的内容，替换特殊字符</li>
</ul>
</li>
</ul>
<h2 id="性能优化（空间换时间）"><a href="#性能优化（空间换时间）" class="headerlink" title="性能优化（空间换时间）"></a>性能优化（空间换时间）</h2><ul>
<li><p>性能优化原则</p>
<ul>
<li>多使用内存、缓存</li>
<li>减少 CPU 计算，减少网络加载耗时</li>
<li>适用于所有编程的性能优化-空间换时间</li>
</ul>
</li>
<li><p>减少资源体积：压缩代码</p>
</li>
<li><p>减少访问次数：合并代码，SSR 服务器渲染，缓存，精灵图</p>
<ul>
<li>缓存（webpack contenthash）<ul>
<li>静态资源加 hash 后缀，根据文件内容计算 hash</li>
<li>文件内容不变，则 hash 不变则 url 不变</li>
<li>url 和文件不变，则会自动触发 http 的缓存机制，返回 304</li>
</ul>
</li>
<li>SSR<ul>
<li>服务器端渲染：将网页和数据一起加载，一起渲染</li>
<li>非 SSR（前后端分离）：先加载网页，后加载数据，再渲染数据</li>
</ul>
</li>
</ul>
</li>
<li><p>DNS 预解析</p>
</li>
<li><p>减少 cookie 大小，http 请求会携带 cookie</p>
</li>
<li><p>使用 http2 头部压缩</p>
</li>
<li><p>避免重定向：当页面发生了重定向，就会延迟整个 HTML 文档的传输。在 HTML 文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。</p>
</li>
<li><p>渲染优化</p>
<ul>
<li>css 放在 head，js 放在 body 最下面</li>
<li>尽早开始执行 js，用 DOMContentLoaded 触发</li>
<li>懒加载（图片懒加载-IntersectionObserver，下滑更多等）</li>
<li>对 DOM 查询进行缓存</li>
<li>减少 DOM 数量，大数据量分页、虚拟列表</li>
<li>合并频繁的 DOM 操作,document.createDocumentFragment()，减少 dom 操作次数</li>
<li>节流 throttle、防抖 debounce</li>
<li>使用 loading 图，提高用户视觉体验</li>
<li>使用 GPU 加速：使用 transform、opacity，要慎用低端机 GPU 差，占用较多内存，因此是否开启硬件加速，要用测试结果决定</li>
<li>使用 requestAnimationFrame 来实现视觉变化</li>
</ul>
</li>
<li><p>三方资源</p>
<ul>
<li>第三方资源、库使用 CDN</li>
<li>压缩图片体积，减少图片大小</li>
<li>图片使用 webp 格式，减少图片体积</li>
<li>preload 预先加载 css 文件或者字体文件、js 文件等<ul>
<li>浏览器需要先把 html 页面加载回来，才能知道下一步去加载那些 js、css 或字体文件，中间时间就被浪费掉了</li>
<li>可以在等待 html 响应的同时把重要的静态资源文件也加载回来</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="你对闭包了解多少？"><a href="#你对闭包了解多少？" class="headerlink" title="你对闭包了解多少？"></a>你对闭包了解多少？</h2><pre><code>解释一下作用域链是如何产生的
解释一下js执行山下文的创建、执行过程
解释一下闭包所产生的变量放在哪里
</code></pre>
<ul>
<li>闭包的定义：闭包就是能够读取其他函数内部变量的函数。</li>
<li>闭包的底层实现原理</li>
<li>js 执行上下文：</li>
<li><img src="https://img-blog.csdnimg.cn/20190527213618675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTg4NDIx,size_16,color_FFFFFF,t_70" alt="image"></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js运行三部曲</span><br><span class="line">1.语法分析</span><br><span class="line">2.预编译</span><br><span class="line">3.解释执行</span><br><span class="line"></span><br><span class="line">js代码需要经过浏览器V8引擎进行预编译，里面涉及到变量提升、函数提升。</span><br><span class="line">预编译的环境需要个环境，这个环境就是执行上下文。</span><br><span class="line"></span><br><span class="line">js执行上下文分为三种：</span><br><span class="line">1.全局执行上下文：代码开始执行时首先进入的环境</span><br><span class="line">2.函数执行上下文：函数调用时，会开始执行函数中的代码</span><br><span class="line">3.eval执行上下文：不建议使用</span><br><span class="line"></span><br><span class="line">执行上下文的周期，分为两个阶段</span><br><span class="line">1.创建阶段</span><br><span class="line">    创建词法环境</span><br><span class="line">    生成变量对象VO，建立作用域链</span><br><span class="line">    确认this指向，并绑定this</span><br><span class="line">2.执行阶段</span><br><span class="line">    进行变量赋值，函数引用以及执行代码</span><br><span class="line"></span><br><span class="line">预编译发生在函数执行前，预编译四部曲：</span><br><span class="line">1.创建AO对象</span><br><span class="line">2.找形参和变量声明，将变量和形参作为AO的属性名，值为undefined</span><br><span class="line">3.将形参和实参相统一</span><br><span class="line">4.在函数体中找到函数声明，值赋予函数体（函数名相同，后者覆盖前者）</span><br><span class="line">5.最后程序输出变量值的时候，就是从AO对象中拿</span><br><span class="line">（此时就产生了外部作用域的引用，js查找变量的规则就是如果在函数执行上下文中找不到变量，</span><br><span class="line">就在调用上下文中寻找他，如果还没有就一直往上一级，直到全局执行上下文，如果还没有，就是undefined，js形成闭包）</span><br></pre></td></tr></table></figure>

<h2 id="js-的执行机制"><a href="#js-的执行机制" class="headerlink" title="js 的执行机制"></a>js 的执行机制</h2><p>js 是单线程的，处理 js 任务只能一个一个顺序执行，js 中把任务分为了同步任务和异步任务，<br>同步任务进入主线程先执行，异步任务进入 Event Table 并注册函数，指定事情完成后，Event Table 就会将函数移入到事件队列 Event Queque 中，等待主线程任务执行完毕，就会从事件队列中取出对应事件进入主线程执行。</p>
<p>macro-task（宏任务）：包括整体代码 script、setTimeout、setInterval、IO 操作、UI 交互、postMessage 等<br>micro-task（微任务）：Promise.then、process.nextTick、MutationObserve 等<br>微任务先于宏任务先执行（除了 script）执行过程不同任务进入不同的 event queue</p>
<p>js 先执行整体的同步任务代码，遇到微任务就会将其放入到微任务事件队列，遇到宏任务放到宏任务事件队列中。</p>
<p>然后整体的同步任务代码执行完之后，就会先执行微任务队列中的任务，<br>等待微任务队列中的所有任务执行完毕之后，再去从宏任务队列中找到第一个任务进行执行，<br>执行过程中，如果遇到微任务就会放到微任务队列中，等到该宏任务执行完毕之后，<br>就会查看微任务队列中有没有微任务，如果有就先执行微任务队列中的任务，否则执行第二个宏任务，<br>以此类推。</p>
<h2 id="简单说下原型链"><a href="#简单说下原型链" class="headerlink" title="简单说下原型链"></a>简单说下原型链</h2><ul>
<li><p>原型链是由原型对象组成的，每个对象都有<strong>proto</strong>属性，指向了创建该对象的构造函数的<br>原型，<strong>proto</strong>将对象连接起来组成了原型链。</p>
</li>
<li><p>原型链：用来实现继承和共享属性的有限对象链。</p>
</li>
<li><p>每个对象都有<strong>proto</strong>（隐式原型）属性，指向创建该对象的构造函数的原型。其实<br>这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能<br>访问到，所以使用 <em>proto</em> 来访问。</p>
</li>
<li><p>对象的隐式原型等于对象的构造函数的显式原型：obj.<strong>proto</strong> === Object.prototype</p>
</li>
<li><p>访问属性的时候，js 引擎会调用内部的默认[[Get]]操作，[[Get]]操作首先会检查对象本身是否包含这个属性<br>如果对象没有这个属性，则对象可以通过<strong>proto</strong>来寻找不属于该对象的属性，<strong>proto</strong><br>将对象和原型连接起来形成原型链</p>
</li>
<li><p>Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎创建。</p>
</li>
</ul>
<h2 id="defer-和-async-有什么区别？"><a href="#defer-和-async-有什么区别？" class="headerlink" title="defer 和 async 有什么区别？"></a>defer 和 async 有什么区别？</h2><ul>
<li>区别 <img src="/images/md_img/defer_async.jpg" alt="区别"></li>
</ul>
<h2 id="如何监听未处理的异常"><a href="#如何监听未处理的异常" class="headerlink" title="如何监听未处理的异常"></a>如何监听未处理的异常</h2><ul>
<li>try…catch<ul>
<li>无法捕捉到语法错误，只能捕捉运行时错误</li>
<li>可以拿到出错的信息(出错的文件，行号，列号)</li>
</ul>
</li>
<li>window.onerror<ul>
<li>由于 try…catch 只能捕获块里面的错误，全局的一些错误可以用 window.onerror</li>
</ul>
</li>
<li>window.addEventListener(‘error’,callback):捕获资源错误</li>
<li>window.addEventListener(‘unhandledrejection’,callback):捕获 promise 类型错误</li>
<li>vue.config.errorHandler: vue 错误</li>
<li>componentDidCatch：错误边界函数</li>
</ul>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><ul>
<li><p>客户端的本地存储：</p>
<ul>
<li><p>localStorage - 生命周期永久生效，除非手动删除，否则关闭页面也会存在 - 可以在同一浏览器多窗口共享 - 以键值对的形式存储使用</p>
</li>
<li><p>方法：</p>
</li>
<li><p>存储数据：localStorage.setItem(key, value)</p>
</li>
<li><p>获取数据：localStorage.getItem(key)</p>
</li>
<li><p>删除数据：localStorage.removeItem(key)</p>
</li>
<li><p>删除所有数据：localStorage.clear()</p>
</li>
<li><p>sessionStorage</p>
<ul>
<li><p>声明周期为关闭浏览器窗口</p>
</li>
<li><p>在同一个窗口中数据可以共享</p>
</li>
<li><p>以键值对的形式存储</p>
</li>
<li><p>方法：</p>
<ul>
<li>存储数据：sessionStorage.setItem(key, value)</li>
<li>获取数据：sessionStorage.getItem(key)</li>
<li>删除数据：sessionStorage.removeItem(key)</li>
<li>删除所有数据：sessionStorage.clear()</li>
</ul>
<p><a href='https://www.cnblogs.com/pengc/p/8714475.html'>localStorage 和 sessionStorage</a></p>
<p><a href='https://www.cnblogs.com/8023-CHD/p/11067141.html'>cookie 和 session</a></p>
</li>
</ul>
</li>
<li><p>IndexDB 离线存储，当网络断开，可以从浏览器中读取数据，用来做一些离线应用</p>
</li>
<li><p>Cookie</p>
<ul>
<li>包含字段<ul>
<li>name: cookie 名称</li>
<li>value: 值</li>
<li>domain: cookie 生效的域名</li>
<li>path: cookie 生效的路径</li>
<li>expires/max-age: cookie 过期时间</li>
<li>size: 大小</li>
<li>HttpOnly: 用户端不可更改</li>
</ul>
</li>
<li>存储用户信息，通过在客户端记录信息确定用户身份，最大为 4kb</li>
<li>会话 Cookie，若不设置过期时间，表示这个 cookie 的生命周期为浏览器会话期间，浏览器<br>关闭，cookie 就消失，会话 cookie 会保存在内存中而不是硬盘上。</li>
<li>持久 Cookie，若设置了过期时间，浏览器会把 cookie 保存在硬盘上，关闭浏览器仍然有效直到<br>超过设定的过期时间。</li>
<li>cookie 数据始终在同源的 http 请求中携带(即使不需要)，即会在浏览器和服务器之间来回传递。</li>
<li>Cookie 具有不可跨域名性，例如浏览器访问百度不会带上谷歌的 cookie</li>
</ul>
</li>
</ul>
</li>
<li><p>监测是否支持 web Storage</p>
<ul>
<li>1.通过 window.sessionStorage,window.localStorage 判断浏览器是否支持</li>
<li>2.通过 try{}catch{} 执行一下 storage.setItem(‘key’, value);storage.removeItem(‘key’),判断接口方法是否可用。</li>
</ul>
</li>
<li><p>服务端的存储：</p>
<ul>
<li>Session<ul>
<li>Session 服务器端一种记录客户端状态的机制</li>
<li>cookie 数据存放在客户的浏览器上，session 将数据存放在服务器端</li>
<li>Session 相对 Cookie 来说比较安全，别人可以分析本地存放的 cookie 进行 cookie 欺骗</li>
<li>Session 会在一定时间内保存在服务器上，访问量较多的时候会比较占用服务器的性能，<br>考虑到减轻服务器性能方面的时候，应当使用 cookie</li>
<li>可以将登陆等重要信息保存在 session，其他信息放在 cookie 中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="localStorage-超过最大限制（5M）怎么处理？"><a href="#localStorage-超过最大限制（5M）怎么处理？" class="headerlink" title="localStorage 超过最大限制（5M）怎么处理？"></a>localStorage 超过最大限制（5M）怎么处理？</h2><ul>
<li><p>localstorage 一般最大容量为 5M，意思是每个域名（假如为 a.com）下最大 localstorage 容量为 5M，我们可以通过 iframe 创建 b.com 域框架用于存储 a.com 剩下的数据，然后通过 postMessage 读写数据。</p>
<ul>
<li>通常对于不同页面的脚本，只有在同源策略下才能通信，但是 window.postMessage(message,targetOrigin)方法提供了一种受控机制来规避此限制。</li>
<li>而且 localStorage 本身定位也不是大数据量的存储方案</li>
</ul>
</li>
<li><p>浏览器提供了大数据量的本地存储的方案：IndexedDB</p>
<ul>
<li>一般存储数据大小在 250M 以上</li>
<li>可以使用 localforage 插件（yarn add localforage），api 基本和 localStorage 类似，学习成本低</li>
</ul>
</li>
</ul>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul>
<li><p>cookie 可用于传递少量数据，是一个再服务器和客户端之间来回传送文本值的内置机制，服务器可以根据 cookie 追踪用户在不同页面的访问信息。</p>
</li>
<li><p>cookie 特点</p>
<ul>
<li>1.大小限制，cookie 大小限制在 4KB 以内</li>
<li>2.宽带限制，cookie 数据会在服务器和浏览器之间来回传送，所以访问页面会消耗宽带。</li>
<li>3.安全风险，cookie 会频繁的在网络中传送，不加密的情况下是有安全风险的。</li>
<li>4.操作复杂</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setCookie(name: string, value: string) &#123;</span><br><span class="line">    const exp = new Date();</span><br><span class="line">    //过期时间设置为一天</span><br><span class="line">    exp.setTime(exp.getTime() + 24 * 60 * 60 * 1000);</span><br><span class="line">    document.cookie = `$&#123;name&#125;=$&#123;escape(value);expires=$&#123;exp.toString()&#125;&#125;`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="fetch-和-axios"><a href="#fetch-和-axios" class="headerlink" title="fetch 和 axios"></a>fetch 和 axios</h2><pre><code>fetch取消发送
1.创建一个AbortController实例
2.该实例具有signal属性
3.将signal传递给fetch option
4.调用AbortController的abort属性来取消所有使用该信号的fetch

axios取消发送
1.const cancelToken = axios.CancelToken
2.const source = CancelToken.source()
3.axios.get(&#39;/xxx&#39;,&#123;cancelToken: source.token&#125;)
</code></pre>
<h2 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h2><ul>
<li>箭头函数中的 this 是在定义函数的时候绑定的（继承自父执行上下文中的 this），而不是执行函数时绑定。</li>
<li>箭头函数没有 this，所以不能用作构造函数。</li>
</ul>
<h2 id="Map-和-Set-两种新的数据结构的区别？"><a href="#Map-和-Set-两种新的数据结构的区别？" class="headerlink" title="Map 和 Set 两种新的数据结构的区别？"></a>Map 和 Set 两种新的数据结构的区别？</h2><ul>
<li><p>Map 类似 Object 是一种键值对集合，区别在于 Map 的键不仅限于字符串，其他各种类型的值都可以作为 Map 的键</p>
</li>
<li><p>Set 是类似数组的一种数据结构，不同点在于 Set 中没有重复的值</p>
</li>
</ul>
<h2 id="js-的-new-操作符都做了些什么？"><a href="#js-的-new-操作符都做了些什么？" class="headerlink" title="js 的 new 操作符都做了些什么？"></a>js 的 new 操作符都做了些什么？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个空的js对象&#123;&#125;</span><br><span class="line">2. 将空对象的隐式原型__proto__指向构造函数的原型</span><br><span class="line">3. 将空对象作为构造函数的上下文（改变this指向）</span><br><span class="line">4. 对构造函数返回值做判断</span><br><span class="line"></span><br><span class="line">实现：</span><br><span class="line">function newFn(fn, ...args) &#123;</span><br><span class="line">  const obj = Object.create(fn.prototype);</span><br><span class="line">  const result = fn.apply(obj, args);</span><br><span class="line">  return typeof result === &#x27;object&#x27; &amp;&amp; result !== null ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Person(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const p = newFn(Person, &#x27;Jerome&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;p.name :&gt;&gt; &#x27;, p.name); // p.name :&gt;&gt;  Jerome</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">在new的时候，会对构造函数的返回值做一些判断</span><br><span class="line">1. 如果返回值是基础类型数据，则忽略返回值</span><br><span class="line">2. 如果返回值是引用数据类型，则使用return的返回，也就是new操作符无效</span><br></pre></td></tr></table></figure>

<h2 id="es6-新特性"><a href="#es6-新特性" class="headerlink" title="es6 新特性"></a>es6 新特性</h2><pre><code>1.let和const
2.模版字符串
3.箭头函数
4.函数可以设置默认参数值
5.扩展运算符
6.对象和数组的解构
7.class
</code></pre>
<h2 id="图片懒加载原理"><a href="#图片懒加载原理" class="headerlink" title="图片懒加载原理"></a>图片懒加载原理</h2><ul>
<li>浏览器是否发起请求是根据<img />标签的 src 属性</li>
<li>所以懒加载的关键是：在图片没有进入可视区域时，先不给<img />的 src 属性赋值，等到图片进入可是区域再给 data-src -&gt; src 赋值。</li>
<li>// 方法一：offsetTop - scrollTop &lt;= 视口高度</li>
<li>// 方法二：getBoundingClientRect().top &lt;= 视口高度 screenHeight</li>
<li>// 方法三：IntersectionObserver</li>
</ul>
<h2 id="为什么-try-catch-不能捕获到-promise-的错误？"><a href="#为什么-try-catch-不能捕获到-promise-的错误？" class="headerlink" title="为什么 try/catch 不能捕获到 promise 的错误？"></a>为什么 try/catch 不能捕获到 promise 的错误？</h2><ul>
<li><p>try-catch 主要用于捕获同步函数的异常，如果 try 里面的异步方法出现了异常，此时 catch 是无法捕获到异常的。ES6 中 Promise 对象的实例提供了 catch() 方法，表示异步捕获异常。</p>
</li>
<li><p>原因：当异步函数抛出异常时，对于宏任务而言，执行函数时已经将该函数推入栈，此时并不在 try-catch 所在的栈，所以 try-catch 并不能捕获到错误。对于微任务而言，比如 promise，promise 的构造函数的异常只能被自带的 reject 也就是.catch 函数捕获到。</p>
</li>
</ul>
<h2 id="requestIdleCallback-和-requestAnimationFrame-有什么区别？"><a href="#requestIdleCallback-和-requestAnimationFrame-有什么区别？" class="headerlink" title="requestIdleCallback 和 requestAnimationFrame 有什么区别？"></a>requestIdleCallback 和 requestAnimationFrame 有什么区别？</h2><pre><code>requestIdleCallback(callback, timeout):
· 低优先级
· 兼容性不好
· 执行时机：浏览器空闲时被调用
· 指定timeout，回调任务就会被放进事件循环队列，强制执行，但是会影响性能

requestAnimationFrame(callback):
· 高优先级
· 执行时机：下次重绘前执行传入的回调函数

- 补充
  - 两者都是宏任务(其实也算不上，重要的是执行时机)
</code></pre>
<h2 id="如何阻止冒泡"><a href="#如何阻止冒泡" class="headerlink" title="如何阻止冒泡?"></a>如何阻止冒泡?</h2><pre><code>W3C的方法e.stopPropagation(),IE使用e.cancelBubble = true;

封装：
    //阻止冒泡行为
    function stopBubble(e) &#123;
        //如果提供了事件对象，则这是一个非IE浏览器
        if (e &amp;&amp; e.stopPropagation) e.stopPropagation()
        //IE的方法
        else window.event.cancelBubble = true
    &#125;
</code></pre>
<h2 id="如何阻止默认事件？"><a href="#如何阻止默认事件？" class="headerlink" title="如何阻止默认事件？"></a>如何阻止默认事件？</h2><pre><code>W3C的方法是e.preventDefault(),IE使用e.returnValue = false

封装：
    //阻止浏览器的默认行为
    function stopDefault (e) &#123;
        if (e &amp;&amp; e.preventDefault) e.preventDefault()
        //IE中阻止默认事件的方法
        else window.event.returnValue = false
        return false
    &#125;
</code></pre>
<h2 id="补充：事件绑定的封装"><a href="#补充：事件绑定的封装" class="headerlink" title="补充：事件绑定的封装"></a>补充：事件绑定的封装</h2><pre><code>function addEvent(element,type,handle) &#123;
    if(element.addEventListener)&#123;
        element.addEventListener(type,handle,false);
    &#125;else if(element.attachEvent)&#123;
        element.attachEvent(&#39;on&#39;+type,function () &#123;
            handle.call(element);
        &#125;)
    &#125;else &#123;
        element[&#39;on&#39;+type] = handle;
    &#125;
&#125;
</code></pre>
<h2 id="如何判断一个对象是否为数组"><a href="#如何判断一个对象是否为数组" class="headerlink" title="如何判断一个对象是否为数组"></a>如何判断一个对象是否为数组</h2><pre><code>1. Array.prototype.isPrototypeOf(obj)方法，判断Array.prototype是不是在obj的原型链中，
如果在，则返回true，否则返回false。

2. obj instanceof Array

3. Object.prototype.toString.call(obj); //(===&quot;[object Array]&quot;)

4.Array.isArray(obj)
</code></pre>
<h2 id="Http-的持久连接和管线化"><a href="#Http-的持久连接和管线化" class="headerlink" title="Http 的持久连接和管线化"></a>Http 的持久连接和管线化</h2><pre><code>1. 什么是持久连接？
    HTTP1.1规定了默认保持持久连接，数据传输完成也保持TCP连接不断开，等待同域名下
    继续使用这个通道传输数据,在一个TCP连接上传输多个HTTP请求和响应。

    持久连接避免了重新建立连接，大大减少了建立和关闭连接的消耗和延迟，HTTP的连接是建立
    在TCP协议之上的，建立一条TCP连接需要三次握手，TCP连接关闭需要四次挥手，这些都需要时间。

2. 什么是管线化？
    持久连接：
        请求1 ——&gt; 响应1 ——&gt; 请求2 ——&gt; 响应2
    管线化：
        请求1 ——&gt; 请求2 ——&gt; 响应1 ——&gt; 响应2

    管线化机制需要通过持久化连接完成。

    持久连接的一个缺点是请求和响应式是顺序执行的，只有在请求1的响应收到之后，
    才会发送请求2，而管线化不需要等待上一次请求得到响应就可以进行下一次请求。
    实现并行发送请求。

    只有GET和HEAD请求可以进行管线化，而POST有所限制。

    初次建立连接不应启动管线机制，因为对方服务器不一定支持HTTP1.1版本的协议。
</code></pre>
<h2 id="为什么利用多个域名来存储网站资源会更有效？"><a href="#为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="为什么利用多个域名来存储网站资源会更有效？"></a>为什么利用多个域名来存储网站资源会更有效？</h2><pre><code>1.CDN 是构建在网络之上的内容分发网络，可以使用户就近获取资源，减低网络拥塞，提高用户
访问的响应效率以及命中率。

2.突破浏览器的并发限制，同一时间针对同一域名下的请求有一定的数量限制，超过限定数目
的请求会被阻塞。

3.节约cookie带宽

4.减少主域名的连接数，优化页面响应速度

5.防止不必要的安全问题
</code></pre>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><pre><code>基本数据类型：Null、Undefined、String、Boolean、Number
ES6：Symbol
ES10：Bigint（可以突破安全整数限制，安全的存储和操作最大整数之外的整数，不会损失精度）
</code></pre>
<h2 id="Object-seal-和-Object-freeze"><a href="#Object-seal-和-Object-freeze" class="headerlink" title="Object.seal 和 Object.freeze"></a>Object.seal 和 Object.freeze</h2><p>Object.seal</p>
<ol>
<li>当前属性的值只要原来可写就可以改变</li>
<li>不能向对象新增属性</li>
<li>已有属性都变得不可配置，也就是不可删除</li>
</ol>
<p>Object.freeze</p>
<ol>
<li>不能向对象新增属性</li>
<li>不能删除已有属性</li>
<li>不能修改已有属性的 enumable、writable、configurable</li>
<li>不能修改已有属性的值</li>
<li>该对象的原型也不能修改</li>
</ol>
<h2 id="牛客学习"><a href="#牛客学习" class="headerlink" title="牛客学习"></a>牛客学习</h2><ul>
<li><p>超链接</p>
<ul>
<li>a 标签的 href 的属性值是 url，里面必须包含协议，没有协议就会解析成相对路径。</li>
</ul>
</li>
<li><p>HTTP 状态码分类：</p>
<ul>
<li>1** 信息，服务器收到请求，需要请求者继续执行操作</li>
<li>2** 成功，操作被成功接受并处理。<ul>
<li>200 服务端成功处理了请求并返回内容</li>
</ul>
</li>
<li>3** 重定向，需要进一步的操作以完成请求<ul>
<li>301 永久重定向</li>
<li>302 临时重定向</li>
<li>304 资源未被修改，返回一个 304 状态吗然后从本地缓存中加载请求的资源</li>
</ul>
</li>
<li>4** 客户端错误，请求包含语法错误或无法完成请求。<ul>
<li>404 （页面丢失）未找到资源</li>
<li>403 服务器拒绝请求</li>
<li>408 （请求超时） 服务器等候请求时发生超时</li>
</ul>
</li>
<li>5** 服务器错误，服务器在处理请求的过程中发生错误<ul>
<li>503 服务器暂时不可用</li>
<li>504 服务器内部错误</li>
</ul>
</li>
</ul>
</li>
<li><p>HTTP 协议的特征：</p>
<ul>
<li>C/S(客户端/服务器)模式：只要客户端和服务器知道如何处理数据内容，任何类型的数据<br>都可以通过 HTTP 来发送，客户端和服务器指定合适的 MIME-type 内容类型。</li>
<li>简单快速</li>
<li>灵活</li>
<li>无连接：限制每次连接只处理一个请求，收到客户的应答后即断开连接，可以节省传输时间。</li>
<li>无状态：对于事物处理没有记忆能力，意味着如果后续处理需要前面的信息，则必须重传，<br>这样就会导致每次连接传送的数据量增大，另一方面，在服务器不需要先前信息时它的应答就会很快。</li>
</ul>
</li>
<li><p>get 和 post 的请求区别？</p>
<ul>
<li>区别一：<ul>
<li>get 重点是从服务器上获取资源</li>
<li>post 重点是向服务器发送数据</li>
</ul>
</li>
<li>区别二：<ul>
<li>get 传输数据通过 url 请求，以 field（字段）=value 的形式放在 url 后，用“？”连接，<br>多个请求数据间用“&amp;”连接，过程用户可见。</li>
<li>post 传输数据放在请求体（request body）中发送给服务器，用户不可见。</li>
</ul>
</li>
<li>区别三：<ul>
<li>get 传输数据大小有限制，但效率较高</li>
<li>post 可以传输大量数据，所以上传文件用 post 方式</li>
</ul>
</li>
<li>区别四：<ul>
<li>get 请求不安全，因为参数直接暴露在 url 上，不能用来传递敏感信息。</li>
<li>post 较 get 安全性较高。</li>
</ul>
</li>
<li>区别五：<ul>
<li>get 方式只能支持 ASCII 字符，向服务传的中文字符可能会乱码。</li>
<li>post 支持标准字符集，可以正确传递中文字符。</li>
</ul>
</li>
<li>区别六：<ul>
<li>get 在浏览器回退是无害的，而 post 会再次提交请求。</li>
</ul>
</li>
<li>区别七<ul>
<li>get 请求会被浏览器主动 cache（缓存），而 post 不会除非手动设置。</li>
</ul>
</li>
</ul>
</li>
<li><p>iframe 有哪些缺点？</p>
<ul>
<li><p>iframe 会阻塞主页面的 onload 事件</p>
</li>
<li><p>通过 oIframe.contentWindow 寻找子 window 对象</p>
</li>
<li><p>通过 window.parent 寻找父级窗体</p>
</li>
<li><p>通过 window.top 寻找顶级窗体</p>
</li>
<li><p>window.location.hash 解决父页面向子页面传值</p>
</li>
<li><p>window.name 解决子页面向父页面传值</p>
</li>
<li><p>不利于 SEO，搜索引擎的检索程序无法解读这种页面（百度 spider 不收录，浏览器对 iframe 框架的兼容问题）</p>
</li>
<li><p>iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</p>
</li>
<li><p>如果需要使用 iframe，最好通过 javascript 动态给 iframe 添加 src 属性值。</p>
</li>
</ul>
</li>
<li><p>xhtml 和 html 有什么区别？</p>
<ul>
<li><p>性能方面</p>
<ul>
<li>XHTML 兼容性好，兼容各大浏览器、手机以及 PDA，使浏览器可以快速正确编译网页</li>
</ul>
</li>
<li><p>书写习惯方面</p>
<ul>
<li><p>HTML 标签不区分大小写，XHTML 所有标签必须小写</p>
</li>
<li><p>XHTML 必须成双成对</p>
</li>
<li><p>HTML 对标签顺序要求不严格，XHTML 标签顺序必须正确</p>
</li>
<li><p>等等</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>html 和 xml 的区别？</p>
<ul>
<li><p>xml 被设计用来传输和存储数据，其焦点是数据的内容</p>
</li>
<li><p>html 被设计用来显示数据，其焦点是数据的外观</p>
</li>
<li><p>html 旨在显示信息，而 xml 旨在传输信息</p>
</li>
<li><p>xml 在定义标记时区分大小写，而 html 不区分大小写</p>
</li>
</ul>
</li>
<li><p>link 和@import 的区别：<br><strong>两者都是外部引用 CSS 的方式，但有一定的区别</strong></p>
<pre><code>+ link是XHTML标签，除了加载CSS外，还可以加载其他文件；@import只能加载CSS。

+ 解析到link时，页面会同步加载Css；@import在页面加载完后加载Css。

+ link是XHTML标签，无兼容问题；@import是在**CSS2.1**之后提出的，只有再IE5以上才能识别。

+ link可以js动态引入，@import不行

+ @import的最佳写法： @import url(style.css),其他写法：@import &#39;style.css&#39;、
@import &quot;style.css&quot;、@import url(&#39;style.css&#39;)、@import url(&quot;style.css&quot;)
</code></pre>
</li>
<li><p>viewport</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>// width 设置 viewport 宽度，为一个正整数，或字符串‘device-width’<br>// device-width 设备宽度<br>// height 设置 viewport 高度，一般设置了宽度，会自动解析出高度，可以不用设置<br>// initial-scale 默认缩放比例（初始缩放比例），为一个数字，可以带小数<br>// minimum-scale 允许用户最小缩放比例，为一个数字，可以带小数<br>// maximum-scale 允许用户最大缩放比例，为一个数字，可以带小数<br>// user-scalable 是否允许手动缩放</p>
<ul>
<li><p>单行文本溢出省略号</p>
<p>overflow: hidden;</p>
<p>text-overflow:ellipsis;</p>
<p>white-space: nowrap;</p>
</li>
<li><p>多行文本溢出省略号</p>
<p>display: -webkit-box;</p>
<p>-webkit-box-orient: vertical;</p>
<p>-webkit-line-clamp: 3;</p>
<p>overflow: hidden;</p>
</li>
<li><p>换行标签</p>
<p>word-wrap: break-word</p>
</li>
</ul>
<h2 id="浏览器是怎么对-HTML5-的离线存储资源进行管理和加载的？"><a href="#浏览器是怎么对-HTML5-的离线存储资源进行管理和加载的？" class="headerlink" title="浏览器是怎么对 HTML5 的离线存储资源进行管理和加载的？"></a>浏览器是怎么对 HTML5 的离线存储资源进行管理和加载的？</h2><ul>
<li><p>在线的情况下：浏览器发现 html 头部有 manifest 属性，会请求 manifest 文件，如果是<br>第一次访问 app，浏览器会根据 manifest 文件的内容下载相应的资源并进行离线缓存。如果<br>已经离线存储了，浏览器会使用离线的资源加载页面，然后浏览器会比对新的 manifest 文件<br>与旧的 manifest 文件，如果文件没有发生改变，就不要做任何操作，如果文件改变，就会重新<br>下载文件中的资源并进行离线存储。</p>
</li>
<li><p>离线的情况下：浏览器就直接使用离线存储的资源。</p>
</li>
</ul>
<h2 id="如何清除-token"><a href="#如何清除-token" class="headerlink" title="如何清除 token"></a>如何清除 token</h2><ul>
<li><p>浏览器关闭会出发 <strong>beforeunload</strong> ，<strong>unload</strong> 这两个事件。</p>
</li>
<li><p>浏览器刷新也会触发，还会触发<strong>load</strong>事件</p>
</li>
<li><p>方案一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onbeforeunload = function () &#123;</span><br><span class="line">    localStorage.removeItem(&quot;token&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点： 刷新也会清空 token</p>
</li>
<li><p>方案二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onunload = function() &#123;</span><br><span class="line">    localStorage.setItem(&quot;lastTime&quot;,new Date().getTime())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = function() &#123;</span><br><span class="line">    let lastTime = localStorage.getItem(&quot;lastTime&quot;);</span><br><span class="line">    const interval = 3 * 1000;</span><br><span class="line">    // 如果时间间隔大于3s，则清除token</span><br><span class="line">    if (!lastTime || new Date().getTime() - lastTime &gt; interval) &#123;</span><br><span class="line">        localStorage.remove(&quot;token&quot;);</span><br><span class="line">        console.log(&quot;remove token&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&quot;time is less than not remove token&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>补充<br>可以使用 sessionStorage 代替 localStorage 来存储 token，当关闭浏览器时会自动清除 token，sessionStorage 不是持久化的本地存储，而是会话级别的存储，而 localStorage 是持久化的本地存储，除非主动删除数据，否则数据是不会过期的。</p>
</li>
</ul>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 举个例子：</span></span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^13.4.6&quot;</span>, <span class="comment">// 只锁定主版本号 major</span></span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;~13.4.6&quot;</span>, <span class="comment">// 锁定主版本号和次版本号 major + minor</span></span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;13.4.6&quot;</span>,  <span class="comment">// 锁定版本</span></span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;*&quot;</span>,       <span class="comment">// 最新版本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// major: 13, minor: 4, patch: 6</span></span><br><span class="line"></span><br><span class="line">$ npm info jquery <span class="comment">// 查看 jquery 信息</span></span><br><span class="line">$ npm view jquery versions <span class="comment">// 查看 jquery 所有版本</span></span><br><span class="line">$ npm list | grep gulp <span class="comment">// 过滤 gulp</span></span><br><span class="line">$ npm outdated <span class="comment">// 查看过期版本</span></span><br><span class="line">$ npm update <span class="comment">//更新版本</span></span><br><span class="line">$ npm cache clean --force <span class="comment">// 清楚缓存</span></span><br><span class="line">$ npm ls <span class="comment">// 查看项目引用了哪些包</span></span><br><span class="line">$ npm unpublish --force <span class="comment">// 从npm卸载包</span></span><br><span class="line"><span class="comment">// 执行顺序</span></span><br><span class="line">$ npm run script1 &amp; npm run script2 <span class="comment">//并行执行</span></span><br><span class="line">$ npm run script1 &amp;&amp; npm run script2 <span class="comment">// 继发执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cross-env: 运行跨平台设置和使用环境变量的脚本</span></span><br><span class="line"><span class="comment">// cross-env可以设置NODE_ENV环境变量，process.env.NODE_ENV === &#x27;production&#x27;</span></span><br><span class="line">$ npm install --save-dev cross-env</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;scripts&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">$ npm config get registry <span class="comment">// 查看当前源</span></span><br><span class="line">$ npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org //切换镜像源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npx</span></span><br><span class="line"><span class="comment">// --no-install: 让npx强制使用本地模块，不下载远程模块，如果本地不存在，就会报错</span></span><br><span class="line">$ npx --no-install http-server</span><br><span class="line"><span class="comment">// --ignore-existing: 忽略本地的同名模块，强制安装远程模块</span></span><br><span class="line">$ npx --ignore-existing http-server</span><br></pre></td></tr></table></figure>

<h2 id="URI-和-URL-有什么区别？"><a href="#URI-和-URL-有什么区别？" class="headerlink" title="URI 和 URL 有什么区别？"></a>URI 和 URL 有什么区别？</h2><ul>
<li><p>URL(Uniform Resource Identifier): 统一资源定位符</p>
<ul>
<li>如：<a href="https://upos-sz-staticks3.bilivideo.com/cmaskboss/164203142_30_1.jpg">https://upos-sz-staticks3.bilivideo.com/cmaskboss/164203142_30_1.jpg</a></li>
</ul>
</li>
<li><p>URI(Uniform Resource Locator): 统一资源标识符</p>
<ul>
<li>如：164203142_30_1.jpg</li>
</ul>
</li>
<li><p>URN(Uniform Resource Name): 统一资源名称</p>
<ul>
<li>如：urn:isbn:9787115318893 (国际标准图书编号)，类似身份证</li>
</ul>
</li>
<li><p>URL 是 URI 的子集</p>
</li>
</ul>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><pre><code>Date.now()  //获取当前时间毫秒数
var dt = new Date() //构造一个实例对象
dt.getTime()    //获取毫秒数
dt.getFullYear() //年
dt.getMonth()   //月（0-11）
dt.getDate()    //日 （0-31）
dt.getHours()   //小时（0-23）
dt.getMinutes() //分钟（0-59）
dt.getSeconds() //秒（0-59）
dt.getDay()     //星期几（0-6）
</code></pre>
<h2 id="浏览器如何缓存"><a href="#浏览器如何缓存" class="headerlink" title="浏览器如何缓存"></a>浏览器如何缓存</h2><ul>
<li>html meta 标签控制缓存<ul>
<li><code>&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cahce&quot;&gt;</code> //告诉浏览器当前页面不被缓存</li>
</ul>
</li>
<li>http 头信息控制缓存<ul>
<li>Expires ——&gt; 过期时间</li>
<li>Cache-Control 响应头信息(no-cache、no-store、max-age、public)</li>
</ul>
</li>
</ul>
<h2 id="Chrome-打开一个页面需要启动多少线程？分别有哪些线程？"><a href="#Chrome-打开一个页面需要启动多少线程？分别有哪些线程？" class="headerlink" title="Chrome 打开一个页面需要启动多少线程？分别有哪些线程？"></a>Chrome 打开一个页面需要启动多少线程？分别有哪些线程？</h2><pre><code>最新Chrome浏览器包括：一个浏览器(Browser)主进程、一个GPU进程、一个网络(NetWork)
进程、多个渲染进程和多个插件进程
</code></pre>
<ul>
<li><p>进程：</p>
<ul>
<li><p>浏览器进程：主要负责界面显示、用户交互、子进程管理、同时提供存储等功能。</p>
</li>
<li><p>渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，<br>排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个<br>Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p>
</li>
<li><p>GPU 进程：Chrome 刚开始的时候是没有 GPU 进程的，而 GPU 使用的使用初衷是为了实现<br>3D CSS 效果，之后随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 称为<br>浏览器普遍的需求，最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p>
</li>
<li><p>网络进程：主要负责网页的网络资源加载，之前是作为一个模块运行在浏览器进程里面<br>的，最近才独立出来，称为一个单独的进程。</p>
</li>
<li><p>插件进程：主要负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以<br>保证插件进程崩溃不会对浏览器和页面造成影响。</p>
</li>
</ul>
</li>
<li><p>线程：</p>
<ul>
<li>js 线程</li>
<li>UI 渲染线程</li>
<li>事件线程</li>
<li>定时器触发线程</li>
<li>http 请求线程</li>
<li>插件线程</li>
</ul>
</li>
</ul>
<h2 id="js-请说说写一个拖拽组件的思路及注意事项"><a href="#js-请说说写一个拖拽组件的思路及注意事项" class="headerlink" title="[js] 请说说写一个拖拽组件的思路及注意事项?"></a>[js] 请说说写一个拖拽组件的思路及注意事项?</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先，其实拖拽效果的思路是很简单的。主要就是三个步骤：</span><br><span class="line"></span><br><span class="line">1.onmousedown的时候，启动可拖拽事件，记录被拖拽元素的原始坐标参数。</span><br><span class="line"></span><br><span class="line">2.onmousemove的时候，实时记录鼠标移动的距离，结合被拖拽元素第一阶段的坐标参数，计算并设置新的坐标值。</span><br><span class="line"></span><br><span class="line">3.onmouseup的时候，关闭可拖拽事件，记录新的坐标值。</span><br><span class="line"></span><br><span class="line">注意：这里主要是通过绝对定位的top和left来确定元素的位置的，因此被拖拽元素的css一定要设置绝对定位。</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li><p>箭头函数的特点</p>
<ol>
<li>没有 arguments</li>
<li>无法通过 apply、call、bind 改变 this</li>
<li>某些箭头函数代码难以阅读</li>
</ol>
</li>
</ul>
<h2 id="for…in-和-for…of-有什么区别"><a href="#for…in-和-for…of-有什么区别" class="headerlink" title="for…in 和 for…of 有什么区别"></a>for…in 和 for…of 有什么区别</h2><ul>
<li><p>key 和 value</p>
<ol>
<li>for…in 遍历得到 key</li>
<li>for…of 遍历得到 value</li>
</ol>
</li>
<li><p>适用于不同的数据类型</p>
<ol>
<li>遍历对象： for…in 可以，for…of 不可以</li>
<li>遍历 Map、Set：for…of 可以，for…in 不可以</li>
<li>遍历 generator：for…of 可以，for…in 不可以</li>
</ol>
</li>
<li><p>可枚举 vs 可迭代</p>
<ol>
<li>for…in 用于可枚举（Object.getOwnPropertyDescriptors(obj)）数据，如对象、数组、字符串</li>
<li>for…of 用于可迭代(arr[Symbol.iterator])数据，如数组、字符串、Map、Set</li>
</ol>
</li>
</ul>
<h2 id="for-await…of-有什么作用？"><a href="#for-await…of-有什么作用？" class="headerlink" title="for await…of 有什么作用？"></a>for await…of 有什么作用？</h2><ul>
<li>for await…of 用于遍历多个 Promise</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPromise</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="title function_">createPromise</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">const</span> p2 = <span class="title function_">createPromise</span>(<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">const</span> p3 = <span class="title function_">createPromise</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> list = [p1, p2, p3];</span><br><span class="line">  <span class="keyword">const</span> list2 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ---------------同时调用----------------</span></span><br><span class="line">  <span class="comment">// 方式一</span></span><br><span class="line">  <span class="comment">// const res1 = await p1;</span></span><br><span class="line">  <span class="comment">// console.log(res1);</span></span><br><span class="line">  <span class="comment">// const res2 = await p2;</span></span><br><span class="line">  <span class="comment">// console.log(res2);</span></span><br><span class="line">  <span class="comment">// const res3 = await p3;</span></span><br><span class="line">  <span class="comment">// console.log(res3);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式二</span></span><br><span class="line">  <span class="comment">// Promise.all(list).then((res) =&gt; console.log(res));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式三</span></span><br><span class="line">  <span class="comment">// for await (let res of list) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(res);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// -----------------逐步调用---------------</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> list2) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">createPromise</span>(value);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="JS-严格模式有什么特点？"><a href="#JS-严格模式有什么特点？" class="headerlink" title="JS 严格模式有什么特点？"></a>JS 严格模式有什么特点？</h2><ul>
<li>特点（’use strict’）<ol>
<li>全局变量必须先声明</li>
<li>禁止使用 with</li>
<li>this 指向 undefined 而不是 window</li>
<li>函数参数不能重名</li>
<li>eval 有单独作用域，不推荐使用</li>
</ol>
</li>
</ul>
<h2 id="HTTP-跨域请求时为什么发送-options-请求？"><a href="#HTTP-跨域请求时为什么发送-options-请求？" class="headerlink" title="HTTP 跨域请求时为什么发送 options 请求？"></a>HTTP 跨域请求时为什么发送 options 请求？</h2><blockquote>
<p>options 请求是对 CORS 跨域请求之间的一次预检查，获取服务器是否允许本次请求，检查成功才会正式发起请求，是浏览器自行处理的</p>
</blockquote>
<h2 id="JS-内存泄漏如何检测？场景有哪些？"><a href="#JS-内存泄漏如何检测？场景有哪些？" class="headerlink" title="JS 内存泄漏如何检测？场景有哪些？"></a>JS 内存泄漏如何检测？场景有哪些？</h2><ul>
<li><p>垃圾回收 GC</p>
<ol>
<li>引用计数</li>
<li>标记清除</li>
</ol>
</li>
<li><p>场景</p>
<ol>
<li>意外的全局变量</li>
<li>遗忘的定时器</li>
<li>使用不当的闭包</li>
<li>遗漏的 DOM 元素</li>
<li>网络回调</li>
</ol>
</li>
<li><p>内存泄漏属于非预期的，闭包是主动行为，闭包非内存泄漏</p>
</li>
<li><p>可以使用 chrome devtools 的 performance 和 memory 工具类检测 js 内存</p>
</li>
<li><p><a href="https://www.cnblogs.com/dasusu/p/12200176.html">参考</a></p>
</li>
</ul>
<h2 id="vdom-真的很快吗？"><a href="#vdom-真的很快吗？" class="headerlink" title="vdom 真的很快吗？"></a>vdom 真的很快吗？</h2><ul>
<li><p>js 直接操作 dom 才是最快的，vdom 并不快</p>
</li>
<li><p>但是 vdom 是最合适“数据驱动视图”的技术方案</p>
</li>
</ul>
<h2 id="遍历数组，for-和-forEach-哪个快？"><a href="#遍历数组，for-和-forEach-哪个快？" class="headerlink" title="遍历数组，for 和 forEach 哪个快？"></a>遍历数组，for 和 forEach 哪个快？</h2><ul>
<li><p>时间复杂度都是 O(n)</p>
</li>
<li><p>结论：</p>
<ol>
<li>for 更快</li>
<li>forEach 每次都要创建一个函数来调用，而 for 不会创建函数</li>
<li>函数需要独立的作用域，会有额外的开销</li>
</ol>
</li>
</ul>
<h2 id="请描述-JS-Bridge-的原理"><a href="#请描述-JS-Bridge-的原理" class="headerlink" title="请描述 JS Bridge 的原理"></a>请描述 JS Bridge 的原理</h2><ul>
<li><p>什么是 JS Bridge？</p>
<ul>
<li>js 无法直接调用 native API</li>
<li>需要通过一些特定的“格式”来调用</li>
<li>这些“格式”就统称 JS-Bridge，例如微信 JSSDK</li>
</ul>
</li>
<li><p>JS Bridge 的常见实现方式</p>
<ul>
<li>注册全局 API</li>
<li>URL Scheme</li>
</ul>
</li>
</ul>
<h2 id="移动端-H5-click-有-300ms-延迟，如何解决？"><a href="#移动端-H5-click-有-300ms-延迟，如何解决？" class="headerlink" title="移动端 H5 click 有 300ms 延迟，如何解决？"></a>移动端 H5 click 有 300ms 延迟，如何解决？</h2><ul>
<li><p>背景：double tap to zoom</p>
</li>
<li><p>初期解决方案 FastClick</p>
<ul>
<li>监听 touchend 事件(touchstart touchend 会先于 click 触发)</li>
<li>使用自定义 DOM 事件模拟一个 click 事件</li>
<li>把默认的 click 事件(300ms 之后触发)禁止掉</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;load&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>现代浏览器的改进（width=device-width）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;id=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="网络请求中，token-和-cookie-有什么区别？"><a href="#网络请求中，token-和-cookie-有什么区别？" class="headerlink" title="网络请求中，token 和 cookie 有什么区别？"></a>网络请求中，token 和 cookie 有什么区别？</h2><ul>
<li><p>cookie</p>
<ul>
<li>http 无状态，每次请求都要带 cookie，以帮助识别身份</li>
<li>服务端也可以向客户端 set-cookie，cookie 大小限制 4kb</li>
<li>默认有跨域限制：不可跨域共享、传递 cookie</li>
</ul>
</li>
<li><p>token vs cookie</p>
<ul>
<li>cookie 是 http 规范，而 token 是自定义传递</li>
<li>cookie 会默认被浏览器存储，而 token 需自己存储</li>
<li>token 默认没有跨域限制</li>
</ul>
</li>
<li><p>JWT(JSON Web Token)</p>
<ul>
<li>前端发起登录，后端验证成功之后，返回一个加密的 token</li>
<li>前端自行存储这个 token（其中包含了用户信息，加密了）</li>
<li>以后访问服务端的接口，都带着这个 token，作为用户信息</li>
</ul>
</li>
</ul>
<h2 id="Session-和-JWT-哪个更好？"><a href="#Session-和-JWT-哪个更好？" class="headerlink" title="Session 和 JWT 哪个更好？"></a>Session 和 JWT 哪个更好？</h2><ul>
<li><p>session</p>
<ul>
<li>优点<ul>
<li>原理简单，易于学习</li>
<li>用户信息存储在服务端，可以快速封禁某个用户</li>
</ul>
</li>
<li>缺点<ul>
<li>占用服务端内存，硬件成本高</li>
<li>多进程，多服务器时，不好同步-需要使用第三方缓存，如 redis</li>
<li>默认有跨域限制</li>
</ul>
</li>
</ul>
</li>
<li><p>JWT</p>
<ul>
<li>优点<ul>
<li>不占用服务器内存</li>
<li>多进程、多服务器不受影响</li>
<li>没有跨域限制</li>
</ul>
</li>
<li>缺点<ul>
<li>用户信息存储在客户端，无法快速封禁某用户</li>
<li>万一服务器密钥被泄漏，则用户信息全部丢失</li>
<li>token 体积一般大于 cookie，会增加请求的数据量</li>
</ul>
</li>
</ul>
</li>
<li><p>答案</p>
<ul>
<li>如有严格管理用户信息的需求（保密、快速封禁），推荐 session</li>
<li>如没有特殊要求，则使用 JWT</li>
</ul>
</li>
</ul>
<h2 id="如何实现-SSO-单点登录？"><a href="#如何实现-SSO-单点登录？" class="headerlink" title="如何实现 SSO 单点登录？"></a>如何实现 SSO 单点登录？</h2><ul>
<li><p>基于 cookie（主域名相同）</p>
<ul>
<li>cookie 默认不可跨域共享，但有些情况下可设置共享</li>
<li>主域名相同，如<a href="http://www.baidu.com,image.baidu.com/">www.baidu.com,image.baidu.com</a></li>
<li>设置 cookie domain 为主域名，即可共享 cookie</li>
</ul>
</li>
<li><p>SSO（主域名不相同，cookie 无法共享）</p>
<ul>
<li><img src="/images/md_img/sso.jpg" alt="sso"></li>
</ul>
</li>
</ul>
<h2 id="Map-和-WeakMap-的区别和应用场景？"><a href="#Map-和-WeakMap-的区别和应用场景？" class="headerlink" title="Map 和 WeakMap 的区别和应用场景？"></a>Map 和 WeakMap 的区别和应用场景？</h2><ul>
<li><p>Map：</p>
<ul>
<li>key 可以是任意数据类型</li>
<li>key 是强引用，只要键不释放，就会一直占着内存不会被 GC</li>
<li>能轻易转化为数据（扩展运算符），weakmap 做不到</li>
</ul>
</li>
<li><p>WeakMap:</p>
<ul>
<li>key 只能是非 null 的对象引用</li>
<li>key 是弱引用，没有其他引用存在时会被 GC</li>
<li>key 随时会被回收，所以 key 不可枚举，没有 size 等属性</li>
</ul>
</li>
<li><p>Map 场景：</p>
<ul>
<li>频繁的读写和查询</li>
<li>键值复杂的情况</li>
</ul>
</li>
</ul>
<h2 id="重绘-repaint-重排-reflow（回流）-有什么区别？"><a href="#重绘-repaint-重排-reflow（回流）-有什么区别？" class="headerlink" title="重绘 repaint 重排 reflow（回流） 有什么区别？"></a>重绘 repaint 重排 reflow（回流） 有什么区别？</h2><ul>
<li><p>重绘 repaint</p>
<ul>
<li>元素外观改变，如颜色、背景色</li>
<li>但元素的尺寸、定位不变，不会影响到其他元素的位置</li>
</ul>
</li>
<li><p>重排 relfow</p>
<ul>
<li>重新计算尺寸和布局，可能会影响其他元素的位置</li>
<li>如元素高度增加，可能会使相邻元素位置下移</li>
</ul>
</li>
<li><p>区别</p>
<ul>
<li>重排比重绘影响更大，消耗更大</li>
<li>所以，要尽量避免无意义的重排</li>
</ul>
</li>
<li><p>减少重排的方法</p>
<ul>
<li>集中修改样式，或直接切换 css、class</li>
<li>修改之前先设置 display: none,脱离文档流</li>
<li>使用 BFC 特性，不影响其他元素位置</li>
<li>频发触发（resize、scroll）使用节流和防抖</li>
<li>使用 createDocumentFragment 批量操作 DOM</li>
<li>优化动画，使用 CSS3 和 requestAnimationFrame</li>
</ul>
</li>
</ul>
<h2 id="如何实现网页多标签通讯？"><a href="#如何实现网页多标签通讯？" class="headerlink" title="如何实现网页多标签通讯？"></a>如何实现网页多标签通讯？</h2><ul>
<li><p>使用 WebSocket</p>
<ul>
<li>无跨域限制</li>
<li>需要服务端支持，成本高</li>
</ul>
</li>
<li><p>localStorage（跨域不共享）</p>
<ul>
<li>同域的 A 和 B 两个页面</li>
<li>A 页面设置 localStorage</li>
<li>B 页面可监听到 localStorage 值的修改</li>
</ul>
</li>
<li><p>SharedWorker(必须同域)</p>
<ul>
<li>SharedWorker 是 WebWorker 的一种</li>
<li>WebWorker 可开启子进程执行 JS，但不能操作 DOM</li>
<li>SharedWorker 可单独开启一个进程，用于同域页面通讯</li>
</ul>
</li>
</ul>
<h2 id="网页和-iframe-如何通讯？"><a href="#网页和-iframe-如何通讯？" class="headerlink" title="网页和 iframe 如何通讯？"></a>网页和 iframe 如何通讯？</h2><ul>
<li>使用 postMessage 通讯</li>
<li>注意跨域的限制和判断</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父传子</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">iframe1</span>.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="comment">// 子传父</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">origin</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="请描述-koa2-洋葱圈模型？"><a href="#请描述-koa2-洋葱圈模型？" class="headerlink" title="请描述 koa2 洋葱圈模型？"></a>请描述 koa2 洋葱圈模型？</h2><ul>
<li><p>koa2</p>
<ul>
<li>一个简约、流行的 nodejs 框架</li>
<li>通过中间件组织代码</li>
<li>多个中间件以“洋葱圈模型”执行</li>
</ul>
</li>
<li><p>代码执行过程</p>
<ul>
<li><img src="/images/md_img/koa1.jpg" alt="koa1"></li>
</ul>
</li>
<li><p>洋葱圈模型(类似捕获冒泡)</p>
<ul>
<li><img src="/images/md_img/koa2.jpg" alt="koa2"></li>
</ul>
</li>
</ul>
<h2 id="H5-页面如何进行首屏优化？"><a href="#H5-页面如何进行首屏优化？" class="headerlink" title="H5 页面如何进行首屏优化？"></a>H5 页面如何进行首屏优化？</h2><ul>
<li><p>路由懒加载</p>
<ul>
<li>适用于 SPA</li>
<li>路由拆分，优先保证首页加载</li>
</ul>
</li>
<li><p>服务端渲染 SSR</p>
<ul>
<li>传统前后端分离（SPA）渲染页面的过程复杂</li>
<li>SSR 渲染页面过程简单，所有性能好</li>
<li>如果是纯 H5 页面，SSR 是性能优化的终极方案</li>
</ul>
</li>
<li><p>App 预取</p>
<ul>
<li>如果 H5 在 App WebView 中展示，可使用 App 预取</li>
<li>用户访问列表页面时，App 预加载文章首屏内容</li>
<li>用户进入 H5 页面，直接从 App 中获取内容，瞬间展示首屏</li>
</ul>
</li>
<li><p>分页</p>
<ul>
<li>针对列表页</li>
<li>默认只展示第一页内容</li>
<li>上滑加载更多</li>
</ul>
</li>
<li><p>图片懒加载 lazyload</p>
<ul>
<li>针对详情页</li>
<li>默认只展示文本内容，然后出发图片懒加载</li>
<li>注意：提前设置图片尺寸，尽量只重绘不重排</li>
</ul>
</li>
<li><p>Hybrid</p>
<ul>
<li>提前将 HTML、JS、CSS 下载到 App 内部</li>
<li>在 App webview 中使用 file：// 协议加载页面文件</li>
<li>再用 Ajax 获取内容并展示（也结合 App 预取）</li>
</ul>
</li>
</ul>
<h2 id="后端一次性返回-10w-条数据，你该如何渲染？"><a href="#后端一次性返回-10w-条数据，你该如何渲染？" class="headerlink" title="后端一次性返回 10w 条数据，你该如何渲染？"></a>后端一次性返回 10w 条数据，你该如何渲染？</h2><ul>
<li><p>设计不合理，后端调整(分页)</p>
</li>
<li><p>自定义中间层</p>
<ul>
<li>自定义 nodejs 中间层，获取并拆分这 10w 条数据</li>
<li>前端对接 nodejs 中间层，而不是服务端</li>
<li>成本比较高</li>
</ul>
</li>
<li><p>虚拟列表</p>
<ul>
<li>只渲染可视区域</li>
</ul>
</li>
</ul>
<h2 id="如果一个-H5-很慢，你该如何排查性能问题？"><a href="#如果一个-H5-很慢，你该如何排查性能问题？" class="headerlink" title="如果一个 H5 很慢，你该如何排查性能问题？"></a>如果一个 H5 很慢，你该如何排查性能问题？</h2><ul>
<li><p>前端性能指标</p>
<ul>
<li>First Paint（FP）</li>
<li>First ContentFul Paint（FCP）</li>
<li>DomContentLoaded（DCL）</li>
<li>Largest Contentful Paint（LCP）</li>
<li>Load（L）</li>
</ul>
</li>
<li><p>Chrome devtools</p>
<ul>
<li>Performance 可查看上述性能指标，并有网页快照</li>
<li>Network 可以查看各个资源的加载时间</li>
</ul>
</li>
<li><p>lighthouse（第三方性能评测工具）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// terminal</span></span><br><span class="line">lighthouse <span class="attr">https</span>:<span class="comment">//www.imooc.com/ --view --preset=desktop</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过以上工具来判读是加载慢还是渲染慢</p>
<ul>
<li>加载慢<ul>
<li>优化服务端硬件配置，使用 CDN</li>
<li>路由懒加载，大组件异步加载-减少主包的体积</li>
<li>优化 http 缓存策略</li>
</ul>
</li>
<li>渲染慢<ul>
<li>优化服务端接口（如 ajax 获取数据慢）</li>
<li>优化全段组件内部逻辑</li>
<li>服务端渲染 SSR</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="BOM-API"><a href="#BOM-API" class="headerlink" title="BOM API"></a>BOM API</h2><ul>
<li>navigator</li>
<li>screen</li>
<li>location</li>
<li>history</li>
</ul>
<h2 id="为何要将-css-文件放在-head-标签中呢？"><a href="#为何要将-css-文件放在-head-标签中呢？" class="headerlink" title="为何要将 css 文件放在 head 标签中呢？"></a>为何要将 css 文件放在 head 标签中呢？</h2><ul>
<li>css 放在 body 标签尾部时，DOMTree 构建完成之后便开始构建 RenderTree，并计算布局渲染网页，等加载解析完 css 之后，开始构建 CSSOMTree，并和 DOMTree 重新构建 RenderTree，重新计算布局渲染网页</li>
<li>css 放在 head 中，先加载 css，之后解析 css 构建 CSSOMTree，同时构建 DOMTree，CSSOMTree 和 DOMTree 都构建完成之后开始构建 Render Tree，计算布局网页</li>
<li>两者对比，css 放在 head 中比放在 body 标签尾部少了一次构建 RenderTree，一次计算布局和一次渲染网页，因此性能会更好，并且 css 放在 body 标签尾部会在网页中短暂出现裸奔的 html，不利于用户体验</li>
</ul>
<h2 id="为什么建议把-script-标签放在-body-最后？"><a href="#为什么建议把-script-标签放在-body-最后？" class="headerlink" title="为什么建议把 script 标签放在 body 最后？"></a>为什么建议把 script 标签放在 body 最后？</h2><ul>
<li>js 的下载和执行会阻塞 DOMTree 的构建，即会中断 DOMTree 的更新，所以如果把 script 标签放在首屏范围内的 HTML 代码中会截断首屏的内容。</li>
<li>普通 script 标签放在 body 底部，做与不做 async 或者 defer 处理都不会影响首屏时间，但是会影响 DomContentLoad 和 load 的时间，进而影响依赖他们的代码的执行的开始时间</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 页面的全部资源加载完成后才会执行，包括图片、视频等</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 渲染完成后即可执行，此时图片、视频可能还没有加载完</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="ES6-新增的声明方式"><a href="#ES6-新增的声明方式" class="headerlink" title="ES6 新增的声明方式"></a>ES6 新增的声明方式</h2><ul>
<li>let、const<ul>
<li>不属于顶层对象 window</li>
<li>不允许重复声明</li>
<li>不存在变量提升</li>
<li>暂时性死区（不能在变量声明之前去使用）</li>
<li>块级作用域</li>
</ul>
</li>
</ul>
<h2 id="如何给所有-async-函数添加-try-catch？"><a href="#如何给所有-async-函数添加-try-catch？" class="headerlink" title="如何给所有 async 函数添加 try/catch？"></a>如何给所有 async 函数添加 try/catch？</h2><p>babel 插件：</p>
<ol>
<li><p>借助 AST 抽象语法树，遍历查找代码中的 await 关键字<br>· 词法分析、语法分析生成 AST 抽象语法树</p>
</li>
<li><p>找到 await 节点后，从父路径中查找声明的 async 函数，获取该函数的 body（函数中包含的代码）</p>
</li>
<li><p>创建 try/catch 语句，将原来的 async 的 body 放入其中<br>· 通过 bebel-template 插件以字符串形式的代码构建 AST 树节点，生成 try/catch 节点</p>
</li>
<li><p>最后将 try/catch 语句替换 async 的 body</p>
</li>
</ol>
<p>全局捕获 Promise 类型错误：</p>
<ol>
<li>window.addEventListener(‘unhandledrejection’, callback)</li>
</ol>
<h2 id="async-await-和-promise-的区别？"><a href="#async-await-和-promise-的区别？" class="headerlink" title="async/await 和 promise 的区别？"></a>async/await 和 promise 的区别？</h2><ul>
<li><p>promise 的出现是为了解决传统 callback 函数导致的<strong>回调地狱</strong>问题，但是它本身的语法造成纵向的回调链，遇到复杂的业务场景语法也不美观。</p>
</li>
<li><p>async await 可以说是改良版的 promise，或者说是 promise 的语法糖，可以让异步代码同步化，语法更加美观。</p>
</li>
<li><p>async/await 本质也是 Generator 函数的语法糖，使得异步操作更加方便。就是 Generator 函数（*）的替换为 async、yield 替换为 await</p>
<ul>
<li>Generator 需要调用 next 执行，而 async 函数内置执行器，函数调用后自动执行</li>
<li>async/await = Generator 函数 + 内置自动执行器</li>
</ul>
</li>
</ul>
<h2 id="Object-create-proto-propertiesObject-、new-Object-和-有什么区别？"><a href="#Object-create-proto-propertiesObject-、new-Object-和-有什么区别？" class="headerlink" title="Object.create(proto, propertiesObject)、new Object()和{}有什么区别？"></a>Object.create(proto, propertiesObject)、new Object()和{}有什么区别？</h2><ol>
<li>{}创建对象时，不会调用构造函数，js 引擎会创建一个空对象，然后改变 this 指向新创建的对象</li>
<li>new 则需要经历：<br>2.1 先创建空对象<br>2.2 设置原型链，设置新对象的 constructor 属性为构造函数的名称，设置新对象的<strong>proto</strong>指向构造函数的 prototype 对象<br>2.3 调用新对象并调整 this 指向新对象<br>2.4 最后如果返回值为非 null 对象直接返回该返回值，否则返回新对象</li>
<li>Object.create 方法支持两个参数，第一个参数作为新创建对象的原型，第二个为可选参数作为新创建对象的属性</li>
<li>{}字面量创建对象的性能比 new 和 Object.create 要好</li>
<li>{} 和 new 所创建的对象继承 Object 原型链的属性和方法，Object.create 通过第一个参数指定原型，可以通过 Object.create(Object.prototype)</li>
<li>Object.create(null)创建的对象没有任何属性和方法</li>
</ol>
<h2 id="document-ready-和-window-onload-的区别"><a href="#document-ready-和-window-onload-的区别" class="headerlink" title="document.ready 和 window.onload 的区别?"></a>document.ready 和 window.onload 的区别?</h2><ol>
<li>document.ready 表示 dom 文档解析完成，但是不包含异步脚本和图片等的加载,onload 需要所有文件都加载完成</li>
<li>ready 可以执行多次，onload 只会后者覆盖前者</li>
<li>ready 快于 onload</li>
</ol>
<h2 id="为什么-setTimeout-有最小-4ms-延迟？"><a href="#为什么-setTimeout-有最小-4ms-延迟？" class="headerlink" title="为什么 setTimeout 有最小 4ms 延迟？"></a>为什么 setTimeout 有最小 4ms 延迟？</h2><blockquote>
<p>原因在于如果浏览器允许 0ms，会导致 javascript 引擎过度循环，因为浏览器本身也是建立在 event loop 之上的，如果 js 引擎通过 0ms timer 不断的唤起系统，那么 event loop 就会阻塞，导致 CPU spining（快速旋转），有个故事就是英特尔团队发现 chrome 不正常的电量消耗，就是因为 0ms timer 导致 CPU spining，后果就是计算机没办法进入低功耗模式，所以耗电特别快。后来 chrome 将 timer 的时间间隔做了限制为 1ms。</p>
</blockquote>
<blockquote>
<p>不同浏览器的最低延迟不一样，比如 chrome 的最低时延是 1ms，而如果 timer 嵌套层级很多，那么最低是 4ms，具体嵌套层级的阈值不同浏览器也不一致，HTML Standard 规定是 &gt;5, chrome 是 &gt;=5;</p>
</blockquote>
<h2 id="如果判断是-PC-端还是移动端"><a href="#如果判断是-PC-端还是移动端" class="headerlink" title="如果判断是 PC 端还是移动端"></a>如果判断是 PC 端还是移动端</h2><ul>
<li>屏幕宽度：window.screen、window.innerWidth</li>
<li>屏幕方向：window.orientation pc 端为 undefined</li>
<li>navigator.userAgent 正则去匹配</li>
</ul>
<h2 id="常见移动端适配方案？"><a href="#常见移动端适配方案？" class="headerlink" title="常见移动端适配方案？"></a>常见移动端适配方案？</h2><ul>
<li>媒体查询@media<ul>
<li>分别为不同屏幕尺寸的移动设备编写不同尺寸的 css 属性</li>
</ul>
</li>
<li>rem 适配方案<ul>
<li>使用 flexible 阿里早期开源的移动端适配解决方案</li>
<li>postcss-pxtorem 插件实现 px 到 rem 的转换</li>
</ul>
</li>
<li>viewport 适配方案<ul>
<li>设置 meta 标签</li>
<li>使用 postcss-px-to-viewport 插件将 px 自动转换为 vw</li>
<li>可以通过插件的 ignoring 特性标注不需要转换的属性</li>
</ul>
</li>
</ul>
<p>缺点：就是转换的时候如不能完全整除就会产生像素差</p>
<h2 id="如何判断JS对象是否为空？"><a href="#如何判断JS对象是否为空？" class="headerlink" title="如何判断JS对象是否为空？"></a>如何判断JS对象是否为空？</h2><ol>
<li>结合getOwnPropertySymbols 和 getOwnPropertyNames</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;[<span class="title class_">Symbol</span>()]: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;<span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> c = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(a).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(a).<span class="property">length</span> === <span class="number">0</span> ); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(b).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(b).<span class="property">length</span> === <span class="number">0</span> ); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(c).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(c).<span class="property">length</span> === <span class="number">0</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Reflect.ownKeys()</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;[<span class="title class_">Symbol</span>()]: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;<span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> c = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(a).<span class="property">length</span> === <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(b).<span class="property">length</span> === <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(c).<span class="property">length</span> === <span class="number">0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/03/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><span id="more"></span>

<p>http 是超文本传输协议，信息是明文传输，https 是更加安全的 ssl 加密传输协议<br>http 默认是 80 端口，https 默认是 443 端口<br>https 需要申请 CA 证书<br>https 是 http + ssl/tls（数字证书）进行组合的更加安全的传输协议</p>
<p>https 工作原理（非对称加密） 1.服务端向客户端传递证书作为公钥 2.客户端对证书进行解析，判断证书的办法机构和过期时间等，如果都没有问题，生成一个随机值作为私钥，然后使用证书进行加密发送给服务端 3.服务端解密得到客户端私钥 4.之后双方利用私钥进行加密解密，完成信息的通信</p>
<h2 id="HTTP-协议-1-0、1-1、2-0-有什么区别？"><a href="#HTTP-协议-1-0、1-1、2-0-有什么区别？" class="headerlink" title="HTTP 协议 1.0、1.1、2.0 有什么区别？"></a>HTTP 协议 1.0、1.1、2.0 有什么区别？</h2><ul>
<li><p>HTTP 1.0</p>
<ul>
<li>最基础的 HTTP 协议</li>
<li>支持基本的 GET、POST 方法</li>
</ul>
</li>
<li><p>HTTP 1.1</p>
<ul>
<li>缓存策略 cache-control、E-tag 等</li>
<li>支持长连接 Connection: keep-alive,一次 TCP 连接多次请求</li>
<li>支持断点续传，状态码 206</li>
<li>支持新的方法 PUT、DELETE 等，可用于 Restful API</li>
</ul>
</li>
<li><p>HTTP 2.0</p>
<ul>
<li>头部数据压缩：http2.0 使用 HPACK 算法对 header 对头部数据进行压缩，体积变小后，网络传输速度会更快<ul>
<li>http/1.1 版本的头部信息是本文，而 http/2.0 头部数据就是二进制</li>
</ul>
</li>
<li>多路复用，一次 TCP 连接中可以多个 HTTP 并行请求</li>
<li>服务端推送</li>
</ul>
</li>
</ul>
<h2 id="301-和-302-的区别"><a href="#301-和-302-的区别" class="headerlink" title="301 和 302 的区别"></a>301 和 302 的区别</h2><p>301 表示资源被永久移除，浏览器在拿到状态码后跳转到一个新的 URL 地址，可从相应头的 location 首部中获取，搜索引擎在抓取新内容的同时也将就地址交换为重定向之后的网址。</p>
<p>302 表示地址资源还在，仍可以访问，搜索引擎会抓取新的内容而保存旧的地址，seo 302 优于 301.</p>
<p>重定向的原因：<br>网站调整（改变网页目录结构）<br>页面被移到一个新地址<br>页面扩展名改变 .php -&gt;.html<br>如果不做重定向会返回 404 页面，会白白流失用户访问量。</p>
<p>1XX 信息性状态码，表示接受的请求正在处理<br>2XX 成功状态码，表示请求被正常处理完毕<br>3XX 重定向状态码，表示需要进行附加操作以完成请求<br>4XX 客户端错误状态码，表示服务器无法处理请求<br>400 Bad Request 请求出现语法错误<br>401 被请求的页面需要用户名和密码<br>403 forbidden 请求页面的访问被禁止<br>404 资源未找到<br>5XX 服务器错误状态码，表示服务器处理请求出错<br>502 网关错误<br>503 服务器超负载或者停机维护，无法处理请求<br>504 网关超时</p>
<h2 id="HTTP-协议和-UDP-协议有什么区别？"><a href="#HTTP-协议和-UDP-协议有什么区别？" class="headerlink" title="HTTP 协议和 UDP 协议有什么区别？"></a>HTTP 协议和 UDP 协议有什么区别？</h2><ul>
<li>网络协议<ul>
<li>HTTP 协议在应用层</li>
<li>TCP、UDP 协议在传输层<ul>
<li>TCP 协议<ul>
<li>有连接，有断开</li>
<li>稳定传输</li>
</ul>
</li>
<li>UDP 协议<ul>
<li>无连接，无断开</li>
<li>不稳定传输，但效率高</li>
<li>如视频会议、语音通话</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="UDP-amp-TCP-的区别"><a href="#UDP-amp-TCP-的区别" class="headerlink" title="UDP &amp; TCP 的区别"></a>UDP &amp; TCP 的区别</h2><ul>
<li><p>相同点：</p>
<ul>
<li>UDP 协议 和 TCP 协议 都是运输层协议</li>
</ul>
</li>
<li><p>不同点：</p>
<ul>
<li><p>UDP 特点：</p>
<ul>
<li>无连接 —— 知道对端的 IP 和端口号就直接进行传输，不需要建立连接</li>
<li>不可靠 —— 没有确认机制，没有重传机制，即使因为网络故障无法发送到<br>对方，UDP 协议也不会给应用层返回任何错误信息</li>
<li>面向数据报</li>
<li>传输速 度块</li>
</ul>
</li>
<li><p>TCP 特点：</p>
<ul>
<li>面向连接，在客户端和服务器进行交换数据前，必须先在双方之间建立一个<br>TCP 连接</li>
<li>可靠传输，具有确认应答机制、超时重传机制、拥塞控制、流量控制、<br>滑动窗口机制、延迟应答等。</li>
<li>面向字节流</li>
</ul>
</li>
</ul>
</li>
<li><p>UDP 的响应速度优于 TCP，安全性和数据可靠性不如 TCP</p>
</li>
<li><p>UDP 一般用在网络负担非常重，但对响应速度要求高，数据类型都是短消息的情况下</p>
</li>
</ul>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>OSI(open system interconnect)参考模型</p>
<ul>
<li>应用层（为应用程序提供网络服务）</li>
<li>表示层（数据格式化，加密等）</li>
<li>会话层（建立、维护管理会话连接）</li>
<li>传输层（建立、维护管理到端连接）</li>
<li>网络层（IP 寻址和路由选择）<ul>
<li>寻址就是根据 IP 地址找到具体的设备</li>
<li>路由就是选择数据传输的线路</li>
</ul>
</li>
<li>数据链路层（控制网络层和物理层之间通信）</li>
<li>物理层（通过光缆、无线电波等方式连接组网）</li>
</ul>
<p>TCP/IP 模型</p>
<ul>
<li>应用层（应用层就是向用户提供通信服务的活动，提供用户程序接口 HTTP、FTP、DNS）</li>
<li>传输层（传输层为两台主机上的应用程序提供端到端的通信 TCP，UDP）</li>
<li>网络层（网络层实现数据包的选路和转发）</li>
<li>数据链路层（ARP 地址解析协议、RARP 逆地址解析协议，使用物理地址寻找一台机器）</li>
</ul>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><pre><code>WebSocket是html5定义的新协议，特点是即时通信、替代轮训

与传统http协议不同，实现了浏览器和服务器的全双工通信
</code></pre>
<p>HTTP 和 WebSocket</p>
<p>相同点：</p>
<ul>
<li>都是基于 TCP 可靠传输协议</li>
</ul>
<p>不同点：</p>
<ul>
<li>WebSocket 是全双工通信协议，通信双方可以同时发送和接收消息，http 是单向的</li>
<li>WebSocket 没有 Request 和 Response 概念</li>
<li>WebSocket 需要依赖 http 协议进行一次握手，握手成功后直接从 TCP 通道传输，与 http 无关</li>
<li>WebSocket 数据格式较轻量，数据包头部较小，http 协议每次通信需要携带完成头部信息</li>
<li>WebSocket 无跨域问题</li>
<li>WebSocket 多了两个属性 Upgrade: webSocket、Connection: Upgrade，服务端返回 101 成功状态码</li>
</ul>
<p>单工、半双工和全双工通信</p>
<ul>
<li>单工通信：指消息只能单向传输的工作方式，数据信息从一端到另一端是单向的。例如：广播</li>
<li>半双工通信：可以双向通信，但必须交替进行。例如：对讲机</li>
<li>全双工通信：指在通信的任意时刻，都允许数据同时在两个方向上传输，通讯双方都设置了发送器和接收器。</li>
</ul>
<h2 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h2><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用 DNS 负载均衡技术，它的原理是在 DNS 服务器中为同一个域名配置多个 IP 地址,在应答 DNS 查询时,DNS 服务器对每个查询将以 DNS 文件中主机记录的 IP 地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p>
<h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><p>强缓存：（expires、Cache-Control）在过期时间内，浏览器再次加载资源时，不会向服务器发起请求，直接从缓存中读取资源</p>
<p>协商缓存：向服务器发送请求，服务器会根据请求头（request header）的一些参数（Etag、last-modified）来判断是否命中协商缓存，首先根据 Etag 的值判断请求的文件有没有被修改，如果 Etag 一致则没有被修改，命中协商缓存返回 304，如果不一致则返回新的资源并带上新的 Etag 返回 200 状态码。如果没有 Etag 值，则对比 If-Modified-Since 和请求文件的最后修改时间，一致则命中协商缓存返回 304，不一致则返回新的 last-modified 和 200 状态码</p>
<h2 id="http-协议的特点"><a href="#http-协议的特点" class="headerlink" title="http 协议的特点"></a>http 协议的特点</h2><p>1.支持客户/服务器模式 2.简单快速：客户向服务器发送请求时，只需传送请求方法和路径。 3.灵活：http 允许传输任意类型的数据对象（Content-Type 内容编码类型）</p>
<p>application/x-www-form-urlencoded 常见 post 提交数据格式（key-value 格式）<br>application/json</p>
<p>4.无连接：限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。（原因是早期服务器需要同时面对全世界数十万、上百万的客户端的网页访问，但是每次客户端与服务端传输的数据关联性很低，就会导致大部分通过会很空闲，无端占用资源）</p>
<p>（解决无连接）Keep-Alive：使客户端到服务端之间的 Http 连接保持，不会断开，当再次对服务器发送请求时，keep-Alive 功能避免了重新建立连接</p>
<p>5.无状态：Http 是一个无状态协议，就是每个请求都是独立的，数据传输完毕不会记录任何信息。缺点就是如果后续处理需要前面的信息，就必须重传，就会导致每次连接传送的数据量增加，如果服务器不需要前面信息的时候应答就会很快。</p>
<p>（解决无状态）怎样保持 http 连接状态呢<br>Cookie（每次 http 请求的时候，客户端都需要发送响应的 cookie 信息到服务端，服务端根据 cookie 判断来自哪个客户端）<br>服务端生成 cookie，客户端保存</p>
<p>Session<br>服务端生成一个 sessionid，在客户端下次请求的时候在 cookie 里面记录这个 sessionid，然后发送给服务端，服务端再根据 cookie 中的 sessionid 来识别客户端返回资源数据。</p>
<p>禁用 cookie 怎么办？<br>url 重写，每次 http 请求的时候，在 url 后面拼接 sid=**参数</p>
<p>withCredentials:指定在涉及到跨域请求时，是否携带 cookie 信息，默认为 false<br>Access-Control-Allow-Credentials: true</p>
<h2 id="cookie-和-session-的区别"><a href="#cookie-和-session-的区别" class="headerlink" title="cookie 和 session 的区别"></a>cookie 和 session 的区别</h2><ol>
<li>存取方式不同： cookie 只能保存 ASCII 字符串，session 能够存储任意类型的数据</li>
<li>隐私策略不同</li>
<li>cookie 是存在客户端，session 是存在服务器的</li>
<li>浏览器的支持不同，浏览器可以禁用 cookie</li>
</ol>
<h2 id="权限身份验证"><a href="#权限身份验证" class="headerlink" title="权限身份验证"></a>权限身份验证</h2><p>一般都是通过 sessionid 来进行用户身份验证，sessionid 一般会存放在 redis 中。</p>
<ol>
<li>用户向服务端发送用户名和密码进行登陆</li>
<li>服务器验证通过后，服务器为用户创建一个 session，并将 session 信息存储起来</li>
<li>服务器向用户返回一个 sessionid，写入用户的 cookie</li>
<li>当用户保持登陆状态时，每次后续请求都会一起发送给后端</li>
<li>服务器将存储在 cookie 中的 sessionid 和存储在内存或者数据库中的 sessin 信息进行一个比较，验证用户身份，然后返回响应信息</li>
</ol>
<p>注意： 1.依赖 session 的关键业务一定要确保客户端开启了 cookie 2.注意 session 的过期时间</p>
<p>一般在 http header 的 Authorization 字段中添加 token</p>
<h2 id="禁用-cookie-之后-session-还能用吗？"><a href="#禁用-cookie-之后-session-还能用吗？" class="headerlink" title="禁用 cookie 之后 session 还能用吗？"></a>禁用 cookie 之后 session 还能用吗？</h2><p>url 重写，例如 <a href="https://javascript.cn/?session_id=xxx">https://javascript.cn/?session_id=xxx</a><br>缺点是安全性降低，可以对 sessionid 进行一次加密后传输</p>
<h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h2><ol>
<li>url 可见性：get 参数 url 可见，post 参数 url 不可见</li>
<li>数据传输：get 通过拼接 url 进行传递参数，post 通过 body 体传输参数</li>
<li>缓存性：get 请求可以缓存，post 请求不可以缓存</li>
<li>get 请求网页回退时，不产生影响，post 请求网页回退会重新发请求</li>
<li>传输数据：get 一般传输数据大小不超过 4k，post 可以传输大量数据</li>
<li>post 较 get 安全性较高，get 是不安全的因为 url 可见，可能会泄漏私密信息</li>
</ol>
<h2 id="http-常见的请求头字段"><a href="#http-常见的请求头字段" class="headerlink" title="http 常见的请求头字段"></a>http 常见的请求头字段</h2><p>Accept: 浏览器可接受的数据类型<br>Accept-Charset: 浏览器可接受的字符集<br>Accept-Encoding：浏览器能够进行解码的数据编码方式<br>Accept-Language： 浏览器所希望的语言种类<br>Connection：是否需要持久连接，值“Keep-Alive”，HTTP1.1 默认进行持久连接<br>Cookie：cookie 信息<br>content-type<br>If-Modified-Since：内容被修改才会返回<br>User-Agent：浏览器类型</p>
<p>响应头：<br>content-Length: 表示内容长度<br>content-type：文档类型<br>Date：当前时间<br>Expires：指定缓存过期时间<br>Last-Modified：文档过期时间</p>
<h2 id="xss（跨域脚本攻击）csrf（跨站请求伪造）"><a href="#xss（跨域脚本攻击）csrf（跨站请求伪造）" class="headerlink" title="xss（跨域脚本攻击）csrf（跨站请求伪造）"></a>xss（跨域脚本攻击）csrf（跨站请求伪造）</h2><p>csrf: 需要用户先登陆网站 A，获取 cookie，利用的是网站 A 本身的漏洞，去请求网站 A 的 api，—进行 token 验证，referer 验证，只接收本站的请求</p>
<p>xss：向网站 A 注入 js 代码，然后执行 js 代码，篡改网站 A 的内容，破坏页面正常结构，插入恶意广告。—编码转换</p>
<h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">正向代理是客户端代理，服务端不知道是哪个客户端发起的请求</span><br><span class="line">反向代理是服务端代理，客户端不知道是哪个服务端提供的资源</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>为什么需要三次握手？<br>两次握手第二次结束后，服务端并不能保证客户端已经接收到了第二次的应答信息，如此一来服务器会一直保持通信过程，因为 TCP 通信会占用端口，造成资源浪费。</p>
<p>防止已失效的连接请求报文段突然又传送到服务端，产生错误。<br>如上述情况，如果 client 没有再次向 server 发出确认，server 收不到确认就不会建立连接，可以避免 server 端一直等待浪费资源。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul>
<li><a href="https://blog.csdn.net/rememberyf/article/details/80309148">https://blog.csdn.net/rememberyf/article/details/80309148</a></li>
</ul>
<h2 id="什么是-HTTPS-中间人攻击？如何预防？"><a href="#什么是-HTTPS-中间人攻击？如何预防？" class="headerlink" title="什么是 HTTPS 中间人攻击？如何预防？"></a>什么是 HTTPS 中间人攻击？如何预防？</h2><ul>
<li><p>HTTPS 加密传输</p>
<ul>
<li>HTTP 明文传输</li>
<li>HTTPS 加密传输 HTTP + TLS/SSL</li>
<li><img src="/images/md_img/https.jpg" alt="https加密"></li>
</ul>
</li>
<li><p>答案</p>
<ul>
<li>使用正规厂商的加密证书可以防止中间人攻击</li>
</ul>
</li>
</ul>
<h2 id="WebSocket-和-HTTP-有什么区别？"><a href="#WebSocket-和-HTTP-有什么区别？" class="headerlink" title="WebSocket 和 HTTP 有什么区别？"></a>WebSocket 和 HTTP 有什么区别？</h2><ul>
<li><p>WebSocket</p>
<ul>
<li><p>支持端对端通讯</p>
</li>
<li><p>可以由 client 发起，也可以由 server 发起</p>
</li>
<li><p>用于：消息通知，直播间讨论区，聊天室，协同编辑</p>
</li>
<li><p>client</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">WebSocketServer</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> wsServer = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">3000</span> &#125;);</span><br><span class="line"></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connection&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了信息&#x27;</span>, msg.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ws.<span class="title function_">send</span>(<span class="string">&#x27;服务端已经收到了信息&#x27;</span> + msg.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>server</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;opened&#x27;</span>);</span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;client opened&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到了信息&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;当前时间&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>WebSocket 连接过程</p>
<ul>
<li>先发起一个 http 请求</li>
<li>成功之后再升级到 WebSocket 协议，再通讯</li>
</ul>
</li>
<li><p>WebSocket 和 HTTP 区别？</p>
<ul>
<li>WebSocket 协议名是 ws://,可双端发起请求</li>
<li>WebSocket 没有跨域限制</li>
<li>通过 send 和 onmessage 通讯（HTTP 通过 req 和 res）</li>
</ul>
</li>
<li><p>ws 可升级为 wss（like https）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createServer &#125; <span class="keyword">from</span> <span class="string">&#x27;https&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ws&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">createServer</span>(&#123;</span><br><span class="line">  <span class="attr">cert</span>: <span class="title function_">readFileSync</span>(<span class="string">&#x27;/path/to/cert.pem&#x27;</span>),</span><br><span class="line">  <span class="attr">key</span>: <span class="title function_">readFileSync</span>(<span class="string">&#x27;/path/to/key.pem&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; server &#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>实际项目推荐 socket.io,API 更简洁</p>
</li>
</ul>
<h2 id="WebSocket-和-HTTP-长轮询的区别？"><a href="#WebSocket-和-HTTP-长轮询的区别？" class="headerlink" title="WebSocket 和 HTTP 长轮询的区别？"></a>WebSocket 和 HTTP 长轮询的区别？</h2><ul>
<li><p>区别</p>
<ul>
<li>HTTP 长轮询：客户端发起请求，服务端阻塞，不会立即返回</li>
<li>WebSocket：客户端可发起请求，服务端也可发起请求</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>HTTP 长轮询，需处理 timeout，即 timeout 之后重新发请求</li>
</ul>
</li>
</ul>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><ul>
<li><p>xhr.readyState</p>
<ul>
<li>0 (未初始化)还没有调用 send()方法</li>
<li>1 (载入)已调用 send()方法，正在发送请求</li>
<li>2 (载入完成) send()方法执行完成，已经接收到全部响应内容</li>
<li>3 (交互) 正在解析响应内容</li>
<li>4 (完成) 响应内容解析完成，可以在客户端调用</li>
</ul>
</li>
<li><p>xhr.status</p>
<ul>
<li>2xx 表示成功处理请求，如 200</li>
<li>3xx 需要重定向，浏览器直接跳转，如 301、302、304</li>
<li>4xx 客户端请求错误，如 404、403</li>
<li>5xx 服务端错误</li>
</ul>
</li>
</ul>
<h2 id="常见状态码？"><a href="#常见状态码？" class="headerlink" title="常见状态码？"></a>常见状态码？</h2><p>信息响应</p>
<ul>
<li>101 协议切换</li>
</ul>
<p>成功响应</p>
<ul>
<li>200 成功</li>
<li>204 请求成功，不返回任何内容</li>
<li>206 分块请求成功</li>
</ul>
<p>重定向</p>
<ul>
<li>301 永久重定向（配合 location，浏览器自动处理）</li>
<li>302 临时重定向（配合 location，浏览器自动处理）</li>
<li>304 资源未被修改（协商缓存 ）</li>
</ul>
<p>客户端响应</p>
<ul>
<li>400 无法被服务器理解</li>
<li>401 未授权</li>
<li>403 禁止访问</li>
<li>404 资源未找到</li>
<li>405 没有权限,请求方法(get/post 等)错误</li>
</ul>
<p>服务端响应</p>
<ul>
<li><p>500 服务器错误</p>
</li>
<li><p>503 服务不可达</p>
</li>
<li><p>504 网关超时</p>
</li>
<li><p>本身状态码就是一种约定，一种协议和规范，不要尝试违反规范，例如 IE 浏览器</p>
</li>
</ul>
<h2 id="http-常见-methods？"><a href="#http-常见-methods？" class="headerlink" title="http 常见 methods？"></a>http 常见 methods？</h2><ul>
<li><p>传统 methods</p>
<ul>
<li>get 获取服务器的数据</li>
<li>post 向服务器提交数据</li>
</ul>
</li>
<li><p>新的 methods</p>
<ul>
<li>get 获取数据</li>
<li>post 新建数据</li>
<li>patch/put 更新数据</li>
<li>delete 删除数据</li>
</ul>
</li>
</ul>
<h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><ul>
<li><p>一种新的 API 设计方法</p>
</li>
<li><p>传统 API 设计：把每个 url 当作一个功能</p>
</li>
<li><p>Restful API 设计：把每个 url 当作一个唯一的资源</p>
</li>
<li><p>原则</p>
<ul>
<li>不使用 url 参数<ul>
<li>传统 API 设计：/api/list?pageIndex=2</li>
<li>Restful API 设计：/api/list/2</li>
</ul>
</li>
<li>用 method 表示操作类型<ul>
<li>传统 API 设计<ul>
<li>post 请求 /api/create-blog</li>
<li>post 请求 /api/update-blog?id=100</li>
<li>get 请求 /api/get-blog?id=100</li>
</ul>
</li>
<li>Restful API 请求<ul>
<li>post 请求 /api/blog</li>
<li>patch 请求 /api/blog/100</li>
<li>get 请求 /api/blog/100</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="常见-http-headers？"><a href="#常见-http-headers？" class="headerlink" title="常见 http headers？"></a>常见 http headers？</h2><ul>
<li><p>Request Headers</p>
<ul>
<li>Accept 浏览器可接收的数据格式</li>
<li>Accept-Encoding 浏览器可接收的压缩算法，如 gzip</li>
<li>Accept-Languange 浏览器可接收的语言，如 zh-CN</li>
<li>Connection: keep-alive 一次 TCP 连接重复使用</li>
<li>cookie</li>
<li>Host 如：<a href="http://www.baidu.com/">www.baidu.com</a></li>
<li>Cache-Control</li>
<li>User-Agent （简称 UA）浏览器信息</li>
<li>Content-type 发送数据的格式，如 application/json</li>
</ul>
</li>
<li><p>Response Headers</p>
<ul>
<li>Content-type 返回数据的格式，如 application/json</li>
<li>Content-length 返回数据的大小，多少字节</li>
<li>Content-Encoding 返回数据的压缩算法，如 gzip</li>
<li>Set-Cookie</li>
<li>Expires</li>
<li>Etag</li>
<li>date</li>
</ul>
</li>
<li><p>自定义 header</p>
</li>
<li><p>缓存相关的 headers</p>
<ul>
<li>Cache-Control Expires</li>
<li>Last-Modified If-Modified-Since</li>
<li>Etag If-None-Match</li>
</ul>
</li>
</ul>
<h2 id="TCP-协议如何保证传输的可靠性"><a href="#TCP-协议如何保证传输的可靠性" class="headerlink" title="TCP 协议如何保证传输的可靠性"></a>TCP 协议如何保证传输的可靠性</h2><ul>
<li>校验和</li>
<li>确认应答 + 序列号</li>
<li>超时重传</li>
<li>流浪控制</li>
<li>拥塞控制</li>
<li>TCP 的连接管理</li>
<li>滑动窗口</li>
</ul>
<h2 id="http-和-https-的区别-1"><a href="#http-和-https-的区别-1" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h2><ul>
<li>http 是一种一种广泛使用的网络协议，是一个客户端和服务器请求和应答的标准。</li>
<li>http 工作在 TCP 协议的 80 端口，https 工作在 TCP 协议的 443 端口</li>
<li>http 协议运行在 TCP 协议之上，所有的传输内容都是明文，https 运行在 SSL/TLS 之上，<br>SSL/TLS 运行在 TCP 之上，所有的传输内容都是经过加密的。</li>
<li>https 是以安全为目标的 http 通道，是 http 的安全版。是 http 加上 SSL 层对传输的信息和 url 做了一些加密处理，更加安全</li>
</ul>
<h2 id="为什么-https-不会被截取信息"><a href="#为什么-https-不会被截取信息" class="headerlink" title="为什么 https 不会被截取信息"></a>为什么 https 不会被截取信息</h2><ul>
<li>完成 TCP 三次同步握手</li>
<li>客户端验证服务器数字证书，通过，进入步骤 3</li>
<li>DH 算法协商对称加密算法的密钥、hash 算法的密钥</li>
<li>SSL 安全加密隧道协商完成</li>
<li>网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；<br>用协商的 hash 算法进行数据完整性保护，保证数据不被篡改</li>
</ul>
<h2 id="如何处理-TCP-的粘包"><a href="#如何处理-TCP-的粘包" class="headerlink" title="如何处理 TCP 的粘包?"></a>如何处理 TCP 的粘包?</h2><p>发生 TCP 粘包或拆包有很多原因，现列出常见的几点：</p>
<p>要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包。<br>待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。<br>要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包。<br>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p>
<p>关键点：如何给每个数据包添加边界信息</p>
<p>发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</p>
<p>发送端将每个数据包封装为固定长度（不够的可以通过补 0 填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</p>
<p>可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p>
<h2 id="请说说-HTTPS-的握手过程？"><a href="#请说说-HTTPS-的握手过程？" class="headerlink" title="请说说 HTTPS 的握手过程？"></a>请说说 HTTPS 的握手过程？</h2><p>HTTPS 的握手过程主要包括以下步骤：</p>
<p>客户端向服务端发送一个加密过的客户端随机数和客户端支持的加密算法列表，同时请求建立 SSL/TLS 连接。</p>
<p>服务端在接收到请求后，向客户端发送一个包含服务端随机数、服务器支持的加密算法列表以及服务器的数字证书的报文。</p>
<p>客户端在接收到服务器的响应后，会对证书进行校验。如果证书被认为是合法的，那么客户端将使用证书中包含的公钥对一个随机数进行加密，并将加密后的随机数发送给服务端。</p>
<p>服务端在接收到客户端的响应后，使用私钥对加密的随机数进行解密，得到客户端生成的随机数。同时，服务端也会生成一个加密的会话密钥，并使用客户端和服务端的随机数以及协商出的加密算法对该密钥进行加密，最后将加密后的密钥发送给客户端。</p>
<p>客户端接收到服务端发送的加密的会话密钥后，使用服务端公布的公钥进行解密，得到原始的会话密钥。</p>
<p>客户端和服务端都会使用会话密钥进行加密和解密，从而实现安全的通信。</p>
<p>这个过程中，客户端和服务端会进行多次来回的通信，以建立安全的 SSL/TLS 连接。其中数字证书的校验和会话密钥的生成都是关键步骤，它们保证了通信的安全性。</p>
<h2 id="请说说什么是数字证书？它有什么作用"><a href="#请说说什么是数字证书？它有什么作用" class="headerlink" title="请说说什么是数字证书？它有什么作用?"></a>请说说什么是数字证书？它有什么作用?</h2><ul>
<li><p>数字证书是一种加密技术，用于验证在线交互中的身份和信息安全性。它是由可信任的第三方机构（例如数字证书颁发机构）颁发的一份电子文档，其中包含了一些加密信息，如公钥、数字签名等。数字证书的作用是确保通信双方的身份和数据的完整性和保密性。</p>
</li>
<li><p>在使用数字证书进行加密通信时，服务端会向证书颁发机构申请一份数字证书。数字证书包含了服务端的公钥，以及一些描述服务端身份的信息，例如域名、组织名称等。客户端在与服务端建立连接时，会向服务端请求数字证书，并验证证书的真实性和合法性。如果验证成功，客户端就可以使用服务端的公钥加密数据并发送给服务端了。同时，服务端也可以使用客户端的公钥进行数据的加密和验证。这样就可以确保通信过程中的数据不被窃听或篡改。</p>
</li>
<li><p>数字证书的使用广泛，特别是在网站安全和电子商务领域。它可以用来验证网站的真实性和合法性，确保网站访问过程中的信息安全。此外，数字证书还可以用于文件签名、电子邮件加密等其他领域。<br>````</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>杂记</title>
    <url>/2024/03/26/%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<p>前端事件循环机制是前端开发中一个重要的概念，也是面试中经常会涉及的话题。以下是一些与前端事件循环机制相关的常见面试题：</p>
<span id="more"></span>

<ol>
<li>请解释什么是Event Loop（事件循环）？它在JavaScript中的作用是什么？</li>
</ol>
<p> Event Loop（事件循环）是JavaScript中用来处理异步操作的机制。它负责监听调用栈和任务队列，将任务队列中的任务按照一定规则推入调用栈中执行，从而实现异步编程。</p>
<ol start="2">
<li>请描述JavaScript中的任务队列（Task Queue）和微任务队列（Microtask Queue）之间的区别，并举例说明它们的执行顺序。</li>
</ol>
<p> 任务队列（Task Queue）是存放宏任务（Macro Task）的队列，而微任务队列（Microtask Queue）是存放微任务（Micro Task）的队列。它们之间的区别在于微任务队列的优先级高于任务队列，微任务会在当前宏任务执行完毕后立即执行。</p>
<ol start="3">
<li>什么是宏任务（Macro Task）和微任务（Micro Task）？它们在事件循环中是如何被处理的？</li>
</ol>
<p> 宏任务（Macro Task）是指由浏览器发起的任务，如setTimeout、setInterval等；而微任务（Micro Task）是指由JavaScript引擎发起的任务，如Promise、process.nextTick等。在事件循环中，每个宏任务执行完毕后会先清空微任务队列，然后再执行下一个宏任务。</p>
<ol start="4">
<li>请解释setTimeout和setImmediate之间的区别，它们在事件循环中的执行顺序是怎样的？</li>
</ol>
<p> setTimeout和setImmediate都用于在事件循环中添加宏任务，它们之间的主要区别在于执行时机。setTimeout会将回调函数推入任务队列，在下一个宏任务执行时被执行；而setImmediate会将回调函数推入检查阶段，在当前宏任务执行完毕后立即执行。</p>
<ol start="5">
<li>在一个包含Promise、setTimeout和DOM事件的代码片段中，这些任务的执行顺序是怎样的？请说明原因。</li>
</ol>
<p> 在一个包含Promise、setTimeout和DOM事件的代码片段中，Promise的回调函数会被放入微任务队列，DOM事件会被放入任务队列，而setTimeout中的回调函数会被放入任务队列。执行顺序为：首先执行微任务队列中的Promise回调函数，然后执行DOM事件，最后执行setTimeout中的回调函数。</p>
<h2 id="webpack热更新原理"><a href="#webpack热更新原理" class="headerlink" title="webpack热更新原理"></a>webpack热更新原理</h2><p> 通过webpack-dev-server创建两个服务器：提供静态资源的服务（express）负责提供打包后的资源给浏览器请求和解析和Socket服务提供websocket长连接，socket server监听到对应的模块发生变化生成manifest.json和chunk.js，通过长连接主动发送给客户端浏览器，浏览器拿到文件通过HMR runtime机制加载这两个文件并针对修改的模块进行更新。</p>
<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ol>
<li><p>进程和线程都是操作系统进行任务管理和调度的基本单位</p>
</li>
<li><p>一个进程可包含多个线程，多个线程可以共享同一个进程的资源，如内存空间、文件等</p>
</li>
<li><p>线程间的切换比进程间的切换开销更小，因为线程共享相同的地址空间</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>前端工程化</title>
    <url>/2024/04/07/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一、打包资源处理"><a href="#一、打包资源处理" class="headerlink" title="一、打包资源处理"></a>一、打包资源处理</h1><h2 id="AST及其应用"><a href="#AST及其应用" class="headerlink" title="AST及其应用"></a>AST及其应用</h2><p>源代码经过此法分析转化为<strong>Token</strong>流，维护一个Token的数组，可以利用Token流做一些代码检查、语法高亮、模版语法相关的操作，然后经过语法分析转化为有结构化ATS抽象语法树，方便操作。</p>
<p><a href="https://github.com/jamiebuilds/the-super-tiny-compiler">参考一个最简编译器的实现</a></p>
<span id="more"></span>

<h2 id="webpack的runtime做了什么事情？"><a href="#webpack的runtime做了什么事情？" class="headerlink" title="webpack的runtime做了什么事情？"></a>webpack的runtime做了什么事情？</h2><ol>
<li><p><code>__webpack_modules__</code>一个维护所有模块的数组，通过入口模块解析AST，根据AST深度优先搜索所有模块构建这个模块数组，每个模块通过一个函数 <strong>(module, module.exports, <strong>webpack_require</strong>)</strong> 进行包裹构成。</p>
</li>
<li><p><code>__webpack_require__(moduleId)</code>一个加载模块，通过模块id执行<code>__webpack_modules__</code>对应的模块包裹函数，之后会对已加载模块进行缓存。</p>
</li>
<li><p><code>__webpack_require__(0)</code>运行第一个模块，即运行入口模块。</p>
</li>
</ol>
<p>当涉及到多个chunk的大包方式中,比如import、code spliting中，webpack会通过jsonp方式创建script标签动态加载模块</p>
<p>精简代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> __webpack_modules__ = [<span class="function">() =&gt;</span> &#123;&#125;];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">__webpack_require__</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line">  <span class="keyword">const</span> m = __webpack_modules__[id](<span class="variable language_">module</span>, __webpack_require__);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">__webpack_require__</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>


<p>补充：rollup不存在modules模块数组，而是将所有模块铺平展开，如果两个模块变量重名冲突的话，会直接重新命名如：name-&gt;name$1</p>
<h2 id="webpack-rollup如何加载style样式资源"><a href="#webpack-rollup如何加载style样式资源" class="headerlink" title="webpack/rollup如何加载style样式资源"></a>webpack/rollup如何加载style样式资源</h2><p>在webpack中，需要借助loader将非JS资源转化为可识别为javascript的module。</p>
<p>处理css需要两个loader：css-loader、style-loader</p>
<ol>
<li><p>css-loader的原理就是postcss，借助postcss-value-parse解析css为ast，处理css中的url()和@import语法</p>
</li>
<li><p>style-loader原理是使用dom api手动创建style标签，将css内容注入到style中</p>
</li>
</ol>
<p>因为dom api加载css资源的性能原因，生产环境一般通过mini-css-extract-plugin将css单独抽离出来。</p>
<h1 id="二、打包体积优化"><a href="#二、打包体积优化" class="headerlink" title="二、打包体积优化"></a>二、打包体积优化</h1><h2 id="如何提升webpack构建资源的速度？"><a href="#如何提升webpack构建资源的速度？" class="headerlink" title="如何提升webpack构建资源的速度？"></a>如何提升webpack构建资源的速度？</h2><ol>
<li><p>更换AST转换工具SWC：webpack中耗时最久的就是负责AST转换的loader，javascript性能低下，可以将babel替换为由高性能语言rust编写的swc。</p>
</li>
<li><p>持久化缓存cache，webpack5内置了插件，通过<a href="https://webpack.js.org/configuration/cache/">cache字段</a>开启.</p>
</li>
<li><p>开启多进程<a href="https://github.com/webpack-contrib/thread-loader">thread-loader</a>,提升编译速度。</p>
</li>
</ol>
<h2 id="js代码压缩的原理是什么？"><a href="#js代码压缩的原理是什么？" class="headerlink" title="js代码压缩的原理是什么？"></a>js代码压缩的原理是什么？</h2><ol>
<li><p>去除多余字符：空格，换行及注释，但是要注意多行代码压缩到一行时的行尾分号问题</p>
</li>
<li><p>压缩变量名：变量名、函数名、属性名</p>
</li>
<li><p>解析程序逻辑：合并声明、布尔值简化</p>
</li>
<li><p>编译预计算，编译期进行计算，减少运行时的计算量</p>
</li>
</ol>
<h2 id="Tree-Shaking的原理是什么？"><a href="#Tree-Shaking的原理是什么？" class="headerlink" title="Tree Shaking的原理是什么？"></a>Tree Shaking的原理是什么？</h2><pre><code>tree shaking基于ES Module进行静态分析，通过AST将用不到的函数进行移除，从而减少打包体积
</code></pre>
<h2 id="core-js是做什么用的？"><a href="#core-js是做什么用的？" class="headerlink" title="core-js是做什么用的？"></a>core-js是做什么用的？</h2><pre><code>  core-js是关于ES标准的polyfill，其中实现了浏览器不支持的最新API，core-js已集成到了babel/swc之中，可以通过@babel/preset-env或者@babel/polyfill进行配置，通过配置，babel编译代码后将自动包含所需的polyfill。
</code></pre>
]]></content>
  </entry>
</search>
